// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * teamcoco/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/teamcoco.py
 */

package teamcoco

import (
	Ωjson "github.com/tenta-browser/go-video-downloader/gen/json"
	Ωturner "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/turner"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError  λ.Object
	TeamcocoIE      λ.Object
	TurnerBaseIE    λ.Object
	ϒdetermine_ext  λ.Object
	ϒint_or_none    λ.Object
	ϒmimetype2ext   λ.Object
	ϒparse_duration λ.Object
	ϒparse_iso8601  λ.Object
	ϒqualities      λ.Object
)

func init() {
	λ.InitModule(func() {
		TurnerBaseIE = Ωturner.TurnerBaseIE
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒmimetype2ext = Ωutils.ϒmimetype2ext
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		ϒqualities = Ωutils.ϒqualities
		TeamcocoIE = λ.Cal(λ.TypeType, λ.NewStr("TeamcocoIE"), λ.NewTuple(TurnerBaseIE), func() λ.Dict {
			var (
				TeamcocoIE__VALID_URL    λ.Object
				TeamcocoIE__graphql_call λ.Object
				TeamcocoIE__real_extract λ.Object
			)
			TeamcocoIE__VALID_URL = λ.NewStr("https?://(?:\\w+\\.)?teamcoco\\.com/(?P<id>([^/]+/)*[^/?#]+)")
			TeamcocoIE__graphql_call = λ.NewFunction("_graphql_call",
				[]λ.Param{
					{Name: "self"},
					{Name: "query_template"},
					{Name: "object_type"},
					{Name: "object_id"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒfind_object    λ.Object
						ϒobject_id      = λargs[3]
						ϒobject_type    = λargs[2]
						ϒquery_template = λargs[1]
						ϒself           = λargs[0]
					)
					ϒfind_object = λ.Add(λ.NewStr("find"), ϒobject_type)
					return λ.GetItem(λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.NewStr("https://teamcoco.com/graphql"),
						ϒobject_id,
					), λ.KWArgs{
						{Name: "data", Value: λ.Cal(λ.GetAttr(λ.Cal(Ωjson.ϒdumps, λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("query"): λ.Mod(ϒquery_template, λ.NewTuple(
								ϒfind_object,
								ϒobject_id,
							)),
						})), "encode", nil))},
						{Name: "headers", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("Content-Type"): λ.NewStr("application/json"),
						})},
					}), λ.NewStr("data")), ϒfind_object)
				})
			TeamcocoIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒd             λ.Object
						ϒdisplay_id    λ.Object
						ϒext           λ.Object
						ϒformat_id     λ.Object
						ϒformats       λ.Object
						ϒget_quality   λ.Object
						ϒinfo          λ.Object
						ϒmedia_id      λ.Object
						ϒrecord        λ.Object
						ϒresponse      λ.Object
						ϒself          = λargs[0]
						ϒsrc           λ.Object
						ϒsrc_url       λ.Object
						ϒtbr           λ.Object
						ϒurl           = λargs[1]
						ϒvideo_id      λ.Object
						ϒvideo_sources λ.Object
						τmp0           λ.Object
						τmp1           λ.Object
						τmp2           λ.Object
					)
					ϒdisplay_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒresponse = λ.Cal(λ.GetAttr(ϒself, "_graphql_call", nil), λ.NewStr("{\n  %s(slug: \"%s\") {\n    ... on RecordSlug {\n      record {\n        id\n        title\n        teaser\n        publishOn\n        thumb {\n          preview\n        }\n        file {\n          url\n        }\n        tags {\n          name\n        }\n        duration\n        turnerMediaId\n        turnerMediaAuthToken\n      }\n    }\n    ... on NotFoundSlug {\n      status\n    }\n  }\n}"), λ.NewStr("Slug"), ϒdisplay_id)
					if λ.IsTrue(λ.Cal(λ.GetAttr(ϒresponse, "get", nil), λ.NewStr("status"))) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.NewStr("This video is no longer available.")), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒrecord = λ.GetItem(ϒresponse, λ.NewStr("record"))
					ϒvideo_id = λ.GetItem(ϒrecord, λ.NewStr("id"))
					ϒinfo = λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("display_id"):  ϒdisplay_id,
						λ.NewStr("title"):       λ.GetItem(ϒrecord, λ.NewStr("title")),
						λ.NewStr("thumbnail"):   λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒrecord, "get", nil), λ.NewStr("thumb"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("preview")),
						λ.NewStr("description"): λ.Cal(λ.GetAttr(ϒrecord, "get", nil), λ.NewStr("teaser")),
						λ.NewStr("duration"):    λ.Cal(ϒparse_duration, λ.Cal(λ.GetAttr(ϒrecord, "get", nil), λ.NewStr("duration"))),
						λ.NewStr("timestamp"):   λ.Cal(ϒparse_iso8601, λ.Cal(λ.GetAttr(ϒrecord, "get", nil), λ.NewStr("publishOn"))),
					})
					ϒmedia_id = λ.Cal(λ.GetAttr(ϒrecord, "get", nil), λ.NewStr("turnerMediaId"))
					if λ.IsTrue(ϒmedia_id) {
						λ.Cal(λ.GetAttr(ϒself, "_initialize_geo_bypass", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("countries"): λ.NewList(λ.NewStr("US")),
						}))
						λ.Cal(λ.GetAttr(ϒinfo, "update", nil), λ.Cal(λ.GetAttr(ϒself, "_extract_ngtv_info", nil), ϒmedia_id, λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("accessToken"):     λ.GetItem(ϒrecord, λ.NewStr("turnerMediaAuthToken")),
							λ.NewStr("accessTokenType"): λ.NewStr("jws"),
						})))
					} else {
						ϒd = func() λ.Object {
							if λv := λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
								λ.Add(λ.NewStr("https://teamcoco.com/_truman/d/"), ϒvideo_id),
								ϒvideo_id,
							), λ.KWArgs{
								{Name: "fatal", Value: λ.False},
							}); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewDictWithTable(map[λ.Object]λ.Object{})
							}
						}()
						ϒvideo_sources = func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒd, "get", nil), λ.NewStr("meta")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewDictWithTable(map[λ.Object]λ.Object{})
							}
						}()
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒvideo_sources))) {
							ϒvideo_sources = func() λ.Object {
								if λv := λ.Cal(λ.GetAttr(ϒself, "_graphql_call", nil), λ.NewStr("{\n  %s(id: \"%s\") {\n    src\n  }\n}"), λ.NewStr("RecordVideoSource"), ϒvideo_id); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.NewDictWithTable(map[λ.Object]λ.Object{})
								}
							}()
						}
						ϒformats = λ.NewList()
						ϒget_quality = λ.Cal(ϒqualities, λ.NewList(
							λ.NewStr("low"),
							λ.NewStr("sd"),
							λ.NewStr("hd"),
							λ.NewStr("uhd"),
						))
						τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒvideo_sources, "get", nil), λ.NewStr("src"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "items", nil)))
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							τmp2 = τmp1
							ϒformat_id = λ.GetItem(τmp2, λ.NewInt(0))
							ϒsrc = λ.GetItem(τmp2, λ.NewInt(1))
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒsrc, λ.DictType)))) {
								continue
							}
							ϒsrc_url = λ.Cal(λ.GetAttr(ϒsrc, "get", nil), λ.NewStr("src"))
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒsrc_url))) {
								continue
							}
							ϒext = λ.Cal(ϒdetermine_ext, ϒsrc_url, λ.Cal(ϒmimetype2ext, λ.Cal(λ.GetAttr(ϒsrc, "get", nil), λ.NewStr("type"))))
							if λ.IsTrue(func() λ.Object {
								if λv := λ.Eq(ϒformat_id, λ.NewStr("hls")); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Eq(ϒext, λ.NewStr("m3u8"))
								}
							}()) {
								if λ.IsTrue(λ.Cal(λ.GetAttr(ϒsrc_url, "startswith", nil), λ.NewStr("/"))) {
									ϒsrc_url = λ.Add(λ.NewStr("http://ht.cdn.turner.com/tbs/big/teamcoco"), ϒsrc_url)
								}
								λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
									ϒsrc_url,
									ϒvideo_id,
									λ.NewStr("mp4"),
								), λ.KWArgs{
									{Name: "m3u8_id", Value: ϒformat_id},
									{Name: "fatal", Value: λ.False},
								}))
							} else {
								if λ.IsTrue(λ.Cal(λ.GetAttr(ϒsrc_url, "startswith", nil), λ.NewStr("/mp4:protected/"))) {
									continue
								}
								ϒtbr = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
									λ.NewStr("(\\d+)k\\.mp4"),
									ϒsrc_url,
									λ.NewStr("tbr"),
								), λ.KWArgs{
									{Name: "default", Value: λ.None},
								}))
								λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("url"):       ϒsrc_url,
									λ.NewStr("ext"):       ϒext,
									λ.NewStr("tbr"):       ϒtbr,
									λ.NewStr("format_id"): ϒformat_id,
									λ.NewStr("quality"):   λ.Cal(ϒget_quality, ϒformat_id),
								}))
							}
						}
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒformats))) {
							ϒformats = λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
								λ.GetItem(λ.GetItem(ϒrecord, λ.NewStr("file")), λ.NewStr("url")),
								ϒvideo_id,
								λ.NewStr("mp4"),
							), λ.KWArgs{
								{Name: "fatal", Value: λ.False},
							})
						}
						λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
						λ.SetItem(ϒinfo, λ.NewStr("formats"), ϒformats)
					}
					return ϒinfo
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"):    TeamcocoIE__VALID_URL,
				λ.NewStr("_graphql_call"): TeamcocoIE__graphql_call,
				λ.NewStr("_real_extract"): TeamcocoIE__real_extract,
			})
		}())
	})
}

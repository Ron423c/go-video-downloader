// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * toongoggles/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/toongoggles.py
 */

package toongoggles

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor   λ.Object
	ToonGogglesIE   λ.Object
	ϒint_or_none    λ.Object
	ϒparse_duration λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_duration = Ωutils.ϒparse_duration
		ToonGogglesIE = λ.Cal(λ.TypeType, λ.NewStr("ToonGogglesIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ToonGogglesIE__VALID_URL          λ.Object
				ToonGogglesIE__call_api           λ.Object
				ToonGogglesIE__parse_episode_data λ.Object
				ToonGogglesIE__real_extract       λ.Object
			)
			ToonGogglesIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?toongoggles\\.com/shows/(?P<show_id>\\d+)(?:/[^/]+/episodes/(?P<episode_id>\\d+))?")
			ToonGogglesIE__call_api = λ.NewFunction("_call_api",
				[]λ.Param{
					{Name: "self"},
					{Name: "action"},
					{Name: "page_id"},
					{Name: "query"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒaction  = λargs[1]
						ϒpage_id = λargs[2]
						ϒquery   = λargs[3]
						ϒself    = λargs[0]
					)
					λ.Cal(λ.GetAttr(ϒquery, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("for_ng"):    λ.NewInt(1),
						λ.NewStr("for_web"):   λ.NewInt(1),
						λ.NewStr("show_meta"): λ.NewInt(1),
						λ.NewStr("version"):   λ.NewFloat(7.0),
					}))
					return λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Add(λ.NewStr("http://api.toongoggles.com/"), ϒaction),
						ϒpage_id,
					), λ.KWArgs{
						{Name: "query", Value: ϒquery},
					})
				})
			ToonGogglesIE__parse_episode_data = λ.NewFunction("_parse_episode_data",
				[]λ.Param{
					{Name: "self"},
					{Name: "episode_data"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒepisode_data = λargs[1]
						ϒself         = λargs[0]
						ϒtitle        λ.Object
					)
					_ = ϒself
					ϒtitle = λ.GetItem(ϒepisode_data, λ.NewStr("episode_name"))
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("_type"):          λ.NewStr("url_transparent"),
						λ.NewStr("id"):             λ.GetItem(ϒepisode_data, λ.NewStr("episode_id")),
						λ.NewStr("title"):          ϒtitle,
						λ.NewStr("url"):            λ.Add(λ.NewStr("kaltura:513551:"), λ.GetItem(ϒepisode_data, λ.NewStr("entry_id"))),
						λ.NewStr("thumbnail"):      λ.Cal(λ.GetAttr(ϒepisode_data, "get", nil), λ.NewStr("thumbnail_url")),
						λ.NewStr("description"):    λ.Cal(λ.GetAttr(ϒepisode_data, "get", nil), λ.NewStr("description")),
						λ.NewStr("duration"):       λ.Cal(ϒparse_duration, λ.Cal(λ.GetAttr(ϒepisode_data, "get", nil), λ.NewStr("hms"))),
						λ.NewStr("series"):         λ.Cal(λ.GetAttr(ϒepisode_data, "get", nil), λ.NewStr("show_name")),
						λ.NewStr("season_number"):  λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒepisode_data, "get", nil), λ.NewStr("season_num"))),
						λ.NewStr("episode_id"):     λ.Cal(λ.GetAttr(ϒepisode_data, "get", nil), λ.NewStr("episode_id")),
						λ.NewStr("episode"):        ϒtitle,
						λ.NewStr("episode_number"): λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒepisode_data, "get", nil), λ.NewStr("episode_num"))),
						λ.NewStr("categories"):     λ.Cal(λ.GetAttr(ϒepisode_data, "get", nil), λ.NewStr("categories")),
						λ.NewStr("ie_key"):         λ.NewStr("Kaltura"),
					})
				})
			ToonGogglesIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒentries      λ.Object
						ϒepisode_data λ.Object
						ϒepisode_id   λ.Object
						ϒself         = λargs[0]
						ϒshow_data    λ.Object
						ϒshow_id      λ.Object
						ϒurl          = λargs[1]
						τmp0          λ.Object
						τmp1          λ.Object
					)
					τmp0 = λ.Cal(λ.GetAttr(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups", nil))
					ϒshow_id = λ.GetItem(τmp0, λ.NewInt(0))
					ϒepisode_id = λ.GetItem(τmp0, λ.NewInt(1))
					if λ.IsTrue(ϒepisode_id) {
						ϒepisode_data = λ.GetItem(λ.GetItem(λ.Cal(λ.GetAttr(ϒself, "_call_api", nil), λ.NewStr("search"), ϒepisode_id, λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("filter"): λ.NewStr("episode"),
							λ.NewStr("id"):     ϒepisode_id,
						})), λ.NewStr("objects")), λ.NewInt(0))
						return λ.Cal(λ.GetAttr(ϒself, "_parse_episode_data", nil), ϒepisode_data)
					} else {
						ϒshow_data = λ.Cal(λ.GetAttr(ϒself, "_call_api", nil), λ.NewStr("getepisodesbyshow"), ϒshow_id, λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("max"):    λ.NewInt(1000000000),
							λ.NewStr("showid"): ϒshow_id,
						}))
						ϒentries = λ.NewList()
						τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒshow_data, "get", nil), λ.NewStr("objects"), λ.NewList()))
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒepisode_data = τmp1
							λ.Cal(λ.GetAttr(ϒentries, "append", nil), λ.Cal(λ.GetAttr(ϒself, "_parse_episode_data", nil), ϒepisode_data))
						}
						return λ.Cal(λ.GetAttr(ϒself, "playlist_result", nil), ϒentries, ϒshow_id, λ.Cal(λ.GetAttr(ϒshow_data, "get", nil), λ.NewStr("show_name")))
					}
					return λ.None
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"):          ToonGogglesIE__VALID_URL,
				λ.NewStr("_call_api"):           ToonGogglesIE__call_api,
				λ.NewStr("_parse_episode_data"): ToonGogglesIE__parse_episode_data,
				λ.NewStr("_real_extract"):       ToonGogglesIE__real_extract,
			})
		}())
	})
}

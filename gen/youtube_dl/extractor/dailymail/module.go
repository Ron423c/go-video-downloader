// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * dailymail/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/dailymail.py
 */

package dailymail

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	DailyMailIE         λ.Object
	InfoExtractor       λ.Object
	ϒcompat_str         λ.Object
	ϒdetermine_protocol λ.Object
	ϒint_or_none        λ.Object
	ϒtry_get            λ.Object
	ϒunescapeHTML       λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒdetermine_protocol = Ωutils.ϒdetermine_protocol
		ϒtry_get = Ωutils.ϒtry_get
		ϒunescapeHTML = Ωutils.ϒunescapeHTML
		DailyMailIE = λ.Cal(λ.TypeType, λ.NewStr("DailyMailIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				DailyMailIE__TESTS        λ.Object
				DailyMailIE__VALID_URL    λ.Object
				DailyMailIE__real_extract λ.Object
			)
			DailyMailIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?dailymail\\.co\\.uk/(?:video/[^/]+/video-|embed/video/)(?P<id>[0-9]+)")
			DailyMailIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.dailymail.co.uk/video/tvshowbiz/video-1295863/The-Mountain-appears-sparkling-water-ad-Heavy-Bubbles.html"),
					λ.NewStr("md5"): λ.NewStr("f6129624562251f628296c3a9ffde124"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("1295863"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("The Mountain appears in sparkling water ad for 'Heavy Bubbles'"),
						λ.NewStr("description"): λ.NewStr("md5:a93d74b6da172dd5dc4d973e0b766a84"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://www.dailymail.co.uk/embed/video/1295863.html"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			DailyMailIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒbody          λ.Object
						ϒcontainer     λ.Object
						ϒformats       λ.Object
						ϒis_hls        λ.Object
						ϒprotocol      λ.Object
						ϒrendition     λ.Object
						ϒrendition_url λ.Object
						ϒself          = λargs[0]
						ϒsources_url   λ.Object
						ϒtbr           λ.Object
						ϒtitle         λ.Object
						ϒurl           = λargs[1]
						ϒvideo_data    λ.Object
						ϒvideo_id      λ.Object
						ϒvideo_sources λ.Object
						ϒwebpage       λ.Object
						τmp0           λ.Object
						τmp1           λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					ϒvideo_data = λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("data-opts='({.+?})'"), ϒwebpage, λ.NewStr("video data")), ϒvideo_id)
					ϒtitle = λ.Cal(ϒunescapeHTML, λ.GetItem(ϒvideo_data, λ.NewStr("title")))
					ϒsources_url = func() λ.Object {
						if λv := λ.Cal(ϒtry_get, ϒvideo_data, λ.NewTuple(
							λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(λ.GetItem(ϒx, λ.NewStr("plugins")), λ.NewStr("sources")), λ.NewStr("url"))
								}),
							λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("sources")), λ.NewStr("url"))
								}),
						), ϒcompat_str); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Mod(λ.NewStr("http://www.dailymail.co.uk/api/player/%s/video-sources.json"), ϒvideo_id)
						}
					}()
					ϒvideo_sources = λ.Cal(λ.GetAttr(ϒself, "_download_json", nil), ϒsources_url, ϒvideo_id)
					ϒbody = λ.Cal(λ.GetAttr(ϒvideo_sources, "get", nil), λ.NewStr("body"))
					if λ.IsTrue(ϒbody) {
						ϒvideo_sources = ϒbody
					}
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.GetItem(ϒvideo_sources, λ.NewStr("renditions")))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒrendition = τmp1
						ϒrendition_url = λ.Cal(λ.GetAttr(ϒrendition, "get", nil), λ.NewStr("url"))
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒrendition_url))) {
							continue
						}
						ϒtbr = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒrendition, "get", nil), λ.NewStr("encodingRate")), λ.NewInt(1000))
						ϒcontainer = λ.Cal(λ.GetAttr(ϒrendition, "get", nil), λ.NewStr("videoContainer"))
						ϒis_hls = λ.Eq(ϒcontainer, λ.NewStr("M2TS"))
						ϒprotocol = func() λ.Object {
							if λ.IsTrue(ϒis_hls) {
								return λ.NewStr("m3u8_native")
							} else {
								return λ.Cal(ϒdetermine_protocol, λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("url"): ϒrendition_url,
								}))
							}
						}()
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("format_id"): λ.Add(func() λ.Object {
								if λ.IsTrue(ϒis_hls) {
									return λ.NewStr("hls")
								} else {
									return ϒprotocol
								}
							}(), func() λ.Object {
								if λ.IsTrue(ϒtbr) {
									return λ.Mod(λ.NewStr("-%d"), ϒtbr)
								} else {
									return λ.NewStr("")
								}
							}()),
							λ.NewStr("url"):       ϒrendition_url,
							λ.NewStr("width"):     λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒrendition, "get", nil), λ.NewStr("frameWidth"))),
							λ.NewStr("height"):    λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒrendition, "get", nil), λ.NewStr("frameHeight"))),
							λ.NewStr("tbr"):       ϒtbr,
							λ.NewStr("vcodec"):    λ.Cal(λ.GetAttr(ϒrendition, "get", nil), λ.NewStr("videoCodec")),
							λ.NewStr("container"): ϒcontainer,
							λ.NewStr("protocol"):  ϒprotocol,
							λ.NewStr("ext"): func() λ.Object {
								if λ.IsTrue(ϒis_hls) {
									return λ.NewStr("mp4")
								} else {
									return λ.None
								}
							}(),
						}))
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("title"):       ϒtitle,
						λ.NewStr("description"): λ.Cal(ϒunescapeHTML, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("descr"))),
						λ.NewStr("thumbnail"): func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("poster")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("thumbnail"))
							}
						}(),
						λ.NewStr("formats"): ϒformats,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        DailyMailIE__TESTS,
				λ.NewStr("_VALID_URL"):    DailyMailIE__VALID_URL,
				λ.NewStr("_real_extract"): DailyMailIE__real_extract,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * dailymail/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/dailymail.py
 */

package dailymail

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	DailyMailIE         λ.Object
	InfoExtractor       λ.Object
	ϒcompat_str         λ.Object
	ϒdetermine_protocol λ.Object
	ϒint_or_none        λ.Object
	ϒtry_get            λ.Object
	ϒunescapeHTML       λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒdetermine_protocol = Ωutils.ϒdetermine_protocol
		ϒtry_get = Ωutils.ϒtry_get
		ϒunescapeHTML = Ωutils.ϒunescapeHTML
		DailyMailIE = λ.Cal(λ.TypeType, λ.StrLiteral("DailyMailIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				DailyMailIE__VALID_URL    λ.Object
				DailyMailIE__real_extract λ.Object
			)
			DailyMailIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?dailymail\\.co\\.uk/(?:video/[^/]+/video-|embed/video/)(?P<id>[0-9]+)")
			DailyMailIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒbody          λ.Object
						ϒcontainer     λ.Object
						ϒformats       λ.Object
						ϒis_hls        λ.Object
						ϒprotocol      λ.Object
						ϒrendition     λ.Object
						ϒrendition_url λ.Object
						ϒself          = λargs[0]
						ϒsources_url   λ.Object
						ϒtbr           λ.Object
						ϒtitle         λ.Object
						ϒurl           = λargs[1]
						ϒvideo_data    λ.Object
						ϒvideo_id      λ.Object
						ϒvideo_sources λ.Object
						ϒwebpage       λ.Object
						τmp0           λ.Object
						τmp1           λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒvideo_id)
					ϒvideo_data = λ.Calm(ϒself, "_parse_json", λ.Calm(ϒself, "_search_regex", λ.StrLiteral("data-opts='({.+?})'"), ϒwebpage, λ.StrLiteral("video data")), ϒvideo_id)
					ϒtitle = λ.Cal(ϒunescapeHTML, λ.GetItem(ϒvideo_data, λ.StrLiteral("title")))
					ϒsources_url = func() λ.Object {
						if λv := λ.Cal(ϒtry_get, ϒvideo_data, λ.NewTuple(
							λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("plugins")), λ.StrLiteral("sources")), λ.StrLiteral("url"))
								}),
							λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("sources")), λ.StrLiteral("url"))
								}),
						), ϒcompat_str); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Mod(λ.StrLiteral("http://www.dailymail.co.uk/api/player/%s/video-sources.json"), ϒvideo_id)
						}
					}()
					ϒvideo_sources = λ.Calm(ϒself, "_download_json", ϒsources_url, ϒvideo_id)
					ϒbody = λ.Calm(ϒvideo_sources, "get", λ.StrLiteral("body"))
					if λ.IsTrue(ϒbody) {
						ϒvideo_sources = ϒbody
					}
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.GetItem(ϒvideo_sources, λ.StrLiteral("renditions")))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒrendition = τmp1
						ϒrendition_url = λ.Calm(ϒrendition, "get", λ.StrLiteral("url"))
						if !λ.IsTrue(ϒrendition_url) {
							continue
						}
						ϒtbr = λ.Cal(ϒint_or_none, λ.Calm(ϒrendition, "get", λ.StrLiteral("encodingRate")), λ.IntLiteral(1000))
						ϒcontainer = λ.Calm(ϒrendition, "get", λ.StrLiteral("videoContainer"))
						ϒis_hls = λ.Eq(ϒcontainer, λ.StrLiteral("M2TS"))
						ϒprotocol = func() λ.Object {
							if λ.IsTrue(ϒis_hls) {
								return λ.StrLiteral("m3u8_native")
							} else {
								return λ.Cal(ϒdetermine_protocol, λ.DictLiteral(map[string]λ.Object{
									"url": ϒrendition_url,
								}))
							}
						}()
						λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
							"format_id": λ.Add(func() λ.Object {
								if λ.IsTrue(ϒis_hls) {
									return λ.StrLiteral("hls")
								} else {
									return ϒprotocol
								}
							}(), func() λ.Object {
								if λ.IsTrue(ϒtbr) {
									return λ.Mod(λ.StrLiteral("-%d"), ϒtbr)
								} else {
									return λ.StrLiteral("")
								}
							}()),
							"url":       ϒrendition_url,
							"width":     λ.Cal(ϒint_or_none, λ.Calm(ϒrendition, "get", λ.StrLiteral("frameWidth"))),
							"height":    λ.Cal(ϒint_or_none, λ.Calm(ϒrendition, "get", λ.StrLiteral("frameHeight"))),
							"tbr":       ϒtbr,
							"vcodec":    λ.Calm(ϒrendition, "get", λ.StrLiteral("videoCodec")),
							"container": ϒcontainer,
							"protocol":  ϒprotocol,
							"ext": func() λ.Object {
								if λ.IsTrue(ϒis_hls) {
									return λ.StrLiteral("mp4")
								} else {
									return λ.None
								}
							}(),
						}))
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒvideo_id,
						"title":       ϒtitle,
						"description": λ.Cal(ϒunescapeHTML, λ.Calm(ϒvideo_data, "get", λ.StrLiteral("descr"))),
						"thumbnail": func() λ.Object {
							if λv := λ.Calm(ϒvideo_data, "get", λ.StrLiteral("poster")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Calm(ϒvideo_data, "get", λ.StrLiteral("thumbnail"))
							}
						}(),
						"formats": ϒformats,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    DailyMailIE__VALID_URL,
				"_real_extract": DailyMailIE__real_extract,
			})
		}())
	})
}

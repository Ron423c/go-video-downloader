// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * theplatform/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/theplatform.py
 */

package theplatform

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωadobepass "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/adobepass"
	Ωonce "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/once"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	AdobePassIE                   λ.Object
	ExtractorError                λ.Object
	OnceIE                        λ.Object
	ThePlatformBaseIE             λ.Object
	ThePlatformFeedIE             λ.Object
	ThePlatformIE                 λ.Object
	ϒcompat_parse_qs              λ.Object
	ϒcompat_urllib_parse_urlparse λ.Object
	ϒdetermine_ext                λ.Object
	ϒfind_xpath_attr              λ.Object
	ϒfloat_or_none                λ.Object
	ϒint_or_none                  λ.Object
	ϒmimetype2ext                 λ.Object
	ϒsanitized_Request            λ.Object
	ϒunsmuggle_url                λ.Object
	ϒupdate_url_query             λ.Object
)

func init() {
	λ.InitModule(func() {
		OnceIE = Ωonce.OnceIE
		AdobePassIE = Ωadobepass.AdobePassIE
		ϒcompat_parse_qs = Ωcompat.ϒcompat_parse_qs
		ϒcompat_urllib_parse_urlparse = Ωcompat.ϒcompat_urllib_parse_urlparse
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ExtractorError = Ωutils.ExtractorError
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒsanitized_Request = Ωutils.ϒsanitized_Request
		ϒunsmuggle_url = Ωutils.ϒunsmuggle_url
		ϒupdate_url_query = Ωutils.ϒupdate_url_query
		ϒmimetype2ext = Ωutils.ϒmimetype2ext
		ϒfind_xpath_attr = Ωutils.ϒfind_xpath_attr
		ThePlatformBaseIE = λ.Cal(λ.TypeType, λ.NewStr("ThePlatformBaseIE"), λ.NewTuple(OnceIE), func() λ.Dict {
			var (
				ThePlatformBaseIE__extract_theplatform_smil λ.Object
			)
			ThePlatformBaseIE__extract_theplatform_smil = λ.NewFunction("_extract_theplatform_smil",
				[]λ.Param{
					{Name: "self"},
					{Name: "smil_url"},
					{Name: "video_id"},
					{Name: "note", Def: λ.NewStr("Downloading SMIL data")},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒ_format       λ.Object
						ϒerror_element λ.Object
						ϒexception     λ.Object
						ϒformats       λ.Object
						ϒhdnea2        λ.Object
						ϒmedia_url     λ.Object
						ϒmeta          λ.Object
						ϒnote          = λargs[3]
						ϒself          = λargs[0]
						ϒsmil_formats  λ.Object
						ϒsmil_url      = λargs[1]
						ϒsubtitles     λ.Object
						ϒvideo_id      = λargs[2]
						τmp0           λ.Object
						τmp1           λ.Object
					)
					ϒmeta = λ.Call(λ.GetAttr(ϒself, "_download_xml", nil), λ.NewArgs(
						ϒsmil_url,
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "note", Value: ϒnote},
						{Name: "query", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("format"): λ.NewStr("SMIL"),
						})},
						{Name: "headers", Value: λ.Cal(λ.GetAttr(ϒself, "geo_verification_headers", nil))},
					})
					ϒerror_element = λ.Cal(ϒfind_xpath_attr, ϒmeta, λ.Cal(λ.None, λ.NewStr(".//smil:ref")), λ.NewStr("src"))
					if λ.IsTrue(λ.NewBool(ϒerror_element != λ.None)) {
						ϒexception = λ.Cal(ϒfind_xpath_attr, ϒerror_element, λ.Cal(λ.None, λ.NewStr(".//smil:param")), λ.NewStr("name"), λ.NewStr("exception"))
						if λ.IsTrue(λ.NewBool(ϒexception != λ.None)) {
							if λ.IsTrue(λ.Eq(λ.Cal(λ.GetAttr(ϒexception, "get", nil), λ.NewStr("value")), λ.NewStr("GeoLocationBlocked"))) {
								λ.Cal(λ.GetAttr(ϒself, "raise_geo_restricted", nil), λ.GetItem(λ.GetAttr(ϒerror_element, "attrib", nil), λ.NewStr("abstract")))
							} else {
								if λ.IsTrue(λ.Cal(λ.GetAttr(λ.GetItem(λ.GetAttr(ϒerror_element, "attrib", nil), λ.NewStr("src")), "startswith", nil), λ.Mod(λ.NewStr("http://link.theplatform.%s/s/errorFiles/Unavailable."), λ.GetAttr(ϒself, "_TP_TLD", nil)))) {
									panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.GetItem(λ.GetAttr(ϒerror_element, "attrib", nil), λ.NewStr("abstract"))), λ.KWArgs{
										{Name: "expected", Value: λ.True},
									})))
								}
							}
						}
					}
					ϒsmil_formats = λ.Call(λ.GetAttr(ϒself, "_parse_smil_formats", nil), λ.NewArgs(
						ϒmeta,
						ϒsmil_url,
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "namespace", Value: λ.None},
						{Name: "f4m_params", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("g"):      λ.NewStr("UXWGVKRWHFSP"),
							λ.NewStr("hdcore"): λ.NewStr("3.0.3"),
						})},
						{Name: "transform_rtmp_url", Value: λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "streamer"},
								{Name: "src"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒsrc      = λargs[1]
									ϒstreamer = λargs[0]
								)
								return λ.NewTuple(
									ϒstreamer,
									λ.Add(λ.NewStr("mp4:"), ϒsrc),
								)
							})},
					})
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, ϒsmil_formats)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒ_format = τmp1
						if λ.IsTrue(λ.Cal(λ.GetAttr(OnceIE, "suitable", nil), λ.GetItem(ϒ_format, λ.NewStr("url")))) {
							λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Cal(λ.GetAttr(ϒself, "_extract_once_formats", nil), λ.GetItem(ϒ_format, λ.NewStr("url"))))
						} else {
							ϒmedia_url = λ.GetItem(ϒ_format, λ.NewStr("url"))
							if λ.IsTrue(λ.Eq(λ.Cal(ϒdetermine_ext, ϒmedia_url), λ.NewStr("m3u8"))) {
								ϒhdnea2 = λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒself, "_get_cookies", nil), ϒmedia_url), "get", nil), λ.NewStr("hdnea2"))
								if λ.IsTrue(ϒhdnea2) {
									λ.SetItem(ϒ_format, λ.NewStr("url"), λ.Cal(ϒupdate_url_query, ϒmedia_url, λ.NewDictWithTable(map[λ.Object]λ.Object{
										λ.NewStr("hdnea3"): λ.GetAttr(ϒhdnea2, "value", nil),
									})))
								}
							}
							λ.Cal(λ.GetAttr(ϒformats, "append", nil), ϒ_format)
						}
					}
					ϒsubtitles = λ.Cal(λ.GetAttr(ϒself, "_parse_smil_subtitles", nil), ϒmeta, λ.None)
					return λ.NewTuple(
						ϒformats,
						ϒsubtitles,
					)
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_extract_theplatform_smil"): ThePlatformBaseIE__extract_theplatform_smil,
			})
		}())
		ThePlatformIE = λ.Cal(λ.TypeType, λ.NewStr("ThePlatformIE"), λ.NewTuple(
			ThePlatformBaseIE,
			AdobePassIE,
		), func() λ.Dict {
			var (
				ThePlatformIE__VALID_URL    λ.Object
				ThePlatformIE__real_extract λ.Object
			)
			ThePlatformIE__VALID_URL = λ.NewStr("(?x)\n        (?:https?://(?:link|player)\\.theplatform\\.com/[sp]/(?P<provider_id>[^/]+)/\n           (?:(?:(?:[^/]+/)+select/)?(?P<media>media/(?:guid/\\d+/)?)?|(?P<config>(?:[^/\\?]+/(?:swf|config)|onsite)/select/))?\n         |theplatform:)(?P<id>[^/\\?&]+)")
			ThePlatformIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcombined_subtitles λ.Object
						ϒconfig             λ.Object
						ϒconfig_url         λ.Object
						ϒfeed_id            λ.Object
						ϒfeed_script        λ.Object
						ϒformats            λ.Object
						ϒheaders            λ.Object
						ϒmobj               λ.Object
						ϒpath               λ.Object
						ϒprovider_id        λ.Object
						ϒqs_dict            λ.Object
						ϒrelease_url        λ.Object
						ϒrequest            λ.Object
						ϒret                λ.Object
						ϒscript             λ.Object
						ϒscripts            λ.Object
						ϒself               = λargs[0]
						ϒsig                λ.Object
						ϒsmil_url           λ.Object
						ϒsmuggled_data      λ.Object
						ϒsource_url         λ.Object
						ϒsubtitles          λ.Object
						ϒurl                = λargs[1]
						ϒvideo_id           λ.Object
						ϒwebpage            λ.Object
						τmp0                λ.Object
						τmp1                λ.Object
					)
					τmp0 = λ.Cal(ϒunsmuggle_url, ϒurl, λ.NewDictWithTable(map[λ.Object]λ.Object{}))
					ϒurl = λ.GetItem(τmp0, λ.NewInt(0))
					ϒsmuggled_data = λ.GetItem(τmp0, λ.NewInt(1))
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒprovider_id = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("provider_id"))
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("id"))
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒprovider_id))) {
						ϒprovider_id = λ.NewStr("dJ5BDC")
					}
					ϒpath = λ.Add(ϒprovider_id, λ.NewStr("/"))
					if λ.IsTrue(λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("media"))) {
						τmp0 = λ.IAdd(ϒpath, λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("media")))
						ϒpath = τmp0
					}
					τmp0 = λ.IAdd(ϒpath, ϒvideo_id)
					ϒpath = τmp0
					ϒqs_dict = λ.Cal(ϒcompat_parse_qs, λ.GetAttr(λ.Cal(ϒcompat_urllib_parse_urlparse, ϒurl), "query", nil))
					if λ.IsTrue(λ.NewBool(λ.Contains(ϒqs_dict, λ.NewStr("guid")))) {
						ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
						ϒscripts = λ.Cal(Ωre.ϒfindall, λ.NewStr("<script[^>]+src=\"([^\"]+)\""), ϒwebpage)
						ϒfeed_id = λ.None
						τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.ReversedIteratorType, ϒscripts))
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒscript = τmp1
							ϒfeed_script = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), λ.Cal(λ.GetAttr(ϒself, "_proto_relative_url", nil), ϒscript, λ.NewStr("http:")), ϒvideo_id, λ.NewStr("Downloading feed script"))
							ϒfeed_id = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
								λ.NewStr("defaultFeedId\\s*:\\s*\"([^\"]+)\""),
								ϒfeed_script,
								λ.NewStr("default feed id"),
							), λ.KWArgs{
								{Name: "default", Value: λ.None},
							})
							if λ.IsTrue(λ.NewBool(ϒfeed_id != λ.None)) {
								break
							}
						}
						if λ.IsTrue(λ.NewBool(ϒfeed_id == λ.None)) {
							panic(λ.Raise(λ.Cal(ExtractorError, λ.NewStr("Unable to find feed id"))))
						}
						return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), λ.Mod(λ.NewStr("http://feed.theplatform.com/f/%s/%s?byGuid=%s"), λ.NewTuple(
							ϒprovider_id,
							ϒfeed_id,
							λ.GetItem(λ.GetItem(ϒqs_dict, λ.NewStr("guid")), λ.NewInt(0)),
						)))
					}
					if λ.IsTrue(λ.Cal(λ.GetAttr(ϒsmuggled_data, "get", nil), λ.NewStr("force_smil_url"), λ.False)) {
						ϒsmil_url = ϒurl
					} else {
						if λ.IsTrue(λ.NewBool(λ.Contains(ϒurl, λ.NewStr("/guid/")))) {
							ϒheaders = λ.NewDictWithTable(map[λ.Object]λ.Object{})
							ϒsource_url = λ.Cal(λ.GetAttr(ϒsmuggled_data, "get", nil), λ.NewStr("source_url"))
							if λ.IsTrue(ϒsource_url) {
								λ.SetItem(ϒheaders, λ.NewStr("Referer"), ϒsource_url)
							}
							ϒrequest = λ.Call(ϒsanitized_Request, λ.NewArgs(ϒurl), λ.KWArgs{
								{Name: "headers", Value: ϒheaders},
							})
							ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒrequest, ϒvideo_id)
							ϒsmil_url = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
								λ.NewStr("<link[^>]+href=([\"\\'])(?P<url>.+?)\\1[^>]+type=[\"\\']application/smil\\+xml"),
								ϒwebpage,
								λ.NewStr("smil url"),
							), λ.KWArgs{
								{Name: "group", Value: λ.NewStr("url")},
							})
							ϒpath = λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("link\\.theplatform\\.com/s/((?:[^/?#&]+/)+[^/?#&]+)"), ϒsmil_url, λ.NewStr("path"))
							τmp0 = λ.IAdd(ϒsmil_url, func() λ.Object {
								if λ.IsTrue(λ.NewBool(!λ.Contains(ϒsmil_url, λ.NewStr("?")))) {
									return λ.NewStr("?")
								} else {
									return λ.Add(λ.NewStr("&"), λ.NewStr("formats=m3u,mpeg4"))
								}
							}())
							ϒsmil_url = τmp0
						} else {
							if λ.IsTrue(λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("config"))) {
								ϒconfig_url = λ.Add(ϒurl, λ.NewStr("&form=json"))
								ϒconfig_url = λ.Cal(λ.GetAttr(ϒconfig_url, "replace", nil), λ.NewStr("swf/"), λ.NewStr("config/"))
								ϒconfig_url = λ.Cal(λ.GetAttr(ϒconfig_url, "replace", nil), λ.NewStr("onsite/"), λ.NewStr("onsite/config/"))
								ϒconfig = λ.Cal(λ.GetAttr(ϒself, "_download_json", nil), ϒconfig_url, ϒvideo_id, λ.NewStr("Downloading config"))
								if λ.IsTrue(λ.NewBool(λ.Contains(ϒconfig, λ.NewStr("releaseUrl")))) {
									ϒrelease_url = λ.GetItem(ϒconfig, λ.NewStr("releaseUrl"))
								} else {
									ϒrelease_url = λ.Mod(λ.NewStr("http://link.theplatform.com/s/%s?mbr=true"), ϒpath)
								}
								ϒsmil_url = λ.Add(ϒrelease_url, λ.NewStr("&formats=MPEG4&manifest=f4m"))
							} else {
								ϒsmil_url = λ.Mod(λ.NewStr("http://link.theplatform.com/s/%s?mbr=true"), ϒpath)
							}
						}
					}
					ϒsig = λ.Cal(λ.GetAttr(ϒsmuggled_data, "get", nil), λ.NewStr("sig"))
					if λ.IsTrue(ϒsig) {
						ϒsmil_url = λ.Cal(λ.GetAttr(ϒself, "_sign_url", nil), ϒsmil_url, λ.GetItem(ϒsig, λ.NewStr("key")), λ.GetItem(ϒsig, λ.NewStr("secret")))
					}
					τmp0 = λ.Cal(λ.GetAttr(ϒself, "_extract_theplatform_smil", nil), ϒsmil_url, ϒvideo_id)
					ϒformats = λ.GetItem(τmp0, λ.NewInt(0))
					ϒsubtitles = λ.GetItem(τmp0, λ.NewInt(1))
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒret = λ.Cal(λ.GetAttr(ϒself, "_extract_theplatform_metadata", nil), ϒpath, ϒvideo_id)
					ϒcombined_subtitles = λ.Cal(λ.GetAttr(ϒself, "_merge_subtitles", nil), λ.Cal(λ.GetAttr(ϒret, "get", nil), λ.NewStr("subtitles"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), ϒsubtitles)
					λ.Cal(λ.GetAttr(ϒret, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):        ϒvideo_id,
						λ.NewStr("formats"):   ϒformats,
						λ.NewStr("subtitles"): ϒcombined_subtitles,
					}))
					return ϒret
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"):    ThePlatformIE__VALID_URL,
				λ.NewStr("_real_extract"): ThePlatformIE__real_extract,
			})
		}())
		ThePlatformFeedIE = λ.Cal(λ.TypeType, λ.NewStr("ThePlatformFeedIE"), λ.NewTuple(ThePlatformBaseIE), func() λ.Dict {
			var (
				ThePlatformFeedIE__VALID_URL λ.Object
			)
			ThePlatformFeedIE__VALID_URL = λ.NewStr("https?://feed\\.theplatform\\.com/f/(?P<provider_id>[^/]+)/(?P<feed_id>[^?/]+)\\?(?:[^&]+&)*(?P<filter>by(?:Gui|I)d=(?P<id>[^&]+))")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): ThePlatformFeedIE__VALID_URL,
			})
		}())
	})
}

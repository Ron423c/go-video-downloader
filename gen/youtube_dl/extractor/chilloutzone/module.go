// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * chilloutzone/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/chilloutzone.py
 */

package chilloutzone

import (
	Ωjson "github.com/tenta-browser/go-video-downloader/gen/json"
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωyoutube "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/youtube"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ChilloutzoneIE    λ.Object
	ExtractorError    λ.Object
	InfoExtractor     λ.Object
	YoutubeIE         λ.Object
	ϒclean_html       λ.Object
	ϒcompat_b64decode λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		YoutubeIE = Ωyoutube.YoutubeIE
		ϒcompat_b64decode = Ωcompat.ϒcompat_b64decode
		ϒclean_html = Ωutils.ϒclean_html
		ExtractorError = Ωutils.ExtractorError
		ChilloutzoneIE = λ.Cal(λ.TypeType, λ.StrLiteral("ChilloutzoneIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ChilloutzoneIE__VALID_URL    λ.Object
				ChilloutzoneIE__real_extract λ.Object
			)
			ChilloutzoneIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?chilloutzone\\.net/video/(?P<id>[\\w|-]+)\\.html")
			ChilloutzoneIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒbase64_video_info  λ.Object
						ϒdecoded_video_info λ.Object
						ϒdescription        λ.Object
						ϒmobj               λ.Object
						ϒnative_platform    λ.Object
						ϒnative_video_id    λ.Object
						ϒself               = λargs[0]
						ϒsource_priority    λ.Object
						ϒtitle              λ.Object
						ϒurl                = λargs[1]
						ϒvideo_id           λ.Object
						ϒvideo_info_dict    λ.Object
						ϒvideo_url          λ.Object
						ϒwebpage            λ.Object
						ϒyoutube_url        λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒvideo_id = λ.Calm(ϒmobj, "group", λ.StrLiteral("id"))
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒvideo_id)
					ϒbase64_video_info = λ.Calm(ϒself, "_html_search_regex", λ.StrLiteral("var cozVidData = \"(.+?)\";"), ϒwebpage, λ.StrLiteral("video data"))
					ϒdecoded_video_info = λ.Calm(λ.Cal(ϒcompat_b64decode, ϒbase64_video_info), "decode", λ.StrLiteral("utf-8"))
					ϒvideo_info_dict = λ.Cal(Ωjson.ϒloads, ϒdecoded_video_info)
					ϒvideo_url = λ.GetItem(ϒvideo_info_dict, λ.StrLiteral("mediaUrl"))
					ϒdescription = λ.Cal(ϒclean_html, λ.Calm(ϒvideo_info_dict, "get", λ.StrLiteral("description")))
					ϒtitle = λ.GetItem(ϒvideo_info_dict, λ.StrLiteral("title"))
					ϒnative_platform = λ.GetItem(ϒvideo_info_dict, λ.StrLiteral("nativePlatform"))
					ϒnative_video_id = λ.GetItem(ϒvideo_info_dict, λ.StrLiteral("nativeVideoId"))
					ϒsource_priority = λ.GetItem(ϒvideo_info_dict, λ.StrLiteral("sourcePriority"))
					if ϒnative_platform == λ.None {
						ϒyoutube_url = λ.Calm(YoutubeIE, "_extract_url", ϒwebpage)
						if λ.IsTrue(ϒyoutube_url) {
							return λ.Call(λ.GetAttr(ϒself, "url_result", nil), λ.NewArgs(ϒyoutube_url), λ.KWArgs{
								{Name: "ie", Value: λ.Calm(YoutubeIE, "ie_key")},
							})
						}
					}
					if λ.IsTrue(λ.Eq(ϒsource_priority, λ.StrLiteral("native"))) {
						if λ.IsTrue(λ.Eq(ϒnative_platform, λ.StrLiteral("youtube"))) {
							return λ.Call(λ.GetAttr(ϒself, "url_result", nil), λ.NewArgs(ϒnative_video_id), λ.KWArgs{
								{Name: "ie", Value: λ.StrLiteral("Youtube")},
							})
						}
						if λ.IsTrue(λ.Eq(ϒnative_platform, λ.StrLiteral("vimeo"))) {
							return λ.Call(λ.GetAttr(ϒself, "url_result", nil), λ.NewArgs(λ.Add(λ.StrLiteral("http://vimeo.com/"), ϒnative_video_id)), λ.KWArgs{
								{Name: "ie", Value: λ.StrLiteral("Vimeo")},
							})
						}
					}
					if !λ.IsTrue(ϒvideo_url) {
						panic(λ.Raise(λ.Cal(ExtractorError, λ.StrLiteral("No video found"))))
					}
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒvideo_id,
						"url":         ϒvideo_url,
						"ext":         λ.StrLiteral("mp4"),
						"title":       ϒtitle,
						"description": ϒdescription,
					})
				})
			return λ.DictLiteral(map[string]λ.Object{
				"_VALID_URL":    ChilloutzoneIE__VALID_URL,
				"_real_extract": ChilloutzoneIE__real_extract,
			})
		}())
	})
}

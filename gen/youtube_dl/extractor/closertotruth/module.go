// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * closertotruth/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/closertotruth.py
 */

package closertotruth

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	CloserToTruthIE λ.Object
	InfoExtractor   λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		CloserToTruthIE = λ.Cal(λ.TypeType, λ.NewStr("CloserToTruthIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				CloserToTruthIE__VALID_URL    λ.Object
				CloserToTruthIE__real_extract λ.Object
			)
			CloserToTruthIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?closertotruth\\.com/(?:[^/]+/)*(?P<id>[^/?#&]+)")
			CloserToTruthIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdisplay_id λ.Object
						ϒentries    λ.Object
						ϒentry_id   λ.Object
						ϒentry_ids  λ.Object
						ϒmobj       λ.Object
						ϒpartner_id λ.Object
						ϒselect     λ.Object
						ϒself       = λargs[0]
						ϒtitle      λ.Object
						ϒurl        = λargs[1]
						ϒwebpage    λ.Object
						τmp0        λ.Object
						τmp1        λ.Object
					)
					ϒdisplay_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒdisplay_id)
					ϒpartner_id = λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("<script[^>]+src=[\"\\'].*?\\b(?:partner_id|p)/(\\d+)"), ϒwebpage, λ.NewStr("kaltura partner_id"))
					ϒtitle = λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("<title>(.+?)\\s*\\|\\s*.+?</title>"), ϒwebpage, λ.NewStr("video title"))
					ϒselect = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("(?s)<select[^>]+id=\"select-version\"[^>]*>(.+?)</select>"),
						ϒwebpage,
						λ.NewStr("select version"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(ϒselect) {
						ϒentry_ids = λ.Cal(λ.SetType)
						ϒentries = λ.NewList()
						τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfinditer, λ.NewStr("<option[^>]+value=([\"\\'])(?P<id>[0-9a-z_]+)(?:#.+?)?\\1[^>]*>(?P<title>[^<]+)"), ϒwebpage))
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒmobj = τmp1
							ϒentry_id = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("id"))
							if λ.IsTrue(λ.NewBool(λ.Contains(ϒentry_ids, ϒentry_id))) {
								continue
							}
							λ.Cal(λ.GetAttr(ϒentry_ids, "add", nil), ϒentry_id)
							λ.Cal(λ.GetAttr(ϒentries, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("_type"): λ.NewStr("url_transparent"),
								λ.NewStr("url"): λ.Mod(λ.NewStr("kaltura:%s:%s"), λ.NewTuple(
									ϒpartner_id,
									ϒentry_id,
								)),
								λ.NewStr("ie_key"): λ.NewStr("Kaltura"),
								λ.NewStr("title"):  λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("title")),
							}))
						}
						if λ.IsTrue(ϒentries) {
							return λ.Cal(λ.GetAttr(ϒself, "playlist_result", nil), ϒentries, ϒdisplay_id, ϒtitle)
						}
					}
					ϒentry_id = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("<a[^>]+id=([\"\\'])embed-kaltura\\1[^>]+data-kaltura=([\"\\'])(?P<id>[0-9a-z_]+)\\2"),
						ϒwebpage,
						λ.NewStr("kaltura entry_id"),
					), λ.KWArgs{
						{Name: "group", Value: λ.NewStr("id")},
					})
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("_type"):      λ.NewStr("url_transparent"),
						λ.NewStr("display_id"): ϒdisplay_id,
						λ.NewStr("url"): λ.Mod(λ.NewStr("kaltura:%s:%s"), λ.NewTuple(
							ϒpartner_id,
							ϒentry_id,
						)),
						λ.NewStr("ie_key"): λ.NewStr("Kaltura"),
						λ.NewStr("title"):  ϒtitle,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"):    CloserToTruthIE__VALID_URL,
				λ.NewStr("_real_extract"): CloserToTruthIE__real_extract,
			})
		}())
	})
}

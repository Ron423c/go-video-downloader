// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * closertotruth/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/closertotruth.py
 */

package closertotruth

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	CloserToTruthIE λ.Object
	InfoExtractor   λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		CloserToTruthIE = λ.Cal(λ.TypeType, λ.StrLiteral("CloserToTruthIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				CloserToTruthIE__VALID_URL    λ.Object
				CloserToTruthIE__real_extract λ.Object
			)
			CloserToTruthIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?closertotruth\\.com/(?:[^/]+/)*(?P<id>[^/?#&]+)")
			CloserToTruthIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdisplay_id λ.Object
						ϒentries    λ.Object
						ϒentry_id   λ.Object
						ϒentry_ids  λ.Object
						ϒmobj       λ.Object
						ϒpartner_id λ.Object
						ϒselect     λ.Object
						ϒself       = λargs[0]
						ϒtitle      λ.Object
						ϒurl        = λargs[1]
						ϒwebpage    λ.Object
						τmp0        λ.Object
						τmp1        λ.Object
					)
					ϒdisplay_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒdisplay_id)
					ϒpartner_id = λ.Calm(ϒself, "_search_regex", λ.StrLiteral("<script[^>]+src=[\"\\'].*?\\b(?:partner_id|p)/(\\d+)"), ϒwebpage, λ.StrLiteral("kaltura partner_id"))
					ϒtitle = λ.Calm(ϒself, "_search_regex", λ.StrLiteral("<title>(.+?)\\s*\\|\\s*.+?</title>"), ϒwebpage, λ.StrLiteral("video title"))
					ϒselect = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("(?s)<select[^>]+id=\"select-version\"[^>]*>(.+?)</select>"),
						ϒwebpage,
						λ.StrLiteral("select version"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(ϒselect) {
						ϒentry_ids = λ.Cal(λ.SetType)
						ϒentries = λ.NewList()
						τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfinditer, λ.StrLiteral("<option[^>]+value=([\"\\'])(?P<id>[0-9a-z_]+)(?:#.+?)?\\1[^>]*>(?P<title>[^<]+)"), ϒwebpage))
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒmobj = τmp1
							ϒentry_id = λ.Calm(ϒmobj, "group", λ.StrLiteral("id"))
							if λ.Contains(ϒentry_ids, ϒentry_id) {
								continue
							}
							λ.Calm(ϒentry_ids, "add", ϒentry_id)
							λ.Calm(ϒentries, "append", λ.DictLiteral(map[string]λ.Object{
								"_type": λ.StrLiteral("url_transparent"),
								"url": λ.Mod(λ.StrLiteral("kaltura:%s:%s"), λ.NewTuple(
									ϒpartner_id,
									ϒentry_id,
								)),
								"ie_key": λ.StrLiteral("Kaltura"),
								"title":  λ.Calm(ϒmobj, "group", λ.StrLiteral("title")),
							}))
						}
						if λ.IsTrue(ϒentries) {
							return λ.Calm(ϒself, "playlist_result", ϒentries, ϒdisplay_id, ϒtitle)
						}
					}
					ϒentry_id = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("<a[^>]+id=([\"\\'])embed-kaltura\\1[^>]+data-kaltura=([\"\\'])(?P<id>[0-9a-z_]+)\\2"),
						ϒwebpage,
						λ.StrLiteral("kaltura entry_id"),
					), λ.KWArgs{
						{Name: "group", Value: λ.StrLiteral("id")},
					})
					return λ.DictLiteral(map[string]λ.Object{
						"_type":      λ.StrLiteral("url_transparent"),
						"display_id": ϒdisplay_id,
						"url": λ.Mod(λ.StrLiteral("kaltura:%s:%s"), λ.NewTuple(
							ϒpartner_id,
							ϒentry_id,
						)),
						"ie_key": λ.StrLiteral("Kaltura"),
						"title":  ϒtitle,
					})
				})
			return λ.DictLiteral(map[string]λ.Object{
				"_VALID_URL":    CloserToTruthIE__VALID_URL,
				"_real_extract": CloserToTruthIE__real_extract,
			})
		}())
	})
}

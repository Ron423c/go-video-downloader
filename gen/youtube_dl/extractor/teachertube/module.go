// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * teachertube/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/teachertube.py
 */

package teachertube

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError    λ.Object
	InfoExtractor     λ.Object
	TeacherTubeIE     λ.Object
	TeacherTubeUserIE λ.Object
	ϒdetermine_ext    λ.Object
	ϒqualities        λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ExtractorError = Ωutils.ExtractorError
		ϒqualities = Ωutils.ϒqualities
		TeacherTubeIE = λ.Cal(λ.TypeType, λ.NewStr("TeacherTubeIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				TeacherTubeIE_IE_NAME       λ.Object
				TeacherTubeIE__TESTS        λ.Object
				TeacherTubeIE__VALID_URL    λ.Object
				TeacherTubeIE__real_extract λ.Object
			)
			TeacherTubeIE_IE_NAME = λ.NewStr("teachertube")
			TeacherTubeIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?teachertube\\.com/(viewVideo\\.php\\?video_id=|music\\.php\\?music_id=|video/(?:[\\da-z-]+-)?|audio/)(?P<id>\\d+)")
			TeacherTubeIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.teachertube.com/viewVideo.php?video_id=339997"),
					λ.NewStr("md5"): λ.NewStr("f9434ef992fd65936d72999951ee254c"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("339997"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Measures of dispersion from a frequency table"),
						λ.NewStr("description"): λ.NewStr("Measures of dispersion from a frequency table"),
						λ.NewStr("thumbnail"):   λ.NewStr("re:https?://.*\\.(?:jpg|png)"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.teachertube.com/music.php?music_id=8805"),
					λ.NewStr("md5"): λ.NewStr("01e8352006c65757caf7b961f6050e21"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("8805"),
						λ.NewStr("ext"):         λ.NewStr("mp3"),
						λ.NewStr("title"):       λ.NewStr("PER ASPERA AD ASTRA"),
						λ.NewStr("description"): λ.NewStr("RADIJSKA EMISIJA ZRAKOPLOVNE TEHNI?KE ?KOLE P"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://www.teachertube.com/video/intro-video-schleicher-297790"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			TeacherTubeIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						TITLE_SUFFIX λ.Object
						ϒdescription λ.Object
						ϒerror       λ.Object
						ϒformats     λ.Object
						ϒmedia_urls  λ.Object
						ϒquality     λ.Object
						ϒself        = λargs[0]
						ϒthumbnail   λ.Object
						ϒtitle       λ.Object
						ϒurl         = λargs[1]
						ϒvideo_id    λ.Object
						ϒwebpage     λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					ϒerror = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("<div\\b[^>]+\\bclass=[\"\\']msgBox error[^>]+>([^<]+)"),
						ϒwebpage,
						λ.NewStr("error"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(ϒerror) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.NewStr("%s said: %s"), λ.NewTuple(
							λ.GetAttr(ϒself, "IE_NAME", nil),
							ϒerror,
						))), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒtitle = λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
						λ.NewStr("title"),
						ϒwebpage,
						λ.NewStr("title"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.True},
					})
					TITLE_SUFFIX = λ.NewStr(" - TeacherTube")
					if λ.IsTrue(λ.Cal(λ.GetAttr(ϒtitle, "endswith", nil), TITLE_SUFFIX)) {
						ϒtitle = λ.Cal(λ.GetAttr(λ.GetItem(ϒtitle, λ.NewSlice(λ.None, λ.Neg(λ.Cal(λ.BuiltinLen, TITLE_SUFFIX)), λ.None)), "strip", nil))
					}
					ϒdescription = λ.Cal(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewStr("description"), ϒwebpage, λ.NewStr("description"))
					if λ.IsTrue(ϒdescription) {
						ϒdescription = λ.Cal(λ.GetAttr(ϒdescription, "strip", nil))
					}
					ϒquality = λ.Cal(ϒqualities, λ.NewList(
						λ.NewStr("mp3"),
						λ.NewStr("flv"),
						λ.NewStr("mp4"),
					))
					ϒmedia_urls = λ.Cal(Ωre.ϒfindall, λ.NewStr("data-contenturl=\"([^\"]+)\""), ϒwebpage)
					λ.Cal(λ.GetAttr(ϒmedia_urls, "extend", nil), λ.Cal(Ωre.ϒfindall, λ.NewStr("var\\s+filePath\\s*=\\s*\"([^\"]+)\""), ϒwebpage))
					λ.Cal(λ.GetAttr(ϒmedia_urls, "extend", nil), λ.Cal(Ωre.ϒfindall, λ.NewStr("\\'file\\'\\s*:\\s*[\"\\']([^\"\\']+)[\"\\'],"), ϒwebpage))
					ϒformats = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgen λ.Generator) λ.Object {
								var (
									ϒmedia_url λ.Object
									τmp0       λ.Object
									τmp1       λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.SetType, ϒmedia_urls))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒmedia_url = τmp1
									λgen.Yield(λ.NewDictWithTable(map[λ.Object]λ.Object{
										λ.NewStr("url"):     ϒmedia_url,
										λ.NewStr("quality"): λ.Cal(ϒquality, λ.Cal(ϒdetermine_ext, ϒmedia_url)),
									}))
								}
								return λ.None
							})
						})))
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒthumbnail = func() λ.Object {
						if λv := λ.Call(λ.GetAttr(ϒself, "_og_search_thumbnail", nil), λ.NewArgs(ϒwebpage), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewStr("thumbnail"), ϒwebpage)
						}
					}()
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("title"):       ϒtitle,
						λ.NewStr("description"): ϒdescription,
						λ.NewStr("thumbnail"):   ϒthumbnail,
						λ.NewStr("formats"):     ϒformats,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):       TeacherTubeIE_IE_NAME,
				λ.NewStr("_TESTS"):        TeacherTubeIE__TESTS,
				λ.NewStr("_VALID_URL"):    TeacherTubeIE__VALID_URL,
				λ.NewStr("_real_extract"): TeacherTubeIE__real_extract,
			})
		}())
		TeacherTubeUserIE = λ.Cal(λ.TypeType, λ.NewStr("TeacherTubeUserIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				TeacherTubeUserIE__VALID_URL λ.Object
			)
			TeacherTubeUserIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?teachertube\\.com/(user/profile|collection)/(?P<user>[0-9a-zA-Z]+)/?")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): TeacherTubeUserIE__VALID_URL,
			})
		}())
	})
}

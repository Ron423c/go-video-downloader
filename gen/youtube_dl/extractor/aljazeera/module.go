// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * aljazeera/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/aljazeera.py
 */

package aljazeera

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	AlJazeeraIE   λ.Object
	InfoExtractor λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		AlJazeeraIE = λ.Cal(λ.TypeType, λ.NewStr("AlJazeeraIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				AlJazeeraIE_BRIGHTCOVE_URL_TEMPLATE λ.Object
				AlJazeeraIE__TESTS                  λ.Object
				AlJazeeraIE__VALID_URL              λ.Object
				AlJazeeraIE__real_extract           λ.Object
			)
			AlJazeeraIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?aljazeera\\.com/(?:programmes|video)/.*?/(?P<id>[^/]+)\\.html")
			AlJazeeraIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.aljazeera.com/programmes/the-slum/2014/08/deliverance-201482883754237240.html"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("3792260579001"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("The Slum - Episode 1: Deliverance"),
						λ.NewStr("description"): λ.NewStr("As a birth attendant advocating for family planning, Remy is on the frontline of Tondo's battle with overcrowding."),
						λ.NewStr("uploader_id"): λ.NewStr("665003303001"),
						λ.NewStr("timestamp"):   λ.NewInt(1411116829),
						λ.NewStr("upload_date"): λ.NewStr("20140919"),
					}),
					λ.NewStr("add_ie"): λ.NewList(λ.NewStr("BrightcoveNew")),
					λ.NewStr("skip"):   λ.NewStr("Not accessible from Travis CI server"),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://www.aljazeera.com/video/news/2017/05/sierra-leone-709-carat-diamond-auctioned-170511100111930.html"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			AlJazeeraIE_BRIGHTCOVE_URL_TEMPLATE = λ.NewStr("http://players.brightcove.net/665003303001/default_default/index.html?videoId=%s")
			AlJazeeraIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒbrightcove_id λ.Object
						ϒprogram_name  λ.Object
						ϒself          = λargs[0]
						ϒurl           = λargs[1]
						ϒwebpage       λ.Object
					)
					ϒprogram_name = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒprogram_name)
					ϒbrightcove_id = λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("RenderPagesVideo\\(\\'(.+?)\\'"), ϒwebpage, λ.NewStr("brightcove id"))
					return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), λ.Mod(λ.GetAttr(ϒself, "BRIGHTCOVE_URL_TEMPLATE", nil), ϒbrightcove_id), λ.NewStr("BrightcoveNew"), ϒbrightcove_id)
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("BRIGHTCOVE_URL_TEMPLATE"): AlJazeeraIE_BRIGHTCOVE_URL_TEMPLATE,
				λ.NewStr("_TESTS"):                  AlJazeeraIE__TESTS,
				λ.NewStr("_VALID_URL"):              AlJazeeraIE__VALID_URL,
				λ.NewStr("_real_extract"):           AlJazeeraIE__real_extract,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * mailru/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/mailru.py
 */

package mailru

import (
	Ωjson "github.com/tenta-browser/go-video-downloader/gen/json"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor                λ.Object
	MailRuIE                     λ.Object
	MailRuMusicIE                λ.Object
	MailRuMusicSearchBaseIE      λ.Object
	MailRuMusicSearchIE          λ.Object
	ϒcompat_urllib_parse_unquote λ.Object
	ϒint_or_none                 λ.Object
	ϒparse_duration              λ.Object
	ϒremove_end                  λ.Object
	ϒtry_get                     λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_urllib_parse_unquote = Ωcompat.ϒcompat_urllib_parse_unquote
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒremove_end = Ωutils.ϒremove_end
		ϒtry_get = Ωutils.ϒtry_get
		MailRuIE = λ.Cal(λ.TypeType, λ.NewStr("MailRuIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				MailRuIE__VALID_URL λ.Object
			)
			MailRuIE__VALID_URL = λ.NewStr("(?x)\n                    https?://\n                        (?:(?:www|m)\\.)?my\\.mail\\.ru/\n                        (?:\n                            video/.*\\#video=/?(?P<idv1>(?:[^/]+/){3}\\d+)|\n                            (?:(?P<idv2prefix>(?:[^/]+/){2})video/(?P<idv2suffix>[^/]+/\\d+))\\.html|\n                            (?:video/embed|\\+/video/meta)/(?P<metaid>\\d+)\n                        )\n                    ")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): MailRuIE__VALID_URL,
			})
		}())
		MailRuMusicSearchBaseIE = λ.Cal(λ.TypeType, λ.NewStr("MailRuMusicSearchBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				MailRuMusicSearchBaseIE__extract_track λ.Object
				MailRuMusicSearchBaseIE__search        λ.Object
			)
			MailRuMusicSearchBaseIE__search = λ.NewFunction("_search",
				[]λ.Param{
					{Name: "self"},
					{Name: "query"},
					{Name: "url"},
					{Name: "audio_id"},
					{Name: "limit", Def: λ.NewInt(100)},
					{Name: "offset", Def: λ.NewInt(0)},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒaudio_id = λargs[3]
						ϒlimit    = λargs[4]
						ϒoffset   = λargs[5]
						ϒquery    = λargs[1]
						ϒsearch   λ.Object
						ϒself     = λargs[0]
						ϒurl      = λargs[2]
					)
					ϒsearch = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.NewStr("https://my.mail.ru/cgi-bin/my/ajax"),
						ϒaudio_id,
						λ.Mod(λ.NewStr("Downloading songs JSON page %d"), λ.Add(λ.FloorDiv(ϒoffset, ϒlimit), λ.NewInt(1))),
					), λ.KWArgs{
						{Name: "headers", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("Referer"):          ϒurl,
							λ.NewStr("X-Requested-With"): λ.NewStr("XMLHttpRequest"),
						})},
						{Name: "query", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("xemail"):       λ.NewStr(""),
							λ.NewStr("ajax_call"):    λ.NewStr("1"),
							λ.NewStr("func_name"):    λ.NewStr("music.search"),
							λ.NewStr("mna"):          λ.NewStr(""),
							λ.NewStr("mnb"):          λ.NewStr(""),
							λ.NewStr("arg_query"):    ϒquery,
							λ.NewStr("arg_extended"): λ.NewStr("1"),
							λ.NewStr("arg_search_params"): λ.Cal(Ωjson.ϒdumps, λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("music"): λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("limit"):  ϒlimit,
									λ.NewStr("offset"): ϒoffset,
								}),
							})),
							λ.NewStr("arg_limit"):  ϒlimit,
							λ.NewStr("arg_offset"): ϒoffset,
						})},
					})
					return λ.Cal(λ.BuiltinNext, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒe   λ.Object
									τmp0 λ.Object
									τmp1 λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, ϒsearch)
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒe = τmp1
									if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒe, λ.DictType)) {
										λgy.Yield(ϒe)
									}
								}
								return λ.None
							})
						})))
				})
			MailRuMusicSearchBaseIE__extract_track = λ.NewFunction("_extract_track",
				[]λ.Param{
					{Name: "t"},
					{Name: "fatal", Def: λ.True},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒartist      λ.Object
						ϒaudio_id    λ.Object
						ϒaudio_url   λ.Object
						ϒduration    λ.Object
						ϒfatal       = λargs[1]
						ϒt           = λargs[0]
						ϒthumbnail   λ.Object
						ϒtitle       λ.Object
						ϒtrack       λ.Object
						ϒuploader    λ.Object
						ϒuploader_id λ.Object
						ϒview_count  λ.Object
					)
					ϒaudio_url = func() λ.Object {
						if λ.IsTrue(ϒfatal) {
							return λ.GetItem(ϒt, λ.NewStr("URL"))
						} else {
							return λ.Cal(λ.GetAttr(ϒt, "get", nil), λ.NewStr("URL"))
						}
					}()
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒaudio_url))) {
						return λ.None
					}
					ϒaudio_id = func() λ.Object {
						if λ.IsTrue(ϒfatal) {
							return λ.GetItem(ϒt, λ.NewStr("File"))
						} else {
							return λ.Cal(λ.GetAttr(ϒt, "get", nil), λ.NewStr("File"))
						}
					}()
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒaudio_id))) {
						return λ.None
					}
					ϒthumbnail = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒt, "get", nil), λ.NewStr("AlbumCoverURL")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒt, "get", nil), λ.NewStr("FiledAlbumCover"))
						}
					}()
					ϒuploader = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒt, "get", nil), λ.NewStr("OwnerName")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒt, "get", nil), λ.NewStr("OwnerName_Text_HTML"))
						}
					}()
					ϒuploader_id = λ.Cal(λ.GetAttr(ϒt, "get", nil), λ.NewStr("UploaderID"))
					ϒduration = func() λ.Object {
						if λv := λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒt, "get", nil), λ.NewStr("DurationInSeconds"))); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(ϒparse_duration, func() λ.Object {
								if λv := λ.Cal(λ.GetAttr(ϒt, "get", nil), λ.NewStr("Duration")); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Cal(λ.GetAttr(ϒt, "get", nil), λ.NewStr("DurationStr"))
								}
							}())
						}
					}()
					ϒview_count = λ.Cal(ϒint_or_none, func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒt, "get", nil), λ.NewStr("PlayCount")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒt, "get", nil), λ.NewStr("PlayCount_hr"))
						}
					}())
					ϒtrack = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒt, "get", nil), λ.NewStr("Name")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒt, "get", nil), λ.NewStr("Name_Text_HTML"))
						}
					}()
					ϒartist = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒt, "get", nil), λ.NewStr("Author")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒt, "get", nil), λ.NewStr("Author_Text_HTML"))
						}
					}()
					if λ.IsTrue(ϒtrack) {
						ϒtitle = func() λ.Object {
							if λ.IsTrue(ϒartist) {
								return λ.Mod(λ.NewStr("%s - %s"), λ.NewTuple(
									ϒartist,
									ϒtrack,
								))
							} else {
								return ϒtrack
							}
						}()
					} else {
						ϒtitle = ϒaudio_id
					}
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("extractor_key"): λ.Cal(λ.GetAttr(MailRuMusicIE, "ie_key", nil)),
						λ.NewStr("id"):            ϒaudio_id,
						λ.NewStr("title"):         ϒtitle,
						λ.NewStr("thumbnail"):     ϒthumbnail,
						λ.NewStr("uploader"):      ϒuploader,
						λ.NewStr("uploader_id"):   ϒuploader_id,
						λ.NewStr("duration"):      ϒduration,
						λ.NewStr("view_count"):    ϒview_count,
						λ.NewStr("vcodec"):        λ.NewStr("none"),
						λ.NewStr("abr"):           λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒt, "get", nil), λ.NewStr("BitRate"))),
						λ.NewStr("track"):         ϒtrack,
						λ.NewStr("artist"):        ϒartist,
						λ.NewStr("album"):         λ.Cal(λ.GetAttr(ϒt, "get", nil), λ.NewStr("Album")),
						λ.NewStr("url"):           ϒaudio_url,
					})
				})
			MailRuMusicSearchBaseIE__extract_track = λ.Cal(λ.StaticMethodType, MailRuMusicSearchBaseIE__extract_track)
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_extract_track"): MailRuMusicSearchBaseIE__extract_track,
				λ.NewStr("_search"):        MailRuMusicSearchBaseIE__search,
			})
		}())
		MailRuMusicIE = λ.Cal(λ.TypeType, λ.NewStr("MailRuMusicIE"), λ.NewTuple(MailRuMusicSearchBaseIE), func() λ.Dict {
			var (
				MailRuMusicIE_IE_NAME       λ.Object
				MailRuMusicIE__TESTS        λ.Object
				MailRuMusicIE__VALID_URL    λ.Object
				MailRuMusicIE__real_extract λ.Object
			)
			MailRuMusicIE_IE_NAME = λ.NewStr("mailru:music")
			MailRuMusicIE__VALID_URL = λ.NewStr("https?://my\\.mail\\.ru/music/songs/[^/?#&]+-(?P<id>[\\da-f]+)")
			MailRuMusicIE__TESTS = λ.NewList(λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("url"): λ.NewStr("https://my.mail.ru/music/songs/%D0%BC8%D0%BB8%D1%82%D1%85-l-a-h-luciferian-aesthetics-of-herrschaft-single-2017-4e31f7125d0dfaef505d947642366893"),
				λ.NewStr("md5"): λ.NewStr("0f8c22ef8c5d665b13ac709e63025610"),
				λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("id"):          λ.NewStr("4e31f7125d0dfaef505d947642366893"),
					λ.NewStr("ext"):         λ.NewStr("mp3"),
					λ.NewStr("title"):       λ.NewStr("L.A.H. (Luciferian Aesthetics of Herrschaft) single, 2017 - М8Л8ТХ"),
					λ.NewStr("uploader"):    λ.NewStr("Игорь Мудрый"),
					λ.NewStr("uploader_id"): λ.NewStr("1459196328"),
					λ.NewStr("duration"):    λ.NewInt(280),
					λ.NewStr("view_count"):  λ.IntType,
					λ.NewStr("vcodec"):      λ.NewStr("none"),
					λ.NewStr("abr"):         λ.NewInt(320),
					λ.NewStr("track"):       λ.NewStr("L.A.H. (Luciferian Aesthetics of Herrschaft) single, 2017"),
					λ.NewStr("artist"):      λ.NewStr("М8Л8ТХ"),
				}),
			}))
			MailRuMusicIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒaudio_id   λ.Object
						ϒinfo       λ.Object
						ϒmusic_data λ.Object
						ϒself       = λargs[0]
						ϒt          λ.Object
						ϒtitle      λ.Object
						ϒurl        = λargs[1]
						ϒwebpage    λ.Object
					)
					ϒaudio_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒaudio_id)
					ϒtitle = λ.Cal(λ.GetAttr(ϒself, "_og_search_title", nil), ϒwebpage)
					ϒmusic_data = λ.GetItem(λ.Cal(λ.GetAttr(ϒself, "_search", nil), ϒtitle, ϒurl, ϒaudio_id), λ.NewStr("MusicData"))
					ϒt = λ.Cal(λ.BuiltinNext, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒt   λ.Object
									τmp0 λ.Object
									τmp1 λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, ϒmusic_data)
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒt = τmp1
									if λ.IsTrue(λ.Eq(λ.Cal(λ.GetAttr(ϒt, "get", nil), λ.NewStr("File")), ϒaudio_id)) {
										λgy.Yield(ϒt)
									}
								}
								return λ.None
							})
						})))
					ϒinfo = λ.Cal(λ.GetAttr(ϒself, "_extract_track", nil), ϒt)
					λ.SetItem(ϒinfo, λ.NewStr("title"), ϒtitle)
					return ϒinfo
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):       MailRuMusicIE_IE_NAME,
				λ.NewStr("_TESTS"):        MailRuMusicIE__TESTS,
				λ.NewStr("_VALID_URL"):    MailRuMusicIE__VALID_URL,
				λ.NewStr("_real_extract"): MailRuMusicIE__real_extract,
			})
		}())
		MailRuMusicSearchIE = λ.Cal(λ.TypeType, λ.NewStr("MailRuMusicSearchIE"), λ.NewTuple(MailRuMusicSearchBaseIE), func() λ.Dict {
			var (
				MailRuMusicSearchIE__VALID_URL λ.Object
			)
			MailRuMusicSearchIE__VALID_URL = λ.NewStr("https?://my\\.mail\\.ru/music/search/(?P<id>[^/?#&]+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): MailRuMusicSearchIE__VALID_URL,
			})
		}())
	})
}

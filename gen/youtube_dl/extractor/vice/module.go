// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * vice/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/vice.py
 */

package vice

import (
	Ωjson "github.com/tenta-browser/go-video-downloader/gen/json"
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωtime "github.com/tenta-browser/go-video-downloader/gen/time"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωadobepass "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/adobepass"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωyoutube "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/youtube"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	AdobePassIE       λ.Object
	ExtractorError    λ.Object
	InfoExtractor     λ.Object
	ViceArticleIE     λ.Object
	ViceIE            λ.Object
	ViceShowIE        λ.Object
	YoutubeIE         λ.Object
	ϒcompat_HTTPError λ.Object
	ϒcompat_str       λ.Object
	ϒint_or_none      λ.Object
	ϒparse_age_limit  λ.Object
	ϒstr_or_none      λ.Object
	ϒtry_get          λ.Object
)

func init() {
	λ.InitModule(func() {
		AdobePassIE = Ωadobepass.AdobePassIE
		YoutubeIE = Ωyoutube.YoutubeIE
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_HTTPError = Ωcompat.ϒcompat_HTTPError
		ϒcompat_str = Ωcompat.ϒcompat_str
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_age_limit = Ωutils.ϒparse_age_limit
		ϒstr_or_none = Ωutils.ϒstr_or_none
		ϒtry_get = Ωutils.ϒtry_get
		ViceIE = λ.Cal(λ.TypeType, λ.NewStr("ViceIE"), λ.NewTuple(AdobePassIE), func() λ.Dict {
			var (
				ViceIE_IE_NAME       λ.Object
				ViceIE__VALID_URL    λ.Object
				ViceIE__extract_url  λ.Object
				ViceIE__extract_urls λ.Object
				ViceIE__real_extract λ.Object
			)
			ViceIE_IE_NAME = λ.NewStr("vice")
			ViceIE__VALID_URL = λ.NewStr("https?://(?:(?:video|vms)\\.vice|(?:www\\.)?viceland)\\.com/(?P<locale>[^/]+)/(?:video/[^/]+|embed)/(?P<id>[\\da-f]+)")
			ViceIE__extract_urls = λ.NewFunction("_extract_urls",
				[]λ.Param{
					{Name: "webpage"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒwebpage = λargs[0]
					)
					return λ.Cal(Ωre.ϒfindall, λ.NewStr("<iframe\\b[^>]+\\bsrc=[\"\\']((?:https?:)?//video\\.vice\\.com/[^/]+/embed/[\\da-f]+)"), ϒwebpage)
				})
			ViceIE__extract_urls = λ.Cal(λ.StaticMethodType, ViceIE__extract_urls)
			ViceIE__extract_url = λ.NewFunction("_extract_url",
				[]λ.Param{
					{Name: "webpage"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒurls    λ.Object
						ϒwebpage = λargs[0]
					)
					ϒurls = λ.Cal(λ.GetAttr(ViceIE, "_extract_urls", nil), ϒwebpage)
					return func() λ.Object {
						if λ.IsTrue(ϒurls) {
							return λ.GetItem(ϒurls, λ.NewInt(0))
						} else {
							return λ.None
						}
					}()
				})
			ViceIE__extract_url = λ.Cal(λ.StaticMethodType, ViceIE__extract_url)
			ViceIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒbase               λ.Object
						ϒcc_url             λ.Object
						ϒchannel            λ.Object
						ϒduration           λ.Object
						ϒepisode            λ.Object
						ϒepisode_number     λ.Object
						ϒerror              λ.Object
						ϒerror_message      λ.Object
						ϒexp                λ.Object
						ϒis_locked          λ.Object
						ϒlocale             λ.Object
						ϒpreplay            λ.Object
						ϒquery              λ.Object
						ϒrating             λ.Object
						ϒresource           λ.Object
						ϒseason_number      λ.Object
						ϒself               = λargs[0]
						ϒseries             λ.Object
						ϒsubtitles          λ.Object
						ϒthumbnail          λ.Object
						ϒtitle              λ.Object
						ϒuploader           λ.Object
						ϒuplynk_preplay_url λ.Object
						ϒurl                = λargs[1]
						ϒvideo              λ.Object
						ϒvideo_data         λ.Object
						ϒvideo_id           λ.Object
						ϒwebpage            λ.Object
						τmp0                λ.Object
						τmp1                λ.Object
					)
					_ = τmp0
					_ = τmp1
					τmp0 = λ.Cal(λ.GetAttr(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups", nil))
					ϒlocale = λ.GetItem(τmp0, λ.NewInt(0))
					ϒvideo_id = λ.GetItem(τmp0, λ.NewInt(1))
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), λ.Mod(λ.NewStr("https://video.vice.com/%s/embed/%s"), λ.NewTuple(
						ϒlocale,
						ϒvideo_id,
					)), ϒvideo_id)
					ϒvideo = λ.GetItem(λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("PREFETCH_DATA\\s*=\\s*({.+?})\\s*;\\s*\\n"), ϒwebpage, λ.NewStr("app state")), ϒvideo_id), λ.NewStr("video"))
					ϒvideo_id = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("vms_id")); λ.IsTrue(λv) {
							return λv
						} else if λv := λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("id")); λ.IsTrue(λv) {
							return λv
						} else {
							return ϒvideo_id
						}
					}()
					ϒtitle = λ.GetItem(ϒvideo, λ.NewStr("title"))
					ϒis_locked = λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("locked"))
					ϒrating = λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("rating"))
					ϒthumbnail = λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("thumbnail_url"))
					ϒduration = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("duration")))
					ϒseries = λ.Cal(ϒtry_get, ϒvideo, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(λ.GetItem(λ.GetItem(λ.GetItem(ϒx, λ.NewStr("episode")), λ.NewStr("season")), λ.NewStr("show")), λ.NewStr("title"))
						}), ϒcompat_str)
					ϒepisode_number = λ.Cal(ϒtry_get, ϒvideo, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("episode")), λ.NewStr("episode_number"))
						}))
					ϒseason_number = λ.Cal(ϒtry_get, ϒvideo, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(λ.GetItem(λ.GetItem(ϒx, λ.NewStr("episode")), λ.NewStr("season")), λ.NewStr("season_number"))
						}))
					ϒuploader = λ.None
					ϒquery = λ.NewDictWithTable(map[λ.Object]λ.Object{})
					if λ.IsTrue(ϒis_locked) {
						ϒresource = λ.Cal(λ.GetAttr(ϒself, "_get_mvpd_resource", nil), λ.NewStr("VICELAND"), ϒtitle, ϒvideo_id, ϒrating)
						λ.SetItem(ϒquery, λ.NewStr("tvetoken"), λ.Cal(λ.GetAttr(ϒself, "_extract_mvpd_auth", nil), ϒurl, ϒvideo_id, λ.NewStr("VICELAND"), ϒresource))
					}
					ϒexp = λ.Add(λ.Cal(λ.IntType, λ.Cal(Ωtime.ϒtime)), λ.NewInt(1440))
					λ.Cal(λ.GetAttr(ϒquery, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("exp"): ϒexp,
						λ.NewStr("sign"): λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(λ.None, "sha512", nil), λ.Cal(λ.GetAttr(λ.Mod(λ.NewStr("%s:GET:%d"), λ.NewTuple(
							ϒvideo_id,
							ϒexp,
						)), "encode", nil))), "hexdigest", nil)),
						λ.NewStr("_ad_blocked"):   λ.None,
						λ.NewStr("_ad_unit"):      λ.NewStr(""),
						λ.NewStr("_debug"):        λ.NewStr(""),
						λ.NewStr("platform"):      λ.NewStr("desktop"),
						λ.NewStr("rn"):            λ.Cal(λ.None, λ.NewInt(10000), λ.NewInt(100000)),
						λ.NewStr("fbprebidtoken"): λ.NewStr(""),
					}))
					τmp0, τmp1 = func() (λexit λ.Object, λret λ.Object) {
						defer λ.CatchMulti(
							nil,
							&λ.Catcher{ExtractorError, func(λex λ.BaseException) {
								var ϒe λ.Object = λex
								if λ.IsTrue(func() λ.Object {
									if λv := λ.Cal(λ.BuiltinIsInstance, λ.GetAttr(ϒe, "cause", nil), ϒcompat_HTTPError); !λ.IsTrue(λv) {
										return λv
									} else {
										return λ.NewBool(λ.Contains(λ.NewTuple(
											λ.NewInt(400),
											λ.NewInt(401),
										), λ.GetAttr(λ.GetAttr(ϒe, "cause", nil), "code", nil)))
									}
								}()) {
									ϒerror = λ.Cal(Ωjson.ϒloads, λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(λ.GetAttr(ϒe, "cause", nil), "read", nil)), "decode", nil)))
									ϒerror_message = func() λ.Object {
										if λv := λ.Cal(λ.GetAttr(ϒerror, "get", nil), λ.NewStr("error_description")); λ.IsTrue(λv) {
											return λv
										} else {
											return λ.GetItem(ϒerror, λ.NewStr("details"))
										}
									}()
									panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.NewStr("%s said: %s"), λ.NewTuple(
										λ.GetAttr(ϒself, "IE_NAME", nil),
										ϒerror_message,
									))), λ.KWArgs{
										{Name: "expected", Value: λ.True},
									})))
								}
								panic(λ.Raise(λex))
							}},
						)
						ϒpreplay = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
							λ.Mod(λ.NewStr("https://vms.vice.com/%s/video/preplay/%s"), λ.NewTuple(
								ϒlocale,
								ϒvideo_id,
							)),
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "query", Value: ϒquery},
						})
						return λ.BlockExitNormally, nil
					}()
					ϒvideo_data = λ.GetItem(ϒpreplay, λ.NewStr("video"))
					ϒbase = λ.GetItem(ϒvideo_data, λ.NewStr("base"))
					ϒuplynk_preplay_url = λ.GetItem(ϒpreplay, λ.NewStr("preplayURL"))
					ϒepisode = λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("episode"), λ.NewDictWithTable(map[λ.Object]λ.Object{}))
					ϒchannel = λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("channel"), λ.NewDictWithTable(map[λ.Object]λ.Object{}))
					ϒsubtitles = λ.NewDictWithTable(map[λ.Object]λ.Object{})
					ϒcc_url = λ.Cal(λ.GetAttr(ϒpreplay, "get", nil), λ.NewStr("ccURL"))
					if λ.IsTrue(ϒcc_url) {
						λ.SetItem(ϒsubtitles, λ.NewStr("en"), λ.NewList(λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"): ϒcc_url,
						})))
					}
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("_type"): λ.NewStr("url_transparent"),
						λ.NewStr("url"):   ϒuplynk_preplay_url,
						λ.NewStr("id"):    ϒvideo_id,
						λ.NewStr("title"): ϒtitle,
						λ.NewStr("description"): func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒbase, "get", nil), λ.NewStr("body")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(ϒbase, "get", nil), λ.NewStr("display_body"))
							}
						}(),
						λ.NewStr("thumbnail"): ϒthumbnail,
						λ.NewStr("duration"): func() λ.Object {
							if λv := λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("video_duration"))); λ.IsTrue(λv) {
								return λv
							} else {
								return ϒduration
							}
						}(),
						λ.NewStr("timestamp"): λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("created_at")), λ.NewInt(1000)),
						λ.NewStr("age_limit"): λ.Cal(ϒparse_age_limit, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("video_rating"))),
						λ.NewStr("series"): func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("show_title")); λ.IsTrue(λv) {
								return λv
							} else {
								return ϒseries
							}
						}(),
						λ.NewStr("episode_number"): λ.Cal(ϒint_or_none, func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒepisode, "get", nil), λ.NewStr("episode_number")); λ.IsTrue(λv) {
								return λv
							} else {
								return ϒepisode_number
							}
						}()),
						λ.NewStr("episode_id"): λ.Cal(ϒstr_or_none, func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒepisode, "get", nil), λ.NewStr("id")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("episode_id"))
							}
						}()),
						λ.NewStr("season_number"): λ.Cal(ϒint_or_none, ϒseason_number),
						λ.NewStr("season_id"):     λ.Cal(ϒstr_or_none, λ.Cal(λ.GetAttr(ϒepisode, "get", nil), λ.NewStr("season_id"))),
						λ.NewStr("uploader"): func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒchannel, "get", nil), λ.NewStr("base"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("title")); λ.IsTrue(λv) {
								return λv
							} else if λv := λ.Cal(λ.GetAttr(ϒchannel, "get", nil), λ.NewStr("name")); λ.IsTrue(λv) {
								return λv
							} else {
								return ϒuploader
							}
						}(),
						λ.NewStr("uploader_id"): λ.Cal(ϒstr_or_none, λ.Cal(λ.GetAttr(ϒchannel, "get", nil), λ.NewStr("id"))),
						λ.NewStr("subtitles"):   ϒsubtitles,
						λ.NewStr("ie_key"):      λ.NewStr("UplynkPreplay"),
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):       ViceIE_IE_NAME,
				λ.NewStr("_VALID_URL"):    ViceIE__VALID_URL,
				λ.NewStr("_extract_url"):  ViceIE__extract_url,
				λ.NewStr("_extract_urls"): ViceIE__extract_urls,
				λ.NewStr("_real_extract"): ViceIE__real_extract,
			})
		}())
		ViceShowIE = λ.Cal(λ.TypeType, λ.NewStr("ViceShowIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ViceShowIE__VALID_URL λ.Object
			)
			ViceShowIE__VALID_URL = λ.NewStr("https?://(?:.+?\\.)?vice\\.com/(?:[^/]+/)?show/(?P<id>[^/?#&]+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): ViceShowIE__VALID_URL,
			})
		}())
		ViceArticleIE = λ.Cal(λ.TypeType, λ.NewStr("ViceArticleIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ViceArticleIE_IE_NAME       λ.Object
				ViceArticleIE__TESTS        λ.Object
				ViceArticleIE__VALID_URL    λ.Object
				ViceArticleIE__real_extract λ.Object
			)
			ViceArticleIE_IE_NAME = λ.NewStr("vice:article")
			ViceArticleIE__VALID_URL = λ.NewStr("https://www\\.vice\\.com/[^/]+/article/(?P<id>[^?#]+)")
			ViceArticleIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.vice.com/en_us/article/on-set-with-the-woman-making-mormon-porn-in-utah"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("41eae2a47b174a1398357cec55f1f6fc"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Mormon War on Porn "),
						λ.NewStr("description"): λ.NewStr("md5:6394a8398506581d0346b9ab89093fef"),
						λ.NewStr("uploader"):    λ.NewStr("vice"),
						λ.NewStr("uploader_id"): λ.NewStr("57a204088cb727dec794c67b"),
						λ.NewStr("timestamp"):   λ.NewInt(1491883129),
						λ.NewStr("upload_date"): λ.NewStr("20170411"),
						λ.NewStr("age_limit"):   λ.NewInt(17),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
					λ.NewStr("add_ie"): λ.NewList(λ.NewStr("UplynkPreplay")),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.vice.com/en_us/article/how-to-hack-a-car"),
					λ.NewStr("md5"): λ.NewStr("7fe8ebc4fa3323efafc127b82bd821d9"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("3jstaBeXgAs"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("How to Hack a Car: Phreaked Out (Episode 2)"),
						λ.NewStr("description"): λ.NewStr("md5:ee95453f7ff495db8efe14ae8bf56f30"),
						λ.NewStr("uploader"):    λ.NewStr("Motherboard"),
						λ.NewStr("uploader_id"): λ.NewStr("MotherboardTV"),
						λ.NewStr("upload_date"): λ.NewStr("20140529"),
					}),
					λ.NewStr("add_ie"): λ.NewList(λ.NewStr("Youtube")),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.vice.com/en_us/article/znm9dx/karley-sciortino-slutever-reloaded"),
					λ.NewStr("md5"): λ.NewStr("a7ecf64ee4fa19b916c16f4b56184ae2"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("e2ed435eb67e43efb66e6ef9a6930a88"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Making The World's First Male Sex Doll"),
						λ.NewStr("description"): λ.NewStr("md5:916078ef0e032d76343116208b6cc2c4"),
						λ.NewStr("uploader"):    λ.NewStr("vice"),
						λ.NewStr("uploader_id"): λ.NewStr("57a204088cb727dec794c67b"),
						λ.NewStr("timestamp"):   λ.NewInt(1476919911),
						λ.NewStr("upload_date"): λ.NewStr("20161019"),
						λ.NewStr("age_limit"):   λ.NewInt(17),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
					λ.NewStr("add_ie"): λ.NewList(λ.Cal(λ.GetAttr(ViceIE, "ie_key", nil))),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://www.vice.com/en_us/article/cowboy-capitalists-part-1"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://www.vice.com/ru/article/big-night-out-ibiza-clive-martin-229"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			ViceArticleIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒ_url_res      λ.Object
						ϒbody          λ.Object
						ϒdisplay_id    λ.Object
						ϒembed_code    λ.Object
						ϒprefetch_data λ.Object
						ϒself          = λargs[0]
						ϒurl           = λargs[1]
						ϒvice_url      λ.Object
						ϒvideo_url     λ.Object
						ϒwebpage       λ.Object
						ϒyoutube_url   λ.Object
					)
					ϒdisplay_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒdisplay_id)
					ϒprefetch_data = λ.GetItem(λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("__APP_STATE\\s*=\\s*({.+?})(?:\\s*\\|\\|\\s*{}\\s*)?;\\s*\\n"), ϒwebpage, λ.NewStr("app state")), ϒdisplay_id), λ.NewStr("pageData"))
					ϒbody = λ.GetItem(ϒprefetch_data, λ.NewStr("body"))
					ϒ_url_res = λ.NewFunction("_url_res",
						[]λ.Param{
							{Name: "video_url"},
							{Name: "ie_key"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒie_key    = λargs[1]
								ϒvideo_url = λargs[0]
							)
							return λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("_type"):      λ.NewStr("url_transparent"),
								λ.NewStr("url"):        ϒvideo_url,
								λ.NewStr("display_id"): ϒdisplay_id,
								λ.NewStr("ie_key"):     ϒie_key,
							})
						})
					ϒvice_url = λ.Cal(λ.GetAttr(ViceIE, "_extract_url", nil), ϒwebpage)
					if λ.IsTrue(ϒvice_url) {
						return λ.Cal(ϒ_url_res, ϒvice_url, λ.Cal(λ.GetAttr(ViceIE, "ie_key", nil)))
					}
					ϒembed_code = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("embedCode=([^&\\'\"]+)"),
						ϒbody,
						λ.NewStr("ooyala embed code"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(ϒembed_code) {
						return λ.Cal(ϒ_url_res, λ.Mod(λ.NewStr("ooyala:%s"), ϒembed_code), λ.NewStr("Ooyala"))
					}
					ϒyoutube_url = λ.Cal(λ.GetAttr(YoutubeIE, "_extract_url", nil), ϒbody)
					if λ.IsTrue(ϒyoutube_url) {
						return λ.Cal(ϒ_url_res, ϒyoutube_url, λ.Cal(λ.GetAttr(YoutubeIE, "ie_key", nil)))
					}
					ϒvideo_url = λ.Cal(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewStr("data-video-url=\"([^\"]+)\""), λ.GetItem(ϒprefetch_data, λ.NewStr("embed_code")), λ.NewStr("video URL"))
					return λ.Cal(ϒ_url_res, ϒvideo_url, λ.Cal(λ.GetAttr(ViceIE, "ie_key", nil)))
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):       ViceArticleIE_IE_NAME,
				λ.NewStr("_TESTS"):        ViceArticleIE__TESTS,
				λ.NewStr("_VALID_URL"):    ViceArticleIE__VALID_URL,
				λ.NewStr("_real_extract"): ViceArticleIE__real_extract,
			})
		}())
	})
}

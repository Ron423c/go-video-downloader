// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * limelight/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/limelight.py
 */

package limelight

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError         λ.Object
	InfoExtractor          λ.Object
	LimelightBaseIE        λ.Object
	LimelightChannelIE     λ.Object
	LimelightChannelListIE λ.Object
	LimelightMediaIE       λ.Object
	ϒdetermine_ext         λ.Object
	ϒfloat_or_none         λ.Object
	ϒint_or_none           λ.Object
	ϒsmuggle_url           λ.Object
	ϒtry_get               λ.Object
	ϒunsmuggle_url         λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒsmuggle_url = Ωutils.ϒsmuggle_url
		ϒtry_get = Ωutils.ϒtry_get
		ϒunsmuggle_url = Ωutils.ϒunsmuggle_url
		ExtractorError = Ωutils.ExtractorError
		LimelightBaseIE = λ.Cal(λ.TypeType, λ.StrLiteral("LimelightBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				LimelightBaseIE__API_URL               λ.Object
				LimelightBaseIE__PLAYLIST_SERVICE_URL  λ.Object
				LimelightBaseIE__call_api              λ.Object
				LimelightBaseIE__call_playlist_service λ.Object
				LimelightBaseIE__extract               λ.Object
				LimelightBaseIE__extract_info          λ.Object
				LimelightBaseIE__extract_info_helper   λ.Object
			)
			LimelightBaseIE__PLAYLIST_SERVICE_URL = λ.StrLiteral("http://production-ps.lvp.llnw.net/r/PlaylistService/%s/%s/%s")
			LimelightBaseIE__API_URL = λ.StrLiteral("http://api.video.limelight.com/rest/organizations/%s/%s/%s/%s.json")
			LimelightBaseIE__call_playlist_service = λ.NewFunction("_call_playlist_service",
				[]λ.Param{
					{Name: "self"},
					{Name: "item_id"},
					{Name: "method"},
					{Name: "fatal", Def: λ.True},
					{Name: "referer", Def: λ.None},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒerror   λ.Object
						ϒfatal   = λargs[3]
						ϒheaders λ.Object
						ϒitem_id = λargs[1]
						ϒmethod  = λargs[2]
						ϒreferer = λargs[4]
						ϒself    = λargs[0]
						τmp0     λ.Object
						τmp1     λ.Object
					)
					ϒheaders = λ.DictLiteral(map[λ.Object]λ.Object{})
					if λ.IsTrue(ϒreferer) {
						λ.SetItem(ϒheaders, λ.StrLiteral("Referer"), ϒreferer)
					}
					τmp0, τmp1 = func() (λexit λ.Object, λret λ.Object) {
						defer λ.CatchMulti(
							nil,
							&λ.Catcher{ExtractorError, func(λex λ.BaseException) {
								var ϒe λ.Object = λex
								if λ.IsTrue(func() λ.Object {
									if λv := λ.Cal(λ.BuiltinIsInstance, λ.GetAttr(ϒe, "cause", nil), λ.None); !λ.IsTrue(λv) {
										return λv
									} else {
										return λ.Eq(λ.GetAttr(λ.GetAttr(ϒe, "cause", nil), "code", nil), λ.IntLiteral(403))
									}
								}()) {
									ϒerror = λ.GetItem(λ.GetItem(λ.Calm(ϒself, "_parse_json", λ.Calm(λ.Calm(λ.GetAttr(ϒe, "cause", nil), "read"), "decode"), ϒitem_id), λ.StrLiteral("detail")), λ.StrLiteral("contentAccessPermission"))
									if λ.IsTrue(λ.Eq(ϒerror, λ.StrLiteral("CountryDisabled"))) {
										λ.Calm(ϒself, "raise_geo_restricted")
									}
									panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(ϒerror), λ.KWArgs{
										{Name: "expected", Value: λ.True},
									})))
								}
								panic(λ.Raise(λex))
							}},
						)
						λexit, λret = λ.BlockExitReturn, λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
							λ.Mod(λ.GetAttr(ϒself, "_PLAYLIST_SERVICE_URL", nil), λ.NewTuple(
								λ.GetAttr(ϒself, "_PLAYLIST_SERVICE_PATH", nil),
								ϒitem_id,
								ϒmethod,
							)),
							ϒitem_id,
							λ.Mod(λ.StrLiteral("Downloading PlaylistService %s JSON"), ϒmethod),
						), λ.KWArgs{
							{Name: "fatal", Value: ϒfatal},
							{Name: "headers", Value: ϒheaders},
						})
						return
						return λ.BlockExitNormally, nil
					}()
					if τmp0 == λ.BlockExitReturn {
						return τmp1
					}
					return λ.None
				})
			LimelightBaseIE__call_api = λ.NewFunction("_call_api",
				[]λ.Param{
					{Name: "self"},
					{Name: "organization_id"},
					{Name: "item_id"},
					{Name: "method"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒitem_id         = λargs[2]
						ϒmethod          = λargs[3]
						ϒorganization_id = λargs[1]
						ϒself            = λargs[0]
					)
					return λ.Calm(ϒself, "_download_json", λ.Mod(λ.GetAttr(ϒself, "_API_URL", nil), λ.NewTuple(
						ϒorganization_id,
						λ.GetAttr(ϒself, "_API_PATH", nil),
						ϒitem_id,
						ϒmethod,
					)), ϒitem_id, λ.Mod(λ.StrLiteral("Downloading API %s JSON"), ϒmethod))
				})
			LimelightBaseIE__extract = λ.NewFunction("_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "item_id"},
					{Name: "pc_method"},
					{Name: "mobile_method"},
					{Name: "meta_method"},
					{Name: "referer", Def: λ.None},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒitem_id       = λargs[1]
						ϒmeta_method   = λargs[4]
						ϒmetadata      λ.Object
						ϒmobile        λ.Object
						ϒmobile_method = λargs[3]
						ϒpc            λ.Object
						ϒpc_method     = λargs[2]
						ϒreferer       = λargs[5]
						ϒself          = λargs[0]
					)
					ϒpc = λ.Call(λ.GetAttr(ϒself, "_call_playlist_service", nil), λ.NewArgs(
						ϒitem_id,
						ϒpc_method,
					), λ.KWArgs{
						{Name: "referer", Value: ϒreferer},
					})
					ϒmetadata = λ.Calm(ϒself, "_call_api", λ.GetItem(ϒpc, λ.StrLiteral("orgId")), ϒitem_id, ϒmeta_method)
					ϒmobile = λ.Call(λ.GetAttr(ϒself, "_call_playlist_service", nil), λ.NewArgs(
						ϒitem_id,
						ϒmobile_method,
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
						{Name: "referer", Value: ϒreferer},
					})
					return λ.NewTuple(
						ϒpc,
						ϒmobile,
						ϒmetadata,
					)
				})
			LimelightBaseIE__extract_info = λ.NewFunction("_extract_info",
				[]λ.Param{
					{Name: "self"},
					{Name: "streams"},
					{Name: "mobile_urls"},
					{Name: "properties"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						CDN_HOSTS            λ.Object
						ϒcaption             λ.Object
						ϒcategories          λ.Object
						ϒcdn_host            λ.Object
						ϒclosed_captions_url λ.Object
						ϒdescription         λ.Object
						ϒduration            λ.Object
						ϒext                 λ.Object
						ϒfilesize            λ.Object
						ϒfmt                 λ.Object
						ϒformat_id           λ.Object
						ϒformats             λ.Object
						ϒheight              λ.Object
						ϒhttp_fmt            λ.Object
						ϒhttp_format_id      λ.Object
						ϒhttp_host           λ.Object
						ϒhttp_url            λ.Object
						ϒlang                λ.Object
						ϒmedia_url           λ.Object
						ϒmobile_url          λ.Object
						ϒmobile_urls         = λargs[2]
						ϒproperties          = λargs[3]
						ϒrtmp                λ.Object
						ϒself                = λargs[0]
						ϒstream              λ.Object
						ϒstream_url          λ.Object
						ϒstreams             = λargs[1]
						ϒsubtitles           λ.Object
						ϒsubtitles_url       λ.Object
						ϒtags                λ.Object
						ϒthumbnails          λ.Object
						ϒtimestamp           λ.Object
						ϒtitle               λ.Object
						ϒurls                λ.Object
						ϒvbr                 λ.Object
						ϒvideo_id            λ.Object
						ϒwidth               λ.Object
						τmp0                 λ.Object
						τmp1                 λ.Object
						τmp2                 λ.Object
						τmp3                 λ.Object
						τmp4                 λ.Object
					)
					ϒvideo_id = λ.GetItem(ϒproperties, λ.StrLiteral("media_id"))
					ϒformats = λ.NewList()
					ϒurls = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, ϒstreams)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒstream = τmp1
						ϒstream_url = λ.Calm(ϒstream, "get", λ.StrLiteral("url"))
						if λ.IsTrue(func() λ.Object {
							if λv := λ.NewBool(!λ.IsTrue(ϒstream_url)); λ.IsTrue(λv) {
								return λv
							} else if λv := λ.Calm(ϒstream, "get", λ.StrLiteral("drmProtected")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(λ.Contains(ϒurls, ϒstream_url))
							}
						}()) {
							continue
						}
						λ.Calm(ϒurls, "append", ϒstream_url)
						ϒext = λ.Cal(ϒdetermine_ext, ϒstream_url)
						if λ.IsTrue(λ.Eq(ϒext, λ.StrLiteral("f4m"))) {
							λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_f4m_formats", nil), λ.NewArgs(
								ϒstream_url,
								ϒvideo_id,
							), λ.KWArgs{
								{Name: "f4m_id", Value: λ.StrLiteral("hds")},
								{Name: "fatal", Value: λ.False},
							}))
						} else {
							ϒfmt = λ.DictLiteral(map[string]λ.Object{
								"url": ϒstream_url,
								"abr": λ.Cal(ϒfloat_or_none, λ.Calm(ϒstream, "get", λ.StrLiteral("audioBitRate"))),
								"fps": λ.Cal(ϒfloat_or_none, λ.Calm(ϒstream, "get", λ.StrLiteral("videoFrameRate"))),
								"ext": ϒext,
							})
							ϒwidth = λ.Cal(ϒint_or_none, λ.Calm(ϒstream, "get", λ.StrLiteral("videoWidthInPixels")))
							ϒheight = λ.Cal(ϒint_or_none, λ.Calm(ϒstream, "get", λ.StrLiteral("videoHeightInPixels")))
							ϒvbr = λ.Cal(ϒfloat_or_none, λ.Calm(ϒstream, "get", λ.StrLiteral("videoBitRate")))
							if λ.IsTrue(func() λ.Object {
								if λv := ϒwidth; λ.IsTrue(λv) {
									return λv
								} else if λv := ϒheight; λ.IsTrue(λv) {
									return λv
								} else {
									return ϒvbr
								}
							}()) {
								λ.Calm(ϒfmt, "update", λ.DictLiteral(map[string]λ.Object{
									"width":  ϒwidth,
									"height": ϒheight,
									"vbr":    ϒvbr,
								}))
							} else {
								λ.SetItem(ϒfmt, λ.StrLiteral("vcodec"), λ.StrLiteral("none"))
							}
							ϒrtmp = λ.Cal(Ωre.ϒsearch, λ.StrLiteral("^(?P<url>rtmpe?://(?P<host>[^/]+)/(?P<app>.+))/(?P<playpath>mp[34]:.+)$"), ϒstream_url)
							if λ.IsTrue(ϒrtmp) {
								ϒformat_id = λ.StrLiteral("rtmp")
								if λ.IsTrue(λ.Calm(ϒstream, "get", λ.StrLiteral("videoBitRate"))) {
									τmp2 = λ.IAdd(ϒformat_id, λ.Mod(λ.StrLiteral("-%d"), λ.Cal(ϒint_or_none, λ.GetItem(ϒstream, λ.StrLiteral("videoBitRate")))))
									ϒformat_id = τmp2
								}
								ϒhttp_format_id = λ.Calm(ϒformat_id, "replace", λ.StrLiteral("rtmp"), λ.StrLiteral("http"))
								CDN_HOSTS = λ.NewTuple(
									λ.NewTuple(
										λ.StrLiteral("delvenetworks.com"),
										λ.StrLiteral("cpl.delvenetworks.com"),
									),
									λ.NewTuple(
										λ.StrLiteral("video.llnw.net"),
										λ.StrLiteral("s2.content.video.llnw.net"),
									),
								)
								τmp2 = λ.Cal(λ.BuiltinIter, CDN_HOSTS)
								for {
									if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
										break
									}
									τmp4 = τmp3
									ϒcdn_host = λ.GetItem(τmp4, λ.IntLiteral(0))
									ϒhttp_host = λ.GetItem(τmp4, λ.IntLiteral(1))
									if !λ.Contains(λ.Calm(λ.Calm(ϒrtmp, "group", λ.StrLiteral("host")), "lower"), ϒcdn_host) {
										continue
									}
									ϒhttp_url = λ.Mod(λ.StrLiteral("http://%s/%s"), λ.NewTuple(
										ϒhttp_host,
										λ.GetItem(λ.Calm(ϒrtmp, "group", λ.StrLiteral("playpath")), λ.NewSlice(λ.IntLiteral(4), λ.None, λ.None)),
									))
									λ.Calm(ϒurls, "append", ϒhttp_url)
									if λ.IsTrue(λ.Calm(ϒself, "_is_valid_url", ϒhttp_url, ϒvideo_id, ϒhttp_format_id)) {
										ϒhttp_fmt = λ.Calm(ϒfmt, "copy")
										λ.Calm(ϒhttp_fmt, "update", λ.DictLiteral(map[string]λ.Object{
											"url":       ϒhttp_url,
											"format_id": ϒhttp_format_id,
										}))
										λ.Calm(ϒformats, "append", ϒhttp_fmt)
										break
									}
								}
								λ.Calm(ϒfmt, "update", λ.DictLiteral(map[string]λ.Object{
									"url":       λ.Calm(ϒrtmp, "group", λ.StrLiteral("url")),
									"play_path": λ.Calm(ϒrtmp, "group", λ.StrLiteral("playpath")),
									"app":       λ.Calm(ϒrtmp, "group", λ.StrLiteral("app")),
									"ext":       λ.StrLiteral("flv"),
									"format_id": ϒformat_id,
								}))
							}
							λ.Calm(ϒformats, "append", ϒfmt)
						}
					}
					τmp0 = λ.Cal(λ.BuiltinIter, ϒmobile_urls)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒmobile_url = τmp1
						ϒmedia_url = λ.Calm(ϒmobile_url, "get", λ.StrLiteral("mobileUrl"))
						ϒformat_id = λ.Calm(ϒmobile_url, "get", λ.StrLiteral("targetMediaPlatform"))
						if λ.IsTrue(func() λ.Object {
							if λv := λ.NewBool(!λ.IsTrue(ϒmedia_url)); λ.IsTrue(λv) {
								return λv
							} else if λv := λ.NewBool(λ.Contains(λ.NewTuple(
								λ.StrLiteral("Widevine"),
								λ.StrLiteral("SmoothStreaming"),
							), ϒformat_id)); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(λ.Contains(ϒurls, ϒmedia_url))
							}
						}()) {
							continue
						}
						λ.Calm(ϒurls, "append", ϒmedia_url)
						ϒext = λ.Cal(ϒdetermine_ext, ϒmedia_url)
						if λ.IsTrue(λ.Eq(ϒext, λ.StrLiteral("m3u8"))) {
							λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
								ϒmedia_url,
								ϒvideo_id,
								λ.StrLiteral("mp4"),
								λ.StrLiteral("m3u8_native"),
							), λ.KWArgs{
								{Name: "m3u8_id", Value: ϒformat_id},
								{Name: "fatal", Value: λ.False},
							}))
						} else {
							if λ.IsTrue(λ.Eq(ϒext, λ.StrLiteral("f4m"))) {
								λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_f4m_formats", nil), λ.NewArgs(
									ϒstream_url,
									ϒvideo_id,
								), λ.KWArgs{
									{Name: "f4m_id", Value: ϒformat_id},
									{Name: "fatal", Value: λ.False},
								}))
							} else {
								λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
									"url":        ϒmedia_url,
									"format_id":  ϒformat_id,
									"preference": λ.Neg(λ.IntLiteral(1)),
									"ext":        ϒext,
								}))
							}
						}
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					ϒtitle = λ.GetItem(ϒproperties, λ.StrLiteral("title"))
					ϒdescription = λ.Calm(ϒproperties, "get", λ.StrLiteral("description"))
					ϒtimestamp = λ.Cal(ϒint_or_none, func() λ.Object {
						if λv := λ.Calm(ϒproperties, "get", λ.StrLiteral("publish_date")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒproperties, "get", λ.StrLiteral("create_date"))
						}
					}())
					ϒduration = λ.Cal(ϒfloat_or_none, λ.Calm(ϒproperties, "get", λ.StrLiteral("duration_in_milliseconds")), λ.IntLiteral(1000))
					ϒfilesize = λ.Cal(ϒint_or_none, λ.Calm(ϒproperties, "get", λ.StrLiteral("total_storage_in_bytes")))
					ϒcategories = λ.NewList(λ.Calm(ϒproperties, "get", λ.StrLiteral("category")))
					ϒtags = λ.Calm(ϒproperties, "get", λ.StrLiteral("tags"), λ.NewList())
					ϒthumbnails = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒthumbnail λ.Object
									τmp0       λ.Object
									τmp1       λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒproperties, "get", λ.StrLiteral("thumbnails"), λ.NewList()))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒthumbnail = τmp1
									if λ.IsTrue(λ.Calm(ϒthumbnail, "get", λ.StrLiteral("url"))) {
										λgy.Yield(λ.DictLiteral(map[string]λ.Object{
											"url":    λ.GetItem(ϒthumbnail, λ.StrLiteral("url")),
											"width":  λ.Cal(ϒint_or_none, λ.Calm(ϒthumbnail, "get", λ.StrLiteral("width"))),
											"height": λ.Cal(ϒint_or_none, λ.Calm(ϒthumbnail, "get", λ.StrLiteral("height"))),
										}))
									}
								}
								return λ.None
							})
						})))
					ϒsubtitles = λ.DictLiteral(map[λ.Object]λ.Object{})
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒproperties, "get", λ.StrLiteral("captions"), λ.NewList()))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒcaption = τmp1
						ϒlang = λ.Calm(ϒcaption, "get", λ.StrLiteral("language_code"))
						ϒsubtitles_url = λ.Calm(ϒcaption, "get", λ.StrLiteral("url"))
						if λ.IsTrue(func() λ.Object {
							if λv := ϒlang; !λ.IsTrue(λv) {
								return λv
							} else {
								return ϒsubtitles_url
							}
						}()) {
							λ.Calm(λ.Calm(ϒsubtitles, "setdefault", ϒlang, λ.NewList()), "append", λ.DictLiteral(map[string]λ.Object{
								"url": ϒsubtitles_url,
							}))
						}
					}
					ϒclosed_captions_url = λ.Calm(ϒproperties, "get", λ.StrLiteral("closed_captions_url"))
					if λ.IsTrue(ϒclosed_captions_url) {
						λ.Calm(λ.Calm(ϒsubtitles, "setdefault", λ.StrLiteral("en"), λ.NewList()), "append", λ.DictLiteral(map[string]λ.Object{
							"url": ϒclosed_captions_url,
							"ext": λ.StrLiteral("ttml"),
						}))
					}
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒvideo_id,
						"title":       ϒtitle,
						"description": ϒdescription,
						"formats":     ϒformats,
						"timestamp":   ϒtimestamp,
						"duration":    ϒduration,
						"filesize":    ϒfilesize,
						"categories":  ϒcategories,
						"tags":        ϒtags,
						"thumbnails":  ϒthumbnails,
						"subtitles":   ϒsubtitles,
					})
				})
			LimelightBaseIE__extract_info_helper = λ.NewFunction("_extract_info_helper",
				[]λ.Param{
					{Name: "self"},
					{Name: "pc"},
					{Name: "mobile"},
					{Name: "i"},
					{Name: "metadata"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒi        = λargs[3]
						ϒmetadata = λargs[4]
						ϒmobile   = λargs[2]
						ϒpc       = λargs[1]
						ϒself     = λargs[0]
					)
					return λ.Calm(ϒself, "_extract_info", func() λ.Object {
						if λv := λ.Cal(ϒtry_get, ϒpc, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("playlistItems")), ϒi), λ.StrLiteral("streams"))
							}), λ.ListType); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewList()
						}
					}(), func() λ.Object {
						if λv := λ.Cal(ϒtry_get, ϒmobile, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("mediaList")), ϒi), λ.StrLiteral("mobileUrls"))
							}), λ.ListType); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewList()
						}
					}(), ϒmetadata)
				})
			return λ.DictLiteral(map[string]λ.Object{
				"_API_URL":               LimelightBaseIE__API_URL,
				"_PLAYLIST_SERVICE_URL":  LimelightBaseIE__PLAYLIST_SERVICE_URL,
				"_call_api":              LimelightBaseIE__call_api,
				"_call_playlist_service": LimelightBaseIE__call_playlist_service,
				"_extract":               LimelightBaseIE__extract,
				"_extract_info":          LimelightBaseIE__extract_info,
				"_extract_info_helper":   LimelightBaseIE__extract_info_helper,
			})
		}())
		LimelightMediaIE = λ.Cal(λ.TypeType, λ.StrLiteral("LimelightMediaIE"), λ.NewTuple(LimelightBaseIE), func() λ.Dict {
			var (
				LimelightMediaIE_IE_NAME                λ.Object
				LimelightMediaIE__API_PATH              λ.Object
				LimelightMediaIE__PLAYLIST_SERVICE_PATH λ.Object
				LimelightMediaIE__VALID_URL             λ.Object
				LimelightMediaIE__real_extract          λ.Object
			)
			LimelightMediaIE_IE_NAME = λ.StrLiteral("limelight")
			LimelightMediaIE__VALID_URL = λ.StrLiteral("(?x)\n                        (?:\n                            limelight:media:|\n                            https?://\n                                (?:\n                                    link\\.videoplatform\\.limelight\\.com/media/|\n                                    assets\\.delvenetworks\\.com/player/loader\\.swf\n                                )\n                                \\?.*?\\bmediaId=\n                        )\n                        (?P<id>[a-z0-9]{32})\n                    ")
			LimelightMediaIE__PLAYLIST_SERVICE_PATH = λ.StrLiteral("media")
			LimelightMediaIE__API_PATH = λ.StrLiteral("media")
			LimelightMediaIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒmetadata      λ.Object
						ϒmobile        λ.Object
						ϒpc            λ.Object
						ϒself          = λargs[0]
						ϒsmuggled_data λ.Object
						ϒurl           = λargs[1]
						ϒvideo_id      λ.Object
						τmp0           λ.Object
					)
					τmp0 = λ.Cal(ϒunsmuggle_url, ϒurl, λ.DictLiteral(map[λ.Object]λ.Object{}))
					ϒurl = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒsmuggled_data = λ.GetItem(τmp0, λ.IntLiteral(1))
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					λ.Calm(ϒself, "_initialize_geo_bypass", λ.DictLiteral(map[string]λ.Object{
						"countries": λ.Calm(ϒsmuggled_data, "get", λ.StrLiteral("geo_countries")),
					}))
					τmp0 = λ.Calm(ϒself, "_extract", ϒvideo_id, λ.StrLiteral("getPlaylistByMediaId"), λ.StrLiteral("getMobilePlaylistByMediaId"), λ.StrLiteral("properties"), λ.Calm(ϒsmuggled_data, "get", λ.StrLiteral("source_url")))
					ϒpc = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒmobile = λ.GetItem(τmp0, λ.IntLiteral(1))
					ϒmetadata = λ.GetItem(τmp0, λ.IntLiteral(2))
					return λ.Calm(ϒself, "_extract_info_helper", ϒpc, ϒmobile, λ.IntLiteral(0), ϒmetadata)
				})
			return λ.DictLiteral(map[string]λ.Object{
				"IE_NAME":                LimelightMediaIE_IE_NAME,
				"_API_PATH":              LimelightMediaIE__API_PATH,
				"_PLAYLIST_SERVICE_PATH": LimelightMediaIE__PLAYLIST_SERVICE_PATH,
				"_VALID_URL":             LimelightMediaIE__VALID_URL,
				"_real_extract":          LimelightMediaIE__real_extract,
			})
		}())
		LimelightChannelIE = λ.Cal(λ.TypeType, λ.StrLiteral("LimelightChannelIE"), λ.NewTuple(LimelightBaseIE), func() λ.Dict {
			var (
				LimelightChannelIE__VALID_URL λ.Object
			)
			LimelightChannelIE__VALID_URL = λ.StrLiteral("(?x)\n                        (?:\n                            limelight:channel:|\n                            https?://\n                                (?:\n                                    link\\.videoplatform\\.limelight\\.com/media/|\n                                    assets\\.delvenetworks\\.com/player/loader\\.swf\n                                )\n                                \\?.*?\\bchannelId=\n                        )\n                        (?P<id>[a-z0-9]{32})\n                    ")
			return λ.DictLiteral(map[string]λ.Object{
				"_VALID_URL": LimelightChannelIE__VALID_URL,
			})
		}())
		LimelightChannelListIE = λ.Cal(λ.TypeType, λ.StrLiteral("LimelightChannelListIE"), λ.NewTuple(LimelightBaseIE), func() λ.Dict {
			var (
				LimelightChannelListIE__VALID_URL λ.Object
			)
			LimelightChannelListIE__VALID_URL = λ.StrLiteral("(?x)\n                        (?:\n                            limelight:channel_list:|\n                            https?://\n                                (?:\n                                    link\\.videoplatform\\.limelight\\.com/media/|\n                                    assets\\.delvenetworks\\.com/player/loader\\.swf\n                                )\n                                \\?.*?\\bchannelListId=\n                        )\n                        (?P<id>[a-z0-9]{32})\n                    ")
			return λ.DictLiteral(map[string]λ.Object{
				"_VALID_URL": LimelightChannelListIE__VALID_URL,
			})
		}())
	})
}

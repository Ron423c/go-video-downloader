// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * dbtv/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/dbtv.py
 */

package dbtv

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	DBTVIE        λ.Object
	InfoExtractor λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		DBTVIE = λ.Cal(λ.TypeType, λ.NewStr("DBTVIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				DBTVIE__TESTS        λ.Object
				DBTVIE__VALID_URL    λ.Object
				DBTVIE__real_extract λ.Object
			)
			DBTVIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?dagbladet\\.no/video/(?:(?:embed|(?P<display_id>[^/]+))/)?(?P<id>[0-9A-Za-z_-]{11}|[a-zA-Z0-9]{8})")
			DBTVIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.dagbladet.no/video/PynxJnNWChE/"),
					λ.NewStr("md5"): λ.NewStr("b8f850ba1860adbda668d367f9b77699"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("PynxJnNWChE"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Skulle teste ut fornøyelsespark, men kollegaen var bare opptatt av bikinikroppen"),
						λ.NewStr("description"): λ.NewStr("md5:49cc8370e7d66e8a2ef15c3b4631fd3f"),
						λ.NewStr("thumbnail"):   λ.NewStr("re:https?://.*\\.jpg"),
						λ.NewStr("upload_date"): λ.NewStr("20160916"),
						λ.NewStr("duration"):    λ.NewInt(69),
						λ.NewStr("uploader_id"): λ.NewStr("UCk5pvsyZJoYJBd7_oFPTlRQ"),
						λ.NewStr("uploader"):    λ.NewStr("Dagbladet"),
					}),
					λ.NewStr("add_ie"): λ.NewList(λ.NewStr("Youtube")),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://www.dagbladet.no/video/embed/xlGmyIeN9Jo/?autoplay=false"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://www.dagbladet.no/video/truer-iran-bor-passe-dere/PalfB2Cw"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			DBTVIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdisplay_id λ.Object
						ϒinfo       λ.Object
						ϒself       = λargs[0]
						ϒurl        = λargs[1]
						ϒvideo_id   λ.Object
						τmp0        λ.Object
					)
					τmp0 = λ.Cal(λ.GetAttr(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups", nil))
					ϒdisplay_id = λ.GetItem(τmp0, λ.NewInt(0))
					ϒvideo_id = λ.GetItem(τmp0, λ.NewInt(1))
					ϒinfo = λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("_type"):      λ.NewStr("url_transparent"),
						λ.NewStr("id"):         ϒvideo_id,
						λ.NewStr("display_id"): ϒdisplay_id,
					})
					if λ.IsTrue(λ.Eq(λ.Cal(λ.BuiltinLen, ϒvideo_id), λ.NewInt(11))) {
						λ.Cal(λ.GetAttr(ϒinfo, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"):    ϒvideo_id,
							λ.NewStr("ie_key"): λ.NewStr("Youtube"),
						}))
					} else {
						λ.Cal(λ.GetAttr(ϒinfo, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"):    λ.Add(λ.NewStr("jwplatform:"), ϒvideo_id),
							λ.NewStr("ie_key"): λ.NewStr("JWPlatform"),
						}))
					}
					return ϒinfo
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        DBTVIE__TESTS,
				λ.NewStr("_VALID_URL"):    DBTVIE__VALID_URL,
				λ.NewStr("_real_extract"): DBTVIE__real_extract,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * washingtonpost/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/washingtonpost.py
 */

package washingtonpost

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor           λ.Object
	WashingtonPostArticleIE λ.Object
	WashingtonPostIE        λ.Object
	ϒint_or_none            λ.Object
	ϒstrip_jsonp            λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒstrip_jsonp = Ωutils.ϒstrip_jsonp
		WashingtonPostIE = λ.Cal(λ.TypeType, λ.NewStr("WashingtonPostIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				WashingtonPostIE_IE_NAME       λ.Object
				WashingtonPostIE__TEST         λ.Object
				WashingtonPostIE__VALID_URL    λ.Object
				WashingtonPostIE__real_extract λ.Object
			)
			WashingtonPostIE_IE_NAME = λ.NewStr("washingtonpost")
			WashingtonPostIE__VALID_URL = λ.NewStr("(?:washingtonpost:|https?://(?:www\\.)?washingtonpost\\.com/video/(?:[^/]+/)*)(?P<id>[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})")
			WashingtonPostIE__TEST = λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("url"): λ.NewStr("https://www.washingtonpost.com/video/c/video/480ba4ee-1ec7-11e6-82c2-a7dcb313287d"),
				λ.NewStr("md5"): λ.NewStr("6f537e1334b714eb15f9563bd4b9cdfa"),
				λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("id"):          λ.NewStr("480ba4ee-1ec7-11e6-82c2-a7dcb313287d"),
					λ.NewStr("ext"):         λ.NewStr("mp4"),
					λ.NewStr("title"):       λ.NewStr("Egypt finds belongings, debris from plane crash"),
					λ.NewStr("description"): λ.NewStr("md5:a17ceee432f215a5371388c1f680bd86"),
					λ.NewStr("upload_date"): λ.NewStr("20160520"),
					λ.NewStr("uploader"):    λ.NewStr("Reuters"),
					λ.NewStr("timestamp"):   λ.NewInt(1463778452),
				}),
			})
			WashingtonPostIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒformats          λ.Object
						ϒhas_width        λ.Object
						ϒm3u8_format      λ.Object
						ϒm3u8_formats     λ.Object
						ϒs                λ.Object
						ϒs_url            λ.Object
						ϒself             = λargs[0]
						ϒsource_media_url λ.Object
						ϒtitle            λ.Object
						ϒurl              = λargs[1]
						ϒurls             λ.Object
						ϒvbr              λ.Object
						ϒvideo_data       λ.Object
						ϒvideo_id         λ.Object
						ϒvideo_type       λ.Object
						ϒwidth            λ.Object
						τmp0              λ.Object
						τmp1              λ.Object
						τmp2              λ.Object
						τmp3              λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒvideo_data = λ.GetItem(λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Mod(λ.NewStr("http://www.washingtonpost.com/posttv/c/videojson/%s?resType=jsonp"), ϒvideo_id),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "transform_source", Value: ϒstrip_jsonp},
					}), λ.NewInt(0)), λ.NewStr("contentConfig"))
					ϒtitle = λ.GetItem(ϒvideo_data, λ.NewStr("title"))
					ϒurls = λ.NewList()
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("streams"), λ.NewList()))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒs = τmp1
						ϒs_url = λ.Cal(λ.GetAttr(ϒs, "get", nil), λ.NewStr("url"))
						if λ.IsTrue(func() λ.Object {
							if λv := λ.NewBool(!λ.IsTrue(ϒs_url)); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(λ.Contains(ϒurls, ϒs_url))
							}
						}()) {
							continue
						}
						λ.Cal(λ.GetAttr(ϒurls, "append", nil), ϒs_url)
						ϒvideo_type = λ.Cal(λ.GetAttr(ϒs, "get", nil), λ.NewStr("type"))
						if λ.IsTrue(λ.Eq(ϒvideo_type, λ.NewStr("smil"))) {
							continue
						} else {
							if λ.IsTrue(func() λ.Object {
								if λv := λ.NewBool(λ.Contains(λ.NewTuple(
									λ.NewStr("ts"),
									λ.NewStr("hls"),
								), ϒvideo_type)); !λ.IsTrue(λv) {
									return λv
								} else {
									return func() λ.Object {
										if λv := λ.NewBool(λ.Contains(ϒs_url, λ.NewStr("_master.m3u8"))); λ.IsTrue(λv) {
											return λv
										} else {
											return λ.NewBool(λ.Contains(ϒs_url, λ.NewStr("_mobile.m3u8")))
										}
									}()
								}
							}()) {
								ϒm3u8_formats = λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
									ϒs_url,
									ϒvideo_id,
									λ.NewStr("mp4"),
									λ.NewStr("m3u8_native"),
								), λ.KWArgs{
									{Name: "m3u8_id", Value: λ.NewStr("hls")},
									{Name: "fatal", Value: λ.False},
								})
								τmp2 = λ.Cal(λ.BuiltinIter, ϒm3u8_formats)
								for {
									if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
										break
									}
									ϒm3u8_format = τmp3
									ϒwidth = λ.Cal(λ.GetAttr(ϒm3u8_format, "get", nil), λ.NewStr("width"))
									if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒwidth))) {
										continue
									}
									ϒvbr = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
										λ.Mod(λ.NewStr("%d_%d_(\\d+)"), λ.NewTuple(
											ϒwidth,
											λ.GetItem(ϒm3u8_format, λ.NewStr("height")),
										)),
										λ.GetItem(ϒm3u8_format, λ.NewStr("url")),
										λ.NewStr("vbr"),
									), λ.KWArgs{
										{Name: "default", Value: λ.None},
									})
									if λ.IsTrue(ϒvbr) {
										λ.Cal(λ.GetAttr(ϒm3u8_format, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
											λ.NewStr("vbr"): λ.Cal(ϒint_or_none, ϒvbr),
										}))
									}
								}
								λ.Cal(λ.GetAttr(ϒformats, "extend", nil), ϒm3u8_formats)
							} else {
								ϒwidth = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒs, "get", nil), λ.NewStr("width")))
								ϒvbr = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒs, "get", nil), λ.NewStr("bitrate")))
								ϒhas_width = λ.Ne(ϒwidth, λ.NewInt(0))
								λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("format_id"): func() λ.Object {
										if λ.IsTrue(ϒwidth) {
											return λ.Mod(λ.NewStr("%s-%d-%d"), λ.NewTuple(
												ϒvideo_type,
												ϒwidth,
												ϒvbr,
											))
										} else {
											return ϒvideo_type
										}
									}(),
									λ.NewStr("vbr"): func() λ.Object {
										if λ.IsTrue(ϒhas_width) {
											return ϒvbr
										} else {
											return λ.None
										}
									}(),
									λ.NewStr("width"):  ϒwidth,
									λ.NewStr("height"): λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒs, "get", nil), λ.NewStr("height"))),
									λ.NewStr("acodec"): λ.Cal(λ.GetAttr(ϒs, "get", nil), λ.NewStr("audioCodec")),
									λ.NewStr("vcodec"): func() λ.Object {
										if λ.IsTrue(ϒhas_width) {
											return λ.Cal(λ.GetAttr(ϒs, "get", nil), λ.NewStr("videoCodec"))
										} else {
											return λ.NewStr("none")
										}
									}(),
									λ.NewStr("filesize"): λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒs, "get", nil), λ.NewStr("fileSize"))),
									λ.NewStr("url"):      ϒs_url,
									λ.NewStr("ext"):      λ.NewStr("mp4"),
									λ.NewStr("protocol"): func() λ.Object {
										if λ.IsTrue(λ.NewBool(λ.Contains(λ.NewTuple(
											λ.NewStr("ts"),
											λ.NewStr("hls"),
										), ϒvideo_type))) {
											return λ.NewStr("m3u8_native")
										} else {
											return λ.None
										}
									}(),
								}))
							}
						}
					}
					ϒsource_media_url = λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("sourceMediaURL"))
					if λ.IsTrue(ϒsource_media_url) {
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("format_id"): λ.NewStr("source_media"),
							λ.NewStr("url"):       ϒsource_media_url,
						}))
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats, λ.NewTuple(
						λ.NewStr("width"),
						λ.NewStr("height"),
						λ.NewStr("vbr"),
						λ.NewStr("filesize"),
						λ.NewStr("tbr"),
						λ.NewStr("format_id"),
					))
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("title"):       ϒtitle,
						λ.NewStr("description"): λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("blurb")),
						λ.NewStr("uploader"):    λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("credits"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("source")),
						λ.NewStr("formats"):     ϒformats,
						λ.NewStr("duration"):    λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("videoDuration")), λ.NewInt(100)),
						λ.NewStr("timestamp"):   λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("dateConfig"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("dateFirstPublished")), λ.NewInt(1000)),
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):       WashingtonPostIE_IE_NAME,
				λ.NewStr("_TEST"):         WashingtonPostIE__TEST,
				λ.NewStr("_VALID_URL"):    WashingtonPostIE__VALID_URL,
				λ.NewStr("_real_extract"): WashingtonPostIE__real_extract,
			})
		}())
		WashingtonPostArticleIE = λ.Cal(λ.TypeType, λ.NewStr("WashingtonPostArticleIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				WashingtonPostArticleIE__VALID_URL λ.Object
				WashingtonPostArticleIE_suitable   λ.Object
			)
			WashingtonPostArticleIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?washingtonpost\\.com/(?:[^/]+/)*(?P<id>[^/?#]+)")
			WashingtonPostArticleIE_suitable = λ.NewFunction("suitable",
				[]λ.Param{
					{Name: "cls"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls = λargs[0]
						ϒurl = λargs[1]
					)
					return func() λ.Object {
						if λ.IsTrue(λ.Cal(λ.GetAttr(WashingtonPostIE, "suitable", nil), ϒurl)) {
							return λ.False
						} else {
							return λ.Cal(λ.GetAttr(λ.Cal(λ.SuperType, WashingtonPostArticleIE, ϒcls), "suitable", nil), ϒurl)
						}
					}()
				})
			WashingtonPostArticleIE_suitable = λ.Cal(λ.ClassMethodType, WashingtonPostArticleIE_suitable)
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): WashingtonPostArticleIE__VALID_URL,
				λ.NewStr("suitable"):   WashingtonPostArticleIE_suitable,
			})
		}())
	})
}

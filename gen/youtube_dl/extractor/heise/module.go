// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * heise/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/heise.py
 */

package heise

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωkaltura "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/kaltura"
	Ωyoutube "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/youtube"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	HeiseIE        λ.Object
	InfoExtractor  λ.Object
	KalturaIE      λ.Object
	NO_DEFAULT     λ.Object
	YoutubeIE      λ.Object
	ϒdetermine_ext λ.Object
	ϒint_or_none   λ.Object
	ϒparse_iso8601 λ.Object
	ϒsmuggle_url   λ.Object
	ϒxpath_text    λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		KalturaIE = Ωkaltura.KalturaIE
		YoutubeIE = Ωyoutube.YoutubeIE
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ϒint_or_none = Ωutils.ϒint_or_none
		NO_DEFAULT = Ωutils.NO_DEFAULT
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		ϒsmuggle_url = Ωutils.ϒsmuggle_url
		ϒxpath_text = Ωutils.ϒxpath_text
		HeiseIE = λ.Cal(λ.TypeType, λ.StrLiteral("HeiseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				HeiseIE__VALID_URL    λ.Object
				HeiseIE__real_extract λ.Object
			)
			HeiseIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?heise\\.de/(?:[^/]+/)+[^/]+-(?P<id>[0-9]+)\\.html")
			HeiseIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒ_make_kaltura_result λ.Object
						ϒcontainer_id         λ.Object
						ϒdescription          λ.Object
						ϒdoc                  λ.Object
						ϒext                  λ.Object
						ϒextract_title        λ.Object
						ϒformats              λ.Object
						ϒheight               λ.Object
						ϒkaltura_id           λ.Object
						ϒkaltura_url          λ.Object
						ϒlabel                λ.Object
						ϒself                 = λargs[0]
						ϒsequenz_id           λ.Object
						ϒsource_node          λ.Object
						ϒtitle                λ.Object
						ϒurl                  = λargs[1]
						ϒvideo_id             λ.Object
						ϒvideo_url            λ.Object
						ϒwebpage              λ.Object
						ϒyt_urls              λ.Object
						τmp0                  λ.Object
						τmp1                  λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒvideo_id)
					ϒextract_title = λ.NewFunction("extract_title",
						[]λ.Param{
							{Name: "default", Def: NO_DEFAULT},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒdefault = λargs[0]
								ϒtitle   λ.Object
							)
							ϒtitle = λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
								λ.NewTuple(
									λ.StrLiteral("fulltitle"),
									λ.StrLiteral("title"),
								),
								ϒwebpage,
							), λ.KWArgs{
								{Name: "default", Value: λ.None},
							})
							if λ.IsTrue(func() λ.Object {
								if λv := λ.NewBool(!λ.IsTrue(ϒtitle)); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Eq(ϒtitle, λ.StrLiteral("c't"))
								}
							}()) {
								ϒtitle = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
									λ.StrLiteral("<div[^>]+class=\"videoplayerjw\"[^>]+data-title=\"([^\"]+)\""),
									ϒwebpage,
									λ.StrLiteral("title"),
								), λ.KWArgs{
									{Name: "default", Value: λ.None},
								})
							}
							if !λ.IsTrue(ϒtitle) {
								ϒtitle = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
									λ.StrLiteral("<h1[^>]+\\bclass=[\"\\']article_page_title[^>]+>(.+?)<"),
									ϒwebpage,
									λ.StrLiteral("title"),
								), λ.KWArgs{
									{Name: "default", Value: ϒdefault},
								})
							}
							return ϒtitle
						})
					ϒtitle = λ.Call(ϒextract_title, nil, λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					ϒdescription = func() λ.Object {
						if λv := λ.Call(λ.GetAttr(ϒself, "_og_search_description", nil), λ.NewArgs(ϒwebpage), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒself, "_html_search_meta", λ.StrLiteral("description"), ϒwebpage)
						}
					}()
					ϒ_make_kaltura_result = λ.NewFunction("_make_kaltura_result",
						[]λ.Param{
							{Name: "kaltura_url"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒkaltura_url = λargs[0]
							)
							return λ.DictLiteral(map[string]λ.Object{
								"_type": λ.StrLiteral("url_transparent"),
								"url": λ.Cal(ϒsmuggle_url, ϒkaltura_url, λ.DictLiteral(map[string]λ.Object{
									"source_url": ϒurl,
								})),
								"ie_key":      λ.Calm(KalturaIE, "ie_key"),
								"title":       ϒtitle,
								"description": ϒdescription,
							})
						})
					ϒkaltura_url = λ.Calm(KalturaIE, "_extract_url", ϒwebpage)
					if λ.IsTrue(ϒkaltura_url) {
						return λ.Cal(ϒ_make_kaltura_result, ϒkaltura_url)
					}
					ϒkaltura_id = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("entry-id=([\"\\'])(?P<id>(?:(?!\\1).)+)\\1"),
						ϒwebpage,
						λ.StrLiteral("kaltura id"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
						{Name: "group", Value: λ.StrLiteral("id")},
					})
					if λ.IsTrue(ϒkaltura_id) {
						return λ.Cal(ϒ_make_kaltura_result, λ.Mod(λ.StrLiteral("kaltura:2238431:%s"), ϒkaltura_id))
					}
					ϒyt_urls = λ.Calm(YoutubeIE, "_extract_urls", ϒwebpage)
					if λ.IsTrue(ϒyt_urls) {
						return λ.Call(λ.GetAttr(ϒself, "playlist_from_matches", nil), λ.NewArgs(
							ϒyt_urls,
							ϒvideo_id,
							ϒtitle,
						), λ.KWArgs{
							{Name: "ie", Value: λ.Calm(YoutubeIE, "ie_key")},
						})
					}
					ϒtitle = λ.Cal(ϒextract_title)
					ϒcontainer_id = λ.Calm(ϒself, "_search_regex", λ.StrLiteral("<div class=\"videoplayerjw\"[^>]+data-container=\"([0-9]+)\""), ϒwebpage, λ.StrLiteral("container ID"))
					ϒsequenz_id = λ.Calm(ϒself, "_search_regex", λ.StrLiteral("<div class=\"videoplayerjw\"[^>]+data-sequenz=\"([0-9]+)\""), ϒwebpage, λ.StrLiteral("sequenz ID"))
					ϒdoc = λ.Call(λ.GetAttr(ϒself, "_download_xml", nil), λ.NewArgs(
						λ.StrLiteral("http://www.heise.de/videout/feed"),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "query", Value: λ.DictLiteral(map[string]λ.Object{
							"container": ϒcontainer_id,
							"sequenz":   ϒsequenz_id,
						})},
					})
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒdoc, "findall", λ.StrLiteral(".//{http://rss.jwpcdn.com/}source")))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒsource_node = τmp1
						ϒlabel = λ.GetItem(λ.GetAttr(ϒsource_node, "attrib", nil), λ.StrLiteral("label"))
						ϒheight = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.StrLiteral("^(.*?_)?([0-9]+)p$"),
							ϒlabel,
							λ.StrLiteral("height"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}))
						ϒvideo_url = λ.GetItem(λ.GetAttr(ϒsource_node, "attrib", nil), λ.StrLiteral("file"))
						ϒext = λ.Cal(ϒdetermine_ext, ϒvideo_url, λ.StrLiteral(""))
						λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
							"url":         ϒvideo_url,
							"format_note": ϒlabel,
							"format_id": λ.Mod(λ.StrLiteral("%s_%s"), λ.NewTuple(
								ϒext,
								ϒlabel,
							)),
							"height": ϒheight,
						}))
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒvideo_id,
						"title":       ϒtitle,
						"description": ϒdescription,
						"thumbnail": func() λ.Object {
							if λv := λ.Cal(ϒxpath_text, ϒdoc, λ.StrLiteral(".//{http://rss.jwpcdn.com/}image")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Calm(ϒself, "_og_search_thumbnail", ϒwebpage)
							}
						}(),
						"timestamp": λ.Cal(ϒparse_iso8601, λ.Calm(ϒself, "_html_search_meta", λ.StrLiteral("date"), ϒwebpage)),
						"formats":   ϒformats,
					})
				})
			return λ.DictLiteral(map[string]λ.Object{
				"_VALID_URL":    HeiseIE__VALID_URL,
				"_real_extract": HeiseIE__real_extract,
			})
		}())
	})
}

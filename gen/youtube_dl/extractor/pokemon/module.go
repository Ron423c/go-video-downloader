// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * pokemon/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/pokemon.py
 */

package pokemon

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor       λ.Object
	PokemonIE           λ.Object
	ϒextract_attributes λ.Object
	ϒint_or_none        λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒextract_attributes = Ωutils.ϒextract_attributes
		ϒint_or_none = Ωutils.ϒint_or_none
		PokemonIE = λ.Cal(λ.TypeType, λ.NewStr("PokemonIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				PokemonIE__TESTS        λ.Object
				PokemonIE__VALID_URL    λ.Object
				PokemonIE__real_extract λ.Object
			)
			PokemonIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?pokemon\\.com/[a-z]{2}(?:.*?play=(?P<id>[a-z0-9]{32})|/(?:[^/]+/)+(?P<display_id>[^/?#&]+))")
			PokemonIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.pokemon.com/us/pokemon-episodes/20_30-the-ol-raise-and-switch/"),
					λ.NewStr("md5"): λ.NewStr("2fe8eaec69768b25ef898cda9c43062e"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("afe22e30f01c41f49d4f1d9eab5cd9a4"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("The Ol’ Raise and Switch!"),
						λ.NewStr("description"): λ.NewStr("md5:7db77f7107f98ba88401d3adc80ff7af"),
						λ.NewStr("timestamp"):   λ.NewInt(1511824728),
						λ.NewStr("upload_date"): λ.NewStr("20171127"),
					}),
					λ.NewStr("add_id"): λ.NewList(λ.NewStr("LimelightMedia")),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.pokemon.com/us/pokemon-episodes/pokemon-movies/pokemon-the-rise-of-darkrai-2008"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("99f3bae270bf4e5097274817239ce9c8"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Pokémon: The Rise of Darkrai"),
						λ.NewStr("description"): λ.NewStr("md5:ea8fbbf942e1e497d54b19025dd57d9d"),
						λ.NewStr("timestamp"):   λ.NewInt(1417778347),
						λ.NewStr("upload_date"): λ.NewStr("20141205"),
					}),
					λ.NewStr("add_id"): λ.NewList(λ.NewStr("LimelightMedia")),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://www.pokemon.com/uk/pokemon-episodes/?play=2e8b5c761f1d4a9286165d7748c1ece2"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://www.pokemon.com/fr/episodes-pokemon/18_09-un-hiver-inattendu/"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://www.pokemon.com/de/pokemon-folgen/01_20-bye-bye-smettbo/"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			PokemonIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdisplay_id λ.Object
						ϒself       = λargs[0]
						ϒtitle      λ.Object
						ϒurl        = λargs[1]
						ϒvideo_data λ.Object
						ϒvideo_id   λ.Object
						ϒwebpage    λ.Object
						τmp0        λ.Object
					)
					τmp0 = λ.Cal(λ.GetAttr(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups", nil))
					ϒvideo_id = λ.GetItem(τmp0, λ.NewInt(0))
					ϒdisplay_id = λ.GetItem(τmp0, λ.NewInt(1))
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, func() λ.Object {
						if λv := ϒvideo_id; λ.IsTrue(λv) {
							return λv
						} else {
							return ϒdisplay_id
						}
					}())
					ϒvideo_data = λ.Cal(ϒextract_attributes, λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.Mod(λ.NewStr("(<[^>]+data-video-id=\"%s\"[^>]*>)"), func() λ.Object {
						if λ.IsTrue(ϒvideo_id) {
							return ϒvideo_id
						} else {
							return λ.NewStr("[a-z0-9]{32}")
						}
					}()), ϒwebpage, λ.NewStr("video data element")))
					ϒvideo_id = λ.GetItem(ϒvideo_data, λ.NewStr("data-video-id"))
					ϒtitle = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("data-video-title")); λ.IsTrue(λv) {
							return λv
						} else if λv := λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
							λ.NewStr("pkm-title"),
							ϒwebpage,
							λ.NewStr(" title"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("<h1[^>]+\\bclass=[\"\\']us-title[^>]+>([^<]+)"), ϒwebpage, λ.NewStr("title"))
						}
					}()
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("_type"):          λ.NewStr("url_transparent"),
						λ.NewStr("id"):             ϒvideo_id,
						λ.NewStr("url"):            λ.Mod(λ.NewStr("limelight:media:%s"), ϒvideo_id),
						λ.NewStr("title"):          ϒtitle,
						λ.NewStr("description"):    λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("data-video-summary")),
						λ.NewStr("thumbnail"):      λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("data-video-poster")),
						λ.NewStr("series"):         λ.NewStr("Pokémon"),
						λ.NewStr("season_number"):  λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("data-video-season"))),
						λ.NewStr("episode"):        ϒtitle,
						λ.NewStr("episode_number"): λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("data-video-episode"))),
						λ.NewStr("ie_key"):         λ.NewStr("LimelightMedia"),
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        PokemonIE__TESTS,
				λ.NewStr("_VALID_URL"):    PokemonIE__VALID_URL,
				λ.NewStr("_real_extract"): PokemonIE__real_extract,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * viewlift/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/viewlift.py
 */

package viewlift

import (
	Ωjson "github.com/tenta-browser/go-video-downloader/gen/json"
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError    λ.Object
	InfoExtractor     λ.Object
	ViewLiftBaseIE    λ.Object
	ViewLiftEmbedIE   λ.Object
	ViewLiftIE        λ.Object
	ϒcompat_HTTPError λ.Object
	ϒint_or_none      λ.Object
	ϒparse_age_limit  λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_HTTPError = Ωcompat.ϒcompat_HTTPError
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_age_limit = Ωutils.ϒparse_age_limit
		ViewLiftBaseIE = λ.Cal(λ.TypeType, λ.StrLiteral("ViewLiftBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ViewLiftBaseIE__API_BASE      λ.Object
				ViewLiftBaseIE__DOMAINS_REGEX λ.Object
				ViewLiftBaseIE__SITE_MAP      λ.Object
				ViewLiftBaseIE__TOKENS        λ.Object
				ViewLiftBaseIE__call_api      λ.Object
			)
			ViewLiftBaseIE__API_BASE = λ.StrLiteral("https://prod-api.viewlift.com/")
			ViewLiftBaseIE__DOMAINS_REGEX = λ.StrLiteral("(?:(?:main\\.)?snagfilms|snagxtreme|funnyforfree|kiddovid|winnersview|(?:monumental|lax)sportsnetwork|vayafilm|failarmy|ftfnext|lnppass\\.legapallacanestro|moviespree|app\\.myoutdoortv|neoufitness|pflmma|theidentitytb)\\.com|(?:hoichoi|app\\.horseandcountry|kronon|marquee|supercrosslive)\\.tv")
			ViewLiftBaseIE__SITE_MAP = λ.DictLiteral(map[string]string{
				"ftfnext":                 "lax",
				"funnyforfree":            "snagfilms",
				"hoichoi":                 "hoichoitv",
				"kiddovid":                "snagfilms",
				"laxsportsnetwork":        "lax",
				"legapallacanestro":       "lnp",
				"marquee":                 "marquee-tv",
				"monumentalsportsnetwork": "monumental-network",
				"moviespree":              "bingeflix",
				"pflmma":                  "pfl",
				"snagxtreme":              "snagfilms",
				"theidentitytb":           "tampabay",
				"vayafilm":                "snagfilms",
			})
			ViewLiftBaseIE__TOKENS = λ.DictLiteral(map[λ.Object]λ.Object{})
			ViewLiftBaseIE__call_api = λ.NewFunction("_call_api",
				[]λ.Param{
					{Name: "self"},
					{Name: "site"},
					{Name: "path"},
					{Name: "video_id"},
					{Name: "query"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒemail       λ.Object
						ϒpassword    λ.Object
						ϒpath        = λargs[2]
						ϒquery       = λargs[4]
						ϒresp        λ.Object
						ϒself        = λargs[0]
						ϒsite        = λargs[1]
						ϒtoken       λ.Object
						ϒtoken_query λ.Object
						ϒvideo_id    = λargs[3]
						τmp0         λ.Object
					)
					ϒtoken = λ.Calm(λ.GetAttr(ϒself, "_TOKENS", nil), "get", ϒsite)
					if !λ.IsTrue(ϒtoken) {
						ϒtoken_query = λ.DictLiteral(map[string]λ.Object{
							"site": ϒsite,
						})
						τmp0 = λ.Call(λ.GetAttr(ϒself, "_get_login_info", nil), nil, λ.KWArgs{
							{Name: "netrc_machine", Value: ϒsite},
						})
						ϒemail = λ.GetItem(τmp0, λ.IntLiteral(0))
						ϒpassword = λ.GetItem(τmp0, λ.IntLiteral(1))
						if λ.IsTrue(ϒemail) {
							ϒresp = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
								λ.Add(λ.GetAttr(ϒself, "_API_BASE", nil), λ.StrLiteral("identity/signin")),
								ϒvideo_id,
								λ.StrLiteral("Logging in"),
							), λ.KWArgs{
								{Name: "query", Value: ϒtoken_query},
								{Name: "data", Value: λ.Calm(λ.Cal(Ωjson.ϒdumps, λ.DictLiteral(map[string]λ.Object{
									"email":    ϒemail,
									"password": ϒpassword,
								})), "encode")},
							})
						} else {
							ϒresp = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
								λ.Add(λ.GetAttr(ϒself, "_API_BASE", nil), λ.StrLiteral("identity/anonymous-token")),
								ϒvideo_id,
								λ.StrLiteral("Downloading authorization token"),
							), λ.KWArgs{
								{Name: "query", Value: ϒtoken_query},
							})
						}
						τmp0 = λ.GetItem(ϒresp, λ.StrLiteral("authorizationToken"))
						λ.SetItem(λ.GetAttr(ϒself, "_TOKENS", nil), ϒsite, τmp0)
						ϒtoken = τmp0
					}
					return λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Add(λ.GetAttr(ϒself, "_API_BASE", nil), ϒpath),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "headers", Value: λ.DictLiteral(map[string]λ.Object{
							"Authorization": ϒtoken,
						})},
						{Name: "query", Value: ϒquery},
					})
				})
			return λ.DictLiteral(map[string]λ.Object{
				"_API_BASE":      ViewLiftBaseIE__API_BASE,
				"_DOMAINS_REGEX": ViewLiftBaseIE__DOMAINS_REGEX,
				"_SITE_MAP":      ViewLiftBaseIE__SITE_MAP,
				"_TOKENS":        ViewLiftBaseIE__TOKENS,
				"_call_api":      ViewLiftBaseIE__call_api,
			})
		}())
		ViewLiftEmbedIE = λ.Cal(λ.TypeType, λ.StrLiteral("ViewLiftEmbedIE"), λ.NewTuple(ViewLiftBaseIE), func() λ.Dict {
			var (
				ViewLiftEmbedIE_IE_NAME       λ.Object
				ViewLiftEmbedIE__VALID_URL    λ.Object
				ViewLiftEmbedIE__real_extract λ.Object
			)
			ViewLiftEmbedIE_IE_NAME = λ.StrLiteral("viewlift:embed")
			ViewLiftEmbedIE__VALID_URL = λ.Mod(λ.StrLiteral("https?://(?:(?:www|embed)\\.)?(?P<domain>%s)/embed/player\\?.*\\bfilmId=(?P<id>[\\da-f]{8}-(?:[\\da-f]{4}-){3}[\\da-f]{12})"), λ.GetAttr(ViewLiftBaseIE, "_DOMAINS_REGEX", nil))
			ViewLiftEmbedIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒbitrate           λ.Object
						ϒcontent_data      λ.Object
						ϒdomain            λ.Object
						ϒerror_message     λ.Object
						ϒfilm_id           λ.Object
						ϒformats           λ.Object
						ϒgist              λ.Object
						ϒheight            λ.Object
						ϒhls_url           λ.Object
						ϒinfo              λ.Object
						ϒk                 λ.Object
						ϒmpeg_video_assets λ.Object
						ϒself              = λargs[0]
						ϒsite              λ.Object
						ϒtitle             λ.Object
						ϒurl               = λargs[1]
						ϒvideo_asset       λ.Object
						ϒvideo_asset_url   λ.Object
						ϒvideo_assets      λ.Object
						τmp0               λ.Object
						τmp1               λ.Object
					)
					τmp0 = λ.Calm(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups")
					ϒdomain = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒfilm_id = λ.GetItem(τmp0, λ.IntLiteral(1))
					ϒsite = λ.GetItem(λ.Calm(ϒdomain, "split", λ.StrLiteral(".")), λ.Neg(λ.IntLiteral(2)))
					if λ.Contains(λ.GetAttr(ϒself, "_SITE_MAP", nil), ϒsite) {
						ϒsite = λ.GetItem(λ.GetAttr(ϒself, "_SITE_MAP", nil), ϒsite)
					}
					τmp0, τmp1 = func() (λexit λ.Object, λret λ.Object) {
						defer λ.CatchMulti(
							nil,
							&λ.Catcher{ExtractorError, func(λex λ.BaseException) {
								var ϒe λ.Object = λex
								if λ.IsTrue(func() λ.Object {
									if λv := λ.Cal(λ.BuiltinIsInstance, λ.GetAttr(ϒe, "cause", nil), ϒcompat_HTTPError); !λ.IsTrue(λv) {
										return λv
									} else {
										return λ.Eq(λ.GetAttr(λ.GetAttr(ϒe, "cause", nil), "code", nil), λ.IntLiteral(403))
									}
								}()) {
									ϒerror_message = λ.Calm(λ.Calm(ϒself, "_parse_json", λ.Calm(λ.Calm(λ.GetAttr(ϒe, "cause", nil), "read"), "decode"), ϒfilm_id), "get", λ.StrLiteral("errorMessage"))
									if λ.IsTrue(λ.Eq(ϒerror_message, λ.StrLiteral("User does not have a valid subscription or has not purchased this content."))) {
										λ.Calm(ϒself, "raise_login_required")
									}
									panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(ϒerror_message), λ.KWArgs{
										{Name: "expected", Value: λ.True},
									})))
								}
								panic(λ.Raise(λex))
							}},
						)
						ϒcontent_data = λ.GetItem(λ.Calm(ϒself, "_call_api", ϒsite, λ.StrLiteral("entitlement/video/status"), ϒfilm_id, λ.DictLiteral(map[string]λ.Object{
							"id": ϒfilm_id,
						})), λ.StrLiteral("video"))
						return λ.BlockExitNormally, nil
					}()
					ϒgist = λ.GetItem(ϒcontent_data, λ.StrLiteral("gist"))
					ϒtitle = λ.GetItem(ϒgist, λ.StrLiteral("title"))
					ϒvideo_assets = λ.GetItem(λ.GetItem(ϒcontent_data, λ.StrLiteral("streamingInfo")), λ.StrLiteral("videoAssets"))
					ϒformats = λ.NewList()
					ϒmpeg_video_assets = func() λ.Object {
						if λv := λ.Calm(ϒvideo_assets, "get", λ.StrLiteral("mpeg")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewList()
						}
					}()
					τmp1 = λ.Cal(λ.BuiltinIter, ϒmpeg_video_assets)
					for {
						if τmp0 = λ.NextDefault(τmp1, λ.AfterLast); τmp0 == λ.AfterLast {
							break
						}
						ϒvideo_asset = τmp0
						ϒvideo_asset_url = λ.Calm(ϒvideo_asset, "get", λ.StrLiteral("url"))
						if !λ.IsTrue(ϒvideo_asset) {
							continue
						}
						ϒbitrate = λ.Cal(ϒint_or_none, λ.Calm(ϒvideo_asset, "get", λ.StrLiteral("bitrate")))
						ϒheight = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.StrLiteral("^_?(\\d+)[pP]$"),
							λ.Calm(ϒvideo_asset, "get", λ.StrLiteral("renditionValue")),
							λ.StrLiteral("height"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}))
						λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
							"url": ϒvideo_asset_url,
							"format_id": λ.Mod(λ.StrLiteral("http%s"), func() λ.Object {
								if λ.IsTrue(ϒbitrate) {
									return λ.Mod(λ.StrLiteral("-%d"), ϒbitrate)
								} else {
									return λ.StrLiteral("")
								}
							}()),
							"tbr":    ϒbitrate,
							"height": ϒheight,
							"vcodec": λ.Calm(ϒvideo_asset, "get", λ.StrLiteral("codec")),
						}))
					}
					ϒhls_url = λ.Calm(ϒvideo_assets, "get", λ.StrLiteral("hls"))
					if λ.IsTrue(ϒhls_url) {
						λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
							ϒhls_url,
							ϒfilm_id,
							λ.StrLiteral("mp4"),
							λ.StrLiteral("m3u8_native"),
						), λ.KWArgs{
							{Name: "m3u8_id", Value: λ.StrLiteral("hls")},
							{Name: "fatal", Value: λ.False},
						}))
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats, λ.NewTuple(
						λ.StrLiteral("height"),
						λ.StrLiteral("tbr"),
						λ.StrLiteral("format_id"),
					))
					ϒinfo = λ.DictLiteral(map[string]λ.Object{
						"id":          ϒfilm_id,
						"title":       ϒtitle,
						"description": λ.Calm(ϒgist, "get", λ.StrLiteral("description")),
						"thumbnail":   λ.Calm(ϒgist, "get", λ.StrLiteral("videoImageUrl")),
						"duration":    λ.Cal(ϒint_or_none, λ.Calm(ϒgist, "get", λ.StrLiteral("runtime"))),
						"age_limit":   λ.Cal(ϒparse_age_limit, λ.Calm(ϒcontent_data, "get", λ.StrLiteral("parentalRating"))),
						"timestamp":   λ.Cal(ϒint_or_none, λ.Calm(ϒgist, "get", λ.StrLiteral("publishDate")), λ.IntLiteral(1000)),
						"formats":     ϒformats,
					})
					τmp1 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
						λ.StrLiteral("categories"),
						λ.StrLiteral("tags"),
					))
					for {
						if τmp0 = λ.NextDefault(τmp1, λ.AfterLast); τmp0 == λ.AfterLast {
							break
						}
						ϒk = τmp0
						λ.SetItem(ϒinfo, ϒk, λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
							nil,
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
									var (
										ϒv   λ.Object
										τmp0 λ.Object
										τmp1 λ.Object
									)
									τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒcontent_data, "get", ϒk, λ.NewList()))
									for {
										if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
											break
										}
										ϒv = τmp1
										if λ.IsTrue(λ.Calm(ϒv, "get", λ.StrLiteral("title"))) {
											λgy.Yield(λ.GetItem(ϒv, λ.StrLiteral("title")))
										}
									}
									return λ.None
								})
							}))))
					}
					return ϒinfo
				})
			return λ.DictLiteral(map[string]λ.Object{
				"IE_NAME":       ViewLiftEmbedIE_IE_NAME,
				"_VALID_URL":    ViewLiftEmbedIE__VALID_URL,
				"_real_extract": ViewLiftEmbedIE__real_extract,
			})
		}())
		ViewLiftIE = λ.Cal(λ.TypeType, λ.StrLiteral("ViewLiftIE"), λ.NewTuple(ViewLiftBaseIE), func() λ.Dict {
			var (
				ViewLiftIE_IE_NAME       λ.Object
				ViewLiftIE__VALID_URL    λ.Object
				ViewLiftIE__real_extract λ.Object
				ViewLiftIE_suitable      λ.Object
			)
			ViewLiftIE_IE_NAME = λ.StrLiteral("viewlift")
			ViewLiftIE__VALID_URL = λ.Mod(λ.StrLiteral("https?://(?:www\\.)?(?P<domain>%s)(?P<path>(?:/(?:films/title|show|(?:news/)?videos?|watch))?/(?P<id>[^?#]+))"), λ.GetAttr(ViewLiftBaseIE, "_DOMAINS_REGEX", nil))
			ViewLiftIE_suitable = λ.NewFunction("suitable",
				[]λ.Param{
					{Name: "cls"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls = λargs[0]
						ϒurl = λargs[1]
					)
					return func() λ.Object {
						if λ.IsTrue(λ.Calm(ViewLiftEmbedIE, "suitable", ϒurl)) {
							return λ.False
						} else {
							return λ.Calm(λ.Cal(λ.SuperType, ViewLiftIE, ϒcls), "suitable", ϒurl)
						}
					}()
				})
			ViewLiftIE_suitable = λ.Cal(λ.ClassMethodType, ViewLiftIE_suitable)
			ViewLiftIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdisplay_id λ.Object
						ϒdomain     λ.Object
						ϒfilm_id    λ.Object
						ϒmodules    λ.Object
						ϒpath       λ.Object
						ϒself       = λargs[0]
						ϒsite       λ.Object
						ϒurl        = λargs[1]
						τmp0        λ.Object
					)
					τmp0 = λ.Calm(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups")
					ϒdomain = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒpath = λ.GetItem(τmp0, λ.IntLiteral(1))
					ϒdisplay_id = λ.GetItem(τmp0, λ.IntLiteral(2))
					ϒsite = λ.GetItem(λ.Calm(ϒdomain, "split", λ.StrLiteral(".")), λ.Neg(λ.IntLiteral(2)))
					if λ.Contains(λ.GetAttr(ϒself, "_SITE_MAP", nil), ϒsite) {
						ϒsite = λ.GetItem(λ.GetAttr(ϒself, "_SITE_MAP", nil), ϒsite)
					}
					ϒmodules = λ.GetItem(λ.Calm(ϒself, "_call_api", ϒsite, λ.StrLiteral("content/pages"), ϒdisplay_id, λ.DictLiteral(map[string]λ.Object{
						"includeContent": λ.StrLiteral("true"),
						"moduleOffset":   λ.IntLiteral(1),
						"path":           ϒpath,
						"site":           ϒsite,
					})), λ.StrLiteral("modules"))
					ϒfilm_id = λ.Cal(λ.BuiltinNext, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒm   λ.Object
									τmp0 λ.Object
									τmp1 λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, ϒmodules)
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒm = τmp1
									if λ.IsTrue(λ.Eq(λ.Calm(ϒm, "get", λ.StrLiteral("moduleType")), λ.StrLiteral("VideoDetailModule"))) {
										λgy.Yield(λ.GetItem(λ.GetItem(λ.GetItem(λ.GetItem(ϒm, λ.StrLiteral("contentData")), λ.IntLiteral(0)), λ.StrLiteral("gist")), λ.StrLiteral("id")))
									}
								}
								return λ.None
							})
						})))
					return λ.DictLiteral(map[string]λ.Object{
						"_type": λ.StrLiteral("url_transparent"),
						"url": λ.Mod(λ.StrLiteral("http://%s/embed/player?filmId=%s"), λ.NewTuple(
							ϒdomain,
							ϒfilm_id,
						)),
						"id":         ϒfilm_id,
						"display_id": ϒdisplay_id,
						"ie_key":     λ.StrLiteral("ViewLiftEmbed"),
					})
				})
			return λ.DictLiteral(map[string]λ.Object{
				"IE_NAME":       ViewLiftIE_IE_NAME,
				"_VALID_URL":    ViewLiftIE__VALID_URL,
				"_real_extract": ViewLiftIE__real_extract,
				"suitable":      ViewLiftIE_suitable,
			})
		}())
	})
}

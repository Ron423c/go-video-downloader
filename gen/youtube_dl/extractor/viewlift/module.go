// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * viewlift/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/viewlift.py
 */

package viewlift

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError               λ.Object
	InfoExtractor                λ.Object
	ViewLiftBaseIE               λ.Object
	ViewLiftEmbedIE              λ.Object
	ViewLiftIE                   λ.Object
	ϒclean_html                  λ.Object
	ϒcompat_urllib_parse_unquote λ.Object
	ϒdetermine_ext               λ.Object
	ϒint_or_none                 λ.Object
	ϒjs_to_json                  λ.Object
	ϒparse_age_limit             λ.Object
	ϒparse_duration              λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_urllib_parse_unquote = Ωcompat.ϒcompat_urllib_parse_unquote
		ExtractorError = Ωutils.ExtractorError
		ϒclean_html = Ωutils.ϒclean_html
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒjs_to_json = Ωutils.ϒjs_to_json
		ϒparse_age_limit = Ωutils.ϒparse_age_limit
		ϒparse_duration = Ωutils.ϒparse_duration
		ViewLiftBaseIE = λ.Cal(λ.TypeType, λ.NewStr("ViewLiftBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ViewLiftBaseIE__DOMAINS_REGEX λ.Object
			)
			ViewLiftBaseIE__DOMAINS_REGEX = λ.NewStr("(?:snagfilms|snagxtreme|funnyforfree|kiddovid|winnersview|(?:monumental|lax)sportsnetwork|vayafilm)\\.com|hoichoi\\.tv")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_DOMAINS_REGEX"): ViewLiftBaseIE__DOMAINS_REGEX,
			})
		}())
		ViewLiftEmbedIE = λ.Cal(λ.TypeType, λ.NewStr("ViewLiftEmbedIE"), λ.NewTuple(ViewLiftBaseIE), func() λ.Dict {
			var (
				ViewLiftEmbedIE__VALID_URL λ.Object
			)
			ViewLiftEmbedIE__VALID_URL = λ.Mod(λ.NewStr("https?://(?:(?:www|embed)\\.)?(?:%s)/embed/player\\?.*\\bfilmId=(?P<id>[\\da-f]{8}-(?:[\\da-f]{4}-){3}[\\da-f]{12})"), λ.GetAttr(ViewLiftBaseIE, "_DOMAINS_REGEX", nil))
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): ViewLiftEmbedIE__VALID_URL,
			})
		}())
		ViewLiftIE = λ.Cal(λ.TypeType, λ.NewStr("ViewLiftIE"), λ.NewTuple(ViewLiftBaseIE), func() λ.Dict {
			var (
				ViewLiftIE__VALID_URL λ.Object
			)
			ViewLiftIE__VALID_URL = λ.Mod(λ.NewStr("https?://(?:www\\.)?(?P<domain>%s)/(?:films/title|show|(?:news/)?videos?)/(?P<id>[^?#]+)"), λ.GetAttr(ViewLiftBaseIE, "_DOMAINS_REGEX", nil))
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): ViewLiftIE__VALID_URL,
			})
		}())
	})
}

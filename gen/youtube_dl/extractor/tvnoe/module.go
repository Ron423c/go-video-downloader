// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * tvnoe/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/tvnoe.py
 */

package tvnoe

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor         λ.Object
	TVNoeIE               λ.Object
	ϒclean_html           λ.Object
	ϒget_element_by_class λ.Object
	ϒjs_to_json           λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒclean_html = Ωutils.ϒclean_html
		ϒget_element_by_class = Ωutils.ϒget_element_by_class
		ϒjs_to_json = Ωutils.ϒjs_to_json
		TVNoeIE = λ.Cal(λ.TypeType, λ.NewStr("TVNoeIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				TVNoeIE__TEST         λ.Object
				TVNoeIE__VALID_URL    λ.Object
				TVNoeIE__real_extract λ.Object
			)
			TVNoeIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?tvnoe\\.cz/video/(?P<id>[0-9]+)")
			TVNoeIE__TEST = λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("url"): λ.NewStr("http://www.tvnoe.cz/video/10362"),
				λ.NewStr("md5"): λ.NewStr("aee983f279aab96ec45ab6e2abb3c2ca"),
				λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("id"):          λ.NewStr("10362"),
					λ.NewStr("ext"):         λ.NewStr("mp4"),
					λ.NewStr("series"):      λ.NewStr("Noční univerzita"),
					λ.NewStr("title"):       λ.NewStr("prof. Tomáš Halík, Th.D. - Návrat náboženství a střet civilizací"),
					λ.NewStr("description"): λ.NewStr("md5:f337bae384e1a531a52c55ebc50fff41"),
				}),
			})
			TVNoeIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒiframe_url    λ.Object
						ϒifs_page      λ.Object
						ϒinfo_dict     λ.Object
						ϒjwplayer_data λ.Object
						ϒself          = λargs[0]
						ϒurl           = λargs[1]
						ϒvideo_id      λ.Object
						ϒwebpage       λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					ϒiframe_url = λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("<iframe[^>]+src=\"([^\"]+)\""), ϒwebpage, λ.NewStr("iframe URL"))
					ϒifs_page = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒiframe_url, ϒvideo_id)
					ϒjwplayer_data = λ.Call(λ.GetAttr(ϒself, "_find_jwplayer_data", nil), λ.NewArgs(
						ϒifs_page,
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "transform_source", Value: ϒjs_to_json},
					})
					ϒinfo_dict = λ.Call(λ.GetAttr(ϒself, "_parse_jwplayer_data", nil), λ.NewArgs(
						ϒjwplayer_data,
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "require_title", Value: λ.False},
						{Name: "base_url", Value: ϒiframe_url},
					})
					λ.Cal(λ.GetAttr(ϒinfo_dict, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("title"):       λ.Cal(ϒclean_html, λ.Cal(ϒget_element_by_class, λ.NewStr("field-name-field-podnazev"), ϒwebpage)),
						λ.NewStr("description"): λ.Cal(ϒclean_html, λ.Cal(ϒget_element_by_class, λ.NewStr("field-name-body"), ϒwebpage)),
						λ.NewStr("series"):      λ.Cal(ϒclean_html, λ.Cal(ϒget_element_by_class, λ.NewStr("title"), ϒwebpage)),
					}))
					return ϒinfo_dict
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TEST"):         TVNoeIE__TEST,
				λ.NewStr("_VALID_URL"):    TVNoeIE__VALID_URL,
				λ.NewStr("_real_extract"): TVNoeIE__real_extract,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * vk/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/vk.py
 */

package vk

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωsys "github.com/tenta-browser/go-video-downloader/gen/sys"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωdailymotion "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/dailymotion"
	Ωpladform "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/pladform"
	Ωvimeo "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/vimeo"
	Ωyoutube "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/youtube"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	DailymotionIE         λ.Object
	ExtractorError        λ.Object
	InfoExtractor         λ.Object
	PladformIE            λ.Object
	VKBaseIE              λ.Object
	VKIE                  λ.Object
	VKUserVideosIE        λ.Object
	VKWallPostIE          λ.Object
	VimeoIE               λ.Object
	YoutubeIE             λ.Object
	ϒclean_html           λ.Object
	ϒcompat_str           λ.Object
	ϒget_element_by_class λ.Object
	ϒint_or_none          λ.Object
	ϒorderedSet           λ.Object
	ϒremove_start         λ.Object
	ϒstr_or_none          λ.Object
	ϒstr_to_int           λ.Object
	ϒunescapeHTML         λ.Object
	ϒunified_timestamp    λ.Object
	ϒurl_or_none          λ.Object
	ϒurlencode_postdata   λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒclean_html = Ωutils.ϒclean_html
		ExtractorError = Ωutils.ExtractorError
		ϒget_element_by_class = Ωutils.ϒget_element_by_class
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒorderedSet = Ωutils.ϒorderedSet
		ϒremove_start = Ωutils.ϒremove_start
		ϒstr_or_none = Ωutils.ϒstr_or_none
		ϒstr_to_int = Ωutils.ϒstr_to_int
		ϒunescapeHTML = Ωutils.ϒunescapeHTML
		ϒunified_timestamp = Ωutils.ϒunified_timestamp
		ϒurl_or_none = Ωutils.ϒurl_or_none
		ϒurlencode_postdata = Ωutils.ϒurlencode_postdata
		DailymotionIE = Ωdailymotion.DailymotionIE
		PladformIE = Ωpladform.PladformIE
		VimeoIE = Ωvimeo.VimeoIE
		YoutubeIE = Ωyoutube.YoutubeIE
		VKBaseIE = λ.Cal(λ.TypeType, λ.NewStr("VKBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				VKBaseIE__NETRC_MACHINE   λ.Object
				VKBaseIE__login           λ.Object
				VKBaseIE__real_initialize λ.Object
			)
			VKBaseIE__NETRC_MACHINE = λ.NewStr("vk")
			VKBaseIE__login = λ.NewFunction("_login",
				[]λ.Param{
					{Name: "self"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcookies    λ.Object
						ϒdomain     λ.Object
						ϒheader     λ.Object
						ϒlogin_form λ.Object
						ϒlogin_page λ.Object
						ϒpassword   λ.Object
						ϒremixlhk   λ.Object
						ϒself       = λargs[0]
						ϒurl_handle λ.Object
						ϒusername   λ.Object
						ϒvalue      λ.Object
						τmp0        λ.Object
						τmp1        λ.Object
						τmp2        λ.Object
					)
					τmp0 = λ.Cal(λ.GetAttr(ϒself, "_get_login_info", nil))
					ϒusername = λ.GetItem(τmp0, λ.NewInt(0))
					ϒpassword = λ.GetItem(τmp0, λ.NewInt(1))
					if λ.IsTrue(λ.NewBool(ϒusername == λ.None)) {
						return λ.None
					}
					τmp0 = λ.Cal(λ.GetAttr(ϒself, "_download_webpage_handle", nil), λ.NewStr("https://vk.com"), λ.None, λ.NewStr("Downloading login page"))
					ϒlogin_page = λ.GetItem(τmp0, λ.NewInt(0))
					ϒurl_handle = λ.GetItem(τmp0, λ.NewInt(1))
					ϒlogin_form = λ.Cal(λ.GetAttr(ϒself, "_hidden_inputs", nil), ϒlogin_page)
					λ.Cal(λ.GetAttr(ϒlogin_form, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("email"): λ.Cal(λ.GetAttr(ϒusername, "encode", nil), λ.NewStr("cp1251")),
						λ.NewStr("pass"):  λ.Cal(λ.GetAttr(ϒpassword, "encode", nil), λ.NewStr("cp1251")),
					}))
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(λ.GetAttr(ϒurl_handle, "headers", nil), "items", nil)))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒheader = λ.GetItem(τmp2, λ.NewInt(0))
						ϒcookies = λ.GetItem(τmp2, λ.NewInt(1))
						if λ.IsTrue(λ.Ne(λ.Cal(λ.GetAttr(ϒheader, "lower", nil)), λ.NewStr("set-cookie"))) {
							continue
						}
						if λ.IsTrue(λ.Ge(λ.GetItem(Ωsys.ϒversion_info, λ.NewInt(0)), λ.NewInt(3))) {
							ϒcookies = λ.Cal(λ.GetAttr(ϒcookies, "encode", nil), λ.NewStr("iso-8859-1"))
						}
						ϒcookies = λ.Cal(λ.GetAttr(ϒcookies, "decode", nil), λ.NewStr("utf-8"))
						ϒremixlhk = λ.Cal(Ωre.ϒsearch, λ.NewStr("remixlhk=(.+?);.*?\\bdomain=(.+?)(?:[,;]|$)"), ϒcookies)
						if λ.IsTrue(ϒremixlhk) {
							τmp2 = λ.Cal(λ.GetAttr(ϒremixlhk, "groups", nil))
							ϒvalue = λ.GetItem(τmp2, λ.NewInt(0))
							ϒdomain = λ.GetItem(τmp2, λ.NewInt(1))
							λ.Cal(λ.GetAttr(ϒself, "_set_cookie", nil), ϒdomain, λ.NewStr("remixlhk"), ϒvalue)
							break
						}
					}
					ϒlogin_page = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
						λ.NewStr("https://login.vk.com/?act=login"),
						λ.None,
					), λ.KWArgs{
						{Name: "note", Value: λ.NewStr("Logging in")},
						{Name: "data", Value: λ.Cal(ϒurlencode_postdata, ϒlogin_form)},
					})
					if λ.IsTrue(λ.Cal(Ωre.ϒsearch, λ.NewStr("onLoginFailed"), ϒlogin_page)) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.NewStr("Unable to login, incorrect username and/or password")), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					return λ.None
				})
			VKBaseIE__real_initialize = λ.NewFunction("_real_initialize",
				[]λ.Param{
					{Name: "self"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒself = λargs[0]
					)
					λ.Cal(λ.GetAttr(ϒself, "_login", nil))
					return λ.None
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_NETRC_MACHINE"):   VKBaseIE__NETRC_MACHINE,
				λ.NewStr("_login"):           VKBaseIE__login,
				λ.NewStr("_real_initialize"): VKBaseIE__real_initialize,
			})
		}())
		VKIE = λ.Cal(λ.TypeType, λ.NewStr("VKIE"), λ.NewTuple(VKBaseIE), func() λ.Dict {
			var (
				VKIE_IE_NAME       λ.Object
				VKIE__TESTS        λ.Object
				VKIE__VALID_URL    λ.Object
				VKIE__real_extract λ.Object
			)
			VKIE_IE_NAME = λ.NewStr("vk")
			VKIE__VALID_URL = λ.NewStr("(?x)\n                    https?://\n                        (?:\n                            (?:\n                                (?:(?:m|new)\\.)?vk\\.com/video_|\n                                (?:www\\.)?daxab.com/\n                            )\n                            ext\\.php\\?(?P<embed_query>.*?\\boid=(?P<oid>-?\\d+).*?\\bid=(?P<id>\\d+).*)|\n                            (?:\n                                (?:(?:m|new)\\.)?vk\\.com/(?:.+?\\?.*?z=)?video|\n                                (?:www\\.)?daxab.com/embed/\n                            )\n                            (?P<videoid>-?\\d+_\\d+)(?:.*\\blist=(?P<list_id>[\\da-f]+))?\n                        )\n                    ")
			VKIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://vk.com/videos-77521?z=video-77521_162222515%2Fclub77521"),
					λ.NewStr("md5"): λ.NewStr("7babad3b85ea2e91948005b1b8b0cb84"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("162222515"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("ProtivoGunz - Хуёвая песня"),
						λ.NewStr("uploader"):    λ.NewStr("re:(?:Noize MC|Alexander Ilyashenko).*"),
						λ.NewStr("uploader_id"): λ.NewStr("-77521"),
						λ.NewStr("duration"):    λ.NewInt(195),
						λ.NewStr("timestamp"):   λ.NewInt(1329049880),
						λ.NewStr("upload_date"): λ.NewStr("20120212"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://vk.com/video205387401_165548505"),
					λ.NewStr("md5"): λ.NewStr("6c0aeb2e90396ba97035b9cbde548700"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("165548505"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("No name"),
						λ.NewStr("uploader"):    λ.NewStr("Tom Cruise"),
						λ.NewStr("uploader_id"): λ.NewStr("205387401"),
						λ.NewStr("duration"):    λ.NewInt(9),
						λ.NewStr("timestamp"):   λ.NewInt(1374364108),
						λ.NewStr("upload_date"): λ.NewStr("20130720"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("note"): λ.NewStr("Embedded video"),
					λ.NewStr("url"):  λ.NewStr("http://vk.com/video_ext.php?oid=32194266&id=162925554&hash=7d8c2e0d5e05aeaa&hd=1"),
					λ.NewStr("md5"):  λ.NewStr("c7ce8f1f87bec05b3de07fdeafe21a0a"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("162925554"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("uploader"):    λ.NewStr("Vladimir Gavrin"),
						λ.NewStr("title"):       λ.NewStr("Lin Dan"),
						λ.NewStr("duration"):    λ.NewInt(101),
						λ.NewStr("upload_date"): λ.NewStr("20120730"),
						λ.NewStr("view_count"):  λ.IntType,
					}),
					λ.NewStr("skip"): λ.NewStr("This video has been removed from public access."),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):  λ.NewStr("http://vk.com/video-8871596_164049491"),
					λ.NewStr("md5"):  λ.NewStr("a590bcaf3d543576c9bd162812387666"),
					λ.NewStr("note"): λ.NewStr("Only available for registered users"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("164049491"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("uploader"):    λ.NewStr("Триллеры"),
						λ.NewStr("title"):       λ.NewStr("► Бойцовский клуб / Fight Club 1999 [HD 720]"),
						λ.NewStr("duration"):    λ.NewInt(8352),
						λ.NewStr("upload_date"): λ.NewStr("20121218"),
						λ.NewStr("view_count"):  λ.IntType,
					}),
					λ.NewStr("skip"): λ.NewStr("Requires vk account credentials"),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://vk.com/hd_kino_mania?z=video-43215063_168067957%2F15c66b9b533119788d"),
					λ.NewStr("md5"): λ.NewStr("4d7a5ef8cf114dfa09577e57b2993202"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("168067957"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("uploader"):    λ.NewStr("Киномания - лучшее из мира кино"),
						λ.NewStr("title"):       λ.NewStr(" "),
						λ.NewStr("duration"):    λ.NewInt(7291),
						λ.NewStr("upload_date"): λ.NewStr("20140328"),
					}),
					λ.NewStr("skip"): λ.NewStr("Requires vk account credentials"),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):  λ.NewStr("http://m.vk.com/video-43215063_169084319?list=125c627d1aa1cebb83&from=wall-43215063_2566540"),
					λ.NewStr("md5"):  λ.NewStr("0c45586baa71b7cb1d0784ee3f4e00a6"),
					λ.NewStr("note"): λ.NewStr("ivi.ru embed"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("60690"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Книга Илая"),
						λ.NewStr("duration"):    λ.NewInt(6771),
						λ.NewStr("upload_date"): λ.NewStr("20140626"),
						λ.NewStr("view_count"):  λ.IntType,
					}),
					λ.NewStr("skip"): λ.NewStr("Only works from Russia"),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://vk.com/video30481095_171201961?list=8764ae2d21f14088d4"),
					λ.NewStr("md5"): λ.NewStr("091287af5402239a1051c37ec7b92913"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("171201961"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("ТюменцевВВ_09.07.2015"),
						λ.NewStr("uploader"):    λ.NewStr("Anton Ivanov"),
						λ.NewStr("duration"):    λ.NewInt(109),
						λ.NewStr("upload_date"): λ.NewStr("20150709"),
						λ.NewStr("view_count"):  λ.IntType,
					}),
					λ.NewStr("skip"): λ.NewStr("Removed"),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://vk.com/video276849682_170681728"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("V3K4mi0SYkc"),
						λ.NewStr("ext"):         λ.NewStr("webm"),
						λ.NewStr("title"):       λ.NewStr("DSWD Awards 'Children's Joy Foundation, Inc.' Certificate of Registration and License to Operate"),
						λ.NewStr("description"): λ.NewStr("md5:bf9c26cfa4acdfb146362682edd3827a"),
						λ.NewStr("duration"):    λ.NewInt(179),
						λ.NewStr("upload_date"): λ.NewStr("20130116"),
						λ.NewStr("uploader"):    λ.NewStr("Children's Joy Foundation Inc."),
						λ.NewStr("uploader_id"): λ.NewStr("thecjf"),
						λ.NewStr("view_count"):  λ.IntType,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://vk.com/video-37468416_456239855"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("k3lz2cmXyRuJQSjGHUv"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("md5:d52606645c20b0ddbb21655adaa4f56f"),
						λ.NewStr("description"): λ.NewStr("md5:c651358f03c56f1150b555c26d90a0fd"),
						λ.NewStr("uploader"):    λ.NewStr("AniLibria.Tv"),
						λ.NewStr("upload_date"): λ.NewStr("20160914"),
						λ.NewStr("uploader_id"): λ.NewStr("x1p5vl5"),
						λ.NewStr("timestamp"):   λ.NewInt(1473877246),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://vk.com/video-110305615_171782105"),
					λ.NewStr("md5"): λ.NewStr("e13fcda136f99764872e739d13fac1d1"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("171782105"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("S-Dance, репетиции к The way show"),
						λ.NewStr("uploader"):    λ.NewStr("THE WAY SHOW | 17 апреля"),
						λ.NewStr("uploader_id"): λ.NewStr("-110305615"),
						λ.NewStr("timestamp"):   λ.NewInt(1454859345),
						λ.NewStr("upload_date"): λ.NewStr("20160207"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://vk.com/videos-387766?z=video-387766_456242764%2Fpl_-387766_-2"),
					λ.NewStr("md5"): λ.NewStr("90d22d051fccbbe9becfccc615be6791"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):         λ.NewStr("456242764"),
						λ.NewStr("ext"):        λ.NewStr("mp4"),
						λ.NewStr("title"):      λ.NewStr("ИгроМир 2016 — день 1"),
						λ.NewStr("uploader"):   λ.NewStr("Игромания"),
						λ.NewStr("duration"):   λ.NewInt(5239),
						λ.NewStr("view_count"): λ.IntType,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://vk.com/video-140332_456239111"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://vk.com/feed?z=video-43215063_166094326%2Fbb50cacd3177146d7a"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://vk.com/video205387401_164765225"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://vk.com/video-76116461_171554880"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://new.vk.com/video205387401_165548505"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://vk.com/video-10639516_456240611"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://vk.com/video-51812607_171445436"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			VKIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ERRORS            λ.Object
						ERROR_COPYRIGHT   λ.Object
						ϒdailymotion_urls λ.Object
						ϒdata             λ.Object
						ϒerror_message    λ.Object
						ϒerror_msg        λ.Object
						ϒerror_re         λ.Object
						ϒformat_id        λ.Object
						ϒformat_url       λ.Object
						ϒformats          λ.Object
						ϒheight           λ.Object
						ϒinfo_page        λ.Object
						ϒinfo_url         λ.Object
						ϒis_live          λ.Object
						ϒlist_id          λ.Object
						ϒm_opts           λ.Object
						ϒm_opts_url       λ.Object
						ϒm_rutube         λ.Object
						ϒmobj             λ.Object
						ϒopts_url         λ.Object
						ϒpladform_url     λ.Object
						ϒrutube_url       λ.Object
						ϒself             = λargs[0]
						ϒtimestamp        λ.Object
						ϒtitle            λ.Object
						ϒurl              = λargs[1]
						ϒvideo_id         λ.Object
						ϒview_count       λ.Object
						ϒvimeo_url        λ.Object
						ϒyoutube_url      λ.Object
						τmp0              λ.Object
						τmp1              λ.Object
						τmp2              λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("videoid"))
					if λ.IsTrue(ϒvideo_id) {
						ϒinfo_url = λ.Add(λ.NewStr("https://vk.com/al_video.php?act=show_inline&al=1&video="), ϒvideo_id)
						ϒlist_id = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("list_id"))
						if λ.IsTrue(ϒlist_id) {
							τmp0 = λ.IAdd(ϒinfo_url, λ.Mod(λ.NewStr("&list=%s"), ϒlist_id))
							ϒinfo_url = τmp0
						}
					} else {
						ϒinfo_url = λ.Add(λ.NewStr("http://vk.com/video_ext.php?"), λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("embed_query")))
						ϒvideo_id = λ.Mod(λ.NewStr("%s_%s"), λ.NewTuple(
							λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("oid")),
							λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("id")),
						))
					}
					ϒinfo_page = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒinfo_url, ϒvideo_id)
					ϒerror_message = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
						λ.NewList(
							λ.NewStr("(?s)<!><div[^>]+class=\"video_layer_message\"[^>]*>(.+?)</div>"),
							λ.NewStr("(?s)<div[^>]+id=\"video_ext_msg\"[^>]*>(.+?)</div>"),
						),
						ϒinfo_page,
						λ.NewStr("error message"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(ϒerror_message) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(ϒerror_message), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					if λ.IsTrue(λ.Cal(Ωre.ϒsearch, λ.NewStr("<!>/login\\.php\\?.*\\bact=security_check"), ϒinfo_page)) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.NewStr("You are trying to log in from an unusual location. You should confirm ownership at vk.com to log in with this IP.")), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ERROR_COPYRIGHT = λ.NewStr("Video %s has been removed from public access due to rightholder complaint.")
					ERRORS = λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr(">Видеозапись .*? была изъята из публичного доступа в связи с обращением правообладателя.<"): ERROR_COPYRIGHT,
						λ.NewStr(">The video .*? was removed from public access by request of the copyright holder.<"):        ERROR_COPYRIGHT,
						λ.NewStr("<!>Please log in or <"):                                                                     λ.NewStr("Video %s is only available for registered users, use --username and --password options to provide account credentials."),
						λ.NewStr("<!>Unknown error"):                                                                          λ.NewStr("Video %s does not exist."),
						λ.NewStr("<!>Видео временно недоступно"):                                                              λ.NewStr("Video %s is temporarily unavailable."),
						λ.NewStr("<!>Access denied"):                                                                          λ.NewStr("Access denied to video %s."),
						λ.NewStr("<!>Видеозапись недоступна, так как её автор был заблокирован."):              λ.NewStr("Video %s is no longer available, because its author has been blocked."),
						λ.NewStr("<!>This video is no longer available, because its author has been blocked."): λ.NewStr("Video %s is no longer available, because its author has been blocked."),
						λ.NewStr("<!>This video is no longer available, because it has been deleted."):         λ.NewStr("Video %s is no longer available, because it has been deleted."),
						λ.NewStr("<!>The video .+? is not available in your region."):                          λ.NewStr("Video %s is not available in your region."),
					})
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ERRORS, "items", nil)))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒerror_re = λ.GetItem(τmp2, λ.NewInt(0))
						ϒerror_msg = λ.GetItem(τmp2, λ.NewInt(1))
						if λ.IsTrue(λ.Cal(Ωre.ϒsearch, ϒerror_re, ϒinfo_page)) {
							panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(ϒerror_msg, ϒvideo_id)), λ.KWArgs{
								{Name: "expected", Value: λ.True},
							})))
						}
					}
					ϒyoutube_url = λ.Cal(λ.GetAttr(YoutubeIE, "_extract_url", nil), ϒinfo_page)
					if λ.IsTrue(ϒyoutube_url) {
						return λ.Call(λ.GetAttr(ϒself, "url_result", nil), λ.NewArgs(ϒyoutube_url), λ.KWArgs{
							{Name: "ie", Value: λ.Cal(λ.GetAttr(YoutubeIE, "ie_key", nil))},
						})
					}
					ϒvimeo_url = λ.Cal(λ.GetAttr(VimeoIE, "_extract_url", nil), ϒurl, ϒinfo_page)
					if λ.IsTrue(λ.NewBool(ϒvimeo_url != λ.None)) {
						return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), ϒvimeo_url)
					}
					ϒpladform_url = λ.Cal(λ.GetAttr(PladformIE, "_extract_url", nil), ϒinfo_page)
					if λ.IsTrue(ϒpladform_url) {
						return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), ϒpladform_url)
					}
					ϒm_rutube = λ.Cal(Ωre.ϒsearch, λ.NewStr("\\ssrc=\"((?:https?:)?//rutube\\.ru\\\\?/(?:video|play)\\\\?/embed(?:.*?))\\\\?\""), ϒinfo_page)
					if λ.IsTrue(λ.NewBool(ϒm_rutube != λ.None)) {
						ϒrutube_url = λ.Cal(λ.GetAttr(ϒself, "_proto_relative_url", nil), λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒm_rutube, "group", nil), λ.NewInt(1)), "replace", nil), λ.NewStr("\\"), λ.NewStr("")))
						return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), ϒrutube_url)
					}
					ϒdailymotion_urls = λ.Cal(λ.GetAttr(DailymotionIE, "_extract_urls", nil), ϒinfo_page)
					if λ.IsTrue(ϒdailymotion_urls) {
						return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), λ.GetItem(ϒdailymotion_urls, λ.NewInt(0)), λ.Cal(λ.GetAttr(DailymotionIE, "ie_key", nil)))
					}
					ϒm_opts = λ.Cal(Ωre.ϒsearch, λ.NewStr("(?s)var\\s+opts\\s*=\\s*({.+?});"), ϒinfo_page)
					if λ.IsTrue(ϒm_opts) {
						ϒm_opts_url = λ.Cal(Ωre.ϒsearch, λ.NewStr("url\\s*:\\s*'((?!/\\b)[^']+)"), λ.Cal(λ.GetAttr(ϒm_opts, "group", nil), λ.NewInt(1)))
						if λ.IsTrue(ϒm_opts_url) {
							ϒopts_url = λ.Cal(λ.GetAttr(ϒm_opts_url, "group", nil), λ.NewInt(1))
							if λ.IsTrue(λ.Cal(λ.GetAttr(ϒopts_url, "startswith", nil), λ.NewStr("//"))) {
								ϒopts_url = λ.Add(λ.NewStr("http:"), ϒopts_url)
							}
							return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), ϒopts_url)
						}
					}
					ϒdata = λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
						λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewStr("var\\s+vars\\s*=\\s*({.+?});"),
							ϒinfo_page,
							λ.NewStr("vars"),
						), λ.KWArgs{
							{Name: "default", Value: λ.NewStr("{}")},
						}),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒdata))) {
						ϒdata = λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewList(
								λ.NewStr("<!json>\\s*({.+?})\\s*<!>"),
								λ.NewStr("<!json>\\s*({.+})"),
							),
							ϒinfo_page,
							λ.NewStr("json"),
						), λ.KWArgs{
							{Name: "default", Value: λ.NewStr("{}")},
						}), ϒvideo_id)
						if λ.IsTrue(ϒdata) {
							ϒdata = λ.GetItem(λ.GetItem(λ.GetItem(ϒdata, λ.NewStr("player")), λ.NewStr("params")), λ.NewInt(0))
						}
					}
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒdata))) {
						ϒdata = λ.GetItem(λ.GetItem(λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("var\\s+playerParams\\s*=\\s*({.+?})\\s*;\\s*\\n"), ϒinfo_page, λ.NewStr("player params")), ϒvideo_id), λ.NewStr("params")), λ.NewInt(0))
					}
					ϒtitle = λ.Cal(ϒunescapeHTML, λ.GetItem(ϒdata, λ.NewStr("md_title")))
					ϒis_live = λ.Eq(λ.Cal(λ.GetAttr(ϒdata, "get", nil), λ.NewStr("live")), λ.NewInt(2))
					if λ.IsTrue(ϒis_live) {
						ϒtitle = λ.Cal(λ.GetAttr(ϒself, "_live_title", nil), ϒtitle)
					}
					ϒtimestamp = func() λ.Object {
						if λv := λ.Cal(ϒunified_timestamp, λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
							λ.NewStr("class=[\"\\']mv_info_date[^>]+>([^<]+)(?:<|from)"),
							ϒinfo_page,
							λ.NewStr("upload date"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						})); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒdata, "get", nil), λ.NewStr("date")))
						}
					}()
					ϒview_count = λ.Cal(ϒstr_to_int, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("class=[\"\\']mv_views_count[^>]+>\\s*([\\d,.]+)"),
						ϒinfo_page,
						λ.NewStr("view count"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					}))
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒdata, "items", nil)))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒformat_id = λ.GetItem(τmp2, λ.NewInt(0))
						ϒformat_url = λ.GetItem(τmp2, λ.NewInt(1))
						ϒformat_url = λ.Cal(ϒurl_or_none, ϒformat_url)
						if λ.IsTrue(func() λ.Object {
							if λv := λ.NewBool(!λ.IsTrue(ϒformat_url)); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(!λ.IsTrue(λ.Cal(λ.GetAttr(ϒformat_url, "startswith", nil), λ.NewTuple(
									λ.NewStr("http"),
									λ.NewStr("//"),
									λ.NewStr("rtmp"),
								))))
							}
						}()) {
							continue
						}
						if λ.IsTrue(func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒformat_id, "startswith", nil), λ.NewTuple(
								λ.NewStr("url"),
								λ.NewStr("cache"),
							)); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(λ.Contains(λ.NewTuple(
									λ.NewStr("extra_data"),
									λ.NewStr("live_mp4"),
									λ.NewStr("postlive_mp4"),
								), ϒformat_id))
							}
						}()) {
							ϒheight = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
								λ.NewStr("^(?:url|cache)(\\d+)"),
								ϒformat_id,
								λ.NewStr("height"),
							), λ.KWArgs{
								{Name: "default", Value: λ.None},
							}))
							λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("format_id"): ϒformat_id,
								λ.NewStr("url"):       ϒformat_url,
								λ.NewStr("height"):    ϒheight,
							}))
						} else {
							if λ.IsTrue(λ.Eq(ϒformat_id, λ.NewStr("hls"))) {
								λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
									ϒformat_url,
									ϒvideo_id,
									λ.NewStr("mp4"),
									λ.NewStr("m3u8_native"),
								), λ.KWArgs{
									{Name: "m3u8_id", Value: ϒformat_id},
									{Name: "fatal", Value: λ.False},
									{Name: "live", Value: ϒis_live},
								}))
							} else {
								if λ.IsTrue(λ.Eq(ϒformat_id, λ.NewStr("rtmp"))) {
									λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
										λ.NewStr("format_id"): ϒformat_id,
										λ.NewStr("url"):       ϒformat_url,
										λ.NewStr("ext"):       λ.NewStr("flv"),
									}))
								}
							}
						}
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"): λ.Cal(ϒcompat_str, func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒdata, "get", nil), λ.NewStr("vid")); λ.IsTrue(λv) {
								return λv
							} else {
								return ϒvideo_id
							}
						}()),
						λ.NewStr("formats"):       ϒformats,
						λ.NewStr("title"):         ϒtitle,
						λ.NewStr("thumbnail"):     λ.Cal(λ.GetAttr(ϒdata, "get", nil), λ.NewStr("jpg")),
						λ.NewStr("uploader"):      λ.Cal(λ.GetAttr(ϒdata, "get", nil), λ.NewStr("md_author")),
						λ.NewStr("uploader_id"):   λ.Cal(ϒstr_or_none, λ.Cal(λ.GetAttr(ϒdata, "get", nil), λ.NewStr("author_id"))),
						λ.NewStr("duration"):      λ.Cal(λ.GetAttr(ϒdata, "get", nil), λ.NewStr("duration")),
						λ.NewStr("timestamp"):     ϒtimestamp,
						λ.NewStr("view_count"):    ϒview_count,
						λ.NewStr("like_count"):    λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒdata, "get", nil), λ.NewStr("liked"))),
						λ.NewStr("dislike_count"): λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒdata, "get", nil), λ.NewStr("nolikes"))),
						λ.NewStr("is_live"):       ϒis_live,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):       VKIE_IE_NAME,
				λ.NewStr("_TESTS"):        VKIE__TESTS,
				λ.NewStr("_VALID_URL"):    VKIE__VALID_URL,
				λ.NewStr("_real_extract"): VKIE__real_extract,
			})
		}())
		VKUserVideosIE = λ.Cal(λ.TypeType, λ.NewStr("VKUserVideosIE"), λ.NewTuple(VKBaseIE), func() λ.Dict {
			var (
				VKUserVideosIE__VALID_URL λ.Object
			)
			VKUserVideosIE__VALID_URL = λ.NewStr("https?://(?:(?:m|new)\\.)?vk\\.com/videos(?P<id>-?[0-9]+)(?!\\?.*\\bz=video)(?:[/?#&]|$)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): VKUserVideosIE__VALID_URL,
			})
		}())
		VKWallPostIE = λ.Cal(λ.TypeType, λ.NewStr("VKWallPostIE"), λ.NewTuple(VKBaseIE), func() λ.Dict {
			var (
				VKWallPostIE__VALID_URL λ.Object
			)
			VKWallPostIE__VALID_URL = λ.NewStr("https?://(?:(?:(?:(?:m|new)\\.)?vk\\.com/(?:[^?]+\\?.*\\bw=)?wall(?P<id>-?\\d+_\\d+)))")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): VKWallPostIE__VALID_URL,
			})
		}())
	})
}

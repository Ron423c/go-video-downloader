// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * spiegel/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/spiegel.py
 */

package spiegel

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωnexx "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/nexx"
	Ωspiegeltv "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/spiegeltv"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor      λ.Object
	NexxEmbedIE        λ.Object
	NexxIE             λ.Object
	SpiegelArticleIE   λ.Object
	SpiegelIE          λ.Object
	SpiegeltvIE        λ.Object
	ϒparse_duration    λ.Object
	ϒstrip_or_none     λ.Object
	ϒunified_timestamp λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		NexxIE = Ωnexx.NexxIE
		NexxEmbedIE = Ωnexx.NexxEmbedIE
		SpiegeltvIE = Ωspiegeltv.SpiegeltvIE
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒstrip_or_none = Ωutils.ϒstrip_or_none
		ϒunified_timestamp = Ωutils.ϒunified_timestamp
		SpiegelIE = λ.Cal(λ.TypeType, λ.NewStr("SpiegelIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				SpiegelIE__TESTS        λ.Object
				SpiegelIE__VALID_URL    λ.Object
				SpiegelIE__real_extract λ.Object
			)
			SpiegelIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?spiegel\\.de/video/[^/]*-(?P<id>[0-9]+)(?:-embed|-iframe)?(?:\\.html)?(?:#.*)?$")
			SpiegelIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.spiegel.de/video/vulkan-tungurahua-in-ecuador-ist-wieder-aktiv-video-1259285.html"),
					λ.NewStr("md5"): λ.NewStr("b57399839d055fccfeb9a0455c439868"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("563747"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Vulkanausbruch in Ecuador: Der \"Feuerschlund\" ist wieder aktiv"),
						λ.NewStr("description"): λ.NewStr("md5:8029d8310232196eb235d27575a8b9f4"),
						λ.NewStr("duration"):    λ.NewInt(49),
						λ.NewStr("upload_date"): λ.NewStr("20130311"),
						λ.NewStr("timestamp"):   λ.NewInt(1362994320),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.spiegel.de/video/schach-wm-videoanalyse-des-fuenften-spiels-video-1309159.html"),
					λ.NewStr("md5"): λ.NewStr("5b6c2f4add9d62912ed5fc78a1faed80"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("580988"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Schach-WM in der Videoanalyse: Carlsen nutzt die Fehlgriffe des Titelverteidigers"),
						λ.NewStr("description"): λ.NewStr("md5:c2322b65e58f385a820c10fa03b2d088"),
						λ.NewStr("duration"):    λ.NewInt(983),
						λ.NewStr("upload_date"): λ.NewStr("20131115"),
						λ.NewStr("timestamp"):   λ.NewInt(1384546642),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.spiegel.de/video/astronaut-alexander-gerst-von-der-iss-station-beantwortet-fragen-video-1519126-embed.html"),
					λ.NewStr("md5"): λ.NewStr("97b91083a672d72976faa8433430afb9"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("601883"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("description"): λ.NewStr("SPIEGEL ONLINE-Nutzer durften den deutschen Astronauten Alexander Gerst über sein Leben auf der ISS-Station befragen. Hier kommen seine Antworten auf die besten sechs Fragen."),
						λ.NewStr("title"):       λ.NewStr("Fragen an Astronaut Alexander Gerst: \"Bekommen Sie die Tageszeiten mit?\""),
						λ.NewStr("upload_date"): λ.NewStr("20140904"),
						λ.NewStr("timestamp"):   λ.NewInt(1409834160),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://www.spiegel.de/video/astronaut-alexander-gerst-von-der-iss-station-beantwortet-fragen-video-1519126-iframe.html"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://www.spiegel.de/video/spiegel-tv-magazin-ueber-guellekrise-in-schleswig-holstein-video-99012776.html"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			SpiegelIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdomain_id    λ.Object
						ϒhandle       λ.Object
						ϒmetadata_url λ.Object
						ϒnexx_id      λ.Object
						ϒself         = λargs[0]
						ϒtitle        λ.Object
						ϒurl          = λargs[1]
						ϒvideo_data   λ.Object
						ϒvideo_id     λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒmetadata_url = λ.Mod(λ.NewStr("http://www.spiegel.de/video/metadata/video-%s.json"), ϒvideo_id)
					ϒhandle = λ.Cal(λ.GetAttr(ϒself, "_request_webpage", nil), ϒmetadata_url, ϒvideo_id)
					if λ.IsTrue(λ.Cal(λ.GetAttr(SpiegeltvIE, "suitable", nil), λ.Cal(λ.GetAttr(ϒhandle, "geturl", nil)))) {
						return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), λ.Cal(λ.GetAttr(ϒhandle, "geturl", nil)), λ.NewStr("Spiegeltv"))
					}
					ϒvideo_data = λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), λ.Cal(λ.GetAttr(ϒself, "_webpage_read_content", nil), ϒhandle, ϒmetadata_url, ϒvideo_id), ϒvideo_id)
					ϒtitle = λ.GetItem(ϒvideo_data, λ.NewStr("title"))
					ϒnexx_id = λ.GetItem(ϒvideo_data, λ.NewStr("nexxOmniaId"))
					ϒdomain_id = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("nexxOmniaDomain")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewStr("748")
						}
					}()
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("_type"): λ.NewStr("url_transparent"),
						λ.NewStr("id"):    ϒvideo_id,
						λ.NewStr("url"): λ.Mod(λ.NewStr("nexx:%s:%s"), λ.NewTuple(
							ϒdomain_id,
							ϒnexx_id,
						)),
						λ.NewStr("title"):       ϒtitle,
						λ.NewStr("description"): λ.Cal(ϒstrip_or_none, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("teaser"))),
						λ.NewStr("duration"):    λ.Cal(ϒparse_duration, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("duration"))),
						λ.NewStr("timestamp"):   λ.Cal(ϒunified_timestamp, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("datum"))),
						λ.NewStr("ie_key"):      λ.Cal(λ.GetAttr(NexxIE, "ie_key", nil)),
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        SpiegelIE__TESTS,
				λ.NewStr("_VALID_URL"):    SpiegelIE__VALID_URL,
				λ.NewStr("_real_extract"): SpiegelIE__real_extract,
			})
		}())
		SpiegelArticleIE = λ.Cal(λ.TypeType, λ.NewStr("SpiegelArticleIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				SpiegelArticleIE__VALID_URL λ.Object
			)
			SpiegelArticleIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?spiegel\\.de/(?!video/)[^?#]*?-(?P<id>[0-9]+)\\.html")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): SpiegelArticleIE__VALID_URL,
			})
		}())
	})
}

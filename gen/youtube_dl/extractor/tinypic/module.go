// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * tinypic/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/tinypic.py
 */

package tinypic

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError λ.Object
	InfoExtractor  λ.Object
	TinyPicIE      λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ExtractorError = Ωutils.ExtractorError
		TinyPicIE = λ.Cal(λ.TypeType, λ.NewStr("TinyPicIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				TinyPicIE_IE_NAME       λ.Object
				TinyPicIE__TESTS        λ.Object
				TinyPicIE__VALID_URL    λ.Object
				TinyPicIE__real_extract λ.Object
			)
			TinyPicIE_IE_NAME = λ.NewStr("tinypic")
			TinyPicIE__VALID_URL = λ.NewStr("https?://(?:.+?\\.)?tinypic\\.com/player\\.php\\?v=(?P<id>[^&]+)&s=\\d+")
			TinyPicIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://tinypic.com/player.php?v=6xw7tc%3E&s=5#.UtqZmbRFCM8"),
					λ.NewStr("md5"): λ.NewStr("609b74432465364e72727ebc6203f044"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):    λ.NewStr("6xw7tc"),
						λ.NewStr("ext"):   λ.NewStr("flv"),
						λ.NewStr("title"): λ.NewStr("shadow phenomenon weird"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://de.tinypic.com/player.php?v=dy90yh&s=8"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			TinyPicIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						KEYWORDS_SUFFIX λ.Object
						ϒfile_id        λ.Object
						ϒkeywords       λ.Object
						ϒmobj           λ.Object
						ϒself           = λargs[0]
						ϒserver_id      λ.Object
						ϒthumbnail      λ.Object
						ϒtitle          λ.Object
						ϒurl            = λargs[1]
						ϒvideo_id       λ.Object
						ϒvideo_url      λ.Object
						ϒwebpage        λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("id"))
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id, λ.NewStr("Downloading page"))
					ϒmobj = λ.Cal(Ωre.ϒsearch, λ.NewStr("(?m)fo\\.addVariable\\(\"file\",\\s\"(?P<fileid>[\\da-z]+)\"\\);\\n\\s+fo\\.addVariable\\(\"s\",\\s\"(?P<serverid>\\d+)\"\\);"), ϒwebpage)
					if λ.IsTrue(λ.NewBool(ϒmobj == λ.None)) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.NewStr("Video %s does not exist"), ϒvideo_id)), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒfile_id = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("fileid"))
					ϒserver_id = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("serverid"))
					KEYWORDS_SUFFIX = λ.NewStr(", Video, images, photos, videos, myspace, ebay, video hosting, photo hosting")
					ϒkeywords = λ.Cal(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewStr("keywords"), ϒwebpage, λ.NewStr("title"))
					ϒtitle = func() λ.Object {
						if λ.IsTrue(λ.Cal(λ.GetAttr(ϒkeywords, "endswith", nil), KEYWORDS_SUFFIX)) {
							return λ.GetItem(ϒkeywords, λ.NewSlice(λ.None, λ.Neg(λ.Cal(λ.BuiltinLen, KEYWORDS_SUFFIX)), λ.None))
						} else {
							return λ.NewStr("")
						}
					}()
					ϒvideo_url = λ.Mod(λ.NewStr("http://v%s.tinypic.com/%s.flv"), λ.NewTuple(
						ϒserver_id,
						ϒfile_id,
					))
					ϒthumbnail = λ.Mod(λ.NewStr("http://v%s.tinypic.com/%s_th.jpg"), λ.NewTuple(
						ϒserver_id,
						ϒfile_id,
					))
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):        ϒfile_id,
						λ.NewStr("url"):       ϒvideo_url,
						λ.NewStr("thumbnail"): ϒthumbnail,
						λ.NewStr("title"):     ϒtitle,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):       TinyPicIE_IE_NAME,
				λ.NewStr("_TESTS"):        TinyPicIE__TESTS,
				λ.NewStr("_VALID_URL"):    TinyPicIE__VALID_URL,
				λ.NewStr("_real_extract"): TinyPicIE__real_extract,
			})
		}())
	})
}

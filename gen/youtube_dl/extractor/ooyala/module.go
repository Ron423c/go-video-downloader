// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * ooyala/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/ooyala.py
 */

package ooyala

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError                 λ.Object
	InfoExtractor                  λ.Object
	OoyalaBaseIE                   λ.Object
	OoyalaExternalIE               λ.Object
	OoyalaIE                       λ.Object
	ϒcompat_b64decode              λ.Object
	ϒcompat_str                    λ.Object
	ϒcompat_urllib_parse_urlencode λ.Object
	ϒdetermine_ext                 λ.Object
	ϒfloat_or_none                 λ.Object
	ϒint_or_none                   λ.Object
	ϒtry_get                       λ.Object
	ϒunsmuggle_url                 λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_b64decode = Ωcompat.ϒcompat_b64decode
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒcompat_urllib_parse_urlencode = Ωcompat.ϒcompat_urllib_parse_urlencode
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ExtractorError = Ωutils.ExtractorError
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒtry_get = Ωutils.ϒtry_get
		ϒunsmuggle_url = Ωutils.ϒunsmuggle_url
		OoyalaBaseIE = λ.Cal(λ.TypeType, λ.NewStr("OoyalaBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				OoyalaBaseIE__AUTHORIZATION_URL_TEMPLATE λ.Object
				OoyalaBaseIE__CONTENT_TREE_BASE          λ.Object
				OoyalaBaseIE__PLAYER_BASE                λ.Object
				OoyalaBaseIE__extract                    λ.Object
			)
			OoyalaBaseIE__PLAYER_BASE = λ.NewStr("http://player.ooyala.com/")
			OoyalaBaseIE__CONTENT_TREE_BASE = λ.Add(OoyalaBaseIE__PLAYER_BASE, λ.NewStr("player_api/v1/content_tree/"))
			OoyalaBaseIE__AUTHORIZATION_URL_TEMPLATE = λ.Add(OoyalaBaseIE__PLAYER_BASE, λ.NewStr("sas/player_api/v2/authorization/embed_code/%s/%s?"))
			OoyalaBaseIE__extract = λ.NewFunction("_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "content_tree_url"},
					{Name: "video_id"},
					{Name: "domain", Def: λ.NewStr("example.org")},
					{Name: "supportedformats", Def: λ.None},
					{Name: "embed_token", Def: λ.None},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒauth_data        λ.Object
						ϒcontent_tree     λ.Object
						ϒcontent_tree_url = λargs[1]
						ϒcur_auth_data    λ.Object
						ϒdelivery_type    λ.Object
						ϒdomain           = λargs[3]
						ϒembed_code       λ.Object
						ϒembed_token      = λargs[5]
						ϒext              λ.Object
						ϒformats          λ.Object
						ϒlang             λ.Object
						ϒmetadata         λ.Object
						ϒpcode            λ.Object
						ϒs_url            λ.Object
						ϒself             = λargs[0]
						ϒstream           λ.Object
						ϒsub              λ.Object
						ϒsub_url          λ.Object
						ϒsubtitles        λ.Object
						ϒsupportedformats = λargs[4]
						ϒtitle            λ.Object
						ϒurl_data         λ.Object
						ϒurls             λ.Object
						ϒvideo_id         = λargs[2]
						τmp0              λ.Object
						τmp1              λ.Object
						τmp2              λ.Object
					)
					ϒcontent_tree = λ.GetItem(λ.Cal(λ.GetAttr(ϒself, "_download_json", nil), ϒcontent_tree_url, ϒvideo_id), λ.NewStr("content_tree"))
					ϒmetadata = λ.GetItem(ϒcontent_tree, λ.GetItem(λ.Cal(λ.ListType, ϒcontent_tree), λ.NewInt(0)))
					ϒembed_code = λ.GetItem(ϒmetadata, λ.NewStr("embed_code"))
					ϒpcode = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒmetadata, "get", nil), λ.NewStr("asset_pcode")); λ.IsTrue(λv) {
							return λv
						} else {
							return ϒembed_code
						}
					}()
					ϒtitle = λ.GetItem(ϒmetadata, λ.NewStr("title"))
					ϒauth_data = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Add(λ.Mod(λ.GetAttr(ϒself, "_AUTHORIZATION_URL_TEMPLATE", nil), λ.NewTuple(
							ϒpcode,
							ϒembed_code,
						)), λ.Cal(ϒcompat_urllib_parse_urlencode, λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("domain"): ϒdomain,
							λ.NewStr("supportedFormats"): func() λ.Object {
								if λv := ϒsupportedformats; λ.IsTrue(λv) {
									return λv
								} else {
									return λ.NewStr("mp4,rtmp,m3u8,hds,dash,smooth")
								}
							}(),
							λ.NewStr("embedToken"): ϒembed_token,
						}))),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "headers", Value: λ.Cal(λ.GetAttr(ϒself, "geo_verification_headers", nil))},
					})
					ϒcur_auth_data = λ.GetItem(λ.GetItem(ϒauth_data, λ.NewStr("authorization_data")), ϒembed_code)
					ϒurls = λ.NewList()
					ϒformats = λ.NewList()
					if λ.IsTrue(λ.GetItem(ϒcur_auth_data, λ.NewStr("authorized"))) {
						τmp0 = λ.Cal(λ.BuiltinIter, λ.GetItem(ϒcur_auth_data, λ.NewStr("streams")))
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒstream = τmp1
							ϒurl_data = λ.Cal(ϒtry_get, ϒstream, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("url")), λ.NewStr("data"))
								}), ϒcompat_str)
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒurl_data))) {
								continue
							}
							ϒs_url = λ.Cal(λ.GetAttr(λ.Cal(ϒcompat_b64decode, ϒurl_data), "decode", nil), λ.NewStr("utf-8"))
							if λ.IsTrue(func() λ.Object {
								if λv := λ.NewBool(!λ.IsTrue(ϒs_url)); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.NewBool(λ.Contains(ϒurls, ϒs_url))
								}
							}()) {
								continue
							}
							λ.Cal(λ.GetAttr(ϒurls, "append", nil), ϒs_url)
							ϒext = λ.Cal(ϒdetermine_ext, ϒs_url, λ.None)
							ϒdelivery_type = λ.Cal(λ.GetAttr(ϒstream, "get", nil), λ.NewStr("delivery_type"))
							if λ.IsTrue(func() λ.Object {
								if λv := λ.Eq(ϒdelivery_type, λ.NewStr("hls")); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Eq(ϒext, λ.NewStr("m3u8"))
								}
							}()) {
								λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
									λ.Cal(Ωre.ϒsub, λ.NewStr("/ip(?:ad|hone)/"), λ.NewStr("/all/"), ϒs_url),
									ϒembed_code,
									λ.NewStr("mp4"),
									λ.NewStr("m3u8_native"),
								), λ.KWArgs{
									{Name: "m3u8_id", Value: λ.NewStr("hls")},
									{Name: "fatal", Value: λ.False},
								}))
							} else {
								if λ.IsTrue(func() λ.Object {
									if λv := λ.Eq(ϒdelivery_type, λ.NewStr("hds")); λ.IsTrue(λv) {
										return λv
									} else {
										return λ.Eq(ϒext, λ.NewStr("f4m"))
									}
								}()) {
									λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_f4m_formats", nil), λ.NewArgs(
										λ.Add(ϒs_url, λ.NewStr("?hdcore=3.7.0")),
										ϒembed_code,
									), λ.KWArgs{
										{Name: "f4m_id", Value: λ.NewStr("hds")},
										{Name: "fatal", Value: λ.False},
									}))
								} else {
									if λ.IsTrue(func() λ.Object {
										if λv := λ.Eq(ϒdelivery_type, λ.NewStr("dash")); λ.IsTrue(λv) {
											return λv
										} else {
											return λ.Eq(ϒext, λ.NewStr("mpd"))
										}
									}()) {
										λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_mpd_formats", nil), λ.NewArgs(
											ϒs_url,
											ϒembed_code,
										), λ.KWArgs{
											{Name: "mpd_id", Value: λ.NewStr("dash")},
											{Name: "fatal", Value: λ.False},
										}))
									} else {
										if λ.IsTrue(λ.Eq(ϒdelivery_type, λ.NewStr("smooth"))) {
											λ.Call(λ.GetAttr(ϒself, "_extract_ism_formats", nil), λ.NewArgs(
												ϒs_url,
												ϒembed_code,
											), λ.KWArgs{
												{Name: "ism_id", Value: λ.NewStr("mss")},
												{Name: "fatal", Value: λ.False},
											})
										} else {
											if λ.IsTrue(λ.Eq(ϒext, λ.NewStr("smil"))) {
												λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_smil_formats", nil), λ.NewArgs(
													ϒs_url,
													ϒembed_code,
												), λ.KWArgs{
													{Name: "fatal", Value: λ.False},
												}))
											} else {
												λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
													λ.NewStr("url"): ϒs_url,
													λ.NewStr("ext"): func() λ.Object {
														if λv := ϒext; λ.IsTrue(λv) {
															return λv
														} else {
															return ϒdelivery_type
														}
													}(),
													λ.NewStr("vcodec"):    λ.Cal(λ.GetAttr(ϒstream, "get", nil), λ.NewStr("video_codec")),
													λ.NewStr("format_id"): ϒdelivery_type,
													λ.NewStr("width"):     λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒstream, "get", nil), λ.NewStr("width"))),
													λ.NewStr("height"):    λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒstream, "get", nil), λ.NewStr("height"))),
													λ.NewStr("abr"):       λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒstream, "get", nil), λ.NewStr("audio_bitrate"))),
													λ.NewStr("vbr"):       λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒstream, "get", nil), λ.NewStr("video_bitrate"))),
													λ.NewStr("fps"):       λ.Cal(ϒfloat_or_none, λ.Cal(λ.GetAttr(ϒstream, "get", nil), λ.NewStr("framerate"))),
												}))
											}
										}
									}
								}
							}
						}
					} else {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.NewStr("%s said: %s"), λ.NewTuple(
							λ.GetAttr(ϒself, "IE_NAME", nil),
							λ.GetItem(ϒcur_auth_data, λ.NewStr("message")),
						))), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒsubtitles = λ.NewDictWithTable(map[λ.Object]λ.Object{})
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒmetadata, "get", nil), λ.NewStr("closed_captions_vtt"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("captions"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "items", nil)))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒlang = λ.GetItem(τmp2, λ.NewInt(0))
						ϒsub = λ.GetItem(τmp2, λ.NewInt(1))
						ϒsub_url = λ.Cal(λ.GetAttr(ϒsub, "get", nil), λ.NewStr("url"))
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒsub_url))) {
							continue
						}
						λ.SetItem(ϒsubtitles, ϒlang, λ.NewList(λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"): ϒsub_url,
						})))
					}
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒembed_code,
						λ.NewStr("title"):       ϒtitle,
						λ.NewStr("description"): λ.Cal(λ.GetAttr(ϒmetadata, "get", nil), λ.NewStr("description")),
						λ.NewStr("thumbnail"): func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒmetadata, "get", nil), λ.NewStr("thumbnail_image")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(ϒmetadata, "get", nil), λ.NewStr("promo_image"))
							}
						}(),
						λ.NewStr("duration"):  λ.Cal(ϒfloat_or_none, λ.Cal(λ.GetAttr(ϒmetadata, "get", nil), λ.NewStr("duration")), λ.NewInt(1000)),
						λ.NewStr("subtitles"): ϒsubtitles,
						λ.NewStr("formats"):   ϒformats,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_AUTHORIZATION_URL_TEMPLATE"): OoyalaBaseIE__AUTHORIZATION_URL_TEMPLATE,
				λ.NewStr("_CONTENT_TREE_BASE"):          OoyalaBaseIE__CONTENT_TREE_BASE,
				λ.NewStr("_PLAYER_BASE"):                OoyalaBaseIE__PLAYER_BASE,
				λ.NewStr("_extract"):                    OoyalaBaseIE__extract,
			})
		}())
		OoyalaIE = λ.Cal(λ.TypeType, λ.NewStr("OoyalaIE"), λ.NewTuple(OoyalaBaseIE), func() λ.Dict {
			var (
				OoyalaIE__TESTS        λ.Object
				OoyalaIE__VALID_URL    λ.Object
				OoyalaIE__real_extract λ.Object
			)
			OoyalaIE__VALID_URL = λ.NewStr("(?:ooyala:|https?://.+?\\.ooyala\\.com/.*?(?:embedCode|ec)=)(?P<id>.+?)(&|$)")
			OoyalaIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://player.ooyala.com/player.js?embedCode=pxczE2YjpfHfn1f3M-ykG_AmJRRn0PD8"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("pxczE2YjpfHfn1f3M-ykG_AmJRRn0PD8"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Explaining Data Recovery from Hard Drives and SSDs"),
						λ.NewStr("description"): λ.NewStr("How badly damaged does a drive have to be to defeat Russell and his crew? Apparently, smashed to bits."),
						λ.NewStr("duration"):    λ.NewFloat(853.386),
					}),
					λ.NewStr("skip"): λ.NewStr("Ooyala said: movie expired"),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://player.ooyala.com/player.js?embedCode=x1b3lqZDq9y_7kMyC2Op5qo-p077tXD0"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):       λ.NewStr("x1b3lqZDq9y_7kMyC2Op5qo-p077tXD0"),
						λ.NewStr("ext"):      λ.NewStr("mp4"),
						λ.NewStr("title"):    λ.NewStr("Simulation Overview - Levels of Simulation"),
						λ.NewStr("duration"): λ.NewFloat(194.948),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://player.ooyala.com/player.js?embedCode=FiOG81ZTrvckcchQxmalf4aQj590qTEx"),
					λ.NewStr("md5"): λ.NewStr("a84001441b35ea492bc03736e59e7935"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):       λ.NewStr("FiOG81ZTrvckcchQxmalf4aQj590qTEx"),
						λ.NewStr("ext"):      λ.NewStr("mp4"),
						λ.NewStr("title"):    λ.NewStr("Divide Tool Path.mp4"),
						λ.NewStr("duration"): λ.NewFloat(204.405),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://player.ooyala.com/player.js?embedCode=w2bnZtYjE6axZ_dw1Cd0hQtXd_ige2Is"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			OoyalaIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcontent_tree_url λ.Object
						ϒdomain           λ.Object
						ϒembed_code       λ.Object
						ϒembed_token      λ.Object
						ϒself             = λargs[0]
						ϒsmuggled_data    λ.Object
						ϒsupportedformats λ.Object
						ϒurl              = λargs[1]
						τmp0              λ.Object
					)
					τmp0 = λ.Cal(ϒunsmuggle_url, ϒurl, λ.NewDictWithTable(map[λ.Object]λ.Object{}))
					ϒurl = λ.GetItem(τmp0, λ.NewInt(0))
					ϒsmuggled_data = λ.GetItem(τmp0, λ.NewInt(1))
					ϒembed_code = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒdomain = λ.Cal(λ.GetAttr(ϒsmuggled_data, "get", nil), λ.NewStr("domain"))
					ϒsupportedformats = λ.Cal(λ.GetAttr(ϒsmuggled_data, "get", nil), λ.NewStr("supportedformats"))
					ϒembed_token = λ.Cal(λ.GetAttr(ϒsmuggled_data, "get", nil), λ.NewStr("embed_token"))
					ϒcontent_tree_url = λ.Add(λ.GetAttr(ϒself, "_CONTENT_TREE_BASE", nil), λ.Mod(λ.NewStr("embed_code/%s/%s"), λ.NewTuple(
						ϒembed_code,
						ϒembed_code,
					)))
					return λ.Cal(λ.GetAttr(ϒself, "_extract", nil), ϒcontent_tree_url, ϒembed_code, ϒdomain, ϒsupportedformats, ϒembed_token)
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        OoyalaIE__TESTS,
				λ.NewStr("_VALID_URL"):    OoyalaIE__VALID_URL,
				λ.NewStr("_real_extract"): OoyalaIE__real_extract,
			})
		}())
		OoyalaExternalIE = λ.Cal(λ.TypeType, λ.NewStr("OoyalaExternalIE"), λ.NewTuple(OoyalaBaseIE), func() λ.Dict {
			var (
				OoyalaExternalIE__VALID_URL λ.Object
			)
			OoyalaExternalIE__VALID_URL = λ.NewStr("(?x)\n                    (?:\n                        ooyalaexternal:|\n                        https?://.+?\\.ooyala\\.com/.*?\\bexternalId=\n                    )\n                    (?P<partner_id>[^:]+)\n                    :\n                    (?P<id>.+)\n                    (?:\n                        :|\n                        .*?&pcode=\n                    )\n                    (?P<pcode>.+?)\n                    (?:&|$)\n                    ")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): OoyalaExternalIE__VALID_URL,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * escapist/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/escapist.py
 */

package escapist

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	EscapistIE       λ.Object
	InfoExtractor    λ.Object
	ϒ_decrypt_config λ.Object
	ϒclean_html      λ.Object
	ϒdetermine_ext   λ.Object
	ϒfloat_or_none   λ.Object
	ϒint_or_none     λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ϒclean_html = Ωutils.ϒclean_html
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒ_decrypt_config = λ.NewFunction("_decrypt_config",
			[]λ.Param{
				{Name: "key"},
				{Name: "string"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒa      λ.Object
					ϒc      λ.Object
					ϒi      λ.Object
					ϒicko   λ.Object
					ϒkey    = λargs[0]
					ϒr      λ.Object
					ϒstring = λargs[1]
					ϒt      λ.Object
					τmp0    λ.Object
					τmp1    λ.Object
					τmp2    λ.Object
				)
				ϒa = λ.NewStr("")
				ϒi = λ.NewStr("")
				ϒr = λ.NewStr("")
				for λ.IsTrue(λ.Lt(λ.Cal(λ.BuiltinLen, ϒa), λ.TrueDiv(λ.Cal(λ.BuiltinLen, ϒstring), λ.NewInt(2)))) {
					τmp0 = λ.IAdd(ϒa, ϒkey)
					ϒa = τmp0
				}
				ϒa = λ.GetItem(ϒa, λ.NewSlice(λ.NewInt(0), λ.Cal(λ.IntType, λ.TrueDiv(λ.Cal(λ.BuiltinLen, ϒstring), λ.NewInt(2))), λ.None))
				ϒt = λ.NewInt(0)
				for λ.IsTrue(λ.Lt(ϒt, λ.Cal(λ.BuiltinLen, ϒstring))) {
					τmp0 = λ.IAdd(ϒi, λ.Cal(λ.BuiltinChr, λ.Cal(λ.IntType, λ.Add(λ.GetItem(ϒstring, ϒt), λ.GetItem(ϒstring, λ.Add(ϒt, λ.NewInt(1)))), λ.NewInt(16))))
					ϒi = τmp0
					τmp0 = λ.IAdd(ϒt, λ.NewInt(2))
					ϒt = τmp0
				}
				ϒicko = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
					nil,
					0, false, false,
					func(λargs []λ.Object) λ.Object {
						return λ.NewGenerator(func(λgen λ.Generator) λ.Object {
							var (
								ϒs   λ.Object
								τmp0 λ.Object
								τmp1 λ.Object
							)
							τmp0 = λ.Cal(λ.BuiltinIter, ϒi)
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒs = τmp1
								λgen.Yield(ϒs)
							}
							return λ.None
						})
					})))
				τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.EnumerateIteratorType, ϒa))
				for {
					if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
						break
					}
					τmp2 = τmp1
					ϒt = λ.GetItem(τmp2, λ.NewInt(0))
					ϒc = λ.GetItem(τmp2, λ.NewInt(1))
					τmp2 = λ.IAdd(ϒr, λ.Cal(λ.BuiltinChr, λ.Xor(λ.Cal(λ.BuiltinOrd, ϒc), λ.Cal(λ.BuiltinOrd, λ.GetItem(ϒicko, ϒt)))))
					ϒr = τmp2
				}
				return ϒr
			})
		EscapistIE = λ.Cal(λ.TypeType, λ.NewStr("EscapistIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				EscapistIE__TESTS        λ.Object
				EscapistIE__VALID_URL    λ.Object
				EscapistIE__real_extract λ.Object
			)
			EscapistIE__VALID_URL = λ.NewStr("https?://?(?:(?:www|v1)\\.)?escapistmagazine\\.com/videos/view/[^/]+/(?P<id>[0-9]+)")
			EscapistIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.escapistmagazine.com/videos/view/the-escapist-presents/6618-Breaking-Down-Baldurs-Gate"),
					λ.NewStr("md5"): λ.NewStr("ab3a706c681efca53f0a35f1415cf0d1"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("6618"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("description"): λ.NewStr("Baldur's Gate: Original, Modded or Enhanced Edition? I'll break down what you can expect from the new Baldur's Gate: Enhanced Edition."),
						λ.NewStr("title"):       λ.NewStr("Breaking Down Baldur's Gate"),
						λ.NewStr("thumbnail"):   λ.NewStr("re:^https?://.*\\.jpg$"),
						λ.NewStr("duration"):    λ.NewInt(264),
						λ.NewStr("uploader"):    λ.NewStr("The Escapist"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.escapistmagazine.com/videos/view/zero-punctuation/10044-Evolve-One-vs-Multiplayer"),
					λ.NewStr("md5"): λ.NewStr("9e8c437b0dbb0387d3bd3255ca77f6bf"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("10044"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("description"): λ.NewStr("This week, Zero Punctuation reviews Evolve."),
						λ.NewStr("title"):       λ.NewStr("Evolve - One vs Multiplayer"),
						λ.NewStr("thumbnail"):   λ.NewStr("re:^https?://.*\\.jpg$"),
						λ.NewStr("duration"):    λ.NewInt(304),
						λ.NewStr("uploader"):    λ.NewStr("The Escapist"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://escapistmagazine.com/videos/view/the-escapist-presents/6618"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://v1.escapistmagazine.com/videos/view/the-escapist-presents/6618-Breaking-Down-Baldurs-Gate"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			EscapistIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒconfig     λ.Object
						ϒdata       λ.Object
						ϒformats    λ.Object
						ϒims_video  λ.Object
						ϒkey        λ.Object
						ϒself       = λargs[0]
						ϒtitle      λ.Object
						ϒurl        = λargs[1]
						ϒvideo_data λ.Object
						ϒvideo_id   λ.Object
						ϒwebpage    λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					ϒims_video = λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("imsVideo\\.play\\(({.+?})\\);"), ϒwebpage, λ.NewStr("imsVideo")), ϒvideo_id)
					ϒvideo_id = λ.GetItem(ϒims_video, λ.NewStr("videoID"))
					ϒkey = λ.GetItem(ϒims_video, λ.NewStr("hash"))
					ϒconfig = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
						λ.NewStr("http://www.escapistmagazine.com/videos/vidconfig.php"),
						ϒvideo_id,
						λ.NewStr("Downloading video config"),
					), λ.KWArgs{
						{Name: "headers", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("Referer"): ϒurl,
						})},
						{Name: "query", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("videoID"): ϒvideo_id,
							λ.NewStr("hash"):    ϒkey,
						})},
					})
					ϒdata = λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), λ.Cal(ϒ_decrypt_config, ϒkey, ϒconfig), ϒvideo_id)
					ϒvideo_data = λ.GetItem(ϒdata, λ.NewStr("videoData"))
					ϒtitle = λ.Cal(ϒclean_html, λ.GetItem(ϒvideo_data, λ.NewStr("title")))
					ϒformats = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgen λ.Generator) λ.Object {
								var (
									ϒvideo λ.Object
									τmp0   λ.Object
									τmp1   λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.GetItem(λ.GetItem(ϒdata, λ.NewStr("files")), λ.NewStr("videos")))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒvideo = τmp1
									λgen.Yield(λ.NewDictWithTable(map[λ.Object]λ.Object{
										λ.NewStr("url"): λ.GetItem(ϒvideo, λ.NewStr("src")),
										λ.NewStr("format_id"): λ.Mod(λ.NewStr("%s-%sp"), λ.NewTuple(
											λ.Cal(ϒdetermine_ext, λ.GetItem(ϒvideo, λ.NewStr("src"))),
											λ.GetItem(ϒvideo, λ.NewStr("res")),
										)),
										λ.NewStr("height"): λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("res"))),
									}))
								}
								return λ.None
							})
						})))
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):      ϒvideo_id,
						λ.NewStr("formats"): ϒformats,
						λ.NewStr("title"):   ϒtitle,
						λ.NewStr("thumbnail"): func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒself, "_og_search_thumbnail", nil), ϒwebpage); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(ϒdata, "get", nil), λ.NewStr("poster"))
							}
						}(),
						λ.NewStr("description"): λ.Cal(λ.GetAttr(ϒself, "_og_search_description", nil), ϒwebpage),
						λ.NewStr("duration"):    λ.Cal(ϒfloat_or_none, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("duration")), λ.NewInt(1000)),
						λ.NewStr("uploader"):    λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("publisher")),
						λ.NewStr("series"):      λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("show")),
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        EscapistIE__TESTS,
				λ.NewStr("_VALID_URL"):    EscapistIE__VALID_URL,
				λ.NewStr("_real_extract"): EscapistIE__real_extract,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * vimeo/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/vimeo.py
 */

package vimeo

import (
	Ωjson "github.com/tenta-browser/go-video-downloader/gen/json"
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError         λ.Object
	InfoExtractor          λ.Object
	NO_DEFAULT             λ.Object
	RegexNotFoundError     λ.Object
	VHXEmbedIE             λ.Object
	VimeoAlbumIE           λ.Object
	VimeoBaseInfoExtractor λ.Object
	VimeoChannelIE         λ.Object
	VimeoGroupsIE          λ.Object
	VimeoIE                λ.Object
	VimeoLikesIE           λ.Object
	VimeoOndemandIE        λ.Object
	VimeoReviewIE          λ.Object
	VimeoUserIE            λ.Object
	VimeoWatchLaterIE      λ.Object
	ϒcompat_HTTPError      λ.Object
	ϒcompat_str            λ.Object
	ϒdetermine_ext         λ.Object
	ϒint_or_none           λ.Object
	ϒjs_to_json            λ.Object
	ϒmerge_dicts           λ.Object
	ϒparse_filesize        λ.Object
	ϒqualities             λ.Object
	ϒsanitized_Request     λ.Object
	ϒsmuggle_url           λ.Object
	ϒstd_headers           λ.Object
	ϒtry_get               λ.Object
	ϒunescapeHTML          λ.Object
	ϒunified_timestamp     λ.Object
	ϒunsmuggle_url         λ.Object
	ϒurlencode_postdata    λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_HTTPError = Ωcompat.ϒcompat_HTTPError
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ExtractorError = Ωutils.ExtractorError
		ϒjs_to_json = Ωutils.ϒjs_to_json
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒmerge_dicts = Ωutils.ϒmerge_dicts
		NO_DEFAULT = Ωutils.NO_DEFAULT
		ϒparse_filesize = Ωutils.ϒparse_filesize
		ϒqualities = Ωutils.ϒqualities
		RegexNotFoundError = Ωutils.RegexNotFoundError
		ϒsanitized_Request = Ωutils.ϒsanitized_Request
		ϒsmuggle_url = Ωutils.ϒsmuggle_url
		ϒstd_headers = Ωutils.ϒstd_headers
		ϒtry_get = Ωutils.ϒtry_get
		ϒunified_timestamp = Ωutils.ϒunified_timestamp
		ϒunsmuggle_url = Ωutils.ϒunsmuggle_url
		ϒurlencode_postdata = Ωutils.ϒurlencode_postdata
		ϒunescapeHTML = Ωutils.ϒunescapeHTML
		VimeoBaseInfoExtractor = λ.Cal(λ.TypeType, λ.NewStr("VimeoBaseInfoExtractor"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				VimeoBaseInfoExtractor__LOGIN_REQUIRED        λ.Object
				VimeoBaseInfoExtractor__NETRC_MACHINE         λ.Object
				VimeoBaseInfoExtractor__login                 λ.Object
				VimeoBaseInfoExtractor__parse_config          λ.Object
				VimeoBaseInfoExtractor__verify_video_password λ.Object
				VimeoBaseInfoExtractor__vimeo_sort_formats    λ.Object
			)
			VimeoBaseInfoExtractor__NETRC_MACHINE = λ.NewStr("vimeo")
			VimeoBaseInfoExtractor__LOGIN_REQUIRED = λ.False
			VimeoBaseInfoExtractor__login = λ.NewFunction("_login",
				[]λ.Param{
					{Name: "self"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdata     λ.Object
						ϒpassword λ.Object
						ϒself     = λargs[0]
						ϒtoken    λ.Object
						ϒusername λ.Object
						ϒvuid     λ.Object
						ϒwebpage  λ.Object
						τmp0      λ.Object
						τmp1      λ.Object
					)
					_ = τmp0
					_ = τmp1
					τmp0 = λ.Cal(λ.GetAttr(ϒself, "_get_login_info", nil))
					ϒusername = λ.GetItem(τmp0, λ.NewInt(0))
					ϒpassword = λ.GetItem(τmp0, λ.NewInt(1))
					if λ.IsTrue(λ.NewBool(ϒusername == λ.None)) {
						if λ.IsTrue(λ.GetAttr(ϒself, "_LOGIN_REQUIRED", nil)) {
							panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.NewStr("No login info available, needed for using %s."), λ.GetAttr(ϒself, "IE_NAME", nil))), λ.KWArgs{
								{Name: "expected", Value: λ.True},
							})))
						}
						return λ.None
					}
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), λ.GetAttr(ϒself, "_LOGIN_URL", nil), λ.None, λ.NewStr("Downloading login page"))
					τmp0 = λ.Cal(λ.GetAttr(ϒself, "_extract_xsrft_and_vuid", nil), ϒwebpage)
					ϒtoken = λ.GetItem(τmp0, λ.NewInt(0))
					ϒvuid = λ.GetItem(τmp0, λ.NewInt(1))
					ϒdata = λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("action"):   λ.NewStr("login"),
						λ.NewStr("email"):    ϒusername,
						λ.NewStr("password"): ϒpassword,
						λ.NewStr("service"):  λ.NewStr("vimeo"),
						λ.NewStr("token"):    ϒtoken,
					})
					λ.Cal(λ.GetAttr(ϒself, "_set_vimeo_cookie", nil), λ.NewStr("vuid"), ϒvuid)
					τmp0, τmp1 = func() (λexit λ.Object, λret λ.Object) {
						defer λ.CatchMulti(
							nil,
							&λ.Catcher{ExtractorError, func(λex λ.BaseException) {
								ϒe := λex
								if λ.IsTrue(func() λ.Object {
									if λv := λ.Cal(λ.BuiltinIsInstance, λ.GetAttr(ϒe, "cause", nil), ϒcompat_HTTPError); !λ.IsTrue(λv) {
										return λv
									} else {
										return λ.Eq(λ.GetAttr(λ.GetAttr(ϒe, "cause", nil), "code", nil), λ.NewInt(418))
									}
								}()) {
									panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.NewStr("Unable to log in: bad username or password")), λ.KWArgs{
										{Name: "expected", Value: λ.True},
									})))
								}
								panic(λ.Raise(λ.Cal(ExtractorError, λ.NewStr("Unable to log in"))))
							}},
						)
						λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
							λ.GetAttr(ϒself, "_LOGIN_URL", nil),
							λ.None,
							λ.NewStr("Logging in"),
						), λ.KWArgs{
							{Name: "data", Value: λ.Cal(ϒurlencode_postdata, ϒdata)},
							{Name: "headers", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("Content-Type"): λ.NewStr("application/x-www-form-urlencoded"),
								λ.NewStr("Referer"):      λ.GetAttr(ϒself, "_LOGIN_URL", nil),
							})},
						})
						return λ.BlockExitNormally, nil
					}()
					return λ.None
				})
			VimeoBaseInfoExtractor__verify_video_password = λ.NewFunction("_verify_video_password",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
					{Name: "video_id"},
					{Name: "webpage"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdata             λ.Object
						ϒpassword         λ.Object
						ϒpassword_request λ.Object
						ϒself             = λargs[0]
						ϒtoken            λ.Object
						ϒurl              = λargs[1]
						ϒvideo_id         = λargs[2]
						ϒvuid             λ.Object
						ϒwebpage          = λargs[3]
						τmp0              λ.Object
					)
					ϒpassword = λ.Cal(λ.GetAttr(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "params", nil), "get", nil), λ.NewStr("videopassword"))
					if λ.IsTrue(λ.NewBool(ϒpassword == λ.None)) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.NewStr("This video is protected by a password, use the --video-password option")), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					τmp0 = λ.Cal(λ.GetAttr(ϒself, "_extract_xsrft_and_vuid", nil), ϒwebpage)
					ϒtoken = λ.GetItem(τmp0, λ.NewInt(0))
					ϒvuid = λ.GetItem(τmp0, λ.NewInt(1))
					ϒdata = λ.Cal(ϒurlencode_postdata, λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("password"): ϒpassword,
						λ.NewStr("token"):    ϒtoken,
					}))
					if λ.IsTrue(λ.Cal(λ.GetAttr(ϒurl, "startswith", nil), λ.NewStr("http://"))) {
						ϒurl = λ.Cal(λ.GetAttr(ϒurl, "replace", nil), λ.NewStr("http://"), λ.NewStr("https://"))
					}
					ϒpassword_request = λ.Cal(ϒsanitized_Request, λ.Add(ϒurl, λ.NewStr("/password")), ϒdata)
					λ.Cal(λ.GetAttr(ϒpassword_request, "add_header", nil), λ.NewStr("Content-Type"), λ.NewStr("application/x-www-form-urlencoded"))
					λ.Cal(λ.GetAttr(ϒpassword_request, "add_header", nil), λ.NewStr("Referer"), ϒurl)
					λ.Cal(λ.GetAttr(ϒself, "_set_vimeo_cookie", nil), λ.NewStr("vuid"), ϒvuid)
					return λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒpassword_request, ϒvideo_id, λ.NewStr("Verifying the password"), λ.NewStr("Wrong password"))
				})
			VimeoBaseInfoExtractor__vimeo_sort_formats = λ.NewFunction("_vimeo_sort_formats",
				[]λ.Param{
					{Name: "self"},
					{Name: "formats"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒformats = λargs[1]
						ϒself    = λargs[0]
					)
					λ.Call(λ.GetAttr(ϒself, "_sort_formats", nil), λ.NewArgs(ϒformats), λ.KWArgs{
						{Name: "field_preference", Value: λ.NewTuple(
							λ.NewStr("preference"),
							λ.NewStr("height"),
							λ.NewStr("width"),
							λ.NewStr("fps"),
							λ.NewStr("tbr"),
							λ.NewStr("format_id"),
						)},
					})
					return λ.None
				})
			VimeoBaseInfoExtractor__parse_config = λ.NewFunction("_parse_config",
				[]λ.Param{
					{Name: "self"},
					{Name: "config"},
					{Name: "video_id"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcdn_data           λ.Object
						ϒcdn_name           λ.Object
						ϒconfig             = λargs[1]
						ϒconfig_files       λ.Object
						ϒf                  λ.Object
						ϒf_id               λ.Object
						ϒfiles_type         λ.Object
						ϒformat_id          λ.Object
						ϒformats            λ.Object
						ϒm_url              λ.Object
						ϒmanifest_url       λ.Object
						ϒmpd_formats        λ.Object
						ϒmpd_manifest_urls  λ.Object
						ϒmpd_pattern        λ.Object
						ϒrepl               λ.Object
						ϒself               = λargs[0]
						ϒsubtitles          λ.Object
						ϒsuffix             λ.Object
						ϒtext_tracks        λ.Object
						ϒtt                 λ.Object
						ϒvideo_data         λ.Object
						ϒvideo_duration     λ.Object
						ϒvideo_id           = λargs[2]
						ϒvideo_thumbnail    λ.Object
						ϒvideo_thumbs       λ.Object
						ϒvideo_title        λ.Object
						ϒvideo_uploader     λ.Object
						ϒvideo_uploader_id  λ.Object
						ϒvideo_uploader_url λ.Object
						ϒvideo_url          λ.Object
						τmp0                λ.Object
						τmp1                λ.Object
						τmp2                λ.Object
						τmp3                λ.Object
						τmp4                λ.Object
						τmp5                λ.Object
						τmp6                λ.Object
						τmp7                λ.Object
					)
					ϒvideo_data = λ.GetItem(ϒconfig, λ.NewStr("video"))
					ϒvideo_title = λ.GetItem(ϒvideo_data, λ.NewStr("title"))
					ϒvideo_uploader = λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("owner"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("name"))
					ϒvideo_uploader_url = λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("owner"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("url"))
					ϒvideo_uploader_id = func() λ.Object {
						if λ.IsTrue(ϒvideo_uploader_url) {
							return λ.GetItem(λ.Cal(λ.GetAttr(ϒvideo_uploader_url, "split", nil), λ.NewStr("/")), λ.Neg(λ.NewInt(1)))
						} else {
							return λ.None
						}
					}()
					ϒvideo_thumbnail = λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("thumbnail"))
					if λ.IsTrue(λ.NewBool(ϒvideo_thumbnail == λ.None)) {
						ϒvideo_thumbs = λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("thumbs"))
						if λ.IsTrue(func() λ.Object {
							if λv := ϒvideo_thumbs; !λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.BuiltinIsInstance, ϒvideo_thumbs, λ.DictType)
							}
						}()) {
							τmp0 = λ.GetItem(λ.Cal(λ.BuiltinSorted, λ.Cal(λ.NewFunction("<generator>",
								nil,
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									return λ.NewGenerator(func(λgen λ.Generator) λ.Object {
										var (
											ϒt_url λ.Object
											ϒwidth λ.Object
											τmp0   λ.Object
											τmp1   λ.Object
											τmp2   λ.Object
										)
										τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒvideo_thumbs, "items", nil)))
										for {
											if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
												break
											}
											τmp2 = τmp1
											ϒwidth = λ.GetItem(τmp2, λ.NewInt(0))
											ϒt_url = λ.GetItem(τmp2, λ.NewInt(1))
											λgen.Yield(λ.NewTuple(
												λ.Cal(λ.IntType, func() λ.Object {
													if λ.IsTrue(λ.Cal(λ.GetAttr(ϒwidth, "isdigit", nil))) {
														return ϒwidth
													} else {
														return λ.NewInt(0)
													}
												}()),
												ϒt_url,
											))
										}
										return λ.None
									})
								}))), λ.Neg(λ.NewInt(1)))
							_ = λ.GetItem(τmp0, λ.NewInt(0))
							ϒvideo_thumbnail = λ.GetItem(τmp0, λ.NewInt(1))
						}
					}
					ϒvideo_duration = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("duration")))
					ϒformats = λ.NewList()
					ϒconfig_files = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("files")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(λ.GetItem(ϒconfig, λ.NewStr("request")), "get", nil), λ.NewStr("files"), λ.NewDictWithTable(map[λ.Object]λ.Object{}))
						}
					}()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒconfig_files, "get", nil), λ.NewStr("progressive"), λ.NewList()))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒf = τmp1
						ϒvideo_url = λ.Cal(λ.GetAttr(ϒf, "get", nil), λ.NewStr("url"))
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒvideo_url))) {
							continue
						}
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"):       ϒvideo_url,
							λ.NewStr("format_id"): λ.Mod(λ.NewStr("http-%s"), λ.Cal(λ.GetAttr(ϒf, "get", nil), λ.NewStr("quality"))),
							λ.NewStr("width"):     λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒf, "get", nil), λ.NewStr("width"))),
							λ.NewStr("height"):    λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒf, "get", nil), λ.NewStr("height"))),
							λ.NewStr("fps"):       λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒf, "get", nil), λ.NewStr("fps"))),
							λ.NewStr("tbr"):       λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒf, "get", nil), λ.NewStr("bitrate"))),
						}))
					}
					τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
						λ.NewStr("hls"),
						λ.NewStr("dash"),
					))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒfiles_type = τmp1
						τmp2 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒconfig_files, "get", nil), ϒfiles_type, λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("cdns"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "items", nil)))
						for {
							if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
								break
							}
							τmp4 = τmp3
							ϒcdn_name = λ.GetItem(τmp4, λ.NewInt(0))
							ϒcdn_data = λ.GetItem(τmp4, λ.NewInt(1))
							ϒmanifest_url = λ.Cal(λ.GetAttr(ϒcdn_data, "get", nil), λ.NewStr("url"))
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒmanifest_url))) {
								continue
							}
							ϒformat_id = λ.Mod(λ.NewStr("%s-%s"), λ.NewTuple(
								ϒfiles_type,
								ϒcdn_name,
							))
							if λ.IsTrue(λ.Eq(ϒfiles_type, λ.NewStr("hls"))) {
								λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
									ϒmanifest_url,
									ϒvideo_id,
									λ.NewStr("mp4"),
									λ.NewStr("m3u8_native"),
								), λ.KWArgs{
									{Name: "m3u8_id", Value: ϒformat_id},
									{Name: "note", Value: λ.Mod(λ.NewStr("Downloading %s m3u8 information"), ϒcdn_name)},
									{Name: "fatal", Value: λ.False},
								}))
							} else {
								if λ.IsTrue(λ.Eq(ϒfiles_type, λ.NewStr("dash"))) {
									ϒmpd_pattern = λ.Mod(λ.NewStr("/%s/(?:sep/)?video/"), ϒvideo_id)
									ϒmpd_manifest_urls = λ.NewList()
									if λ.IsTrue(λ.Cal(Ωre.ϒsearch, ϒmpd_pattern, ϒmanifest_url)) {
										τmp4 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
											λ.NewTuple(
												λ.NewStr(""),
												λ.NewStr("video"),
											),
											λ.NewTuple(
												λ.NewStr("_sep"),
												λ.NewStr("sep/video"),
											),
										))
										for {
											if τmp5 = λ.NextDefault(τmp4, λ.AfterLast); τmp5 == λ.AfterLast {
												break
											}
											τmp6 = τmp5
											ϒsuffix = λ.GetItem(τmp6, λ.NewInt(0))
											ϒrepl = λ.GetItem(τmp6, λ.NewInt(1))
											λ.Cal(λ.GetAttr(ϒmpd_manifest_urls, "append", nil), λ.NewTuple(
												λ.Add(ϒformat_id, ϒsuffix),
												λ.Cal(Ωre.ϒsub, ϒmpd_pattern, λ.Mod(λ.NewStr("/%s/%s/"), λ.NewTuple(
													ϒvideo_id,
													ϒrepl,
												)), ϒmanifest_url),
											))
										}
									} else {
										ϒmpd_manifest_urls = λ.NewList(λ.NewTuple(
											ϒformat_id,
											ϒmanifest_url,
										))
									}
									τmp4 = λ.Cal(λ.BuiltinIter, ϒmpd_manifest_urls)
									for {
										if τmp5 = λ.NextDefault(τmp4, λ.AfterLast); τmp5 == λ.AfterLast {
											break
										}
										τmp6 = τmp5
										ϒf_id = λ.GetItem(τmp6, λ.NewInt(0))
										ϒm_url = λ.GetItem(τmp6, λ.NewInt(1))
										ϒmpd_formats = λ.Call(λ.GetAttr(ϒself, "_extract_mpd_formats", nil), λ.NewArgs(
											λ.Cal(λ.GetAttr(ϒm_url, "replace", nil), λ.NewStr("/master.json"), λ.NewStr("/master.mpd")),
											ϒvideo_id,
											ϒf_id,
											λ.Mod(λ.NewStr("Downloading %s MPD information"), ϒcdn_name),
										), λ.KWArgs{
											{Name: "fatal", Value: λ.False},
										})
										τmp6 = λ.Cal(λ.BuiltinIter, ϒmpd_formats)
										for {
											if τmp7 = λ.NextDefault(τmp6, λ.AfterLast); τmp7 == λ.AfterLast {
												break
											}
											ϒf = τmp7
											if λ.IsTrue(λ.Eq(λ.Cal(λ.GetAttr(ϒf, "get", nil), λ.NewStr("vcodec")), λ.NewStr("none"))) {
												λ.SetItem(ϒf, λ.NewStr("preference"), λ.Neg(λ.NewInt(50)))
											} else {
												if λ.IsTrue(λ.Eq(λ.Cal(λ.GetAttr(ϒf, "get", nil), λ.NewStr("acodec")), λ.NewStr("none"))) {
													λ.SetItem(ϒf, λ.NewStr("preference"), λ.Neg(λ.NewInt(40)))
												}
											}
										}
										λ.Cal(λ.GetAttr(ϒformats, "extend", nil), ϒmpd_formats)
									}
								}
							}
						}
					}
					ϒsubtitles = λ.NewDictWithTable(map[λ.Object]λ.Object{})
					ϒtext_tracks = λ.Cal(λ.GetAttr(λ.GetItem(ϒconfig, λ.NewStr("request")), "get", nil), λ.NewStr("text_tracks"))
					if λ.IsTrue(ϒtext_tracks) {
						τmp0 = λ.Cal(λ.BuiltinIter, ϒtext_tracks)
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒtt = τmp1
							λ.SetItem(ϒsubtitles, λ.GetItem(ϒtt, λ.NewStr("lang")), λ.NewList(λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("ext"): λ.NewStr("vtt"),
								λ.NewStr("url"): λ.Add(λ.NewStr("https://vimeo.com"), λ.GetItem(ϒtt, λ.NewStr("url"))),
							})))
						}
					}
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("title"):        ϒvideo_title,
						λ.NewStr("uploader"):     ϒvideo_uploader,
						λ.NewStr("uploader_id"):  ϒvideo_uploader_id,
						λ.NewStr("uploader_url"): ϒvideo_uploader_url,
						λ.NewStr("thumbnail"):    ϒvideo_thumbnail,
						λ.NewStr("duration"):     ϒvideo_duration,
						λ.NewStr("formats"):      ϒformats,
						λ.NewStr("subtitles"):    ϒsubtitles,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_LOGIN_REQUIRED"):        VimeoBaseInfoExtractor__LOGIN_REQUIRED,
				λ.NewStr("_NETRC_MACHINE"):         VimeoBaseInfoExtractor__NETRC_MACHINE,
				λ.NewStr("_login"):                 VimeoBaseInfoExtractor__login,
				λ.NewStr("_parse_config"):          VimeoBaseInfoExtractor__parse_config,
				λ.NewStr("_verify_video_password"): VimeoBaseInfoExtractor__verify_video_password,
				λ.NewStr("_vimeo_sort_formats"):    VimeoBaseInfoExtractor__vimeo_sort_formats,
			})
		}())
		VimeoIE = λ.Cal(λ.TypeType, λ.NewStr("VimeoIE"), λ.NewTuple(VimeoBaseInfoExtractor), func() λ.Dict {
			var (
				VimeoIE_IE_NAME                       λ.Object
				VimeoIE__TESTS                        λ.Object
				VimeoIE__VALID_URL                    λ.Object
				VimeoIE__extract_url                  λ.Object
				VimeoIE__extract_urls                 λ.Object
				VimeoIE__real_extract                 λ.Object
				VimeoIE__real_initialize              λ.Object
				VimeoIE__smuggle_referrer             λ.Object
				VimeoIE__verify_player_video_password λ.Object
			)
			λ.NewStr("Information extractor for vimeo.com.")
			VimeoIE__VALID_URL = λ.NewStr("(?x)\n                    https?://\n                        (?:\n                            (?:\n                                www|\n                                (?P<player>player)\n                            )\n                            \\.\n                        )?\n                        vimeo(?P<pro>pro)?\\.com/\n                        (?!(?:channels|album)/[^/?#]+/?(?:$|[?#])|[^/]+/review/|ondemand/)\n                        (?:.*?/)?\n                        (?:\n                            (?:\n                                play_redirect_hls|\n                                moogaloop\\.swf)\\?clip_id=\n                            )?\n                        (?:videos?/)?\n                        (?P<id>[0-9]+)\n                        (?:/[\\da-f]+)?\n                        /?(?:[?&].*)?(?:[#].*)?$\n                    ")
			VimeoIE_IE_NAME = λ.NewStr("vimeo")
			VimeoIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://vimeo.com/56015672#at=0"),
					λ.NewStr("md5"): λ.NewStr("8879b6cc097e987f02484baf890129e5"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           λ.NewStr("56015672"),
						λ.NewStr("ext"):          λ.NewStr("mp4"),
						λ.NewStr("title"):        λ.NewStr("youtube-dl test video - ★ \" ' 幸 / \\ ä ↭ 𝕐"),
						λ.NewStr("description"):  λ.NewStr("md5:509a9ad5c9bf97c60faee9203aca4479"),
						λ.NewStr("timestamp"):    λ.NewInt(1355990239),
						λ.NewStr("upload_date"):  λ.NewStr("20121220"),
						λ.NewStr("uploader_url"): λ.NewStr("re:https?://(?:www\\.)?vimeo\\.com/user7108434"),
						λ.NewStr("uploader_id"):  λ.NewStr("user7108434"),
						λ.NewStr("uploader"):     λ.NewStr("Filippo Valsorda"),
						λ.NewStr("duration"):     λ.NewInt(10),
						λ.NewStr("license"):      λ.NewStr("by-sa"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):  λ.NewStr("http://vimeopro.com/openstreetmapus/state-of-the-map-us-2013/video/68093876"),
					λ.NewStr("md5"):  λ.NewStr("3b5ca6aa22b60dfeeadf50b72e44ed82"),
					λ.NewStr("note"): λ.NewStr("Vimeo Pro video (#1197)"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           λ.NewStr("68093876"),
						λ.NewStr("ext"):          λ.NewStr("mp4"),
						λ.NewStr("uploader_url"): λ.NewStr("re:https?://(?:www\\.)?vimeo\\.com/openstreetmapus"),
						λ.NewStr("uploader_id"):  λ.NewStr("openstreetmapus"),
						λ.NewStr("uploader"):     λ.NewStr("OpenStreetMap US"),
						λ.NewStr("title"):        λ.NewStr("Andy Allan - Putting the Carto into OpenStreetMap Cartography"),
						λ.NewStr("description"):  λ.NewStr("md5:fd69a7b8d8c34a4e1d2ec2e4afd6ec30"),
						λ.NewStr("duration"):     λ.NewInt(1595),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):  λ.NewStr("http://player.vimeo.com/video/54469442"),
					λ.NewStr("md5"):  λ.NewStr("619b811a4417aa4abe78dc653becf511"),
					λ.NewStr("note"): λ.NewStr("Videos that embed the url in the player page"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           λ.NewStr("54469442"),
						λ.NewStr("ext"):          λ.NewStr("mp4"),
						λ.NewStr("title"):        λ.NewStr("Kathy Sierra: Building the minimum Badass User, Business of Software 2012"),
						λ.NewStr("uploader"):     λ.NewStr("The BLN & Business of Software"),
						λ.NewStr("uploader_url"): λ.NewStr("re:https?://(?:www\\.)?vimeo\\.com/theblnbusinessofsoftware"),
						λ.NewStr("uploader_id"):  λ.NewStr("theblnbusinessofsoftware"),
						λ.NewStr("duration"):     λ.NewInt(3610),
						λ.NewStr("description"):  λ.None,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):  λ.NewStr("http://vimeo.com/68375962"),
					λ.NewStr("md5"):  λ.NewStr("aaf896bdb7ddd6476df50007a0ac0ae7"),
					λ.NewStr("note"): λ.NewStr("Video protected with password"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           λ.NewStr("68375962"),
						λ.NewStr("ext"):          λ.NewStr("mp4"),
						λ.NewStr("title"):        λ.NewStr("youtube-dl password protected test video"),
						λ.NewStr("timestamp"):    λ.NewInt(1371200155),
						λ.NewStr("upload_date"):  λ.NewStr("20130614"),
						λ.NewStr("uploader_url"): λ.NewStr("re:https?://(?:www\\.)?vimeo\\.com/user18948128"),
						λ.NewStr("uploader_id"):  λ.NewStr("user18948128"),
						λ.NewStr("uploader"):     λ.NewStr("Jaime Marquínez Ferrándiz"),
						λ.NewStr("duration"):     λ.NewInt(10),
						λ.NewStr("description"):  λ.NewStr("md5:dca3ea23adb29ee387127bc4ddfce63f"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("videopassword"): λ.NewStr("youtube-dl"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://vimeo.com/channels/keypeele/75629013"),
					λ.NewStr("md5"): λ.NewStr("2f86a05afe9d7abc0b9126d229bbe15d"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           λ.NewStr("75629013"),
						λ.NewStr("ext"):          λ.NewStr("mp4"),
						λ.NewStr("title"):        λ.NewStr("Key & Peele: Terrorist Interrogation"),
						λ.NewStr("description"):  λ.NewStr("md5:8678b246399b070816b12313e8b4eb5c"),
						λ.NewStr("uploader_url"): λ.NewStr("re:https?://(?:www\\.)?vimeo\\.com/atencio"),
						λ.NewStr("uploader_id"):  λ.NewStr("atencio"),
						λ.NewStr("uploader"):     λ.NewStr("Peter Atencio"),
						λ.NewStr("channel_id"):   λ.NewStr("keypeele"),
						λ.NewStr("channel_url"):  λ.NewStr("re:https?://(?:www\\.)?vimeo\\.com/channels/keypeele"),
						λ.NewStr("timestamp"):    λ.NewInt(1380339469),
						λ.NewStr("upload_date"):  λ.NewStr("20130928"),
						λ.NewStr("duration"):     λ.NewInt(187),
					}),
					λ.NewStr("expected_warnings"): λ.NewList(λ.NewStr("Unable to download JSON metadata")),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):  λ.NewStr("http://vimeo.com/76979871"),
					λ.NewStr("note"): λ.NewStr("Video with subtitles"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           λ.NewStr("76979871"),
						λ.NewStr("ext"):          λ.NewStr("mp4"),
						λ.NewStr("title"):        λ.NewStr("The New Vimeo Player (You Know, For Videos)"),
						λ.NewStr("description"):  λ.NewStr("md5:2ec900bf97c3f389378a96aee11260ea"),
						λ.NewStr("timestamp"):    λ.NewInt(1381846109),
						λ.NewStr("upload_date"):  λ.NewStr("20131015"),
						λ.NewStr("uploader_url"): λ.NewStr("re:https?://(?:www\\.)?vimeo\\.com/staff"),
						λ.NewStr("uploader_id"):  λ.NewStr("staff"),
						λ.NewStr("uploader"):     λ.NewStr("Vimeo Staff"),
						λ.NewStr("duration"):     λ.NewInt(62),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):  λ.NewStr("https://player.vimeo.com/video/98044508"),
					λ.NewStr("note"): λ.NewStr("The js code contains assignments to the same variable as the config"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           λ.NewStr("98044508"),
						λ.NewStr("ext"):          λ.NewStr("mp4"),
						λ.NewStr("title"):        λ.NewStr("Pier Solar OUYA Official Trailer"),
						λ.NewStr("uploader"):     λ.NewStr("Tulio Gonçalves"),
						λ.NewStr("uploader_url"): λ.NewStr("re:https?://(?:www\\.)?vimeo\\.com/user28849593"),
						λ.NewStr("uploader_id"):  λ.NewStr("user28849593"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://vimeo.com/33951933"),
					λ.NewStr("md5"): λ.NewStr("53c688fa95a55bf4b7293d37a89c5c53"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           λ.NewStr("33951933"),
						λ.NewStr("ext"):          λ.NewStr("mp4"),
						λ.NewStr("title"):        λ.NewStr("FOX CLASSICS - Forever Classic ID - A Full Minute"),
						λ.NewStr("uploader"):     λ.NewStr("The DMCI"),
						λ.NewStr("uploader_url"): λ.NewStr("re:https?://(?:www\\.)?vimeo\\.com/dmci"),
						λ.NewStr("uploader_id"):  λ.NewStr("dmci"),
						λ.NewStr("timestamp"):    λ.NewInt(1324343742),
						λ.NewStr("upload_date"):  λ.NewStr("20111220"),
						λ.NewStr("description"):  λ.NewStr("md5:ae23671e82d05415868f7ad1aec21147"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://vimeo.com/channels/tributes/6213729"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           λ.NewStr("6213729"),
						λ.NewStr("ext"):          λ.NewStr("mp4"),
						λ.NewStr("title"):        λ.NewStr("Vimeo Tribute: The Shining"),
						λ.NewStr("uploader"):     λ.NewStr("Casey Donahue"),
						λ.NewStr("uploader_url"): λ.NewStr("re:https?://(?:www\\.)?vimeo\\.com/caseydonahue"),
						λ.NewStr("uploader_id"):  λ.NewStr("caseydonahue"),
						λ.NewStr("channel_url"):  λ.NewStr("re:https?://(?:www\\.)?vimeo\\.com/channels/tributes"),
						λ.NewStr("channel_id"):   λ.NewStr("tributes"),
						λ.NewStr("timestamp"):    λ.NewInt(1250886430),
						λ.NewStr("upload_date"):  λ.NewStr("20090821"),
						λ.NewStr("description"):  λ.NewStr("md5:bdbf314014e58713e6e5b66eb252f4a6"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
					λ.NewStr("expected_warnings"): λ.NewList(λ.NewStr("Unable to download JSON metadata")),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://vimeo.com/73445910"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           λ.NewStr("73445910"),
						λ.NewStr("ext"):          λ.NewStr("mp4"),
						λ.NewStr("title"):        λ.NewStr("The Reluctant Revolutionary"),
						λ.NewStr("uploader"):     λ.NewStr("10Ft Films"),
						λ.NewStr("uploader_url"): λ.NewStr("re:https?://(?:www\\.)?vimeo\\.com/tenfootfilms"),
						λ.NewStr("uploader_id"):  λ.NewStr("tenfootfilms"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://player.vimeo.com/video/68375962"),
					λ.NewStr("md5"): λ.NewStr("aaf896bdb7ddd6476df50007a0ac0ae7"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           λ.NewStr("68375962"),
						λ.NewStr("ext"):          λ.NewStr("mp4"),
						λ.NewStr("title"):        λ.NewStr("youtube-dl password protected test video"),
						λ.NewStr("uploader_url"): λ.NewStr("re:https?://(?:www\\.)?vimeo\\.com/user18948128"),
						λ.NewStr("uploader_id"):  λ.NewStr("user18948128"),
						λ.NewStr("uploader"):     λ.NewStr("Jaime Marquínez Ferrándiz"),
						λ.NewStr("duration"):     λ.NewInt(10),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("videopassword"): λ.NewStr("youtube-dl"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://vimeo.com/moogaloop.swf?clip_id=2539741"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://vimeo.com/109815029"),
					λ.NewStr("note"):          λ.NewStr("Video not completely processed, \"failed\" seed status"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://vimeo.com/groups/travelhd/videos/22439234"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://vimeo.com/album/2632481/video/79010983"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://vimeo.com/7809605"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://vimeo.com/160743502/abd0e13fb4"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			VimeoIE__smuggle_referrer = λ.NewFunction("_smuggle_referrer",
				[]λ.Param{
					{Name: "url"},
					{Name: "referrer_url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒreferrer_url = λargs[1]
						ϒurl          = λargs[0]
					)
					return λ.Cal(ϒsmuggle_url, ϒurl, λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("http_headers"): λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("Referer"): ϒreferrer_url,
						}),
					}))
				})
			VimeoIE__smuggle_referrer = λ.Cal(λ.StaticMethodType, VimeoIE__smuggle_referrer)
			VimeoIE__extract_urls = λ.NewFunction("_extract_urls",
				[]λ.Param{
					{Name: "url"},
					{Name: "webpage"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						PLAIN_EMBED_RE λ.Object
						ϒembed_re      λ.Object
						ϒmobj          λ.Object
						ϒurl           = λargs[0]
						ϒurls          λ.Object
						ϒwebpage       = λargs[1]
						τmp0           λ.Object
						τmp1           λ.Object
						τmp2           λ.Object
						τmp3           λ.Object
					)
					ϒurls = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfinditer, λ.NewStr("<iframe[^>]+?src=([\"\\'])(?P<url>(?:https?:)?//player\\.vimeo\\.com/video/\\d+.*?)\\1"), ϒwebpage))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒmobj = τmp1
						λ.Cal(λ.GetAttr(ϒurls, "append", nil), λ.Cal(λ.GetAttr(VimeoIE, "_smuggle_referrer", nil), λ.Cal(ϒunescapeHTML, λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("url"))), ϒurl))
					}
					PLAIN_EMBED_RE = λ.NewTuple(
						λ.NewStr("<embed[^>]+?src=([\"\\'])(?P<url>(?:https?:)?//(?:www\\.)?vimeo\\.com/moogaloop\\.swf.+?)\\1"),
						λ.NewStr("<video[^>]+src=([\"\\'])(?P<url>(?:https?:)?//(?:www\\.)?vimeo\\.com/[0-9]+)\\1"),
					)
					τmp0 = λ.Cal(λ.BuiltinIter, PLAIN_EMBED_RE)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒembed_re = τmp1
						τmp2 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfinditer, ϒembed_re, ϒwebpage))
						for {
							if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
								break
							}
							ϒmobj = τmp3
							λ.Cal(λ.GetAttr(ϒurls, "append", nil), λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("url")))
						}
					}
					return ϒurls
				})
			VimeoIE__extract_urls = λ.Cal(λ.StaticMethodType, VimeoIE__extract_urls)
			VimeoIE__extract_url = λ.NewFunction("_extract_url",
				[]λ.Param{
					{Name: "url"},
					{Name: "webpage"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒurl     = λargs[0]
						ϒurls    λ.Object
						ϒwebpage = λargs[1]
					)
					ϒurls = λ.Cal(λ.GetAttr(VimeoIE, "_extract_urls", nil), ϒurl, ϒwebpage)
					return func() λ.Object {
						if λ.IsTrue(ϒurls) {
							return λ.GetItem(ϒurls, λ.NewInt(0))
						} else {
							return λ.None
						}
					}()
				})
			VimeoIE__extract_url = λ.Cal(λ.StaticMethodType, VimeoIE__extract_url)
			VimeoIE__verify_player_video_password = λ.NewFunction("_verify_player_video_password",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
					{Name: "video_id"},
					{Name: "headers"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒchecked  λ.Object
						ϒdata     λ.Object
						ϒheaders  = λargs[3]
						ϒpassword λ.Object
						ϒself     = λargs[0]
						ϒurl      = λargs[1]
						ϒvideo_id = λargs[2]
					)
					ϒpassword = λ.Cal(λ.GetAttr(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "params", nil), "get", nil), λ.NewStr("videopassword"))
					if λ.IsTrue(λ.NewBool(ϒpassword == λ.None)) {
						panic(λ.Raise(λ.Cal(ExtractorError, λ.NewStr("This video is protected by a password, use the --video-password option"))))
					}
					ϒdata = λ.Cal(ϒurlencode_postdata, λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("password"): λ.Cal(λ.None, λ.Cal(λ.GetAttr(ϒpassword, "encode", nil))),
					}))
					ϒheaders = λ.Cal(ϒmerge_dicts, ϒheaders, λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("Content-Type"): λ.NewStr("application/x-www-form-urlencoded"),
					}))
					ϒchecked = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Add(ϒurl, λ.NewStr("/check-password")),
						ϒvideo_id,
						λ.NewStr("Verifying the password"),
					), λ.KWArgs{
						{Name: "data", Value: ϒdata},
						{Name: "headers", Value: ϒheaders},
					})
					if λ.IsTrue(λ.NewBool(ϒchecked == λ.False)) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.NewStr("Wrong video password")), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					return ϒchecked
				})
			VimeoIE__real_initialize = λ.NewFunction("_real_initialize",
				[]λ.Param{
					{Name: "self"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒself = λargs[0]
					)
					λ.Cal(λ.GetAttr(ϒself, "_login", nil))
					return λ.None
				})
			VimeoIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcc_license             λ.Object
						ϒchannel_id             λ.Object
						ϒchannel_url            λ.Object
						ϒcomment_count          λ.Object
						ϒconfig                 λ.Object
						ϒconfig_json            λ.Object
						ϒconfig_re              λ.Object
						ϒconfig_url             λ.Object
						ϒdata                   λ.Object
						ϒdownload_data          λ.Object
						ϒdownload_request       λ.Object
						ϒdownload_url           λ.Object
						ϒerrmsg                 λ.Object
						ϒext                    λ.Object
						ϒfeature_id             λ.Object
						ϒformats                λ.Object
						ϒheaders                λ.Object
						ϒinfo_dict              λ.Object
						ϒinfo_dict_config       λ.Object
						ϒis_rented              λ.Object
						ϒjson_ld                λ.Object
						ϒlike_count             λ.Object
						ϒm_variable_name        λ.Object
						ϒmobj                   λ.Object
						ϒorig_url               λ.Object
						ϒorig_webpage           λ.Object
						ϒpage_config            λ.Object
						ϒredirect_url           λ.Object
						ϒrequest                λ.Object
						ϒseed_status            λ.Object
						ϒself                   = λargs[0]
						ϒsource_file            λ.Object
						ϒsource_name            λ.Object
						ϒtimestamp              λ.Object
						ϒurl                    = λargs[1]
						ϒurlh                   λ.Object
						ϒvideo_description      λ.Object
						ϒvideo_id               λ.Object
						ϒview_count             λ.Object
						ϒvimeo_clip_page_config λ.Object
						ϒvimeo_config           λ.Object
						ϒvod                    λ.Object
						ϒwebpage                λ.Object
						τmp0                    λ.Object
						τmp1                    λ.Object
						τmp2                    λ.Object
						τmp3                    λ.Object
					)
					_ = τmp0
					_ = τmp1
					_ = τmp2
					_ = τmp3
					τmp0 = λ.Cal(ϒunsmuggle_url, ϒurl, λ.NewDictWithTable(map[λ.Object]λ.Object{}))
					ϒurl = λ.GetItem(τmp0, λ.NewInt(0))
					ϒdata = λ.GetItem(τmp0, λ.NewInt(1))
					ϒheaders = λ.Cal(λ.GetAttr(ϒstd_headers, "copy", nil))
					if λ.IsTrue(λ.NewBool(λ.Contains(ϒdata, λ.NewStr("http_headers")))) {
						λ.Cal(λ.GetAttr(ϒheaders, "update", nil), λ.GetItem(ϒdata, λ.NewStr("http_headers")))
					}
					if λ.IsTrue(λ.NewBool(!λ.Contains(ϒheaders, λ.NewStr("Referer")))) {
						λ.SetItem(ϒheaders, λ.NewStr("Referer"), ϒurl)
					}
					ϒchannel_id = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("vimeo\\.com/channels/([^/]+)"),
						ϒurl,
						λ.NewStr("channel id"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("id"))
					ϒorig_url = ϒurl
					if λ.IsTrue(func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("pro")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("player"))
						}
					}()) {
						ϒurl = λ.Add(λ.NewStr("https://player.vimeo.com/video/"), ϒvideo_id)
					} else {
						if λ.IsTrue(λ.Cal(λ.BuiltinAny, λ.Cal(λ.NewFunction("<generator>",
							nil,
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								return λ.NewGenerator(func(λgen λ.Generator) λ.Object {
									var (
										ϒp   λ.Object
										τmp0 λ.Object
										τmp1 λ.Object
									)
									τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
										λ.NewStr("play_redirect_hls"),
										λ.NewStr("moogaloop.swf"),
									))
									for {
										if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
											break
										}
										ϒp = τmp1
										λgen.Yield(λ.NewBool(λ.Contains(ϒurl, ϒp)))
									}
									return λ.None
								})
							})))) {
							ϒurl = λ.Add(λ.NewStr("https://vimeo.com/"), ϒvideo_id)
						}
					}
					ϒrequest = λ.Call(ϒsanitized_Request, λ.NewArgs(ϒurl), λ.KWArgs{
						{Name: "headers", Value: ϒheaders},
					})
					τmp0, τmp1 = func() (λexit λ.Object, λret λ.Object) {
						defer λ.CatchMulti(
							nil,
							&λ.Catcher{ExtractorError, func(λex λ.BaseException) {
								ϒee := λex
								if λ.IsTrue(func() λ.Object {
									if λv := λ.Cal(λ.BuiltinIsInstance, λ.GetAttr(ϒee, "cause", nil), ϒcompat_HTTPError); !λ.IsTrue(λv) {
										return λv
									} else {
										return λ.Eq(λ.GetAttr(λ.GetAttr(ϒee, "cause", nil), "code", nil), λ.NewInt(403))
									}
								}()) {
									ϒerrmsg = λ.Cal(λ.GetAttr(λ.GetAttr(ϒee, "cause", nil), "read", nil))
									if λ.IsTrue(λ.NewBool(λ.Contains(ϒerrmsg, λ.NewBytes(0x42, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x73, 0x20, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x20, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x20, 0x68, 0x65, 0x72, 0x65)))) {
										panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.NewStr("Cannot download embed-only video without embedding URL. Please call youtube-dl with the URL of the page that embeds this video.")), λ.KWArgs{
											{Name: "expected", Value: λ.True},
										})))
									}
								}
								panic(λ.Raise(λex))
							}},
						)
						τmp2 = λ.Cal(λ.GetAttr(ϒself, "_download_webpage_handle", nil), ϒrequest, ϒvideo_id)
						ϒwebpage = λ.GetItem(τmp2, λ.NewInt(0))
						ϒurlh = λ.GetItem(τmp2, λ.NewInt(1))
						ϒredirect_url = λ.Cal(ϒcompat_str, λ.Cal(λ.GetAttr(ϒurlh, "geturl", nil)))
						if λ.IsTrue(λ.Cal(λ.GetAttr(VimeoOndemandIE, "suitable", nil), ϒredirect_url)) {
							λexit, λret = λ.BlockExitReturn, λ.Cal(λ.GetAttr(ϒself, "url_result", nil), ϒredirect_url, λ.Cal(λ.GetAttr(VimeoOndemandIE, "ie_key", nil)))
							return
						}
						return λ.BlockExitNormally, nil
					}()
					if τmp0 == λ.BlockExitReturn {
						return τmp1
					}
					λ.Cal(λ.GetAttr(ϒself, "report_extraction", nil), ϒvideo_id)
					ϒvimeo_config = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("vimeo\\.config\\s*=\\s*(?:({.+?})|_extend\\([^,]+,\\s+({.+?})\\));"),
						ϒwebpage,
						λ.NewStr("vimeo config"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(ϒvimeo_config) {
						ϒseed_status = λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), ϒvimeo_config, ϒvideo_id), "get", nil), λ.NewStr("seed_status"), λ.NewDictWithTable(map[λ.Object]λ.Object{}))
						if λ.IsTrue(λ.Eq(λ.Cal(λ.GetAttr(ϒseed_status, "get", nil), λ.NewStr("state")), λ.NewStr("failed"))) {
							panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.NewStr("%s said: %s"), λ.NewTuple(
								λ.GetAttr(ϒself, "IE_NAME", nil),
								λ.GetItem(ϒseed_status, λ.NewStr("title")),
							))), λ.KWArgs{
								{Name: "expected", Value: λ.True},
							})))
						}
					}
					ϒcc_license = λ.None
					ϒtimestamp = λ.None
					τmp1, τmp0 = func() (λexit λ.Object, λret λ.Object) {
						defer λ.CatchMulti(
							func() {
								if λ.IsTrue(λ.Eq(λ.Cal(λ.GetAttr(ϒconfig, "get", nil), λ.NewStr("view")), λ.NewInt(4))) {
									ϒconfig = λ.Cal(λ.GetAttr(ϒself, "_verify_player_video_password", nil), ϒredirect_url, ϒvideo_id, ϒheaders)
								}
							},
							&λ.Catcher{λ.ExceptionType, func(λex λ.BaseException) {
								ϒe := λex
								if λ.IsTrue(λ.Cal(Ωre.ϒsearch, λ.NewStr("The creator of this video has not given you permission to embed it on this domain."), ϒwebpage)) {
									panic(λ.Raise(λ.Cal(ExtractorError, λ.NewStr("The author has restricted the access to this video, try with the \"--referer\" option"))))
								}
								if λ.IsTrue(λ.NewBool(λ.Cal(Ωre.ϒsearch, λ.NewStr("<form[^>]+?id=\"pw_form\""), ϒwebpage) != λ.None)) {
									if λ.IsTrue(λ.NewBool(λ.Contains(ϒdata, λ.NewStr("_video_password_verified")))) {
										panic(λ.Raise(λ.Cal(ExtractorError, λ.NewStr("video password verification failed!"))))
									}
									λ.Cal(λ.GetAttr(ϒself, "_verify_video_password", nil), ϒredirect_url, ϒvideo_id, ϒwebpage)
									λexit, λret = λ.BlockExitReturn, λ.Cal(λ.GetAttr(ϒself, "_real_extract", nil), λ.Cal(ϒsmuggle_url, ϒredirect_url, λ.NewDictWithTable(map[λ.Object]λ.Object{
										λ.NewStr("_video_password_verified"): λ.NewStr("verified"),
									})))
									return
								} else {
									panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.NewStr("Unable to extract info section")), λ.KWArgs{
										{Name: "cause", Value: ϒe},
									})))
								}
							}},
						)
						τmp2, τmp3 = func() (λexit λ.Object, λret λ.Object) {
							defer λ.CatchMulti(
								nil,
								&λ.Catcher{RegexNotFoundError, func(λex λ.BaseException) {
									ϒm_variable_name = λ.Cal(Ωre.ϒsearch, λ.NewStr("(\\w)\\.video\\.id"), ϒwebpage)
									if λ.IsTrue(λ.NewBool(ϒm_variable_name != λ.None)) {
										ϒconfig_re = λ.NewList(λ.Mod(λ.NewStr("%s=({[^}].+?});"), λ.Cal(Ωre.ϒescape, λ.Cal(λ.GetAttr(ϒm_variable_name, "group", nil), λ.NewInt(1)))))
									} else {
										ϒconfig_re = λ.NewList(
											λ.NewStr(" = {config:({.+?}),assets:"),
											λ.NewStr("(?:[abc])=({.+?});"),
										)
									}
									λ.Cal(λ.GetAttr(ϒconfig_re, "append", nil), λ.NewStr("\\bvar\\s+r\\s*=\\s*({.+?})\\s*;"))
									λ.Cal(λ.GetAttr(ϒconfig_re, "append", nil), λ.NewStr("\\bconfig\\s*=\\s*({.+?})\\s*;"))
									ϒconfig = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
										ϒconfig_re,
										ϒwebpage,
										λ.NewStr("info section"),
									), λ.KWArgs{
										{Name: "flags", Value: Ωre.DOTALL},
									})
									ϒconfig = λ.Cal(Ωjson.ϒloads, ϒconfig)
								}},
							)
							ϒconfig_url = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
								λ.NewStr(" data-config-url=\"(.+?)\""),
								ϒwebpage,
								λ.NewStr("config URL"),
							), λ.KWArgs{
								{Name: "default", Value: λ.None},
							})
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒconfig_url))) {
								ϒvimeo_clip_page_config = λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("vimeo\\.clip_page_config\\s*=\\s*({.+?});"), ϒwebpage, λ.NewStr("vimeo clip page config"))
								ϒpage_config = λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), ϒvimeo_clip_page_config, ϒvideo_id)
								ϒconfig_url = λ.GetItem(λ.GetItem(ϒpage_config, λ.NewStr("player")), λ.NewStr("config_url"))
								ϒcc_license = λ.Cal(λ.GetAttr(ϒpage_config, "get", nil), λ.NewStr("cc_license"))
								ϒtimestamp = λ.Cal(ϒtry_get, ϒpage_config, λ.NewFunction("<lambda>",
									[]λ.Param{
										{Name: "x"},
									},
									0, false, false,
									func(λargs []λ.Object) λ.Object {
										var (
											ϒx = λargs[0]
										)
										return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("clip")), λ.NewStr("uploaded_on"))
									}), ϒcompat_str)
							}
							ϒconfig_json = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒconfig_url, ϒvideo_id)
							ϒconfig = λ.Cal(Ωjson.ϒloads, ϒconfig_json)
							return λ.BlockExitNormally, nil
						}()
						return λ.BlockExitNormally, nil
					}()
					if τmp1 == λ.BlockExitReturn {
						return τmp0
					}
					ϒvod = λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒconfig, "get", nil), λ.NewStr("video"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("vod"), λ.NewDictWithTable(map[λ.Object]λ.Object{}))
					ϒis_rented = λ.NewFunction("is_rented",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒlabel           λ.Object
								ϒpurchase_option λ.Object
								τmp0             λ.Object
								τmp1             λ.Object
							)
							if λ.IsTrue(λ.NewBool(λ.Contains(ϒwebpage, λ.NewStr(">You rented this title.<")))) {
								return λ.True
							}
							if λ.IsTrue(λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒconfig, "get", nil), λ.NewStr("user"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("purchased"))) {
								return λ.True
							}
							τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒvod, "get", nil), λ.NewStr("purchase_options"), λ.NewList()))
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒpurchase_option = τmp1
								if λ.IsTrue(λ.Cal(λ.GetAttr(ϒpurchase_option, "get", nil), λ.NewStr("purchased"))) {
									return λ.True
								}
								ϒlabel = λ.Cal(λ.GetAttr(ϒpurchase_option, "get", nil), λ.NewStr("label_string"))
								if λ.IsTrue(func() λ.Object {
									if λv := ϒlabel; !λ.IsTrue(λv) {
										return λv
									} else {
										return func() λ.Object {
											if λv := λ.Cal(λ.GetAttr(ϒlabel, "startswith", nil), λ.NewStr("You rented this")); λ.IsTrue(λv) {
												return λv
											} else {
												return λ.Cal(λ.GetAttr(ϒlabel, "endswith", nil), λ.NewStr(" remaining"))
											}
										}()
									}
								}()) {
									return λ.True
								}
							}
							return λ.False
						})
					if λ.IsTrue(func() λ.Object {
						if λv := λ.Cal(ϒis_rented); !λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒvod, "get", nil), λ.NewStr("is_trailer"))
						}
					}()) {
						ϒfeature_id = λ.Cal(λ.GetAttr(ϒvod, "get", nil), λ.NewStr("feature_id"))
						if λ.IsTrue(func() λ.Object {
							if λv := ϒfeature_id; !λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(!λ.IsTrue(λ.Cal(λ.GetAttr(ϒdata, "get", nil), λ.NewStr("force_feature_id"), λ.False)))
							}
						}()) {
							return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), λ.Cal(ϒsmuggle_url, λ.Mod(λ.NewStr("https://player.vimeo.com/player/%s"), ϒfeature_id), λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("force_feature_id"): λ.True,
							})), λ.NewStr("Vimeo"))
						}
					}
					ϒvideo_description = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
						λ.NewStr("(?s)<div\\s+class=\"[^\"]*description[^\"]*\"[^>]*>(.*?)</div>"),
						ϒwebpage,
						λ.NewStr("description"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒvideo_description))) {
						ϒvideo_description = λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
							λ.NewStr("description"),
							ϒwebpage,
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						})
					}
					if λ.IsTrue(func() λ.Object {
						if λv := λ.NewBool(!λ.IsTrue(ϒvideo_description)); !λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("pro"))
						}
					}()) {
						ϒorig_webpage = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
							ϒorig_url,
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "note", Value: λ.NewStr("Downloading webpage for description")},
							{Name: "fatal", Value: λ.False},
						})
						if λ.IsTrue(ϒorig_webpage) {
							ϒvideo_description = λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
								λ.NewStr("description"),
								ϒorig_webpage,
							), λ.KWArgs{
								{Name: "default", Value: λ.None},
							})
						}
					}
					if λ.IsTrue(func() λ.Object {
						if λv := λ.NewBool(!λ.IsTrue(ϒvideo_description)); !λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewBool(!λ.IsTrue(λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("player"))))
						}
					}()) {
						λ.Cal(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "report_warning", nil), λ.NewStr("Cannot find video description"))
					}
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒtimestamp))) {
						ϒtimestamp = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewStr("<time[^>]+datetime=\"([^\"]+)\""),
							ϒwebpage,
							λ.NewStr("timestamp"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						})
					}
					τmp0, τmp1 = func() (λexit λ.Object, λret λ.Object) {
						defer λ.CatchMulti(
							nil,
							&λ.Catcher{RegexNotFoundError, func(λex λ.BaseException) {
								ϒview_count = λ.None
								ϒlike_count = λ.None
								ϒcomment_count = λ.None
							}},
						)
						ϒview_count = λ.Cal(λ.IntType, λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("UserPlays:(\\d+)"), ϒwebpage, λ.NewStr("view count")))
						ϒlike_count = λ.Cal(λ.IntType, λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("UserLikes:(\\d+)"), ϒwebpage, λ.NewStr("like count")))
						ϒcomment_count = λ.Cal(λ.IntType, λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("UserComments:(\\d+)"), ϒwebpage, λ.NewStr("comment count")))
						return λ.BlockExitNormally, nil
					}()
					ϒformats = λ.NewList()
					ϒdownload_request = λ.Call(ϒsanitized_Request, λ.NewArgs(λ.Mod(λ.NewStr("https://vimeo.com/%s?action=load_download_config"), ϒvideo_id)), λ.KWArgs{
						{Name: "headers", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("X-Requested-With"): λ.NewStr("XMLHttpRequest"),
						})},
					})
					ϒdownload_data = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						ϒdownload_request,
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					if λ.IsTrue(ϒdownload_data) {
						ϒsource_file = λ.Cal(λ.GetAttr(ϒdownload_data, "get", nil), λ.NewStr("source_file"))
						if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒsource_file, λ.DictType)) {
							ϒdownload_url = λ.Cal(λ.GetAttr(ϒsource_file, "get", nil), λ.NewStr("download_url"))
							if λ.IsTrue(func() λ.Object {
								if λv := ϒdownload_url; !λ.IsTrue(λv) {
									return λv
								} else if λv := λ.NewBool(!λ.IsTrue(λ.Cal(λ.GetAttr(ϒsource_file, "get", nil), λ.NewStr("is_cold")))); !λ.IsTrue(λv) {
									return λv
								} else {
									return λ.NewBool(!λ.IsTrue(λ.Cal(λ.GetAttr(ϒsource_file, "get", nil), λ.NewStr("is_defrosting"))))
								}
							}()) {
								ϒsource_name = λ.Cal(λ.GetAttr(ϒsource_file, "get", nil), λ.NewStr("public_name"), λ.NewStr("Original"))
								if λ.IsTrue(λ.Cal(λ.GetAttr(ϒself, "_is_valid_url", nil), ϒdownload_url, ϒvideo_id, λ.Mod(λ.NewStr("%s video"), ϒsource_name))) {
									ϒext = λ.Cal(λ.GetAttr(func() λ.Object {
										if λv := λ.Cal(ϒtry_get, ϒsource_file, λ.NewFunction("<lambda>",
											[]λ.Param{
												{Name: "x"},
											},
											0, false, false,
											func(λargs []λ.Object) λ.Object {
												var (
													ϒx = λargs[0]
												)
												return λ.GetItem(ϒx, λ.NewStr("extension"))
											}), ϒcompat_str); λ.IsTrue(λv) {
											return λv
										} else if λv := λ.Cal(ϒdetermine_ext, ϒdownload_url, λ.None); λ.IsTrue(λv) {
											return λv
										} else {
											return λ.NewStr("mp4")
										}
									}(), "lower", nil))
									λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
										λ.NewStr("url"):        ϒdownload_url,
										λ.NewStr("ext"):        ϒext,
										λ.NewStr("width"):      λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒsource_file, "get", nil), λ.NewStr("width"))),
										λ.NewStr("height"):     λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒsource_file, "get", nil), λ.NewStr("height"))),
										λ.NewStr("filesize"):   λ.Cal(ϒparse_filesize, λ.Cal(λ.GetAttr(ϒsource_file, "get", nil), λ.NewStr("size"))),
										λ.NewStr("format_id"):  ϒsource_name,
										λ.NewStr("preference"): λ.NewInt(1),
									}))
								}
							}
						}
					}
					ϒinfo_dict_config = λ.Cal(λ.GetAttr(ϒself, "_parse_config", nil), ϒconfig, ϒvideo_id)
					λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.GetItem(ϒinfo_dict_config, λ.NewStr("formats")))
					λ.Cal(λ.GetAttr(ϒself, "_vimeo_sort_formats", nil), ϒformats)
					ϒjson_ld = λ.Call(λ.GetAttr(ϒself, "_search_json_ld", nil), λ.NewArgs(
						ϒwebpage,
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "default", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{})},
					})
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒcc_license))) {
						ϒcc_license = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewStr("<link[^>]+rel=[\"\\']license[\"\\'][^>]+href=([\"\\'])(?P<license>(?:(?!\\1).)+)\\1"),
							ϒwebpage,
							λ.NewStr("license"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
							{Name: "group", Value: λ.NewStr("license")},
						})
					}
					ϒchannel_url = func() λ.Object {
						if λ.IsTrue(ϒchannel_id) {
							return λ.Mod(λ.NewStr("https://vimeo.com/channels/%s"), ϒchannel_id)
						} else {
							return λ.None
						}
					}()
					ϒinfo_dict = λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):            ϒvideo_id,
						λ.NewStr("formats"):       ϒformats,
						λ.NewStr("timestamp"):     λ.Cal(ϒunified_timestamp, ϒtimestamp),
						λ.NewStr("description"):   ϒvideo_description,
						λ.NewStr("webpage_url"):   ϒurl,
						λ.NewStr("view_count"):    ϒview_count,
						λ.NewStr("like_count"):    ϒlike_count,
						λ.NewStr("comment_count"): ϒcomment_count,
						λ.NewStr("license"):       ϒcc_license,
						λ.NewStr("channel_id"):    ϒchannel_id,
						λ.NewStr("channel_url"):   ϒchannel_url,
					})
					ϒinfo_dict = λ.Cal(ϒmerge_dicts, ϒinfo_dict, ϒinfo_dict_config, ϒjson_ld)
					return ϒinfo_dict
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):                       VimeoIE_IE_NAME,
				λ.NewStr("_TESTS"):                        VimeoIE__TESTS,
				λ.NewStr("_VALID_URL"):                    VimeoIE__VALID_URL,
				λ.NewStr("_extract_url"):                  VimeoIE__extract_url,
				λ.NewStr("_extract_urls"):                 VimeoIE__extract_urls,
				λ.NewStr("_real_extract"):                 VimeoIE__real_extract,
				λ.NewStr("_real_initialize"):              VimeoIE__real_initialize,
				λ.NewStr("_smuggle_referrer"):             VimeoIE__smuggle_referrer,
				λ.NewStr("_verify_player_video_password"): VimeoIE__verify_player_video_password,
			})
		}())
		VimeoOndemandIE = λ.Cal(λ.TypeType, λ.NewStr("VimeoOndemandIE"), λ.NewTuple(VimeoBaseInfoExtractor), func() λ.Dict {
			var (
				VimeoOndemandIE_IE_NAME       λ.Object
				VimeoOndemandIE__TESTS        λ.Object
				VimeoOndemandIE__VALID_URL    λ.Object
				VimeoOndemandIE__real_extract λ.Object
			)
			VimeoOndemandIE_IE_NAME = λ.NewStr("vimeo:ondemand")
			VimeoOndemandIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?vimeo\\.com/ondemand/(?P<id>[^/?#&]+)")
			VimeoOndemandIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://vimeo.com/ondemand/20704"),
					λ.NewStr("md5"): λ.NewStr("c424deda8c7f73c1dfb3edd7630e2f35"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           λ.NewStr("105442900"),
						λ.NewStr("ext"):          λ.NewStr("mp4"),
						λ.NewStr("title"):        λ.NewStr("המעבדה - במאי יותם פלדמן"),
						λ.NewStr("uploader"):     λ.NewStr("גם סרטים"),
						λ.NewStr("uploader_url"): λ.NewStr("re:https?://(?:www\\.)?vimeo\\.com/gumfilms"),
						λ.NewStr("uploader_id"):  λ.NewStr("gumfilms"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("format"): λ.NewStr("best[protocol=https]"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://vimeo.com/ondemand/36938/126682985"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           λ.NewStr("126682985"),
						λ.NewStr("ext"):          λ.NewStr("mp4"),
						λ.NewStr("title"):        λ.NewStr("Rävlock, rätt läte på rätt plats"),
						λ.NewStr("uploader"):     λ.NewStr("Lindroth & Norin"),
						λ.NewStr("uploader_url"): λ.NewStr("re:https?://(?:www\\.)?vimeo\\.com/user14430847"),
						λ.NewStr("uploader_id"):  λ.NewStr("user14430847"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://vimeo.com/ondemand/nazmaalik"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://vimeo.com/ondemand/141692381"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://vimeo.com/ondemand/thelastcolony/150274832"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			VimeoOndemandIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒself     = λargs[0]
						ϒurl      = λargs[1]
						ϒvideo_id λ.Object
						ϒwebpage  λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), λ.Cal(λ.GetAttr(VimeoIE, "_smuggle_referrer", nil), λ.Cal(λ.GetAttr(ϒself, "_og_search_video_url", nil), ϒwebpage), ϒurl), λ.Cal(λ.GetAttr(VimeoIE, "ie_key", nil)))
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):       VimeoOndemandIE_IE_NAME,
				λ.NewStr("_TESTS"):        VimeoOndemandIE__TESTS,
				λ.NewStr("_VALID_URL"):    VimeoOndemandIE__VALID_URL,
				λ.NewStr("_real_extract"): VimeoOndemandIE__real_extract,
			})
		}())
		VimeoChannelIE = λ.Cal(λ.TypeType, λ.NewStr("VimeoChannelIE"), λ.NewTuple(VimeoBaseInfoExtractor), func() λ.Dict {
			var (
				VimeoChannelIE__VALID_URL λ.Object
			)
			VimeoChannelIE__VALID_URL = λ.NewStr("https://vimeo\\.com/channels/(?P<id>[^/?#]+)/?(?:$|[?#])")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): VimeoChannelIE__VALID_URL,
			})
		}())
		VimeoUserIE = λ.Cal(λ.TypeType, λ.NewStr("VimeoUserIE"), λ.NewTuple(VimeoChannelIE), func() λ.Dict {
			var (
				VimeoUserIE__VALID_URL λ.Object
			)
			VimeoUserIE__VALID_URL = λ.NewStr("https://vimeo\\.com/(?!(?:[0-9]+|watchlater)(?:$|[?#/]))(?P<name>[^/]+)(?:/videos|[#?]|$)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): VimeoUserIE__VALID_URL,
			})
		}())
		VimeoAlbumIE = λ.Cal(λ.TypeType, λ.NewStr("VimeoAlbumIE"), λ.NewTuple(VimeoChannelIE), func() λ.Dict {
			var (
				VimeoAlbumIE__VALID_URL λ.Object
			)
			VimeoAlbumIE__VALID_URL = λ.NewStr("https://vimeo\\.com/album/(?P<id>\\d+)(?:$|[?#]|/(?!video))")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): VimeoAlbumIE__VALID_URL,
			})
		}())
		VimeoGroupsIE = λ.Cal(λ.TypeType, λ.NewStr("VimeoGroupsIE"), λ.NewTuple(VimeoAlbumIE), func() λ.Dict {
			var (
				VimeoGroupsIE__VALID_URL λ.Object
			)
			VimeoGroupsIE__VALID_URL = λ.NewStr("https://vimeo\\.com/groups/(?P<name>[^/]+)(?:/(?!videos?/\\d+)|$)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): VimeoGroupsIE__VALID_URL,
			})
		}())
		VimeoReviewIE = λ.Cal(λ.TypeType, λ.NewStr("VimeoReviewIE"), λ.NewTuple(VimeoBaseInfoExtractor), func() λ.Dict {
			var (
				VimeoReviewIE__VALID_URL λ.Object
			)
			VimeoReviewIE__VALID_URL = λ.NewStr("https://vimeo\\.com/[^/]+/review/(?P<id>[^/]+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): VimeoReviewIE__VALID_URL,
			})
		}())
		VimeoWatchLaterIE = λ.Cal(λ.TypeType, λ.NewStr("VimeoWatchLaterIE"), λ.NewTuple(VimeoChannelIE), func() λ.Dict {
			var (
				VimeoWatchLaterIE__VALID_URL λ.Object
			)
			VimeoWatchLaterIE__VALID_URL = λ.NewStr("https://vimeo\\.com/(?:home/)?watchlater|:vimeowatchlater")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): VimeoWatchLaterIE__VALID_URL,
			})
		}())
		VimeoLikesIE = λ.Cal(λ.TypeType, λ.NewStr("VimeoLikesIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				VimeoLikesIE__VALID_URL λ.Object
			)
			VimeoLikesIE__VALID_URL = λ.NewStr("https://(?:www\\.)?vimeo\\.com/(?P<id>[^/]+)/likes/?(?:$|[?#]|sort:)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): VimeoLikesIE__VALID_URL,
			})
		}())
		VHXEmbedIE = λ.Cal(λ.TypeType, λ.NewStr("VHXEmbedIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				VHXEmbedIE__VALID_URL λ.Object
			)
			VHXEmbedIE__VALID_URL = λ.NewStr("https?://embed\\.vhx\\.tv/videos/(?P<id>\\d+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): VHXEmbedIE__VALID_URL,
			})
		}())
	})
}

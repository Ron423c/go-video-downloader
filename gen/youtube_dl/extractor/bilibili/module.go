// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * bilibili/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/bilibili.py
 */

package bilibili

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	BiliBiliBangumiIE    λ.Object
	BiliBiliIE           λ.Object
	BilibiliAudioAlbumIE λ.Object
	BilibiliAudioBaseIE  λ.Object
	BilibiliAudioIE      λ.Object
	ExtractorError       λ.Object
	InfoExtractor        λ.Object
	ϒcompat_parse_qs     λ.Object
	ϒfloat_or_none       λ.Object
	ϒint_or_none         λ.Object
	ϒparse_iso8601       λ.Object
	ϒsmuggle_url         λ.Object
	ϒstr_or_none         λ.Object
	ϒstrip_jsonp         λ.Object
	ϒunified_timestamp   λ.Object
	ϒunsmuggle_url       λ.Object
	ϒurlencode_postdata  λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_parse_qs = Ωcompat.ϒcompat_parse_qs
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		ϒsmuggle_url = Ωutils.ϒsmuggle_url
		ϒstr_or_none = Ωutils.ϒstr_or_none
		ϒstrip_jsonp = Ωutils.ϒstrip_jsonp
		ϒunified_timestamp = Ωutils.ϒunified_timestamp
		ϒunsmuggle_url = Ωutils.ϒunsmuggle_url
		ϒurlencode_postdata = Ωutils.ϒurlencode_postdata
		BiliBiliIE = λ.Cal(λ.TypeType, λ.StrLiteral("BiliBiliIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				BiliBiliIE__VALID_URL λ.Object
			)
			BiliBiliIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.|bangumi\\.|)bilibili\\.(?:tv|com)/(?:video/av|anime/(?P<anime_id>\\d+)/play#)(?P<id>\\d+)")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": BiliBiliIE__VALID_URL,
			})
		}())
		BiliBiliBangumiIE = λ.Cal(λ.TypeType, λ.StrLiteral("BiliBiliBangumiIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				BiliBiliBangumiIE__VALID_URL λ.Object
				BiliBiliBangumiIE_suitable   λ.Object
			)
			BiliBiliBangumiIE__VALID_URL = λ.StrLiteral("https?://bangumi\\.bilibili\\.com/anime/(?P<id>\\d+)")
			BiliBiliBangumiIE_suitable = λ.NewFunction("suitable",
				[]λ.Param{
					{Name: "cls"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls = λargs[0]
						ϒurl = λargs[1]
					)
					return func() λ.Object {
						if λ.IsTrue(λ.Calm(BiliBiliIE, "suitable", ϒurl)) {
							return λ.False
						} else {
							return λ.Calm(λ.Cal(λ.SuperType, BiliBiliBangumiIE, ϒcls), "suitable", ϒurl)
						}
					}()
				})
			BiliBiliBangumiIE_suitable = λ.Cal(λ.ClassMethodType, BiliBiliBangumiIE_suitable)
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": BiliBiliBangumiIE__VALID_URL,
				"suitable":   BiliBiliBangumiIE_suitable,
			})
		}())
		BilibiliAudioBaseIE = λ.Cal(λ.TypeType, λ.StrLiteral("BilibiliAudioBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				BilibiliAudioBaseIE__call_api λ.Object
			)
			BilibiliAudioBaseIE__call_api = λ.NewFunction("_call_api",
				[]λ.Param{
					{Name: "self"},
					{Name: "path"},
					{Name: "sid"},
					{Name: "query", Def: λ.None},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒpath  = λargs[1]
						ϒquery = λargs[3]
						ϒself  = λargs[0]
						ϒsid   = λargs[2]
					)
					if !λ.IsTrue(ϒquery) {
						ϒquery = λ.DictLiteral(map[string]λ.Object{
							"sid": ϒsid,
						})
					}
					return λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Add(λ.StrLiteral("https://www.bilibili.com/audio/music-service-c/web/"), ϒpath),
						ϒsid,
					), λ.KWArgs{
						{Name: "query", Value: ϒquery},
					}), λ.StrLiteral("data"))
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_call_api": BilibiliAudioBaseIE__call_api,
			})
		}())
		BilibiliAudioIE = λ.Cal(λ.TypeType, λ.StrLiteral("BilibiliAudioIE"), λ.NewTuple(BilibiliAudioBaseIE), func() λ.Dict {
			var (
				BilibiliAudioIE__VALID_URL    λ.Object
				BilibiliAudioIE__real_extract λ.Object
			)
			BilibiliAudioIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?bilibili\\.com/audio/au(?P<id>\\d+)")
			BilibiliAudioIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒau_id     λ.Object
						ϒformats   λ.Object
						ϒlyric     λ.Object
						ϒplay_data λ.Object
						ϒself      = λargs[0]
						ϒsong      λ.Object
						ϒstatistic λ.Object
						ϒsubtitles λ.Object
						ϒtitle     λ.Object
						ϒurl       = λargs[1]
					)
					ϒau_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒplay_data = λ.Calm(ϒself, "_call_api", λ.StrLiteral("url"), ϒau_id)
					ϒformats = λ.NewList(λ.DictLiteral(map[string]λ.Object{
						"url":      λ.GetItem(λ.GetItem(ϒplay_data, λ.StrLiteral("cdns")), λ.IntLiteral(0)),
						"filesize": λ.Cal(ϒint_or_none, λ.Calm(ϒplay_data, "get", λ.StrLiteral("size"))),
					}))
					ϒsong = λ.Calm(ϒself, "_call_api", λ.StrLiteral("song/info"), ϒau_id)
					ϒtitle = λ.GetItem(ϒsong, λ.StrLiteral("title"))
					ϒstatistic = func() λ.Object {
						if λv := λ.Calm(ϒsong, "get", λ.StrLiteral("statistic")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.DictLiteral(map[λ.Object]λ.Object{})
						}
					}()
					ϒsubtitles = λ.None
					ϒlyric = λ.Calm(ϒsong, "get", λ.StrLiteral("lyric"))
					if λ.IsTrue(ϒlyric) {
						ϒsubtitles = λ.DictLiteral(map[string]λ.Object{
							"origin": λ.NewList(λ.DictLiteral(map[string]λ.Object{
								"url": ϒlyric,
							})),
						})
					}
					return λ.DictLiteral(map[string]λ.Object{
						"id":            ϒau_id,
						"title":         ϒtitle,
						"formats":       ϒformats,
						"artist":        λ.Calm(ϒsong, "get", λ.StrLiteral("author")),
						"comment_count": λ.Cal(ϒint_or_none, λ.Calm(ϒstatistic, "get", λ.StrLiteral("comment"))),
						"description":   λ.Calm(ϒsong, "get", λ.StrLiteral("intro")),
						"duration":      λ.Cal(ϒint_or_none, λ.Calm(ϒsong, "get", λ.StrLiteral("duration"))),
						"subtitles":     ϒsubtitles,
						"thumbnail":     λ.Calm(ϒsong, "get", λ.StrLiteral("cover")),
						"timestamp":     λ.Cal(ϒint_or_none, λ.Calm(ϒsong, "get", λ.StrLiteral("passtime"))),
						"uploader":      λ.Calm(ϒsong, "get", λ.StrLiteral("uname")),
						"view_count":    λ.Cal(ϒint_or_none, λ.Calm(ϒstatistic, "get", λ.StrLiteral("play"))),
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    BilibiliAudioIE__VALID_URL,
				"_real_extract": BilibiliAudioIE__real_extract,
			})
		}())
		BilibiliAudioAlbumIE = λ.Cal(λ.TypeType, λ.StrLiteral("BilibiliAudioAlbumIE"), λ.NewTuple(BilibiliAudioBaseIE), func() λ.Dict {
			var (
				BilibiliAudioAlbumIE__VALID_URL λ.Object
			)
			BilibiliAudioAlbumIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?bilibili\\.com/audio/am(?P<id>\\d+)")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": BilibiliAudioAlbumIE__VALID_URL,
			})
		}())
	})
}

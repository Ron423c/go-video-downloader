// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * videomore/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/videomore.py
 */

package videomore

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor     λ.Object
	VideomoreIE       λ.Object
	VideomoreSeasonIE λ.Object
	VideomoreVideoIE  λ.Object
	ϒint_or_none      λ.Object
	ϒxpath_element    λ.Object
	ϒxpath_text       λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒxpath_element = Ωutils.ϒxpath_element
		ϒxpath_text = Ωutils.ϒxpath_text
		VideomoreIE = λ.Cal(λ.TypeType, λ.NewStr("VideomoreIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				VideomoreIE__VALID_URL λ.Object
			)
			VideomoreIE__VALID_URL = λ.NewStr("videomore:(?P<sid>\\d+)$|https?://videomore\\.ru/(?:(?:embed|[^/]+/[^/]+)/|[^/]+\\?.*\\btrack_id=)(?P<id>\\d+)(?:[/?#&]|\\.(?:xml|json)|$)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): VideomoreIE__VALID_URL,
			})
		}())
		VideomoreVideoIE = λ.Cal(λ.TypeType, λ.NewStr("VideomoreVideoIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				VideomoreVideoIE__VALID_URL λ.Object
				VideomoreVideoIE_suitable   λ.Object
			)
			VideomoreVideoIE__VALID_URL = λ.NewStr("https?://videomore\\.ru/(?:(?:[^/]+/){2})?(?P<id>[^/?#&]+)[/?#&]*$")
			VideomoreVideoIE_suitable = λ.NewFunction("suitable",
				[]λ.Param{
					{Name: "cls"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls = λargs[0]
						ϒurl = λargs[1]
					)
					return func() λ.Object {
						if λ.IsTrue(λ.Cal(λ.GetAttr(VideomoreIE, "suitable", nil), ϒurl)) {
							return λ.False
						} else {
							return λ.Cal(λ.GetAttr(λ.Cal(λ.SuperType, VideomoreVideoIE, ϒcls), "suitable", nil), ϒurl)
						}
					}()
				})
			VideomoreVideoIE_suitable = λ.Cal(λ.ClassMethodType, VideomoreVideoIE_suitable)
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): VideomoreVideoIE__VALID_URL,
				λ.NewStr("suitable"):   VideomoreVideoIE_suitable,
			})
		}())
		VideomoreSeasonIE = λ.Cal(λ.TypeType, λ.NewStr("VideomoreSeasonIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				VideomoreSeasonIE__VALID_URL λ.Object
			)
			VideomoreSeasonIE__VALID_URL = λ.NewStr("https?://videomore\\.ru/(?!embed)(?P<id>[^/]+/[^/?#&]+)[/?#&]*$")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): VideomoreSeasonIE__VALID_URL,
			})
		}())
	})
}

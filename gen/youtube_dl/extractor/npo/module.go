// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * npo/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/npo.py
 */

package npo

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	AndereTijdenIE      λ.Object
	ExtractorError      λ.Object
	HetKlokhuisIE       λ.Object
	InfoExtractor       λ.Object
	NPOBaseIE           λ.Object
	NPODataMidEmbedIE   λ.Object
	NPOIE               λ.Object
	NPOLiveIE           λ.Object
	NPOPlaylistBaseIE   λ.Object
	NPORadioFragmentIE  λ.Object
	NPORadioIE          λ.Object
	SchoolTVIE          λ.Object
	VPROIE              λ.Object
	WNLIE               λ.Object
	ϒcompat_HTTPError   λ.Object
	ϒcompat_str         λ.Object
	ϒdetermine_ext      λ.Object
	ϒfix_xml_ampersands λ.Object
	ϒint_or_none        λ.Object
	ϒmerge_dicts        λ.Object
	ϒorderedSet         λ.Object
	ϒparse_duration     λ.Object
	ϒqualities          λ.Object
	ϒstr_or_none        λ.Object
	ϒstrip_jsonp        λ.Object
	ϒunified_strdate    λ.Object
	ϒunified_timestamp  λ.Object
	ϒurl_or_none        λ.Object
	ϒurlencode_postdata λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_HTTPError = Ωcompat.ϒcompat_HTTPError
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ExtractorError = Ωutils.ExtractorError
		ϒfix_xml_ampersands = Ωutils.ϒfix_xml_ampersands
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒmerge_dicts = Ωutils.ϒmerge_dicts
		ϒorderedSet = Ωutils.ϒorderedSet
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒqualities = Ωutils.ϒqualities
		ϒstr_or_none = Ωutils.ϒstr_or_none
		ϒstrip_jsonp = Ωutils.ϒstrip_jsonp
		ϒunified_strdate = Ωutils.ϒunified_strdate
		ϒunified_timestamp = Ωutils.ϒunified_timestamp
		ϒurl_or_none = Ωutils.ϒurl_or_none
		ϒurlencode_postdata = Ωutils.ϒurlencode_postdata
		NPOBaseIE = λ.Cal(λ.TypeType, λ.NewStr("NPOBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				NPOBaseIE__get_token λ.Object
			)
			NPOBaseIE__get_token = λ.NewFunction("_get_token",
				[]λ.Param{
					{Name: "self"},
					{Name: "video_id"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒself     = λargs[0]
						ϒvideo_id = λargs[1]
					)
					return λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.NewStr("http://ida.omroep.nl/app.php/auth"),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "note", Value: λ.NewStr("Downloading token")},
					}), λ.NewStr("token"))
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_get_token"): NPOBaseIE__get_token,
			})
		}())
		NPOIE = λ.Cal(λ.TypeType, λ.NewStr("NPOIE"), λ.NewTuple(NPOBaseIE), func() λ.Dict {
			var (
				NPOIE_IE_NAME       λ.Object
				NPOIE__TESTS        λ.Object
				NPOIE__VALID_URL    λ.Object
				NPOIE__get_info     λ.Object
				NPOIE__get_old_info λ.Object
				NPOIE__real_extract λ.Object
				NPOIE_suitable      λ.Object
			)
			NPOIE_IE_NAME = λ.NewStr("npo")
			NPOIE__VALID_URL = λ.NewStr("(?x)\n                    (?:\n                        npo:|\n                        https?://\n                            (?:www\\.)?\n                            (?:\n                                npo\\.nl/(?:[^/]+/)*|\n                                (?:ntr|npostart)\\.nl/(?:[^/]+/){2,}|\n                                omroepwnl\\.nl/video/fragment/[^/]+__|\n                                (?:zapp|npo3)\\.nl/(?:[^/]+/){2,}\n                            )\n                        )\n                        (?P<id>[^/?#]+)\n                ")
			NPOIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.npo.nl/nieuwsuur/22-06-2014/VPWON_1220719"),
					λ.NewStr("md5"): λ.NewStr("4b3f9c429157ec4775f2c9cb7b911016"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("VPWON_1220719"),
						λ.NewStr("ext"):         λ.NewStr("m4v"),
						λ.NewStr("title"):       λ.NewStr("Nieuwsuur"),
						λ.NewStr("description"): λ.NewStr("Dagelijks tussen tien en elf: nieuws, sport en achtergronden."),
						λ.NewStr("upload_date"): λ.NewStr("20140622"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.npo.nl/de-mega-mike-mega-thomas-show/27-02-2009/VARA_101191800"),
					λ.NewStr("md5"): λ.NewStr("da50a5787dbfc1603c4ad80f31c5120b"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("VARA_101191800"),
						λ.NewStr("ext"):         λ.NewStr("m4v"),
						λ.NewStr("title"):       λ.NewStr("De Mega Mike & Mega Thomas show: The best of."),
						λ.NewStr("description"): λ.NewStr("md5:3b74c97fc9d6901d5a665aac0e5400f4"),
						λ.NewStr("upload_date"): λ.NewStr("20090227"),
						λ.NewStr("duration"):    λ.NewInt(2400),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.npo.nl/tegenlicht/25-02-2013/VPWON_1169289"),
					λ.NewStr("md5"): λ.NewStr("f8065e4e5a7824068ed3c7e783178f2c"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("VPWON_1169289"),
						λ.NewStr("ext"):         λ.NewStr("m4v"),
						λ.NewStr("title"):       λ.NewStr("Tegenlicht: Zwart geld. De toekomst komt uit Afrika"),
						λ.NewStr("description"): λ.NewStr("md5:52cf4eefbc96fffcbdc06d024147abea"),
						λ.NewStr("upload_date"): λ.NewStr("20130225"),
						λ.NewStr("duration"):    λ.NewInt(3000),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.npo.nl/de-nieuwe-mens-deel-1/21-07-2010/WO_VPRO_043706"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("WO_VPRO_043706"),
						λ.NewStr("ext"):         λ.NewStr("m4v"),
						λ.NewStr("title"):       λ.NewStr("De nieuwe mens - Deel 1"),
						λ.NewStr("description"): λ.NewStr("md5:518ae51ba1293ffb80d8d8ce90b74e4b"),
						λ.NewStr("duration"):    λ.NewInt(4680),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.npo.nl/hoe-gaat-europa-verder-na-parijs/10-01-2015/WO_NOS_762771"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):    λ.NewStr("WO_NOS_762771"),
						λ.NewStr("ext"):   λ.NewStr("mp4"),
						λ.NewStr("title"): λ.NewStr("Hoe gaat Europa verder na Parijs?"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.ntr.nl/Aap-Poot-Pies/27/detail/Aap-poot-pies/VPWON_1233944#content"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("VPWON_1233944"),
						λ.NewStr("ext"):         λ.NewStr("m4v"),
						λ.NewStr("title"):       λ.NewStr("Aap, poot, pies"),
						λ.NewStr("description"): λ.NewStr("md5:c9c8005d1869ae65b858e82c01a91fde"),
						λ.NewStr("upload_date"): λ.NewStr("20150508"),
						λ.NewStr("duration"):    λ.NewInt(599),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.omroepwnl.nl/video/fragment/vandaag-de-dag-verkiezingen__POMS_WNL_853698"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("POW_00996502"),
						λ.NewStr("ext"):         λ.NewStr("m4v"),
						λ.NewStr("title"):       λ.NewStr("\"Dit is wel een 'landslide'...\""),
						λ.NewStr("description"): λ.NewStr("md5:f8d66d537dfb641380226e31ca57b8e8"),
						λ.NewStr("upload_date"): λ.NewStr("20150508"),
						λ.NewStr("duration"):    λ.NewInt(462),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.npo.nl/jouw-stad-rotterdam/29-01-2017/RBX_FUNX_6683215/RBX_FUNX_7601437"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("RBX_FUNX_6683215"),
						λ.NewStr("ext"):         λ.NewStr("mp3"),
						λ.NewStr("title"):       λ.NewStr("Jouw Stad Rotterdam"),
						λ.NewStr("description"): λ.NewStr("md5:db251505244f097717ec59fabc372d9f"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://www.zapp.nl/de-bzt-show/gemist/KN_1687547"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://www.zapp.nl/de-bzt-show/filmpjes/POMS_KN_7315118"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://www.zapp.nl/beste-vrienden-quiz/extra-video-s/WO_NTR_1067990"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://www.npo3.nl/3onderzoekt/16-09-2015/VPWON_1239870"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("npo:LI_NL1_4188102"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://www.npo.nl/radio-gaga/13-06-2017/BNN_101383373"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://www.zapp.nl/1803-skelterlab/instructie-video-s/740-instructievideo-s/POMS_AT_11736927"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://www.npostart.nl/broodje-gezond-ei/28-05-2018/KN_1698996"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://npo.nl/KN_1698996"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			NPOIE_suitable = λ.NewFunction("suitable",
				[]λ.Param{
					{Name: "cls"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls = λargs[0]
						ϒurl = λargs[1]
					)
					return func() λ.Object {
						if λ.IsTrue(λ.Cal(λ.BuiltinAny, λ.Cal(λ.NewFunction("<generator>",
							nil,
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								return λ.NewGenerator(func(λgen λ.Generator) λ.Object {
									var (
										ϒie  λ.Object
										τmp0 λ.Object
										τmp1 λ.Object
									)
									τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
										NPOLiveIE,
										NPORadioIE,
										NPORadioFragmentIE,
									))
									for {
										if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
											break
										}
										ϒie = τmp1
										λgen.Yield(λ.Cal(λ.GetAttr(ϒie, "suitable", nil), ϒurl))
									}
									return λ.None
								})
							})))) {
							return λ.False
						} else {
							return λ.Cal(λ.GetAttr(λ.Cal(λ.SuperType, NPOIE, ϒcls), "suitable", nil), ϒurl)
						}
					}()
				})
			NPOIE_suitable = λ.Cal(λ.ClassMethodType, NPOIE_suitable)
			NPOIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒself     = λargs[0]
						ϒurl      = λargs[1]
						ϒvideo_id λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					return func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒself, "_get_info", nil), ϒurl, ϒvideo_id); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒself, "_get_old_info", nil), ϒvideo_id)
						}
					}()
				})
			NPOIE__get_info = λ.NewFunction("_get_info",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
					{Name: "video_id"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcc             λ.Object
						ϒcc_url         λ.Object
						ϒdrm            λ.Object
						ϒembed_url      λ.Object
						ϒformat_urls    λ.Object
						ϒformats        λ.Object
						ϒinfo           λ.Object
						ϒlang           λ.Object
						ϒplayer         λ.Object
						ϒplayer_token   λ.Object
						ϒprofile        λ.Object
						ϒself           = λargs[0]
						ϒstream         λ.Object
						ϒstream_ext     λ.Object
						ϒstream_type    λ.Object
						ϒstream_url     λ.Object
						ϒstreams        λ.Object
						ϒsubtitles      λ.Object
						ϒsubtitles_list λ.Object
						ϒtitle          λ.Object
						ϒtoken          λ.Object
						ϒurl            = λargs[1]
						ϒvideo          λ.Object
						ϒvideo_id       = λargs[2]
						ϒwebpage        λ.Object
						τmp0            λ.Object
						τmp1            λ.Object
					)
					ϒtoken = λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.NewStr("https://www.npostart.nl/api/token"),
						ϒvideo_id,
						λ.NewStr("Downloading token"),
					), λ.KWArgs{
						{Name: "headers", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("Referer"):          ϒurl,
							λ.NewStr("X-Requested-With"): λ.NewStr("XMLHttpRequest"),
						})},
					}), λ.NewStr("token"))
					ϒplayer = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Mod(λ.NewStr("https://www.npostart.nl/player/%s"), ϒvideo_id),
						ϒvideo_id,
						λ.NewStr("Downloading player JSON"),
					), λ.KWArgs{
						{Name: "data", Value: λ.Cal(ϒurlencode_postdata, λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("autoplay"):     λ.NewInt(0),
							λ.NewStr("share"):        λ.NewInt(1),
							λ.NewStr("pageUrl"):      ϒurl,
							λ.NewStr("hasAdConsent"): λ.NewInt(0),
							λ.NewStr("_token"):       ϒtoken,
						}))},
					})
					ϒplayer_token = λ.GetItem(ϒplayer, λ.NewStr("token"))
					ϒdrm = λ.False
					ϒformat_urls = λ.Cal(λ.SetType)
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
						λ.NewStr("hls"),
						λ.NewStr("dash-widevine"),
						λ.NewStr("dash-playready"),
						λ.NewStr("smooth"),
					))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒprofile = τmp1
						ϒstreams = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
							λ.Mod(λ.NewStr("https://start-player.npo.nl/video/%s/streams"), ϒvideo_id),
							ϒvideo_id,
							λ.Mod(λ.NewStr("Downloading %s profile JSON"), ϒprofile),
						), λ.KWArgs{
							{Name: "fatal", Value: λ.False},
							{Name: "query", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("profile"):    ϒprofile,
								λ.NewStr("quality"):    λ.NewStr("npo"),
								λ.NewStr("tokenId"):    ϒplayer_token,
								λ.NewStr("streamType"): λ.NewStr("broadcast"),
							})},
						})
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒstreams))) {
							continue
						}
						ϒstream = λ.Cal(λ.GetAttr(ϒstreams, "get", nil), λ.NewStr("stream"))
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒstream, λ.DictType)))) {
							continue
						}
						ϒstream_url = λ.Cal(ϒurl_or_none, λ.Cal(λ.GetAttr(ϒstream, "get", nil), λ.NewStr("src")))
						if λ.IsTrue(func() λ.Object {
							if λv := λ.NewBool(!λ.IsTrue(ϒstream_url)); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(λ.Contains(ϒformat_urls, ϒstream_url))
							}
						}()) {
							continue
						}
						λ.Cal(λ.GetAttr(ϒformat_urls, "add", nil), ϒstream_url)
						if λ.IsTrue(func() λ.Object {
							if λv := λ.NewBool(λ.Cal(λ.GetAttr(ϒstream, "get", nil), λ.NewStr("protection")) != λ.None); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(λ.Cal(λ.GetAttr(ϒstream, "get", nil), λ.NewStr("keySystemOptions")) != λ.None)
							}
						}()) {
							ϒdrm = λ.True
							continue
						}
						ϒstream_type = λ.Cal(λ.GetAttr(ϒstream, "get", nil), λ.NewStr("type"))
						ϒstream_ext = λ.Cal(ϒdetermine_ext, ϒstream_url)
						if λ.IsTrue(func() λ.Object {
							if λv := λ.Eq(ϒstream_type, λ.NewStr("application/dash+xml")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Eq(ϒstream_ext, λ.NewStr("mpd"))
							}
						}()) {
							λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_mpd_formats", nil), λ.NewArgs(
								ϒstream_url,
								ϒvideo_id,
							), λ.KWArgs{
								{Name: "mpd_id", Value: λ.NewStr("dash")},
								{Name: "fatal", Value: λ.False},
							}))
						} else {
							if λ.IsTrue(func() λ.Object {
								if λv := λ.Eq(ϒstream_type, λ.NewStr("application/vnd.apple.mpegurl")); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Eq(ϒstream_ext, λ.NewStr("m3u8"))
								}
							}()) {
								λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
									ϒstream_url,
									ϒvideo_id,
								), λ.KWArgs{
									{Name: "ext", Value: λ.NewStr("mp4")},
									{Name: "entry_protocol", Value: λ.NewStr("m3u8_native")},
									{Name: "m3u8_id", Value: λ.NewStr("hls")},
									{Name: "fatal", Value: λ.False},
								}))
							} else {
								if λ.IsTrue(λ.Cal(Ωre.ϒsearch, λ.NewStr("\\.isml?/Manifest"), ϒstream_url)) {
									λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_ism_formats", nil), λ.NewArgs(
										ϒstream_url,
										ϒvideo_id,
									), λ.KWArgs{
										{Name: "ism_id", Value: λ.NewStr("mss")},
										{Name: "fatal", Value: λ.False},
									}))
								} else {
									λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
										λ.NewStr("url"): ϒstream_url,
									}))
								}
							}
						}
					}
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒformats))) {
						if λ.IsTrue(ϒdrm) {
							panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.NewStr("This video is DRM protected.")), λ.KWArgs{
								{Name: "expected", Value: λ.True},
							})))
						}
						return λ.None
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒinfo = λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):      ϒvideo_id,
						λ.NewStr("title"):   ϒvideo_id,
						λ.NewStr("formats"): ϒformats,
					})
					ϒembed_url = λ.Cal(ϒurl_or_none, λ.Cal(λ.GetAttr(ϒplayer, "get", nil), λ.NewStr("embedUrl")))
					if λ.IsTrue(ϒembed_url) {
						ϒwebpage = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
							ϒembed_url,
							ϒvideo_id,
							λ.NewStr("Downloading embed page"),
						), λ.KWArgs{
							{Name: "fatal", Value: λ.False},
						})
						if λ.IsTrue(ϒwebpage) {
							ϒvideo = λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
								λ.NewStr("\\bvideo\\s*=\\s*({.+?})\\s*;"),
								ϒwebpage,
								λ.NewStr("video"),
							), λ.KWArgs{
								{Name: "default", Value: λ.NewStr("{}")},
							}), ϒvideo_id)
							if λ.IsTrue(ϒvideo) {
								ϒtitle = λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("episodeTitle"))
								ϒsubtitles = λ.NewDictWithTable(map[λ.Object]λ.Object{})
								ϒsubtitles_list = λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("subtitles"))
								if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒsubtitles_list, λ.ListType)) {
									τmp0 = λ.Cal(λ.BuiltinIter, ϒsubtitles_list)
									for {
										if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
											break
										}
										ϒcc = τmp1
										ϒcc_url = λ.Cal(ϒurl_or_none, λ.Cal(λ.GetAttr(ϒcc, "get", nil), λ.NewStr("src")))
										if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒcc_url))) {
											continue
										}
										ϒlang = func() λ.Object {
											if λv := λ.Cal(ϒstr_or_none, λ.Cal(λ.GetAttr(ϒcc, "get", nil), λ.NewStr("language"))); λ.IsTrue(λv) {
												return λv
											} else {
												return λ.NewStr("nl")
											}
										}()
										λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒsubtitles, "setdefault", nil), ϒlang, λ.NewList()), "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
											λ.NewStr("url"): ϒcc_url,
										}))
									}
								}
								return λ.Cal(ϒmerge_dicts, λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("title"):       ϒtitle,
									λ.NewStr("description"): λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("description")),
									λ.NewStr("thumbnail"): λ.Cal(ϒurl_or_none, func() λ.Object {
										if λv := λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("still_image_url")); λ.IsTrue(λv) {
											return λv
										} else {
											return λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("orig_image_url"))
										}
									}()),
									λ.NewStr("duration"):       λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("duration"))),
									λ.NewStr("timestamp"):      λ.Cal(ϒunified_timestamp, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("broadcastDate"))),
									λ.NewStr("creator"):        λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("channel")),
									λ.NewStr("series"):         λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("title")),
									λ.NewStr("episode"):        ϒtitle,
									λ.NewStr("episode_number"): λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("episodeNumber"))),
									λ.NewStr("subtitles"):      ϒsubtitles,
								}), ϒinfo)
							}
						}
					}
					return ϒinfo
				})
			NPOIE__get_old_info = λ.NewFunction("_get_old_info",
				[]λ.Param{
					{Name: "self"},
					{Name: "video_id"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						QUALITY_FORMATS         λ.Object
						QUALITY_LABELS          λ.Object
						ϒadd_format_url         λ.Object
						ϒasx                    λ.Object
						ϒerror                  λ.Object
						ϒf4m_format             λ.Object
						ϒf4m_formats            λ.Object
						ϒformat_id              λ.Object
						ϒformats                λ.Object
						ϒis_legal_url           λ.Object
						ϒis_live                λ.Object
						ϒitem                   λ.Object
						ϒitem_label             λ.Object
						ϒitem_url               λ.Object
						ϒitems                  λ.Object
						ϒmetadata               λ.Object
						ϒnum                    λ.Object
						ϒquality_from_format_id λ.Object
						ϒquality_from_label     λ.Object
						ϒref                    λ.Object
						ϒself                   = λargs[0]
						ϒstream                 λ.Object
						ϒstream_info            λ.Object
						ϒstream_type            λ.Object
						ϒstream_url             λ.Object
						ϒsub_title              λ.Object
						ϒsubtitles              λ.Object
						ϒtitle                  λ.Object
						ϒtoken                  λ.Object
						ϒurls                   λ.Object
						ϒvideo_id               = λargs[1]
						ϒvideo_url              λ.Object
						τmp0                    λ.Object
						τmp1                    λ.Object
						τmp2                    λ.Object
						τmp3                    λ.Object
					)
					ϒmetadata = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Mod(λ.NewStr("http://e.omroep.nl/metadata/%s"), ϒvideo_id),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "transform_source", Value: ϒstrip_jsonp},
					})
					ϒerror = λ.Cal(λ.GetAttr(ϒmetadata, "get", nil), λ.NewStr("error"))
					if λ.IsTrue(ϒerror) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(ϒerror), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒvideo_id = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒmetadata, "get", nil), λ.NewStr("prid")); λ.IsTrue(λv) {
							return λv
						} else {
							return ϒvideo_id
						}
					}()
					ϒtitle = λ.GetItem(ϒmetadata, λ.NewStr("titel"))
					ϒsub_title = λ.Cal(λ.GetAttr(ϒmetadata, "get", nil), λ.NewStr("aflevering_titel"))
					if λ.IsTrue(func() λ.Object {
						if λv := ϒsub_title; !λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Ne(ϒsub_title, ϒtitle)
						}
					}()) {
						τmp0 = λ.IAdd(ϒtitle, λ.Mod(λ.NewStr(": %s"), ϒsub_title))
						ϒtitle = τmp0
					}
					ϒtoken = λ.Cal(λ.GetAttr(ϒself, "_get_token", nil), ϒvideo_id)
					ϒformats = λ.NewList()
					ϒurls = λ.Cal(λ.SetType)
					ϒis_legal_url = λ.NewFunction("is_legal_url",
						[]λ.Param{
							{Name: "format_url"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒformat_url = λargs[0]
							)
							return func() λ.Object {
								if λv := ϒformat_url; !λ.IsTrue(λv) {
									return λv
								} else if λv := λ.NewBool(!λ.Contains(ϒurls, ϒformat_url)); !λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Cal(Ωre.ϒmatch, λ.NewStr("^(?:https?:)?//"), ϒformat_url)
								}
							}()
						})
					QUALITY_LABELS = λ.NewTuple(
						λ.NewStr("Laag"),
						λ.NewStr("Normaal"),
						λ.NewStr("Hoog"),
					)
					QUALITY_FORMATS = λ.NewTuple(
						λ.NewStr("adaptive"),
						λ.NewStr("wmv_sb"),
						λ.NewStr("h264_sb"),
						λ.NewStr("wmv_bb"),
						λ.NewStr("h264_bb"),
						λ.NewStr("wvc1_std"),
						λ.NewStr("h264_std"),
					)
					ϒquality_from_label = λ.Cal(ϒqualities, QUALITY_LABELS)
					ϒquality_from_format_id = λ.Cal(ϒqualities, QUALITY_FORMATS)
					ϒitems = λ.GetItem(λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Mod(λ.NewStr("http://ida.omroep.nl/app.php/%s"), ϒvideo_id),
						ϒvideo_id,
						λ.NewStr("Downloading formats JSON"),
					), λ.KWArgs{
						{Name: "query", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("adaptive"): λ.NewStr("yes"),
							λ.NewStr("token"):    ϒtoken,
						})},
					}), λ.NewStr("items")), λ.NewInt(0))
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.EnumerateIteratorType, ϒitems))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒnum = λ.GetItem(τmp2, λ.NewInt(0))
						ϒitem = λ.GetItem(τmp2, λ.NewInt(1))
						ϒitem_url = λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("url"))
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.Cal(ϒis_legal_url, ϒitem_url)))) {
							continue
						}
						λ.Cal(λ.GetAttr(ϒurls, "add", nil), ϒitem_url)
						ϒformat_id = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewStr("video/ida/([^/]+)"),
							ϒitem_url,
							λ.NewStr("format id"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						})
						ϒitem_label = λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("label"))
						ϒadd_format_url = λ.NewFunction("add_format_url",
							[]λ.Param{
								{Name: "format_url"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒf_id       λ.Object
									ϒformat_url = λargs[0]
									ϒheight     λ.Object
									ϒquality    λ.Object
									ϒwidth      λ.Object
									τmp0        λ.Object
								)
								ϒwidth = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
									λ.NewStr("(\\d+)[xX]\\d+"),
									ϒformat_url,
									λ.NewStr("width"),
								), λ.KWArgs{
									{Name: "default", Value: λ.None},
								}))
								ϒheight = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
									λ.NewStr("\\d+[xX](\\d+)"),
									ϒformat_url,
									λ.NewStr("height"),
								), λ.KWArgs{
									{Name: "default", Value: λ.None},
								}))
								if λ.IsTrue(λ.NewBool(λ.Contains(QUALITY_LABELS, ϒitem_label))) {
									ϒquality = λ.Cal(ϒquality_from_label, ϒitem_label)
									ϒf_id = ϒitem_label
								} else {
									if λ.IsTrue(λ.NewBool(λ.Contains(QUALITY_FORMATS, ϒitem_label))) {
										ϒquality = λ.Cal(ϒquality_from_format_id, ϒformat_id)
										ϒf_id = ϒformat_id
									} else {
										τmp0 = λ.Mul(λ.NewList(λ.None), λ.NewInt(2))
										ϒquality = λ.GetItem(τmp0, λ.NewInt(0))
										ϒf_id = λ.GetItem(τmp0, λ.NewInt(1))
									}
								}
								λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("url"):       ϒformat_url,
									λ.NewStr("format_id"): ϒf_id,
									λ.NewStr("width"):     ϒwidth,
									λ.NewStr("height"):    ϒheight,
									λ.NewStr("quality"):   ϒquality,
								}))
								return λ.None
							})
						if λ.IsTrue(λ.NewBool(λ.Contains(λ.NewTuple(
							λ.NewStr("url"),
							λ.NewStr("audio"),
						), λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("contentType"))))) {
							λ.Cal(ϒadd_format_url, ϒitem_url)
							continue
						}
						τmp2, τmp3 = func() (λexit λ.Object, λret λ.Object) {
							defer λ.CatchMulti(
								nil,
								&λ.Catcher{ExtractorError, func(λex λ.BaseException) {
									var ϒee λ.Object = λex
									if λ.IsTrue(func() λ.Object {
										if λv := λ.Cal(λ.BuiltinIsInstance, λ.GetAttr(ϒee, "cause", nil), ϒcompat_HTTPError); !λ.IsTrue(λv) {
											return λv
										} else {
											return λ.Eq(λ.GetAttr(λ.GetAttr(ϒee, "cause", nil), "code", nil), λ.NewInt(404))
										}
									}()) {
										ϒerror = λ.Cal(λ.GetAttr(func() λ.Object {
											if λv := λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
												λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(λ.GetAttr(ϒee, "cause", nil), "read", nil)), "decode", nil)),
												ϒvideo_id,
											), λ.KWArgs{
												{Name: "fatal", Value: λ.False},
											}); λ.IsTrue(λv) {
												return λv
											} else {
												return λ.NewDictWithTable(map[λ.Object]λ.Object{})
											}
										}(), "get", nil), λ.NewStr("errorstring"))
										if λ.IsTrue(ϒerror) {
											panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(ϒerror), λ.KWArgs{
												{Name: "expected", Value: λ.True},
											})))
										}
									}
									panic(λ.Raise(λex))
								}},
							)
							ϒstream_info = λ.Cal(λ.GetAttr(ϒself, "_download_json", nil), λ.Add(ϒitem_url, λ.NewStr("&type=json")), ϒvideo_id, func() λ.Object {
								if λv := λ.Mod(λ.NewStr("Downloading %s stream JSON"), ϒitem_label); λ.IsTrue(λv) {
									return λv
								} else if λv := λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("format")); λ.IsTrue(λv) {
									return λv
								} else if λv := ϒformat_id; λ.IsTrue(λv) {
									return λv
								} else {
									return ϒnum
								}
							}())
							return λ.BlockExitNormally, nil
						}()
						if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒstream_info, ϒcompat_str)) {
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.Cal(λ.GetAttr(ϒstream_info, "startswith", nil), λ.NewStr("http"))))) {
								continue
							}
							ϒvideo_url = ϒstream_info
						} else {
							ϒvideo_url = λ.Cal(λ.GetAttr(ϒstream_info, "get", nil), λ.NewStr("url"))
						}
						if λ.IsTrue(func() λ.Object {
							if λv := λ.NewBool(!λ.IsTrue(ϒvideo_url)); λ.IsTrue(λv) {
								return λv
							} else if λv := λ.NewBool(λ.Contains(ϒvideo_url, λ.NewStr("vodnotavailable."))); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(λ.Contains(ϒurls, ϒvideo_url))
							}
						}()) {
							continue
						}
						λ.Cal(λ.GetAttr(ϒurls, "add", nil), ϒvideo_url)
						if λ.IsTrue(λ.Eq(λ.Cal(ϒdetermine_ext, ϒvideo_url), λ.NewStr("m3u8"))) {
							λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
								ϒvideo_url,
								ϒvideo_id,
							), λ.KWArgs{
								{Name: "ext", Value: λ.NewStr("mp4")},
								{Name: "entry_protocol", Value: λ.NewStr("m3u8_native")},
								{Name: "m3u8_id", Value: λ.NewStr("hls")},
								{Name: "fatal", Value: λ.False},
							}))
						} else {
							λ.Cal(ϒadd_format_url, ϒvideo_url)
						}
					}
					ϒis_live = λ.Eq(λ.Cal(λ.GetAttr(ϒmetadata, "get", nil), λ.NewStr("medium")), λ.NewStr("live"))
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒis_live))) {
						τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.EnumerateIteratorType, λ.Cal(λ.GetAttr(ϒmetadata, "get", nil), λ.NewStr("streams"), λ.NewList())))
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							τmp3 = τmp1
							ϒnum = λ.GetItem(τmp3, λ.NewInt(0))
							ϒstream = λ.GetItem(τmp3, λ.NewInt(1))
							ϒstream_url = λ.Cal(λ.GetAttr(ϒstream, "get", nil), λ.NewStr("url"))
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.Cal(ϒis_legal_url, ϒstream_url)))) {
								continue
							}
							λ.Cal(λ.GetAttr(ϒurls, "add", nil), ϒstream_url)
							ϒstream_type = λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒstream, "get", nil), λ.NewStr("type"), λ.NewStr("")), "lower", nil))
							if λ.IsTrue(λ.NewBool(λ.Contains(λ.NewList(
								λ.NewStr("ss"),
								λ.NewStr("ms"),
							), ϒstream_type))) {
								continue
							}
							if λ.IsTrue(λ.Eq(ϒstream_type, λ.NewStr("hds"))) {
								ϒf4m_formats = λ.Call(λ.GetAttr(ϒself, "_extract_f4m_formats", nil), λ.NewArgs(
									ϒstream_url,
									ϒvideo_id,
								), λ.KWArgs{
									{Name: "fatal", Value: λ.False},
								})
								τmp3 = λ.Cal(λ.BuiltinIter, ϒf4m_formats)
								for {
									if τmp2 = λ.NextDefault(τmp3, λ.AfterLast); τmp2 == λ.AfterLast {
										break
									}
									ϒf4m_format = τmp2
									λ.SetItem(ϒf4m_format, λ.NewStr("preference"), λ.Neg(λ.NewInt(1)))
								}
								λ.Cal(λ.GetAttr(ϒformats, "extend", nil), ϒf4m_formats)
							} else {
								if λ.IsTrue(λ.Eq(ϒstream_type, λ.NewStr("hls"))) {
									λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
										ϒstream_url,
										ϒvideo_id,
									), λ.KWArgs{
										{Name: "ext", Value: λ.NewStr("mp4")},
										{Name: "fatal", Value: λ.False},
									}))
								} else {
									if λ.IsTrue(λ.NewBool(λ.Contains(ϒstream_url, λ.NewStr(".asf")))) {
										ϒasx = λ.Call(λ.GetAttr(ϒself, "_download_xml", nil), λ.NewArgs(
											ϒstream_url,
											ϒvideo_id,
											λ.Mod(λ.NewStr("Downloading stream %d ASX playlist"), ϒnum),
										), λ.KWArgs{
											{Name: "transform_source", Value: ϒfix_xml_ampersands},
											{Name: "fatal", Value: λ.False},
										})
										if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒasx))) {
											continue
										}
										ϒref = λ.Cal(λ.GetAttr(ϒasx, "find", nil), λ.NewStr("./ENTRY/Ref"))
										if λ.IsTrue(λ.NewBool(ϒref == λ.None)) {
											continue
										}
										ϒvideo_url = λ.Cal(λ.GetAttr(ϒref, "get", nil), λ.NewStr("href"))
										if λ.IsTrue(func() λ.Object {
											if λv := λ.NewBool(!λ.IsTrue(ϒvideo_url)); λ.IsTrue(λv) {
												return λv
											} else {
												return λ.NewBool(λ.Contains(ϒurls, ϒvideo_url))
											}
										}()) {
											continue
										}
										λ.Cal(λ.GetAttr(ϒurls, "add", nil), ϒvideo_url)
										λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
											λ.NewStr("url"):        ϒvideo_url,
											λ.NewStr("ext"):        λ.Cal(λ.GetAttr(ϒstream, "get", nil), λ.NewStr("formaat"), λ.NewStr("asf")),
											λ.NewStr("quality"):    λ.Cal(λ.GetAttr(ϒstream, "get", nil), λ.NewStr("kwaliteit")),
											λ.NewStr("preference"): λ.Neg(λ.NewInt(10)),
										}))
									} else {
										λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
											λ.NewStr("url"):     ϒstream_url,
											λ.NewStr("quality"): λ.Cal(λ.GetAttr(ϒstream, "get", nil), λ.NewStr("kwaliteit")),
										}))
									}
								}
							}
						}
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒsubtitles = λ.NewDictWithTable(map[λ.Object]λ.Object{})
					if λ.IsTrue(λ.Eq(λ.Cal(λ.GetAttr(ϒmetadata, "get", nil), λ.NewStr("tt888")), λ.NewStr("ja"))) {
						λ.SetItem(ϒsubtitles, λ.NewStr("nl"), λ.NewList(λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("ext"): λ.NewStr("vtt"),
							λ.NewStr("url"): λ.Mod(λ.NewStr("http://tt888.omroep.nl/tt888/%s"), ϒvideo_id),
						})))
					}
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"): ϒvideo_id,
						λ.NewStr("title"): func() λ.Object {
							if λ.IsTrue(ϒis_live) {
								return λ.Cal(λ.GetAttr(ϒself, "_live_title", nil), ϒtitle)
							} else {
								return ϒtitle
							}
						}(),
						λ.NewStr("description"): λ.Cal(λ.GetAttr(ϒmetadata, "get", nil), λ.NewStr("info")),
						λ.NewStr("thumbnail"): λ.GetItem(λ.GetItem(λ.Cal(λ.GetAttr(ϒmetadata, "get", nil), λ.NewStr("images"), λ.NewList(λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"): λ.None,
						}))), λ.Neg(λ.NewInt(1))), λ.NewStr("url")),
						λ.NewStr("upload_date"): λ.Cal(ϒunified_strdate, λ.Cal(λ.GetAttr(ϒmetadata, "get", nil), λ.NewStr("gidsdatum"))),
						λ.NewStr("duration"):    λ.Cal(ϒparse_duration, λ.Cal(λ.GetAttr(ϒmetadata, "get", nil), λ.NewStr("tijdsduur"))),
						λ.NewStr("formats"):     ϒformats,
						λ.NewStr("subtitles"):   ϒsubtitles,
						λ.NewStr("is_live"):     ϒis_live,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):       NPOIE_IE_NAME,
				λ.NewStr("_TESTS"):        NPOIE__TESTS,
				λ.NewStr("_VALID_URL"):    NPOIE__VALID_URL,
				λ.NewStr("_get_info"):     NPOIE__get_info,
				λ.NewStr("_get_old_info"): NPOIE__get_old_info,
				λ.NewStr("_real_extract"): NPOIE__real_extract,
				λ.NewStr("suitable"):      NPOIE_suitable,
			})
		}())
		NPOLiveIE = λ.Cal(λ.TypeType, λ.NewStr("NPOLiveIE"), λ.NewTuple(NPOBaseIE), func() λ.Dict {
			var (
				NPOLiveIE__VALID_URL λ.Object
			)
			NPOLiveIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?npo(?:start)?\\.nl/live(?:/(?P<id>[^/?#&]+))?")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): NPOLiveIE__VALID_URL,
			})
		}())
		NPORadioIE = λ.Cal(λ.TypeType, λ.NewStr("NPORadioIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				NPORadioIE__VALID_URL λ.Object
				NPORadioIE_suitable   λ.Object
			)
			NPORadioIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?npo\\.nl/radio/(?P<id>[^/]+)")
			NPORadioIE_suitable = λ.NewFunction("suitable",
				[]λ.Param{
					{Name: "cls"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls = λargs[0]
						ϒurl = λargs[1]
					)
					return func() λ.Object {
						if λ.IsTrue(λ.Cal(λ.GetAttr(NPORadioFragmentIE, "suitable", nil), ϒurl)) {
							return λ.False
						} else {
							return λ.Cal(λ.GetAttr(λ.Cal(λ.SuperType, NPORadioIE, ϒcls), "suitable", nil), ϒurl)
						}
					}()
				})
			NPORadioIE_suitable = λ.Cal(λ.ClassMethodType, NPORadioIE_suitable)
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): NPORadioIE__VALID_URL,
				λ.NewStr("suitable"):   NPORadioIE_suitable,
			})
		}())
		NPORadioFragmentIE = λ.Cal(λ.TypeType, λ.NewStr("NPORadioFragmentIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				NPORadioFragmentIE__VALID_URL λ.Object
			)
			NPORadioFragmentIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?npo\\.nl/radio/[^/]+/fragment/(?P<id>\\d+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): NPORadioFragmentIE__VALID_URL,
			})
		}())
		NPODataMidEmbedIE = λ.Cal(λ.TypeType, λ.NewStr("NPODataMidEmbedIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {

			return λ.NewDictWithTable(map[λ.Object]λ.Object{})
		}())
		SchoolTVIE = λ.Cal(λ.TypeType, λ.NewStr("SchoolTVIE"), λ.NewTuple(NPODataMidEmbedIE), func() λ.Dict {
			var (
				SchoolTVIE__VALID_URL λ.Object
			)
			SchoolTVIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?schooltv\\.nl/video/(?P<id>[^/?#&]+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): SchoolTVIE__VALID_URL,
			})
		}())
		HetKlokhuisIE = λ.Cal(λ.TypeType, λ.NewStr("HetKlokhuisIE"), λ.NewTuple(NPODataMidEmbedIE), func() λ.Dict {
			var (
				HetKlokhuisIE__VALID_URL λ.Object
			)
			HetKlokhuisIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?hetklokhuis\\.nl/[^/]+/\\d+/(?P<id>[^/?#&]+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): HetKlokhuisIE__VALID_URL,
			})
		}())
		NPOPlaylistBaseIE = λ.Cal(λ.TypeType, λ.NewStr("NPOPlaylistBaseIE"), λ.NewTuple(NPOIE), func() λ.Dict {

			return λ.NewDictWithTable(map[λ.Object]λ.Object{})
		}())
		VPROIE = λ.Cal(λ.TypeType, λ.NewStr("VPROIE"), λ.NewTuple(NPOPlaylistBaseIE), func() λ.Dict {
			var (
				VPROIE__VALID_URL λ.Object
			)
			VPROIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?(?:(?:tegenlicht\\.)?vpro|2doc)\\.nl/(?:[^/]+/)*(?P<id>[^/]+)\\.html")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): VPROIE__VALID_URL,
			})
		}())
		WNLIE = λ.Cal(λ.TypeType, λ.NewStr("WNLIE"), λ.NewTuple(NPOPlaylistBaseIE), func() λ.Dict {
			var (
				WNLIE__VALID_URL λ.Object
			)
			WNLIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?omroepwnl\\.nl/video/detail/(?P<id>[^/]+)__\\d+")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): WNLIE__VALID_URL,
			})
		}())
		AndereTijdenIE = λ.Cal(λ.TypeType, λ.NewStr("AndereTijdenIE"), λ.NewTuple(NPOPlaylistBaseIE), func() λ.Dict {
			var (
				AndereTijdenIE__VALID_URL λ.Object
			)
			AndereTijdenIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?anderetijden\\.nl/programma/(?:[^/]+/)+(?P<id>[^/?#&]+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): AndereTijdenIE__VALID_URL,
			})
		}())
	})
}

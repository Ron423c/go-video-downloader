// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * ciscolive/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/ciscolive.py
 */

package ciscolive

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	CiscoLiveBaseIE               λ.Object
	CiscoLiveSearchIE             λ.Object
	CiscoLiveSessionIE            λ.Object
	InfoExtractor                 λ.Object
	ϒclean_html                   λ.Object
	ϒcompat_parse_qs              λ.Object
	ϒcompat_urllib_parse_urlparse λ.Object
	ϒfloat_or_none                λ.Object
	ϒint_or_none                  λ.Object
	ϒtry_get                      λ.Object
	ϒurlencode_postdata           λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_parse_qs = Ωcompat.ϒcompat_parse_qs
		ϒcompat_urllib_parse_urlparse = Ωcompat.ϒcompat_urllib_parse_urlparse
		ϒclean_html = Ωutils.ϒclean_html
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒtry_get = Ωutils.ϒtry_get
		ϒurlencode_postdata = Ωutils.ϒurlencode_postdata
		CiscoLiveBaseIE = λ.Cal(λ.TypeType, λ.NewStr("CiscoLiveBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				CiscoLiveBaseIE_BRIGHTCOVE_URL_TEMPLATE  λ.Object
				CiscoLiveBaseIE_HEADERS                  λ.Object
				CiscoLiveBaseIE_RAINFOCUS_API_PROFILE_ID λ.Object
				CiscoLiveBaseIE_RAINFOCUS_API_URL        λ.Object
				CiscoLiveBaseIE_RAINFOCUS_WIDGET_ID      λ.Object
				CiscoLiveBaseIE__call_api                λ.Object
				CiscoLiveBaseIE__parse_rf_item           λ.Object
			)
			CiscoLiveBaseIE_RAINFOCUS_API_URL = λ.NewStr("https://events.rainfocus.com/api/%s")
			CiscoLiveBaseIE_RAINFOCUS_API_PROFILE_ID = λ.NewStr("Na3vqYdAlJFSxhYTYQGuMbpafMqftalz")
			CiscoLiveBaseIE_RAINFOCUS_WIDGET_ID = λ.NewStr("n6l4Lo05R8fiy3RpUBm447dZN8uNWoye")
			CiscoLiveBaseIE_BRIGHTCOVE_URL_TEMPLATE = λ.NewStr("http://players.brightcove.net/5647924234001/SyK2FdqjM_default/index.html?videoId=%s")
			CiscoLiveBaseIE_HEADERS = λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("Origin"):         λ.NewStr("https://ciscolive.cisco.com"),
				λ.NewStr("rfApiProfileId"): CiscoLiveBaseIE_RAINFOCUS_API_PROFILE_ID,
				λ.NewStr("rfWidgetId"):     CiscoLiveBaseIE_RAINFOCUS_WIDGET_ID,
			})
			CiscoLiveBaseIE__call_api = λ.NewFunction("_call_api",
				[]λ.Param{
					{Name: "self"},
					{Name: "ep"},
					{Name: "rf_id"},
					{Name: "query"},
					{Name: "referrer"},
					{Name: "note", Def: λ.None},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒep       = λargs[1]
						ϒheaders  λ.Object
						ϒnote     = λargs[5]
						ϒquery    = λargs[3]
						ϒreferrer = λargs[4]
						ϒrf_id    = λargs[2]
						ϒself     = λargs[0]
					)
					ϒheaders = λ.Cal(λ.GetAttr(λ.GetAttr(ϒself, "HEADERS", nil), "copy", nil))
					λ.SetItem(ϒheaders, λ.NewStr("Referer"), ϒreferrer)
					return λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Mod(λ.GetAttr(ϒself, "RAINFOCUS_API_URL", nil), ϒep),
						ϒrf_id,
					), λ.KWArgs{
						{Name: "note", Value: ϒnote},
						{Name: "data", Value: λ.Cal(ϒurlencode_postdata, ϒquery)},
						{Name: "headers", Value: ϒheaders},
					})
				})
			CiscoLiveBaseIE__parse_rf_item = λ.NewFunction("_parse_rf_item",
				[]λ.Param{
					{Name: "self"},
					{Name: "rf_item"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒbc_id          λ.Object
						ϒbc_url         λ.Object
						ϒdescription    λ.Object
						ϒduration       λ.Object
						ϒevent_name     λ.Object
						ϒlocation       λ.Object
						ϒpresenter_name λ.Object
						ϒrf_item        = λargs[1]
						ϒself           = λargs[0]
						ϒtitle          λ.Object
					)
					ϒevent_name = λ.Cal(λ.GetAttr(ϒrf_item, "get", nil), λ.NewStr("eventName"))
					ϒtitle = λ.GetItem(ϒrf_item, λ.NewStr("title"))
					ϒdescription = λ.Cal(ϒclean_html, λ.Cal(λ.GetAttr(ϒrf_item, "get", nil), λ.NewStr("abstract")))
					ϒpresenter_name = λ.Cal(ϒtry_get, ϒrf_item, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(λ.GetItem(λ.GetItem(ϒx, λ.NewStr("participants")), λ.NewInt(0)), λ.NewStr("fullName"))
						}))
					ϒbc_id = λ.GetItem(λ.GetItem(λ.GetItem(ϒrf_item, λ.NewStr("videos")), λ.NewInt(0)), λ.NewStr("url"))
					ϒbc_url = λ.Mod(λ.GetAttr(ϒself, "BRIGHTCOVE_URL_TEMPLATE", nil), ϒbc_id)
					ϒduration = λ.Cal(ϒfloat_or_none, λ.Cal(ϒtry_get, ϒrf_item, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(λ.GetItem(λ.GetItem(ϒx, λ.NewStr("times")), λ.NewInt(0)), λ.NewStr("length"))
						})))
					ϒlocation = λ.Cal(ϒtry_get, ϒrf_item, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(λ.GetItem(λ.GetItem(ϒx, λ.NewStr("times")), λ.NewInt(0)), λ.NewStr("room"))
						}))
					if λ.IsTrue(ϒduration) {
						ϒduration = λ.Mul(ϒduration, λ.NewInt(60))
					}
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("_type"):       λ.NewStr("url_transparent"),
						λ.NewStr("url"):         ϒbc_url,
						λ.NewStr("ie_key"):      λ.NewStr("BrightcoveNew"),
						λ.NewStr("title"):       ϒtitle,
						λ.NewStr("description"): ϒdescription,
						λ.NewStr("duration"):    ϒduration,
						λ.NewStr("creator"):     ϒpresenter_name,
						λ.NewStr("location"):    ϒlocation,
						λ.NewStr("series"):      ϒevent_name,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("BRIGHTCOVE_URL_TEMPLATE"):  CiscoLiveBaseIE_BRIGHTCOVE_URL_TEMPLATE,
				λ.NewStr("HEADERS"):                  CiscoLiveBaseIE_HEADERS,
				λ.NewStr("RAINFOCUS_API_PROFILE_ID"): CiscoLiveBaseIE_RAINFOCUS_API_PROFILE_ID,
				λ.NewStr("RAINFOCUS_API_URL"):        CiscoLiveBaseIE_RAINFOCUS_API_URL,
				λ.NewStr("RAINFOCUS_WIDGET_ID"):      CiscoLiveBaseIE_RAINFOCUS_WIDGET_ID,
				λ.NewStr("_call_api"):                CiscoLiveBaseIE__call_api,
				λ.NewStr("_parse_rf_item"):           CiscoLiveBaseIE__parse_rf_item,
			})
		}())
		CiscoLiveSessionIE = λ.Cal(λ.TypeType, λ.NewStr("CiscoLiveSessionIE"), λ.NewTuple(CiscoLiveBaseIE), func() λ.Dict {
			var (
				CiscoLiveSessionIE__TESTS        λ.Object
				CiscoLiveSessionIE__VALID_URL    λ.Object
				CiscoLiveSessionIE__real_extract λ.Object
			)
			CiscoLiveSessionIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?ciscolive(?:\\.cisco)?\\.com/[^#]*#/session/(?P<id>[^/?&]+)")
			CiscoLiveSessionIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://ciscolive.cisco.com/on-demand-library/?#/session/1423353499155001FoSs"),
					λ.NewStr("md5"): λ.NewStr("c98acf395ed9c9f766941c70f5352e22"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("5803694304001"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("13 Smart Automations to Monitor Your Cisco IOS Network"),
						λ.NewStr("description"): λ.NewStr("md5:ec4a436019e09a918dec17714803f7cc"),
						λ.NewStr("timestamp"):   λ.NewInt(1530305395),
						λ.NewStr("upload_date"): λ.NewStr("20180629"),
						λ.NewStr("uploader_id"): λ.NewStr("5647924234001"),
						λ.NewStr("location"):    λ.NewStr("16B Mezz."),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://www.ciscolive.com/global/on-demand-library.html?search.event=ciscoliveemea2019#/session/15361595531500013WOU"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://www.ciscolive.com/global/on-demand-library.html?#/session/1490051371645001kNaS"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			CiscoLiveSessionIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒrf_id     λ.Object
						ϒrf_result λ.Object
						ϒself      = λargs[0]
						ϒurl       = λargs[1]
					)
					ϒrf_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒrf_result = λ.Cal(λ.GetAttr(ϒself, "_call_api", nil), λ.NewStr("session"), ϒrf_id, λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"): ϒrf_id,
					}), ϒurl)
					return λ.Cal(λ.GetAttr(ϒself, "_parse_rf_item", nil), λ.GetItem(λ.GetItem(ϒrf_result, λ.NewStr("items")), λ.NewInt(0)))
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        CiscoLiveSessionIE__TESTS,
				λ.NewStr("_VALID_URL"):    CiscoLiveSessionIE__VALID_URL,
				λ.NewStr("_real_extract"): CiscoLiveSessionIE__real_extract,
			})
		}())
		CiscoLiveSearchIE = λ.Cal(λ.TypeType, λ.NewStr("CiscoLiveSearchIE"), λ.NewTuple(CiscoLiveBaseIE), func() λ.Dict {
			var (
				CiscoLiveSearchIE__VALID_URL λ.Object
				CiscoLiveSearchIE_suitable   λ.Object
			)
			CiscoLiveSearchIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?ciscolive(?:\\.cisco)?\\.com/(?:global/)?on-demand-library(?:\\.html|/)")
			CiscoLiveSearchIE_suitable = λ.NewFunction("suitable",
				[]λ.Param{
					{Name: "cls"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls = λargs[0]
						ϒurl = λargs[1]
					)
					return func() λ.Object {
						if λ.IsTrue(λ.Cal(λ.GetAttr(CiscoLiveSessionIE, "suitable", nil), ϒurl)) {
							return λ.False
						} else {
							return λ.Cal(λ.GetAttr(λ.Cal(λ.SuperType, CiscoLiveSearchIE, ϒcls), "suitable", nil), ϒurl)
						}
					}()
				})
			CiscoLiveSearchIE_suitable = λ.Cal(λ.ClassMethodType, CiscoLiveSearchIE_suitable)
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): CiscoLiveSearchIE__VALID_URL,
				λ.NewStr("suitable"):   CiscoLiveSearchIE_suitable,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * tiktok/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/tiktok.py
 */

package tiktok

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError λ.Object
	InfoExtractor  λ.Object
	TikTokBaseIE   λ.Object
	TikTokIE       λ.Object
	TikTokUserIE   λ.Object
	ϒcompat_str    λ.Object
	ϒint_or_none   λ.Object
	ϒstr_or_none   λ.Object
	ϒtry_get       λ.Object
	ϒurl_or_none   λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωutils.ϒcompat_str
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒstr_or_none = Ωutils.ϒstr_or_none
		ϒtry_get = Ωutils.ϒtry_get
		ϒurl_or_none = Ωutils.ϒurl_or_none
		TikTokBaseIE = λ.Cal(λ.TypeType, λ.NewStr("TikTokBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				TikTokBaseIE__extract_aweme λ.Object
			)
			TikTokBaseIE__extract_aweme = λ.NewFunction("_extract_aweme",
				[]λ.Param{
					{Name: "self"},
					{Name: "data"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒaweme_id      λ.Object
						ϒcomment_count λ.Object
						ϒdata          = λargs[1]
						ϒdescription   λ.Object
						ϒformat        λ.Object
						ϒformat_id     λ.Object
						ϒformat_url    λ.Object
						ϒformat_urls   λ.Object
						ϒformats       λ.Object
						ϒheight        λ.Object
						ϒrepost_count  λ.Object
						ϒself          = λargs[0]
						ϒthumbnail     λ.Object
						ϒtimestamp     λ.Object
						ϒuploader      λ.Object
						ϒvideo         λ.Object
						ϒwidth         λ.Object
						τmp0           λ.Object
						τmp1           λ.Object
						τmp2           λ.Object
						τmp3           λ.Object
					)
					ϒvideo = λ.GetItem(ϒdata, λ.NewStr("video"))
					ϒdescription = λ.Cal(ϒstr_or_none, λ.Cal(ϒtry_get, ϒdata, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(ϒx, λ.NewStr("desc"))
						})))
					ϒwidth = λ.Cal(ϒint_or_none, λ.Cal(ϒtry_get, ϒdata, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							_ = ϒx
							return λ.GetItem(ϒvideo, λ.NewStr("width"))
						})))
					ϒheight = λ.Cal(ϒint_or_none, λ.Cal(ϒtry_get, ϒdata, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							_ = ϒx
							return λ.GetItem(ϒvideo, λ.NewStr("height"))
						})))
					ϒformat_urls = λ.Cal(λ.SetType)
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
						λ.NewStr("play_addr_lowbr"),
						λ.NewStr("play_addr"),
						λ.NewStr("play_addr_h264"),
						λ.NewStr("download_addr"),
					))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒformat_id = τmp1
						τmp2 = λ.Cal(λ.BuiltinIter, func() λ.Object {
							if λv := λ.Cal(ϒtry_get, ϒvideo, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(ϒx, ϒformat_id), λ.NewStr("url_list"))
								}), λ.ListType); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewList()
							}
						}())
						for {
							if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
								break
							}
							ϒformat = τmp3
							ϒformat_url = λ.Cal(ϒurl_or_none, ϒformat)
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒformat_url))) {
								continue
							}
							if λ.IsTrue(λ.NewBool(λ.Contains(ϒformat_urls, ϒformat_url))) {
								continue
							}
							λ.Cal(λ.GetAttr(ϒformat_urls, "add", nil), ϒformat_url)
							λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("url"):    ϒformat_url,
								λ.NewStr("ext"):    λ.NewStr("mp4"),
								λ.NewStr("height"): ϒheight,
								λ.NewStr("width"):  ϒwidth,
							}))
						}
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒthumbnail = λ.Cal(ϒurl_or_none, λ.Cal(ϒtry_get, ϒvideo, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(λ.GetItem(λ.GetItem(ϒx, λ.NewStr("cover")), λ.NewStr("url_list")), λ.NewInt(0))
						}), ϒcompat_str))
					ϒuploader = λ.Cal(ϒtry_get, ϒdata, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("author")), λ.NewStr("nickname"))
						}), ϒcompat_str)
					ϒtimestamp = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒdata, "get", nil), λ.NewStr("create_time")))
					ϒcomment_count = func() λ.Object {
						if λv := λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒdata, "get", nil), λ.NewStr("comment_count"))); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(ϒint_or_none, λ.Cal(ϒtry_get, ϒdata, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("statistics")), λ.NewStr("comment_count"))
								})))
						}
					}()
					ϒrepost_count = λ.Cal(ϒint_or_none, λ.Cal(ϒtry_get, ϒdata, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("statistics")), λ.NewStr("share_count"))
						})))
					ϒaweme_id = λ.GetItem(ϒdata, λ.NewStr("aweme_id"))
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"): ϒaweme_id,
						λ.NewStr("title"): func() λ.Object {
							if λv := ϒuploader; λ.IsTrue(λv) {
								return λv
							} else {
								return ϒaweme_id
							}
						}(),
						λ.NewStr("description"):   ϒdescription,
						λ.NewStr("thumbnail"):     ϒthumbnail,
						λ.NewStr("uploader"):      ϒuploader,
						λ.NewStr("timestamp"):     ϒtimestamp,
						λ.NewStr("comment_count"): ϒcomment_count,
						λ.NewStr("repost_count"):  ϒrepost_count,
						λ.NewStr("formats"):       ϒformats,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_extract_aweme"): TikTokBaseIE__extract_aweme,
			})
		}())
		TikTokIE = λ.Cal(λ.TypeType, λ.NewStr("TikTokIE"), λ.NewTuple(TikTokBaseIE), func() λ.Dict {
			var (
				TikTokIE__TEST         λ.Object
				TikTokIE__VALID_URL    λ.Object
				TikTokIE__real_extract λ.Object
			)
			TikTokIE__VALID_URL = λ.NewStr("https?://(?:m\\.)?tiktok\\.com/v/(?P<id>\\d+)")
			TikTokIE__TEST = λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("url"): λ.NewStr("https://m.tiktok.com/v/6606727368545406213.html"),
				λ.NewStr("md5"): λ.NewStr("d584b572e92fcd48888051f238022420"),
				λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("id"):            λ.NewStr("6606727368545406213"),
					λ.NewStr("ext"):           λ.NewStr("mp4"),
					λ.NewStr("title"):         λ.NewStr("Zureeal"),
					λ.NewStr("description"):   λ.NewStr("#bowsette#mario#cosplay#uk#lgbt#gaming#asian#bowsettecosplay"),
					λ.NewStr("thumbnail"):     λ.NewStr("re:^https?://.*~noop.image"),
					λ.NewStr("uploader"):      λ.NewStr("Zureeal"),
					λ.NewStr("timestamp"):     λ.NewInt(1538248586),
					λ.NewStr("upload_date"):   λ.NewStr("20180929"),
					λ.NewStr("comment_count"): λ.IntType,
					λ.NewStr("repost_count"):  λ.IntType,
				}),
			})
			TikTokIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdata     λ.Object
						ϒself     = λargs[0]
						ϒurl      = λargs[1]
						ϒvideo_id λ.Object
						ϒwebpage  λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					ϒdata = λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("\\bdata\\s*=\\s*({.+?})\\s*;"), ϒwebpage, λ.NewStr("data")), ϒvideo_id)
					return λ.Cal(λ.GetAttr(ϒself, "_extract_aweme", nil), ϒdata)
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TEST"):         TikTokIE__TEST,
				λ.NewStr("_VALID_URL"):    TikTokIE__VALID_URL,
				λ.NewStr("_real_extract"): TikTokIE__real_extract,
			})
		}())
		TikTokUserIE = λ.Cal(λ.TypeType, λ.NewStr("TikTokUserIE"), λ.NewTuple(TikTokBaseIE), func() λ.Dict {
			var (
				TikTokUserIE__VALID_URL λ.Object
			)
			TikTokUserIE__VALID_URL = λ.NewStr("https?://(?:m\\.)?tiktok\\.com/h5/share/usr/(?P<id>\\d+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): TikTokUserIE__VALID_URL,
			})
		}())
	})
}

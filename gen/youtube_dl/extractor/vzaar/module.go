// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * vzaar/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/vzaar.py
 */

package vzaar

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor      λ.Object
	VzaarIE            λ.Object
	ϒcompat_str        λ.Object
	ϒfloat_or_none     λ.Object
	ϒint_or_none       λ.Object
	ϒunified_timestamp λ.Object
	ϒurl_or_none       λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒunified_timestamp = Ωutils.ϒunified_timestamp
		ϒurl_or_none = Ωutils.ϒurl_or_none
		VzaarIE = λ.Cal(λ.TypeType, λ.NewStr("VzaarIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				VzaarIE__TESTS        λ.Object
				VzaarIE__VALID_URL    λ.Object
				VzaarIE__real_extract λ.Object
			)
			VzaarIE__VALID_URL = λ.NewStr("https?://(?:(?:www|view)\\.)?vzaar\\.com/(?:videos/)?(?P<id>\\d+)")
			VzaarIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://vzaar.com/videos/1152805"),
					λ.NewStr("md5"): λ.NewStr("bde5ddfeb104a6c56a93a06b04901dbf"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):    λ.NewStr("1152805"),
						λ.NewStr("ext"):   λ.NewStr("mp4"),
						λ.NewStr("title"): λ.NewStr("sample video (public)"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://view.vzaar.com/27272/player"),
					λ.NewStr("md5"): λ.NewStr("3b50012ac9bbce7f445550d54e0508f2"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):    λ.NewStr("27272"),
						λ.NewStr("ext"):   λ.NewStr("mp3"),
						λ.NewStr("title"): λ.NewStr("MP3"),
					}),
				}),
			)
			VzaarIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒf          λ.Object
						ϒformats    λ.Object
						ϒm3u8_url   λ.Object
						ϒself       = λargs[0]
						ϒsource_url λ.Object
						ϒtitle      λ.Object
						ϒurl        = λargs[1]
						ϒusp        λ.Object
						ϒvideo_data λ.Object
						ϒvideo_guid λ.Object
						ϒvideo_id   λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒvideo_data = λ.Cal(λ.GetAttr(ϒself, "_download_json", nil), λ.Mod(λ.NewStr("http://view.vzaar.com/v2/%s/video"), ϒvideo_id), ϒvideo_id)
					ϒtitle = λ.GetItem(ϒvideo_data, λ.NewStr("videoTitle"))
					ϒformats = λ.NewList()
					ϒsource_url = λ.Cal(ϒurl_or_none, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("sourceUrl")))
					if λ.IsTrue(ϒsource_url) {
						ϒf = λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"):       ϒsource_url,
							λ.NewStr("format_id"): λ.NewStr("http"),
						})
						if λ.IsTrue(λ.NewBool(λ.Contains(ϒsource_url, λ.NewStr("audio")))) {
							λ.Cal(λ.GetAttr(ϒf, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("vcodec"): λ.NewStr("none"),
								λ.NewStr("ext"):    λ.NewStr("mp3"),
							}))
						} else {
							λ.Cal(λ.GetAttr(ϒf, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("width"):  λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("width"))),
								λ.NewStr("height"): λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("height"))),
								λ.NewStr("ext"):    λ.NewStr("mp4"),
								λ.NewStr("fps"):    λ.Cal(ϒfloat_or_none, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("fps"))),
							}))
						}
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), ϒf)
					}
					ϒvideo_guid = λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("guid"))
					ϒusp = λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("usp"))
					if λ.IsTrue(func() λ.Object {
						if λv := λ.Cal(λ.BuiltinIsInstance, ϒvideo_guid, ϒcompat_str); !λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.BuiltinIsInstance, ϒusp, λ.DictType)
						}
					}()) {
						ϒm3u8_url = λ.Add(λ.Mod(λ.NewStr("http://fable.vzaar.com/v4/usp/%s/%s.ism/.m3u8?"), λ.NewTuple(
							ϒvideo_guid,
							ϒvideo_id,
						)), λ.Cal(λ.GetAttr(λ.NewStr("&"), "join", nil), λ.Cal(λ.NewFunction("<generator>",
							nil,
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
									var (
										ϒk   λ.Object
										ϒv   λ.Object
										τmp0 λ.Object
										τmp1 λ.Object
										τmp2 λ.Object
									)
									τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒusp, "items", nil)))
									for {
										if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
											break
										}
										τmp2 = τmp1
										ϒk = λ.GetItem(τmp2, λ.NewInt(0))
										ϒv = λ.GetItem(τmp2, λ.NewInt(1))
										λgy.Yield(λ.Mod(λ.NewStr("%s=%s"), λ.NewTuple(
											ϒk,
											ϒv,
										)))
									}
									return λ.None
								})
							}))))
						λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
							ϒm3u8_url,
							ϒvideo_id,
							λ.NewStr("mp4"),
						), λ.KWArgs{
							{Name: "entry_protocol", Value: λ.NewStr("m3u8_native")},
							{Name: "m3u8_id", Value: λ.NewStr("hls")},
							{Name: "fatal", Value: λ.False},
						}))
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):        ϒvideo_id,
						λ.NewStr("title"):     ϒtitle,
						λ.NewStr("thumbnail"): λ.Cal(λ.GetAttr(ϒself, "_proto_relative_url", nil), λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("poster"))),
						λ.NewStr("duration"):  λ.Cal(ϒfloat_or_none, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("videoDuration"))),
						λ.NewStr("timestamp"): λ.Cal(ϒunified_timestamp, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("ts"))),
						λ.NewStr("formats"):   ϒformats,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        VzaarIE__TESTS,
				λ.NewStr("_VALID_URL"):    VzaarIE__VALID_URL,
				λ.NewStr("_real_extract"): VzaarIE__real_extract,
			})
		}())
	})
}

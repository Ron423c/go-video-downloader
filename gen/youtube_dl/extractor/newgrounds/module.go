// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * newgrounds/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/newgrounds.py
 */

package newgrounds

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor        λ.Object
	NewgroundsIE         λ.Object
	NewgroundsPlaylistIE λ.Object
	ϒextract_attributes  λ.Object
	ϒint_or_none         λ.Object
	ϒparse_duration      λ.Object
	ϒparse_filesize      λ.Object
	ϒunified_timestamp   λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒextract_attributes = Ωutils.ϒextract_attributes
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒparse_filesize = Ωutils.ϒparse_filesize
		ϒunified_timestamp = Ωutils.ϒunified_timestamp
		NewgroundsIE = λ.Cal(λ.TypeType, λ.NewStr("NewgroundsIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				NewgroundsIE__TESTS        λ.Object
				NewgroundsIE__VALID_URL    λ.Object
				NewgroundsIE__real_extract λ.Object
			)
			NewgroundsIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?newgrounds\\.com/(?:audio/listen|portal/view)/(?P<id>[0-9]+)")
			NewgroundsIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.newgrounds.com/audio/listen/549479"),
					λ.NewStr("md5"): λ.NewStr("fe6033d297591288fa1c1f780386f07a"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("549479"),
						λ.NewStr("ext"):         λ.NewStr("mp3"),
						λ.NewStr("title"):       λ.NewStr("B7 - BusMode"),
						λ.NewStr("uploader"):    λ.NewStr("Burn7"),
						λ.NewStr("timestamp"):   λ.NewInt(1378878540),
						λ.NewStr("upload_date"): λ.NewStr("20130911"),
						λ.NewStr("duration"):    λ.NewInt(143),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.newgrounds.com/portal/view/673111"),
					λ.NewStr("md5"): λ.NewStr("3394735822aab2478c31b1004fe5e5bc"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("673111"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Dancin"),
						λ.NewStr("uploader"):    λ.NewStr("Squirrelman82"),
						λ.NewStr("timestamp"):   λ.NewInt(1460256780),
						λ.NewStr("upload_date"): λ.NewStr("20160410"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.newgrounds.com/portal/view/689400"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("689400"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("ZTV News Episode 8"),
						λ.NewStr("uploader"):    λ.NewStr("BennettTheSage"),
						λ.NewStr("timestamp"):   λ.NewInt(1487965140),
						λ.NewStr("upload_date"): λ.NewStr("20170224"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
			)
			NewgroundsIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒduration        λ.Object
						ϒfilesize_approx λ.Object
						ϒformats         λ.Object
						ϒmax_resolution  λ.Object
						ϒmedia_id        λ.Object
						ϒmedia_url       λ.Object
						ϒresolution      λ.Object
						ϒself            = λargs[0]
						ϒtimestamp       λ.Object
						ϒtitle           λ.Object
						ϒuploader        λ.Object
						ϒurl             = λargs[1]
						ϒurl_base        λ.Object
						ϒwebpage         λ.Object
						τmp0             λ.Object
						τmp1             λ.Object
					)
					ϒmedia_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒmedia_id)
					ϒtitle = λ.Cal(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewStr("<title>([^>]+)</title>"), ϒwebpage, λ.NewStr("title"))
					ϒmedia_url = λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("\"url\"\\s*:\\s*(\"[^\"]+\"),"), ϒwebpage, λ.NewStr("")), ϒmedia_id)
					ϒformats = λ.NewList(λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("url"):       ϒmedia_url,
						λ.NewStr("format_id"): λ.NewStr("source"),
						λ.NewStr("quality"):   λ.NewInt(1),
					}))
					ϒmax_resolution = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("max_resolution[\"\\']\\s*:\\s*(\\d+)"),
						ϒwebpage,
						λ.NewStr("max resolution"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					}))
					if λ.IsTrue(ϒmax_resolution) {
						ϒurl_base = λ.GetItem(λ.Cal(λ.GetAttr(ϒmedia_url, "rpartition", nil), λ.NewStr(".")), λ.NewInt(0))
						τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
							λ.NewInt(360),
							λ.NewInt(720),
							λ.NewInt(1080),
						))
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒresolution = τmp1
							if λ.IsTrue(λ.Gt(ϒresolution, ϒmax_resolution)) {
								break
							}
							λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("url"): λ.Mod(λ.NewStr("%s.%dp.mp4"), λ.NewTuple(
									ϒurl_base,
									ϒresolution,
								)),
								λ.NewStr("format_id"): λ.Mod(λ.NewStr("%dp"), ϒresolution),
								λ.NewStr("height"):    ϒresolution,
							}))
						}
					}
					λ.Cal(λ.GetAttr(ϒself, "_check_formats", nil), ϒformats, ϒmedia_id)
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒuploader = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
						λ.NewTuple(
							λ.NewStr("(?s)<h4[^>]*>(.+?)</h4>.*?<em>\\s*Author\\s*</em>"),
							λ.NewStr("(?:Author|Writer)\\s*<a[^>]+>([^<]+)"),
						),
						ϒwebpage,
						λ.NewStr("uploader"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					ϒtimestamp = λ.Cal(ϒunified_timestamp, λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
						λ.NewTuple(
							λ.NewStr("<dt>\\s*Uploaded\\s*</dt>\\s*<dd>([^<]+</dd>\\s*<dd>[^<]+)"),
							λ.NewStr("<dt>\\s*Uploaded\\s*</dt>\\s*<dd>([^<]+)"),
						),
						ϒwebpage,
						λ.NewStr("timestamp"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					}))
					ϒduration = λ.Cal(ϒparse_duration, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("(?s)<dd>\\s*Song\\s*</dd>\\s*<dd>.+?</dd>\\s*<dd>([^<]+)"),
						ϒwebpage,
						λ.NewStr("duration"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					}))
					ϒfilesize_approx = λ.Cal(ϒparse_filesize, λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
						λ.NewStr("(?s)<dd>\\s*Song\\s*</dd>\\s*<dd>(.+?)</dd>"),
						ϒwebpage,
						λ.NewStr("filesize"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					}))
					if λ.IsTrue(λ.Eq(λ.Cal(λ.BuiltinLen, ϒformats), λ.NewInt(1))) {
						λ.SetItem(λ.GetItem(ϒformats, λ.NewInt(0)), λ.NewStr("filesize_approx"), ϒfilesize_approx)
					}
					if λ.IsTrue(λ.NewBool(λ.Contains(ϒwebpage, λ.NewStr("<dd>Song")))) {
						λ.SetItem(λ.GetItem(ϒformats, λ.NewInt(0)), λ.NewStr("vcodec"), λ.NewStr("none"))
					}
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):        ϒmedia_id,
						λ.NewStr("title"):     ϒtitle,
						λ.NewStr("uploader"):  ϒuploader,
						λ.NewStr("timestamp"): ϒtimestamp,
						λ.NewStr("duration"):  ϒduration,
						λ.NewStr("formats"):   ϒformats,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        NewgroundsIE__TESTS,
				λ.NewStr("_VALID_URL"):    NewgroundsIE__VALID_URL,
				λ.NewStr("_real_extract"): NewgroundsIE__real_extract,
			})
		}())
		NewgroundsPlaylistIE = λ.Cal(λ.TypeType, λ.NewStr("NewgroundsPlaylistIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				NewgroundsPlaylistIE__VALID_URL λ.Object
			)
			NewgroundsPlaylistIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?newgrounds\\.com/(?:collection|[^/]+/search/[^/]+)/(?P<id>[^/?#&]+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): NewgroundsPlaylistIE__VALID_URL,
			})
		}())
	})
}

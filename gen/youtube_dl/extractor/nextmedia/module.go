// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * nextmedia/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/nextmedia.py
 */

package nextmedia

import (
	Ωparse "github.com/tenta-browser/go-video-downloader/gen/urllib/parse"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	AppleDailyIE          λ.Object
	InfoExtractor         λ.Object
	NextMediaActionNewsIE λ.Object
	NextMediaIE           λ.Object
	NextTVIE              λ.Object
	ϒclean_html           λ.Object
	ϒget_element_by_class λ.Object
	ϒint_or_none          λ.Object
	ϒparse_iso8601        λ.Object
	ϒremove_start         λ.Object
	ϒunified_timestamp    λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒclean_html = Ωutils.ϒclean_html
		ϒget_element_by_class = Ωutils.ϒget_element_by_class
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		ϒremove_start = Ωutils.ϒremove_start
		ϒunified_timestamp = Ωutils.ϒunified_timestamp
		NextMediaIE = λ.Cal(λ.TypeType, λ.NewStr("NextMediaIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				NextMediaIE__URL_PATTERN                 λ.Object
				NextMediaIE__VALID_URL                   λ.Object
				NextMediaIE__extract_from_nextmedia_page λ.Object
				NextMediaIE__fetch_description           λ.Object
				NextMediaIE__fetch_thumbnail             λ.Object
				NextMediaIE__fetch_timestamp             λ.Object
				NextMediaIE__fetch_title                 λ.Object
				NextMediaIE__fetch_upload_date           λ.Object
			)
			NextMediaIE__VALID_URL = λ.NewStr("https?://hk\\.apple\\.nextmedia\\.com/[^/]+/[^/]+/(?P<date>\\d+)/(?P<id>\\d+)")
			NextMediaIE__URL_PATTERN = λ.NewStr("\\{ url: \\'(.+)\\' \\}")
			NextMediaIE__extract_from_nextmedia_page = λ.NewFunction("_extract_from_nextmedia_page",
				[]λ.Param{
					{Name: "self"},
					{Name: "news_id"},
					{Name: "url"},
					{Name: "page"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒattrs           λ.Object
						ϒnews_id         = λargs[1]
						ϒpage            = λargs[3]
						ϒredirection_url λ.Object
						ϒself            = λargs[0]
						ϒtimestamp       λ.Object
						ϒtitle           λ.Object
						ϒurl             = λargs[2]
						ϒvideo_url       λ.Object
					)
					ϒredirection_url = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("window\\.location\\.href\\s*=\\s*([\\'\"])(?P<url>(?!\\1).+)\\1"),
						ϒpage,
						λ.NewStr("redirection URL"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
						{Name: "group", Value: λ.NewStr("url")},
					})
					if λ.IsTrue(ϒredirection_url) {
						return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), λ.Cal(Ωparse.ϒurljoin, ϒurl, ϒredirection_url))
					}
					ϒtitle = λ.Cal(λ.GetAttr(ϒself, "_fetch_title", nil), ϒpage)
					ϒvideo_url = λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.GetAttr(ϒself, "_URL_PATTERN", nil), ϒpage, λ.NewStr("video url"))
					ϒattrs = λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒnews_id,
						λ.NewStr("title"):       ϒtitle,
						λ.NewStr("url"):         ϒvideo_url,
						λ.NewStr("thumbnail"):   λ.Cal(λ.GetAttr(ϒself, "_fetch_thumbnail", nil), ϒpage),
						λ.NewStr("description"): λ.Cal(λ.GetAttr(ϒself, "_fetch_description", nil), ϒpage),
					})
					ϒtimestamp = λ.Cal(λ.GetAttr(ϒself, "_fetch_timestamp", nil), ϒpage)
					if λ.IsTrue(ϒtimestamp) {
						λ.SetItem(ϒattrs, λ.NewStr("timestamp"), ϒtimestamp)
					} else {
						λ.SetItem(ϒattrs, λ.NewStr("upload_date"), λ.Cal(λ.GetAttr(ϒself, "_fetch_upload_date", nil), ϒurl))
					}
					return ϒattrs
				})
			NextMediaIE__fetch_title = λ.NewFunction("_fetch_title",
				[]λ.Param{
					{Name: "self"},
					{Name: "page"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒpage = λargs[1]
						ϒself = λargs[0]
					)
					return λ.Cal(λ.GetAttr(ϒself, "_og_search_title", nil), ϒpage)
				})
			NextMediaIE__fetch_thumbnail = λ.NewFunction("_fetch_thumbnail",
				[]λ.Param{
					{Name: "self"},
					{Name: "page"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒpage = λargs[1]
						ϒself = λargs[0]
					)
					return λ.Cal(λ.GetAttr(ϒself, "_og_search_thumbnail", nil), ϒpage)
				})
			NextMediaIE__fetch_timestamp = λ.NewFunction("_fetch_timestamp",
				[]λ.Param{
					{Name: "self"},
					{Name: "page"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdateCreated λ.Object
						ϒpage        = λargs[1]
						ϒself        = λargs[0]
					)
					ϒdateCreated = λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("\"dateCreated\":\"([^\"]+)\""), ϒpage, λ.NewStr("created time"))
					return λ.Cal(ϒparse_iso8601, ϒdateCreated)
				})
			NextMediaIE__fetch_upload_date = λ.NewFunction("_fetch_upload_date",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒself = λargs[0]
						ϒurl  = λargs[1]
					)
					return λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.GetAttr(ϒself, "_VALID_URL", nil),
						ϒurl,
						λ.NewStr("upload date"),
					), λ.KWArgs{
						{Name: "group", Value: λ.NewStr("date")},
					})
				})
			NextMediaIE__fetch_description = λ.NewFunction("_fetch_description",
				[]λ.Param{
					{Name: "self"},
					{Name: "page"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒpage = λargs[1]
						ϒself = λargs[0]
					)
					return λ.Cal(λ.GetAttr(ϒself, "_og_search_property", nil), λ.NewStr("description"), ϒpage)
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_URL_PATTERN"):                 NextMediaIE__URL_PATTERN,
				λ.NewStr("_VALID_URL"):                   NextMediaIE__VALID_URL,
				λ.NewStr("_extract_from_nextmedia_page"): NextMediaIE__extract_from_nextmedia_page,
				λ.NewStr("_fetch_description"):           NextMediaIE__fetch_description,
				λ.NewStr("_fetch_thumbnail"):             NextMediaIE__fetch_thumbnail,
				λ.NewStr("_fetch_timestamp"):             NextMediaIE__fetch_timestamp,
				λ.NewStr("_fetch_title"):                 NextMediaIE__fetch_title,
				λ.NewStr("_fetch_upload_date"):           NextMediaIE__fetch_upload_date,
			})
		}())
		NextMediaActionNewsIE = λ.Cal(λ.TypeType, λ.NewStr("NextMediaActionNewsIE"), λ.NewTuple(NextMediaIE), func() λ.Dict {
			var (
				NextMediaActionNewsIE__TESTS        λ.Object
				NextMediaActionNewsIE__VALID_URL    λ.Object
				NextMediaActionNewsIE__real_extract λ.Object
			)
			NextMediaActionNewsIE__VALID_URL = λ.NewStr("https?://hk\\.dv\\.nextmedia\\.com/actionnews/[^/]+/(?P<date>\\d+)/(?P<id>\\d+)/\\d+")
			NextMediaActionNewsIE__TESTS = λ.NewList(λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("url"): λ.NewStr("http://hk.dv.nextmedia.com/actionnews/hit/20150121/19009428/20061460"),
				λ.NewStr("md5"): λ.NewStr("05fce8ffeed7a5e00665d4b7cf0f9201"),
				λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("id"):          λ.NewStr("19009428"),
					λ.NewStr("ext"):         λ.NewStr("mp4"),
					λ.NewStr("title"):       λ.NewStr("【壹週刊】細10年男友偷食　50歲邵美琪再失戀"),
					λ.NewStr("thumbnail"):   λ.NewStr("re:^https?://.*\\.jpg$"),
					λ.NewStr("description"): λ.NewStr("md5:cd802fad1f40fd9ea178c1e2af02d659"),
					λ.NewStr("timestamp"):   λ.NewInt(1421791200),
					λ.NewStr("upload_date"): λ.NewStr("20150120"),
				}),
			}))
			NextMediaActionNewsIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒactionnews_page λ.Object
						ϒarticle_page    λ.Object
						ϒarticle_url     λ.Object
						ϒnews_id         λ.Object
						ϒself            = λargs[0]
						ϒurl             = λargs[1]
					)
					ϒnews_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒactionnews_page = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒnews_id)
					ϒarticle_url = λ.Cal(λ.GetAttr(ϒself, "_og_search_url", nil), ϒactionnews_page)
					ϒarticle_page = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒarticle_url, ϒnews_id)
					return λ.Cal(λ.GetAttr(ϒself, "_extract_from_nextmedia_page", nil), ϒnews_id, ϒurl, ϒarticle_page)
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        NextMediaActionNewsIE__TESTS,
				λ.NewStr("_VALID_URL"):    NextMediaActionNewsIE__VALID_URL,
				λ.NewStr("_real_extract"): NextMediaActionNewsIE__real_extract,
			})
		}())
		AppleDailyIE = λ.Cal(λ.TypeType, λ.NewStr("AppleDailyIE"), λ.NewTuple(NextMediaIE), func() λ.Dict {
			var (
				AppleDailyIE__VALID_URL λ.Object
			)
			AppleDailyIE__VALID_URL = λ.NewStr("https?://(www|ent)\\.appledaily\\.com\\.tw/[^/]+/[^/]+/[^/]+/(?P<date>\\d+)/(?P<id>\\d+)(/.*)?")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): AppleDailyIE__VALID_URL,
			})
		}())
		NextTVIE = λ.Cal(λ.TypeType, λ.NewStr("NextTVIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				NextTVIE__TEST         λ.Object
				NextTVIE__VALID_URL    λ.Object
				NextTVIE__real_extract λ.Object
			)
			NextTVIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?nexttv\\.com\\.tw/(?:[^/]+/)+(?P<id>\\d+)")
			NextTVIE__TEST = λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("url"): λ.NewStr("http://www.nexttv.com.tw/news/realtime/politics/11779671"),
				λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("id"):          λ.NewStr("11779671"),
					λ.NewStr("ext"):         λ.NewStr("mp4"),
					λ.NewStr("title"):       λ.NewStr("「超收稅」近4千億！　藍議員籲發消費券"),
					λ.NewStr("thumbnail"):   λ.NewStr("re:^https?://.*\\.jpg$"),
					λ.NewStr("timestamp"):   λ.NewInt(1484825400),
					λ.NewStr("upload_date"): λ.NewStr("20170119"),
					λ.NewStr("view_count"):  λ.IntType,
				}),
			})
			NextTVIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdata       λ.Object
						ϒdate_str   λ.Object
						ϒself       = λargs[0]
						ϒtimestamp  λ.Object
						ϒtitle      λ.Object
						ϒurl        = λargs[1]
						ϒvideo_id   λ.Object
						ϒvideo_url  λ.Object
						ϒview_count λ.Object
						ϒwebpage    λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					ϒtitle = λ.Cal(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewStr("<h1[^>]*>([^<]+)</h1>"), ϒwebpage, λ.NewStr("title"))
					ϒdata = λ.Cal(λ.GetAttr(ϒself, "_hidden_inputs", nil), ϒwebpage)
					ϒvideo_url = λ.GetItem(ϒdata, λ.NewStr("ntt-vod-src-detailview"))
					ϒdate_str = λ.Cal(ϒget_element_by_class, λ.NewStr("date"), ϒwebpage)
					ϒtimestamp = func() λ.Object {
						if λ.IsTrue(ϒdate_str) {
							return λ.Cal(ϒunified_timestamp, λ.Add(ϒdate_str, λ.NewStr("+0800")))
						} else {
							return λ.None
						}
					}()
					ϒview_count = λ.Cal(ϒint_or_none, λ.Cal(ϒremove_start, λ.Cal(ϒclean_html, λ.Cal(ϒget_element_by_class, λ.NewStr("click"), ϒwebpage)), λ.NewStr("點閱：")))
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):         ϒvideo_id,
						λ.NewStr("title"):      ϒtitle,
						λ.NewStr("url"):        ϒvideo_url,
						λ.NewStr("thumbnail"):  λ.Cal(λ.GetAttr(ϒdata, "get", nil), λ.NewStr("ntt-vod-img-src")),
						λ.NewStr("timestamp"):  ϒtimestamp,
						λ.NewStr("view_count"): ϒview_count,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TEST"):         NextTVIE__TEST,
				λ.NewStr("_VALID_URL"):    NextTVIE__VALID_URL,
				λ.NewStr("_real_extract"): NextTVIE__real_extract,
			})
		}())
	})
}

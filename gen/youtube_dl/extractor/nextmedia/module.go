// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * nextmedia/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/nextmedia.py
 */

package nextmedia

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	AppleDailyIE          λ.Object
	InfoExtractor         λ.Object
	NextMediaActionNewsIE λ.Object
	NextMediaIE           λ.Object
	NextTVIE              λ.Object
	ϒclean_html           λ.Object
	ϒget_element_by_class λ.Object
	ϒint_or_none          λ.Object
	ϒparse_iso8601        λ.Object
	ϒremove_start         λ.Object
	ϒunified_timestamp    λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒclean_html = Ωutils.ϒclean_html
		ϒget_element_by_class = Ωutils.ϒget_element_by_class
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		ϒremove_start = Ωutils.ϒremove_start
		ϒunified_timestamp = Ωutils.ϒunified_timestamp
		NextMediaIE = λ.Cal(λ.TypeType, λ.NewStr("NextMediaIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				NextMediaIE__VALID_URL λ.Object
			)
			NextMediaIE__VALID_URL = λ.NewStr("https?://hk\\.apple\\.nextmedia\\.com/[^/]+/[^/]+/(?P<date>\\d+)/(?P<id>\\d+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): NextMediaIE__VALID_URL,
			})
		}())
		NextMediaActionNewsIE = λ.Cal(λ.TypeType, λ.NewStr("NextMediaActionNewsIE"), λ.NewTuple(NextMediaIE), func() λ.Dict {
			var (
				NextMediaActionNewsIE__VALID_URL λ.Object
			)
			NextMediaActionNewsIE__VALID_URL = λ.NewStr("https?://hk\\.dv\\.nextmedia\\.com/actionnews/[^/]+/(?P<date>\\d+)/(?P<id>\\d+)/\\d+")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): NextMediaActionNewsIE__VALID_URL,
			})
		}())
		AppleDailyIE = λ.Cal(λ.TypeType, λ.NewStr("AppleDailyIE"), λ.NewTuple(NextMediaIE), func() λ.Dict {
			var (
				AppleDailyIE__VALID_URL λ.Object
			)
			AppleDailyIE__VALID_URL = λ.NewStr("https?://(www|ent)\\.appledaily\\.com\\.tw/[^/]+/[^/]+/[^/]+/(?P<date>\\d+)/(?P<id>\\d+)(/.*)?")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): AppleDailyIE__VALID_URL,
			})
		}())
		NextTVIE = λ.Cal(λ.TypeType, λ.NewStr("NextTVIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				NextTVIE__TEST         λ.Object
				NextTVIE__VALID_URL    λ.Object
				NextTVIE__real_extract λ.Object
			)
			NextTVIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?nexttv\\.com\\.tw/(?:[^/]+/)+(?P<id>\\d+)")
			NextTVIE__TEST = λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("url"): λ.NewStr("http://www.nexttv.com.tw/news/realtime/politics/11779671"),
				λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("id"):          λ.NewStr("11779671"),
					λ.NewStr("ext"):         λ.NewStr("mp4"),
					λ.NewStr("title"):       λ.NewStr("「超收稅」近4千億！　藍議員籲發消費券"),
					λ.NewStr("thumbnail"):   λ.NewStr("re:^https?://.*\\.jpg$"),
					λ.NewStr("timestamp"):   λ.NewInt(1484825400),
					λ.NewStr("upload_date"): λ.NewStr("20170119"),
					λ.NewStr("view_count"):  λ.IntType,
				}),
			})
			NextTVIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdata       λ.Object
						ϒdate_str   λ.Object
						ϒself       = λargs[0]
						ϒtimestamp  λ.Object
						ϒtitle      λ.Object
						ϒurl        = λargs[1]
						ϒvideo_id   λ.Object
						ϒvideo_url  λ.Object
						ϒview_count λ.Object
						ϒwebpage    λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					ϒtitle = λ.Cal(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewStr("<h1[^>]*>([^<]+)</h1>"), ϒwebpage, λ.NewStr("title"))
					ϒdata = λ.Cal(λ.GetAttr(ϒself, "_hidden_inputs", nil), ϒwebpage)
					ϒvideo_url = λ.GetItem(ϒdata, λ.NewStr("ntt-vod-src-detailview"))
					ϒdate_str = λ.Cal(ϒget_element_by_class, λ.NewStr("date"), ϒwebpage)
					ϒtimestamp = func() λ.Object {
						if λ.IsTrue(ϒdate_str) {
							return λ.Cal(ϒunified_timestamp, λ.Add(ϒdate_str, λ.NewStr("+0800")))
						} else {
							return λ.None
						}
					}()
					ϒview_count = λ.Cal(ϒint_or_none, λ.Cal(ϒremove_start, λ.Cal(ϒclean_html, λ.Cal(ϒget_element_by_class, λ.NewStr("click"), ϒwebpage)), λ.NewStr("點閱：")))
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):         ϒvideo_id,
						λ.NewStr("title"):      ϒtitle,
						λ.NewStr("url"):        ϒvideo_url,
						λ.NewStr("thumbnail"):  λ.Cal(λ.GetAttr(ϒdata, "get", nil), λ.NewStr("ntt-vod-img-src")),
						λ.NewStr("timestamp"):  ϒtimestamp,
						λ.NewStr("view_count"): ϒview_count,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TEST"):         NextTVIE__TEST,
				λ.NewStr("_VALID_URL"):    NextTVIE__VALID_URL,
				λ.NewStr("_real_extract"): NextTVIE__real_extract,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * slideslive/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/slideslive.py
 */

package slideslive

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor λ.Object
	SlidesLiveIE  λ.Object
	ϒsmuggle_url  λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒsmuggle_url = Ωutils.ϒsmuggle_url
		SlidesLiveIE = λ.Cal(λ.TypeType, λ.NewStr("SlidesLiveIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				SlidesLiveIE__VALID_URL    λ.Object
				SlidesLiveIE__real_extract λ.Object
			)
			SlidesLiveIE__VALID_URL = λ.NewStr("https?://slideslive\\.com/(?P<id>[0-9]+)")
			SlidesLiveIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒinfo         λ.Object
						ϒself         = λargs[0]
						ϒservice_id   λ.Object
						ϒservice_name λ.Object
						ϒurl          = λargs[1]
						ϒvideo_data   λ.Object
						ϒvideo_id     λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒvideo_data = λ.Cal(λ.GetAttr(ϒself, "_download_json", nil), λ.Add(λ.NewStr("https://ben.slideslive.com/player/"), ϒvideo_id), ϒvideo_id)
					ϒservice_name = λ.Cal(λ.GetAttr(λ.GetItem(ϒvideo_data, λ.NewStr("video_service_name")), "lower", nil))
					if !λ.IsTrue(λ.NewBool(λ.Contains(λ.NewTuple(
						λ.NewStr("url"),
						λ.NewStr("vimeo"),
						λ.NewStr("youtube"),
					), ϒservice_name))) {
						panic(λ.Raise(λ.Cal(λ.AssertionErrorType)))
					}
					ϒservice_id = λ.GetItem(ϒvideo_data, λ.NewStr("video_service_id"))
					ϒinfo = λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):        ϒvideo_id,
						λ.NewStr("thumbnail"): λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("thumbnail")),
						λ.NewStr("url"):       ϒservice_id,
					})
					if λ.IsTrue(λ.Eq(ϒservice_name, λ.NewStr("url"))) {
						λ.SetItem(ϒinfo, λ.NewStr("title"), λ.GetItem(ϒvideo_data, λ.NewStr("title")))
					} else {
						λ.Cal(λ.GetAttr(ϒinfo, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("_type"):  λ.NewStr("url_transparent"),
							λ.NewStr("ie_key"): λ.Cal(λ.GetAttr(ϒservice_name, "capitalize", nil)),
							λ.NewStr("title"):  λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("title")),
						}))
						if λ.IsTrue(λ.Eq(ϒservice_name, λ.NewStr("vimeo"))) {
							λ.SetItem(ϒinfo, λ.NewStr("url"), λ.Cal(ϒsmuggle_url, λ.Add(λ.NewStr("https://player.vimeo.com/video/"), ϒservice_id), λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("http_headers"): λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("Referer"): ϒurl,
								}),
							})))
						}
					}
					return ϒinfo
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"):    SlidesLiveIE__VALID_URL,
				λ.NewStr("_real_extract"): SlidesLiveIE__real_extract,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * infoq/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/infoq.py
 */

package infoq

import (
	Ωparse "github.com/tenta-browser/go-video-downloader/gen/urllib/parse"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωbokecc "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/bokecc"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	BokeCCBaseIE                 λ.Object
	InfoQIE                      λ.Object
	ϒcompat_b64decode            λ.Object
	ϒcompat_urllib_parse_unquote λ.Object
	ϒdetermine_ext               λ.Object
	ϒupdate_url_query            λ.Object
)

func init() {
	λ.InitModule(func() {
		ϒcompat_b64decode = Ωcompat.ϒcompat_b64decode
		ϒcompat_urllib_parse_unquote = Ωcompat.ϒcompat_urllib_parse_unquote
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ϒupdate_url_query = Ωutils.ϒupdate_url_query
		BokeCCBaseIE = Ωbokecc.BokeCCBaseIE
		InfoQIE = λ.Cal(λ.TypeType, λ.NewStr("InfoQIE"), λ.NewTuple(BokeCCBaseIE), func() λ.Dict {
			var (
				InfoQIE__TESTS              λ.Object
				InfoQIE__VALID_URL          λ.Object
				InfoQIE__extract_cf_auth    λ.Object
				InfoQIE__extract_http_audio λ.Object
				InfoQIE__extract_http_video λ.Object
				InfoQIE__extract_rtmp_video λ.Object
				InfoQIE__real_extract       λ.Object
			)
			InfoQIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?infoq\\.com/(?:[^/]+/)+(?P<id>[^/]+)")
			InfoQIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.infoq.com/presentations/A-Few-of-My-Favorite-Python-Things"),
					λ.NewStr("md5"): λ.NewStr("b5ca0e0a8c1fed93b0e65e48e462f9a2"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("A-Few-of-My-Favorite-Python-Things"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("description"): λ.NewStr("Mike Pirnat presents some tips and tricks, standard libraries and third party packages that make programming in Python a richer experience."),
						λ.NewStr("title"):       λ.NewStr("A Few of My Favorite [Python] Things"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://www.infoq.com/fr/presentations/changez-avis-sur-javascript"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.infoq.com/cn/presentations/openstack-continued-delivery"),
					λ.NewStr("md5"): λ.NewStr("4918d0cca1497f2244572caf626687ef"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("openstack-continued-delivery"),
						λ.NewStr("title"):       λ.NewStr("OpenStack持续交付之路"),
						λ.NewStr("ext"):         λ.NewStr("flv"),
						λ.NewStr("description"): λ.NewStr("md5:308d981fb28fa42f49f9568322c683ff"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.infoq.com/presentations/Simple-Made-Easy"),
					λ.NewStr("md5"): λ.NewStr("0e34642d4d9ef44bf86f66f6399672db"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("Simple-Made-Easy"),
						λ.NewStr("title"):       λ.NewStr("Simple Made Easy"),
						λ.NewStr("ext"):         λ.NewStr("mp3"),
						λ.NewStr("description"): λ.NewStr("md5:3e0e213a8bbd074796ef89ea35ada25b"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("format"): λ.NewStr("bestaudio"),
					}),
				}),
			)
			InfoQIE__extract_rtmp_video = λ.NewFunction("_extract_rtmp_video",
				[]λ.Param{
					{Name: "self"},
					{Name: "webpage"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒencoded_id λ.Object
						ϒplaypath   λ.Object
						ϒreal_id    λ.Object
						ϒself       = λargs[0]
						ϒvideo_url  λ.Object
						ϒwebpage    = λargs[1]
					)
					ϒvideo_url = λ.NewStr("rtmpe://video.infoq.com/cfx/st/")
					ϒencoded_id = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("jsclassref\\s*=\\s*'([^']*)'"),
						ϒwebpage,
						λ.NewStr("encoded id"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					ϒreal_id = λ.Cal(ϒcompat_urllib_parse_unquote, λ.Cal(λ.GetAttr(λ.Cal(ϒcompat_b64decode, ϒencoded_id), "decode", nil), λ.NewStr("utf-8")))
					ϒplaypath = λ.Add(λ.NewStr("mp4:"), ϒreal_id)
					return λ.NewList(λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("format_id"): λ.NewStr("rtmp_video"),
						λ.NewStr("url"):       ϒvideo_url,
						λ.NewStr("ext"):       λ.Cal(ϒdetermine_ext, ϒplaypath),
						λ.NewStr("play_path"): ϒplaypath,
					}))
				})
			InfoQIE__extract_cf_auth = λ.NewFunction("_extract_cf_auth",
				[]λ.Param{
					{Name: "self"},
					{Name: "webpage"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒkey_pair_id λ.Object
						ϒpolicy      λ.Object
						ϒself        = λargs[0]
						ϒsignature   λ.Object
						ϒwebpage     = λargs[1]
					)
					ϒpolicy = λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("InfoQConstants\\.scp\\s*=\\s*\\'([^\\']+)\\'"), ϒwebpage, λ.NewStr("policy"))
					ϒsignature = λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("InfoQConstants\\.scs\\s*=\\s*\\'([^\\']+)\\'"), ϒwebpage, λ.NewStr("signature"))
					ϒkey_pair_id = λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("InfoQConstants\\.sck\\s*=\\s*\\'([^\\']+)\\'"), ϒwebpage, λ.NewStr("key-pair-id"))
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("Policy"):      ϒpolicy,
						λ.NewStr("Signature"):   ϒsignature,
						λ.NewStr("Key-Pair-Id"): ϒkey_pair_id,
					})
				})
			InfoQIE__extract_http_video = λ.NewFunction("_extract_http_video",
				[]λ.Param{
					{Name: "self"},
					{Name: "webpage"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒhttp_video_url λ.Object
						ϒself           = λargs[0]
						ϒwebpage        = λargs[1]
					)
					ϒhttp_video_url = λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("P\\.s\\s*=\\s*\\'([^\\']+)\\'"), ϒwebpage, λ.NewStr("video URL"))
					ϒhttp_video_url = λ.Cal(ϒupdate_url_query, ϒhttp_video_url, λ.Cal(λ.GetAttr(ϒself, "_extract_cf_auth", nil), ϒwebpage))
					return λ.NewList(λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("format_id"): λ.NewStr("http_video"),
						λ.NewStr("url"):       ϒhttp_video_url,
					}))
				})
			InfoQIE__extract_http_audio = λ.NewFunction("_extract_http_audio",
				[]λ.Param{
					{Name: "self"},
					{Name: "webpage"},
					{Name: "video_id"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒfields         λ.Object
						ϒhttp_audio_url λ.Object
						ϒself           = λargs[0]
						ϒvideo_id       = λargs[2]
						ϒwebpage        = λargs[1]
					)
					ϒfields = λ.Cal(λ.GetAttr(ϒself, "_hidden_inputs", nil), ϒwebpage)
					ϒhttp_audio_url = λ.Cal(λ.GetAttr(ϒfields, "get", nil), λ.NewStr("filename"))
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒhttp_audio_url))) {
						return λ.NewList()
					}
					ϒhttp_audio_url = λ.Cal(Ωparse.ϒurljoin, λ.NewStr("http://res.infoq.com/downloads/mp3downloads/"), ϒhttp_audio_url)
					ϒhttp_audio_url = λ.Cal(ϒupdate_url_query, ϒhttp_audio_url, λ.Cal(λ.GetAttr(ϒself, "_extract_cf_auth", nil), ϒwebpage))
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.Cal(λ.GetAttr(ϒself, "_is_valid_url", nil), ϒhttp_audio_url, ϒvideo_id)))) {
						return λ.NewList()
					}
					return λ.NewList(λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("format_id"): λ.NewStr("http_audio"),
						λ.NewStr("url"):       ϒhttp_audio_url,
						λ.NewStr("vcodec"):    λ.NewStr("none"),
					}))
				})
			InfoQIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒformats           λ.Object
						ϒself              = λargs[0]
						ϒurl               = λargs[1]
						ϒvideo_description λ.Object
						ϒvideo_id          λ.Object
						ϒvideo_title       λ.Object
						ϒwebpage           λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					ϒvideo_title = λ.Cal(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewStr("<title>(.*?)</title>"), ϒwebpage, λ.NewStr("title"))
					ϒvideo_description = λ.Cal(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewStr("description"), ϒwebpage, λ.NewStr("description"))
					if λ.IsTrue(λ.NewBool(λ.Contains(ϒurl, λ.NewStr("/cn/")))) {
						ϒformats = λ.Cal(λ.GetAttr(ϒself, "_extract_bokecc_formats", nil), ϒwebpage, ϒvideo_id)
					} else {
						ϒformats = λ.Add(λ.Add(λ.Cal(λ.GetAttr(ϒself, "_extract_rtmp_video", nil), ϒwebpage), λ.Cal(λ.GetAttr(ϒself, "_extract_http_video", nil), ϒwebpage)), λ.Cal(λ.GetAttr(ϒself, "_extract_http_audio", nil), ϒwebpage, ϒvideo_id))
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("title"):       ϒvideo_title,
						λ.NewStr("description"): ϒvideo_description,
						λ.NewStr("formats"):     ϒformats,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):              InfoQIE__TESTS,
				λ.NewStr("_VALID_URL"):          InfoQIE__VALID_URL,
				λ.NewStr("_extract_cf_auth"):    InfoQIE__extract_cf_auth,
				λ.NewStr("_extract_http_audio"): InfoQIE__extract_http_audio,
				λ.NewStr("_extract_http_video"): InfoQIE__extract_http_video,
				λ.NewStr("_extract_rtmp_video"): InfoQIE__extract_rtmp_video,
				λ.NewStr("_real_extract"):       InfoQIE__real_extract,
			})
		}())
	})
}

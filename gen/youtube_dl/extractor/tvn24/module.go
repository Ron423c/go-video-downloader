// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * tvn24/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/tvn24.py
 */

package tvn24

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor λ.Object
	TVN24IE       λ.Object
	ϒint_or_none  λ.Object
	ϒunescapeHTML λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒunescapeHTML = Ωutils.ϒunescapeHTML
		TVN24IE = λ.Cal(λ.TypeType, λ.NewStr("TVN24IE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				TVN24IE__TESTS        λ.Object
				TVN24IE__VALID_URL    λ.Object
				TVN24IE__real_extract λ.Object
			)
			TVN24IE__VALID_URL = λ.NewStr("https?://(?:(?:[^/]+)\\.)?tvn24(?:bis)?\\.pl/(?:[^/]+/)*(?P<id>[^/]+)")
			TVN24IE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.tvn24.pl/wiadomosci-z-kraju,3/oredzie-artura-andrusa,702428.html"),
					λ.NewStr("md5"): λ.NewStr("fbdec753d7bc29d96036808275f2130c"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("1584444"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("\"Święta mają być wesołe, dlatego, ludziska, wszyscy pod jemiołę\""),
						λ.NewStr("description"): λ.NewStr("Wyjątkowe orędzie Artura Andrusa, jednego z gości \"Szkła kontaktowego\"."),
						λ.NewStr("thumbnail"):   λ.NewStr("re:https?://.*[.]jpeg"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://fakty.tvn24.pl/ogladaj-online,60/53-konferencja-bezpieczenstwa-w-monachium,716431.html"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://sport.tvn24.pl/pilka-nozna,105/ligue-1-kamil-glik-rozcial-glowe-monaco-tylko-remisuje-z-bastia,716522.html"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://tvn24bis.pl/poranek,146,m/gen-koziej-w-tvn24-bis-wracamy-do-czasow-zimnej-wojny,715660.html"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://www.tvn24.pl/magazyn-tvn24/angie-w-jednej-czwartej-polka-od-szarej-myszki-do-cesarzowej-europy,119,2158"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			TVN24IE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdescription  λ.Object
						ϒextract_json λ.Object
						ϒformat_id    λ.Object
						ϒformats      λ.Object
						ϒquality_data λ.Object
						ϒself         = λargs[0]
						ϒshare_params λ.Object
						ϒthumbnail    λ.Object
						ϒtitle        λ.Object
						ϒurl          = λargs[1]
						ϒvideo_id     λ.Object
						ϒwebpage      λ.Object
						τmp0          λ.Object
						τmp1          λ.Object
						τmp2          λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					ϒtitle = λ.Cal(λ.GetAttr(ϒself, "_og_search_title", nil), ϒwebpage)
					ϒextract_json = λ.NewFunction("extract_json",
						[]λ.Param{
							{Name: "attr"},
							{Name: "name"},
							{Name: "fatal", Def: λ.True},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒattr  = λargs[0]
								ϒfatal = λargs[2]
								ϒname  = λargs[1]
							)
							return λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
								func() λ.Object {
									if λv := λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
										λ.Mod(λ.NewStr("\\b%s=([\"\\'])(?P<json>(?!\\1).+?)\\1"), ϒattr),
										ϒwebpage,
										ϒname,
									), λ.KWArgs{
										{Name: "group", Value: λ.NewStr("json")},
										{Name: "fatal", Value: ϒfatal},
									}); λ.IsTrue(λv) {
										return λv
									} else {
										return λ.NewStr("{}")
									}
								}(),
								ϒvideo_id,
							), λ.KWArgs{
								{Name: "transform_source", Value: ϒunescapeHTML},
								{Name: "fatal", Value: ϒfatal},
							})
						})
					ϒquality_data = λ.Cal(ϒextract_json, λ.NewStr("data-quality"), λ.NewStr("formats"))
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒquality_data, "items", nil)))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒformat_id = λ.GetItem(τmp2, λ.NewInt(0))
						ϒurl = λ.GetItem(τmp2, λ.NewInt(1))
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"):       ϒurl,
							λ.NewStr("format_id"): ϒformat_id,
							λ.NewStr("height"):    λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒformat_id, "rstrip", nil), λ.NewStr("p"))),
						}))
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒdescription = λ.Cal(λ.GetAttr(ϒself, "_og_search_description", nil), ϒwebpage)
					ϒthumbnail = func() λ.Object {
						if λv := λ.Call(λ.GetAttr(ϒself, "_og_search_thumbnail", nil), λ.NewArgs(ϒwebpage), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
								λ.NewStr("\\bdata-poster=([\"\\'])(?P<url>(?!\\1).+?)\\1"),
								ϒwebpage,
								λ.NewStr("thumbnail"),
							), λ.KWArgs{
								{Name: "group", Value: λ.NewStr("url")},
							})
						}
					}()
					ϒshare_params = λ.Call(ϒextract_json, λ.NewArgs(
						λ.NewStr("data-share-params"),
						λ.NewStr("share params"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒshare_params, λ.DictType)) {
						ϒvideo_id = func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒshare_params, "get", nil), λ.NewStr("id")); λ.IsTrue(λv) {
								return λv
							} else {
								return ϒvideo_id
							}
						}()
					}
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("title"):       ϒtitle,
						λ.NewStr("description"): ϒdescription,
						λ.NewStr("thumbnail"):   ϒthumbnail,
						λ.NewStr("formats"):     ϒformats,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        TVN24IE__TESTS,
				λ.NewStr("_VALID_URL"):    TVN24IE__VALID_URL,
				λ.NewStr("_real_extract"): TVN24IE__real_extract,
			})
		}())
	})
}

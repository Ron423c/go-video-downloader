// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * appleconnect/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/appleconnect.py
 */

package appleconnect

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	AppleConnectIE λ.Object
	ExtractorError λ.Object
	InfoExtractor  λ.Object
	ϒstr_to_int    λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒstr_to_int = Ωutils.ϒstr_to_int
		ExtractorError = Ωutils.ExtractorError
		AppleConnectIE = λ.Cal(λ.TypeType, λ.NewStr("AppleConnectIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				AppleConnectIE__TEST         λ.Object
				AppleConnectIE__VALID_URL    λ.Object
				AppleConnectIE__real_extract λ.Object
			)
			AppleConnectIE__VALID_URL = λ.NewStr("https?://itunes\\.apple\\.com/\\w{0,2}/?post/idsa\\.(?P<id>[\\w-]+)")
			AppleConnectIE__TEST = λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("url"): λ.NewStr("https://itunes.apple.com/us/post/idsa.4ab17a39-2720-11e5-96c5-a5b38f6c42d3"),
				λ.NewStr("md5"): λ.NewStr("e7c38568a01ea45402570e6029206723"),
				λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("id"):          λ.NewStr("4ab17a39-2720-11e5-96c5-a5b38f6c42d3"),
					λ.NewStr("ext"):         λ.NewStr("m4v"),
					λ.NewStr("title"):       λ.NewStr("Energy"),
					λ.NewStr("uploader"):    λ.NewStr("Drake"),
					λ.NewStr("thumbnail"):   λ.NewStr("re:^https?://.*\\.jpg$"),
					λ.NewStr("upload_date"): λ.NewStr("20150710"),
					λ.NewStr("timestamp"):   λ.NewInt(1436545535),
				}),
			})
			AppleConnectIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒlike_count λ.Object
						ϒself       = λargs[0]
						ϒtimestamp  λ.Object
						ϒurl        = λargs[1]
						ϒvideo_data λ.Object
						ϒvideo_id   λ.Object
						ϒvideo_json λ.Object
						ϒwebpage    λ.Object
						τmp0        λ.Object
						τmp1        λ.Object
					)
					_ = τmp0
					_ = τmp1
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					τmp0, τmp1 = func() (λexit λ.Object, λret λ.Object) {
						defer λ.CatchMulti(
							nil,
							&λ.Catcher{ExtractorError, func(λex λ.BaseException) {
								panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.NewStr("This post doesn't contain a video")), λ.KWArgs{
									{Name: "expected", Value: λ.True},
								})))
							}},
						)
						ϒvideo_json = λ.Cal(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewStr("class=\"auc-video-data\">(\\{.*?\\})"), ϒwebpage, λ.NewStr("json"))
						return λ.BlockExitNormally, nil
					}()
					ϒvideo_data = λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), ϒvideo_json, ϒvideo_id)
					ϒtimestamp = λ.Cal(ϒstr_to_int, λ.Cal(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewStr("data-timestamp=\"(\\d+)\""), ϒwebpage, λ.NewStr("timestamp")))
					ϒlike_count = λ.Cal(ϒstr_to_int, λ.Cal(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewStr("(\\d+) Loves"), ϒwebpage, λ.NewStr("like count")))
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("url"):         λ.GetItem(ϒvideo_data, λ.NewStr("sslSrc")),
						λ.NewStr("title"):       λ.GetItem(ϒvideo_data, λ.NewStr("title")),
						λ.NewStr("description"): λ.GetItem(ϒvideo_data, λ.NewStr("description")),
						λ.NewStr("uploader"):    λ.GetItem(ϒvideo_data, λ.NewStr("artistName")),
						λ.NewStr("thumbnail"):   λ.GetItem(ϒvideo_data, λ.NewStr("artworkUrl")),
						λ.NewStr("timestamp"):   ϒtimestamp,
						λ.NewStr("like_count"):  ϒlike_count,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TEST"):         AppleConnectIE__TEST,
				λ.NewStr("_VALID_URL"):    AppleConnectIE__VALID_URL,
				λ.NewStr("_real_extract"): AppleConnectIE__real_extract,
			})
		}())
	})
}

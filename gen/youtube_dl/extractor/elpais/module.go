// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * elpais/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/elpais.py
 */

package elpais

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ElPaisIE         λ.Object
	InfoExtractor    λ.Object
	ϒstrip_jsonp     λ.Object
	ϒunified_strdate λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒstrip_jsonp = Ωutils.ϒstrip_jsonp
		ϒunified_strdate = Ωutils.ϒunified_strdate
		ElPaisIE = λ.Cal(λ.TypeType, λ.NewStr("ElPaisIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ElPaisIE__TESTS        λ.Object
				ElPaisIE__VALID_URL    λ.Object
				ElPaisIE__real_extract λ.Object
			)
			ElPaisIE__VALID_URL = λ.NewStr("https?://(?:[^.]+\\.)?elpais\\.com/.*/(?P<id>[^/#?]+)\\.html(?:$|[?#])")
			ElPaisIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://blogs.elpais.com/la-voz-de-inaki/2014/02/tiempo-nuevo-recetas-viejas.html"),
					λ.NewStr("md5"): λ.NewStr("98406f301f19562170ec071b83433d55"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("tiempo-nuevo-recetas-viejas"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Tiempo nuevo, recetas viejas"),
						λ.NewStr("description"): λ.NewStr("De lunes a viernes, a partir de las ocho de la mañana, Iñaki Gabilondo nos cuenta su visión de la actualidad nacional e internacional."),
						λ.NewStr("upload_date"): λ.NewStr("20140206"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://elcomidista.elpais.com/elcomidista/2016/02/24/articulo/1456340311_668921.html#?id_externo_nwl=newsletter_diaria20160303t"),
					λ.NewStr("md5"): λ.NewStr("3bd5b09509f3519d7d9e763179b013de"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("1456340311_668921"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Cómo hacer el mejor café con cafetera italiana"),
						λ.NewStr("description"): λ.NewStr("Que sí, que las cápsulas son cómodas. Pero si le pides algo más a la vida, quizá deberías aprender a usar bien la cafetera italiana. No tienes más que ver este vídeo y seguir sus siete normas básicas."),
						λ.NewStr("upload_date"): λ.NewStr("20160303"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://elpais.com/elpais/2017/01/26/ciencia/1485456786_417876.html"),
					λ.NewStr("md5"): λ.NewStr("9c79923a118a067e1a45789e1e0b0f9c"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("1485456786_417876"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Hallado un barco de la antigua Roma que naufragó en Baleares hace 1.800 años"),
						λ.NewStr("description"): λ.NewStr("La nave portaba cientos de ánforas y se hundió cerca de la isla de Cabrera por razones desconocidas"),
						λ.NewStr("upload_date"): λ.NewStr("20170127"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://epv.elpais.com/epv/2017/02/14/programa_la_voz_de_inaki/1487062137_075943.html"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("1487062137_075943"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Disyuntivas"),
						λ.NewStr("description"): λ.NewStr("md5:a0fb1485c4a6a8a917e6f93878e66218"),
						λ.NewStr("upload_date"): λ.NewStr("20170214"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
			)
			ElPaisIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒid_multimedia    λ.Object
						ϒprefix           λ.Object
						ϒself             = λargs[0]
						ϒthumbnail        λ.Object
						ϒthumbnail_suffix λ.Object
						ϒtitle            λ.Object
						ϒupload_date      λ.Object
						ϒurl              = λargs[1]
						ϒurl_info         λ.Object
						ϒvideo_id         λ.Object
						ϒvideo_suffix     λ.Object
						ϒvideo_url        λ.Object
						ϒwebpage          λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					ϒprefix = λ.Cal(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewStr("var\\s+url_cache\\s*=\\s*\"([^\"]+)\";"), ϒwebpage, λ.NewStr("URL prefix"))
					ϒid_multimedia = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("id_multimedia\\s*=\\s*'([^']+)'"),
						ϒwebpage,
						λ.NewStr("ID multimedia"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(ϒid_multimedia) {
						ϒurl_info = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
							λ.Add(λ.NewStr("http://elpais.com/vdpep/1/?pepid="), ϒid_multimedia),
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "transform_source", Value: ϒstrip_jsonp},
						})
						ϒvideo_suffix = λ.GetItem(ϒurl_info, λ.NewStr("mp4"))
					} else {
						ϒvideo_suffix = λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("(?:URLMediaFile|urlVideo_\\d+)\\s*=\\s*url_cache\\s*\\+\\s*'([^']+)'"), ϒwebpage, λ.NewStr("video URL"))
					}
					ϒvideo_url = λ.Add(ϒprefix, ϒvideo_suffix)
					ϒthumbnail_suffix = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("(?:URLMediaStill|urlFotogramaFijo_\\d+)\\s*=\\s*url_cache\\s*\\+\\s*'([^']+)'"),
						ϒwebpage,
						λ.NewStr("thumbnail URL"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					ϒthumbnail = func() λ.Object {
						if λv := func() λ.Object {
							if λ.IsTrue(λ.NewBool(ϒthumbnail_suffix == λ.None)) {
								return λ.None
							} else {
								return λ.Add(ϒprefix, ϒthumbnail_suffix)
							}
						}(); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒself, "_og_search_thumbnail", nil), ϒwebpage)
						}
					}()
					ϒtitle = func() λ.Object {
						if λv := λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
							λ.NewTuple(
								λ.NewStr("tituloVideo\\s*=\\s*'([^']+)'"),
								λ.NewStr("<h2 class=\"entry-header entry-title.*?>(.*?)</h2>"),
								λ.NewStr("<h1[^>]+class=\"titulo\"[^>]*>([^<]+)"),
							),
							ϒwebpage,
							λ.NewStr("title"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒself, "_og_search_title", nil), ϒwebpage)
						}
					}()
					ϒupload_date = λ.Cal(ϒunified_strdate, func() λ.Object {
						if λv := λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewStr("<p class=\"date-header date-int updated\"\\s+title=\"([^\"]+)\">"),
							ϒwebpage,
							λ.NewStr("upload date"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewStr("datePublished"), ϒwebpage, λ.NewStr("timestamp"))
						}
					}())
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("url"):         ϒvideo_url,
						λ.NewStr("title"):       ϒtitle,
						λ.NewStr("description"): λ.Cal(λ.GetAttr(ϒself, "_og_search_description", nil), ϒwebpage),
						λ.NewStr("thumbnail"):   ϒthumbnail,
						λ.NewStr("upload_date"): ϒupload_date,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        ElPaisIE__TESTS,
				λ.NewStr("_VALID_URL"):    ElPaisIE__VALID_URL,
				λ.NewStr("_real_extract"): ElPaisIE__real_extract,
			})
		}())
	})
}

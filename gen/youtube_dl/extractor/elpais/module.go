// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * elpais/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/elpais.py
 */

package elpais

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ElPaisIE         λ.Object
	InfoExtractor    λ.Object
	ϒstrip_jsonp     λ.Object
	ϒunified_strdate λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒstrip_jsonp = Ωutils.ϒstrip_jsonp
		ϒunified_strdate = Ωutils.ϒunified_strdate
		ElPaisIE = λ.Cal(λ.TypeType, λ.StrLiteral("ElPaisIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ElPaisIE__VALID_URL    λ.Object
				ElPaisIE__real_extract λ.Object
			)
			ElPaisIE__VALID_URL = λ.StrLiteral("https?://(?:[^.]+\\.)?elpais\\.com/.*/(?P<id>[^/#?]+)\\.html(?:$|[?#])")
			ElPaisIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒid_multimedia    λ.Object
						ϒprefix           λ.Object
						ϒself             = λargs[0]
						ϒthumbnail        λ.Object
						ϒthumbnail_suffix λ.Object
						ϒtitle            λ.Object
						ϒupload_date      λ.Object
						ϒurl              = λargs[1]
						ϒurl_info         λ.Object
						ϒvideo_id         λ.Object
						ϒvideo_suffix     λ.Object
						ϒvideo_url        λ.Object
						ϒwebpage          λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒvideo_id)
					ϒprefix = λ.Calm(ϒself, "_html_search_regex", λ.StrLiteral("var\\s+url_cache\\s*=\\s*\"([^\"]+)\";"), ϒwebpage, λ.StrLiteral("URL prefix"))
					ϒid_multimedia = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("id_multimedia\\s*=\\s*'([^']+)'"),
						ϒwebpage,
						λ.StrLiteral("ID multimedia"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(ϒid_multimedia) {
						ϒurl_info = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
							λ.Add(λ.StrLiteral("http://elpais.com/vdpep/1/?pepid="), ϒid_multimedia),
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "transform_source", Value: ϒstrip_jsonp},
						})
						ϒvideo_suffix = λ.GetItem(ϒurl_info, λ.StrLiteral("mp4"))
					} else {
						ϒvideo_suffix = λ.Calm(ϒself, "_search_regex", λ.StrLiteral("(?:URLMediaFile|urlVideo_\\d+)\\s*=\\s*url_cache\\s*\\+\\s*'([^']+)'"), ϒwebpage, λ.StrLiteral("video URL"))
					}
					ϒvideo_url = λ.Add(ϒprefix, ϒvideo_suffix)
					ϒthumbnail_suffix = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("(?:URLMediaStill|urlFotogramaFijo_\\d+)\\s*=\\s*url_cache\\s*\\+\\s*'([^']+)'"),
						ϒwebpage,
						λ.StrLiteral("thumbnail URL"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					ϒthumbnail = func() λ.Object {
						if λv := func() λ.Object {
							if ϒthumbnail_suffix == λ.None {
								return λ.None
							} else {
								return λ.Add(ϒprefix, ϒthumbnail_suffix)
							}
						}(); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒself, "_og_search_thumbnail", ϒwebpage)
						}
					}()
					ϒtitle = func() λ.Object {
						if λv := λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
							λ.NewTuple(
								λ.StrLiteral("tituloVideo\\s*=\\s*'([^']+)'"),
								λ.StrLiteral("<h2 class=\"entry-header entry-title.*?>(.*?)</h2>"),
								λ.StrLiteral("<h1[^>]+class=\"titulo\"[^>]*>([^<]+)"),
							),
							ϒwebpage,
							λ.StrLiteral("title"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒself, "_og_search_title", ϒwebpage)
						}
					}()
					ϒupload_date = λ.Cal(ϒunified_strdate, func() λ.Object {
						if λv := λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.StrLiteral("<p class=\"date-header date-int updated\"\\s+title=\"([^\"]+)\">"),
							ϒwebpage,
							λ.StrLiteral("upload date"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒself, "_html_search_meta", λ.StrLiteral("datePublished"), ϒwebpage, λ.StrLiteral("timestamp"))
						}
					}())
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒvideo_id,
						"url":         ϒvideo_url,
						"title":       ϒtitle,
						"description": λ.Calm(ϒself, "_og_search_description", ϒwebpage),
						"thumbnail":   ϒthumbnail,
						"upload_date": ϒupload_date,
					})
				})
			return λ.DictLiteral(map[string]λ.Object{
				"_VALID_URL":    ElPaisIE__VALID_URL,
				"_real_extract": ElPaisIE__real_extract,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * vbox7/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/vbox7.py
 */

package vbox7

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError λ.Object
	InfoExtractor  λ.Object
	Vbox7IE        λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ExtractorError = Ωutils.ExtractorError
		Vbox7IE = λ.Cal(λ.TypeType, λ.StrLiteral("Vbox7IE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				Vbox7IE__GEO_COUNTRIES λ.Object
				Vbox7IE__VALID_URL     λ.Object
				Vbox7IE__real_extract  λ.Object
			)
			Vbox7IE__VALID_URL = λ.StrLiteral("(?x)\n                    https?://\n                        (?:[^/]+\\.)?vbox7\\.com/\n                        (?:\n                            play:|\n                            (?:\n                                emb/external\\.php|\n                                player/ext\\.swf\n                            )\\?.*?\\bvid=\n                        )\n                        (?P<id>[\\da-fA-F]+)\n                    ")
			Vbox7IE__GEO_COUNTRIES = λ.NewList(λ.StrLiteral("BG"))
			Vbox7IE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒinfo      λ.Object
						ϒresponse  λ.Object
						ϒself      = λargs[0]
						ϒtitle     λ.Object
						ϒuploader  λ.Object
						ϒurl       = λargs[1]
						ϒvideo     λ.Object
						ϒvideo_id  λ.Object
						ϒvideo_url λ.Object
						ϒwebpage   λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒresponse = λ.Calm(ϒself, "_download_json", λ.Mod(λ.StrLiteral("https://www.vbox7.com/ajax/video/nextvideo.php?vid=%s"), ϒvideo_id), ϒvideo_id)
					if λ.Contains(ϒresponse, λ.StrLiteral("error")) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.StrLiteral("%s said: %s"), λ.NewTuple(
							λ.GetAttr(ϒself, "IE_NAME", nil),
							λ.GetItem(ϒresponse, λ.StrLiteral("error")),
						))), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒvideo = λ.GetItem(ϒresponse, λ.StrLiteral("options"))
					ϒtitle = λ.GetItem(ϒvideo, λ.StrLiteral("title"))
					ϒvideo_url = λ.GetItem(ϒvideo, λ.StrLiteral("src"))
					if λ.Contains(ϒvideo_url, λ.StrLiteral("/na.mp4")) {
						λ.Call(λ.GetAttr(ϒself, "raise_geo_restricted", nil), nil, λ.KWArgs{
							{Name: "countries", Value: λ.GetAttr(ϒself, "_GEO_COUNTRIES", nil)},
						})
					}
					ϒuploader = λ.Calm(ϒvideo, "get", λ.StrLiteral("uploader"))
					ϒwebpage = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
						λ.Mod(λ.StrLiteral("http://vbox7.com/play:%s"), ϒvideo_id),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "fatal", Value: λ.None},
					})
					ϒinfo = λ.DictLiteral(map[λ.Object]λ.Object{})
					if λ.IsTrue(ϒwebpage) {
						ϒinfo = λ.Call(λ.GetAttr(ϒself, "_search_json_ld", nil), λ.NewArgs(
							λ.Calm(ϒwebpage, "replace", λ.StrLiteral("\"/*@context\""), λ.StrLiteral("\"@context\"")),
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "fatal", Value: λ.False},
						})
					}
					λ.Calm(ϒinfo, "update", λ.DictLiteral(map[string]λ.Object{
						"id":       ϒvideo_id,
						"title":    ϒtitle,
						"url":      ϒvideo_url,
						"uploader": ϒuploader,
						"thumbnail": λ.Calm(ϒself, "_proto_relative_url", func() λ.Object {
							if λv := λ.Calm(ϒinfo, "get", λ.StrLiteral("thumbnail")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Calm(ϒself, "_og_search_thumbnail", ϒwebpage)
							}
						}(), λ.StrLiteral("http:")),
					}))
					return ϒinfo
				})
			return λ.DictLiteral(map[string]λ.Object{
				"_GEO_COUNTRIES": Vbox7IE__GEO_COUNTRIES,
				"_VALID_URL":     Vbox7IE__VALID_URL,
				"_real_extract":  Vbox7IE__real_extract,
			})
		}())
	})
}

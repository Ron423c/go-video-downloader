// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * shared/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/shared.py
 */

package shared

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError      λ.Object
	InfoExtractor       λ.Object
	SharedBaseIE        λ.Object
	SharedIE            λ.Object
	VivoIE              λ.Object
	ϒcompat_b64decode   λ.Object
	ϒint_or_none        λ.Object
	ϒurl_or_none        λ.Object
	ϒurlencode_postdata λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_b64decode = Ωcompat.ϒcompat_b64decode
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒurl_or_none = Ωutils.ϒurl_or_none
		ϒurlencode_postdata = Ωutils.ϒurlencode_postdata
		SharedBaseIE = λ.Cal(λ.TypeType, λ.NewStr("SharedBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				SharedBaseIE__real_extract λ.Object
			)
			SharedBaseIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒfilesize  λ.Object
						ϒself      = λargs[0]
						ϒtitle     λ.Object
						ϒurl       = λargs[1]
						ϒurlh      λ.Object
						ϒvideo_id  λ.Object
						ϒvideo_url λ.Object
						ϒwebpage   λ.Object
						τmp0       λ.Object
					)
					_ = ϒurlh
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					τmp0 = λ.Cal(λ.GetAttr(ϒself, "_download_webpage_handle", nil), ϒurl, ϒvideo_id)
					ϒwebpage = λ.GetItem(τmp0, λ.NewInt(0))
					ϒurlh = λ.GetItem(τmp0, λ.NewInt(1))
					if λ.IsTrue(λ.NewBool(λ.Contains(ϒwebpage, λ.GetAttr(ϒself, "_FILE_NOT_FOUND", nil)))) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.NewStr("Video %s does not exist"), ϒvideo_id)), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒvideo_url = λ.Cal(λ.GetAttr(ϒself, "_extract_video_url", nil), ϒwebpage, ϒvideo_id, ϒurl)
					ϒtitle = λ.Cal(λ.GetAttr(λ.Cal(ϒcompat_b64decode, λ.Cal(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewStr("full:title"), ϒwebpage, λ.NewStr("title"))), "decode", nil), λ.NewStr("utf-8"))
					ϒfilesize = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
						λ.NewStr("full:size"),
						ϒwebpage,
						λ.NewStr("file size"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					}))
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):       ϒvideo_id,
						λ.NewStr("url"):      ϒvideo_url,
						λ.NewStr("ext"):      λ.NewStr("mp4"),
						λ.NewStr("filesize"): ϒfilesize,
						λ.NewStr("title"):    ϒtitle,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_real_extract"): SharedBaseIE__real_extract,
			})
		}())
		SharedIE = λ.Cal(λ.TypeType, λ.NewStr("SharedIE"), λ.NewTuple(SharedBaseIE), func() λ.Dict {
			var (
				SharedIE__VALID_URL λ.Object
			)
			SharedIE__VALID_URL = λ.NewStr("https?://shared\\.sx/(?P<id>[\\da-z]{10})")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): SharedIE__VALID_URL,
			})
		}())
		VivoIE = λ.Cal(λ.TypeType, λ.NewStr("VivoIE"), λ.NewTuple(SharedBaseIE), func() λ.Dict {
			var (
				VivoIE__FILE_NOT_FOUND    λ.Object
				VivoIE__TEST              λ.Object
				VivoIE__VALID_URL         λ.Object
				VivoIE__extract_video_url λ.Object
			)
			VivoIE__VALID_URL = λ.NewStr("https?://vivo\\.sx/(?P<id>[\\da-z]{10})")
			VivoIE__FILE_NOT_FOUND = λ.NewStr(">The file you have requested does not exists or has been removed")
			VivoIE__TEST = λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("url"): λ.NewStr("http://vivo.sx/d7ddda0e78"),
				λ.NewStr("md5"): λ.NewStr("15b3af41be0b4fe01f4df075c2678b2c"),
				λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("id"):       λ.NewStr("d7ddda0e78"),
					λ.NewStr("ext"):      λ.NewStr("mp4"),
					λ.NewStr("title"):    λ.NewStr("Chicken"),
					λ.NewStr("filesize"): λ.NewInt(528031),
				}),
			})
			VivoIE__extract_video_url = λ.NewFunction("_extract_video_url",
				[]λ.Param{
					{Name: "self"},
					{Name: "webpage"},
					{Name: "video_id"},
				},
				0, true, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒargs       = λargs[3]
						ϒdecode_url λ.Object
						ϒself       = λargs[0]
						ϒstream_url λ.Object
						ϒvideo_id   = λargs[2]
						ϒwebpage    = λargs[1]
					)
					_ = ϒargs
					ϒdecode_url = λ.NewFunction("decode_url",
						[]λ.Param{
							{Name: "encoded_url"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒencoded_url = λargs[0]
							)
							return λ.Cal(λ.GetAttr(λ.Cal(ϒcompat_b64decode, ϒencoded_url), "decode", nil), λ.NewStr("utf-8"))
						})
					ϒstream_url = λ.Cal(ϒurl_or_none, λ.Cal(ϒdecode_url, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("data-stream\\s*=\\s*([\"\\'])(?P<url>(?:(?!\\1).)+)\\1"),
						ϒwebpage,
						λ.NewStr("stream url"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
						{Name: "group", Value: λ.NewStr("url")},
					})))
					if λ.IsTrue(ϒstream_url) {
						return ϒstream_url
					}
					return λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
						λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewStr("InitializeStream\\s*\\(\\s*([\"\\'])(?P<url>(?:(?!\\1).)+)\\1"),
							ϒwebpage,
							λ.NewStr("stream"),
						), λ.KWArgs{
							{Name: "group", Value: λ.NewStr("url")},
						}),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "transform_source", Value: ϒdecode_url},
					}), λ.NewInt(0))
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_FILE_NOT_FOUND"):    VivoIE__FILE_NOT_FOUND,
				λ.NewStr("_TEST"):              VivoIE__TEST,
				λ.NewStr("_VALID_URL"):         VivoIE__VALID_URL,
				λ.NewStr("_extract_video_url"): VivoIE__extract_video_url,
			})
		}())
	})
}

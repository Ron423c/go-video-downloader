// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * sapo/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/sapo.py
 */

package sapo

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor    λ.Object
	SapoIE           λ.Object
	ϒparse_duration  λ.Object
	ϒunified_strdate λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒunified_strdate = Ωutils.ϒunified_strdate
		SapoIE = λ.Cal(λ.TypeType, λ.StrLiteral("SapoIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				SapoIE__VALID_URL    λ.Object
				SapoIE__real_extract λ.Object
			)
			SapoIE__VALID_URL = λ.StrLiteral("https?://(?:(?:v2|www)\\.)?videos\\.sapo\\.(?:pt|cv|ao|mz|tl)/(?P<id>[\\da-zA-Z]{20})")
			SapoIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒage_limit     λ.Object
						ϒcategories    λ.Object
						ϒcomment_count λ.Object
						ϒdescription   λ.Object
						ϒduration      λ.Object
						ϒformats       λ.Object
						ϒitem          λ.Object
						ϒmobj          λ.Object
						ϒself          = λargs[0]
						ϒtags          λ.Object
						ϒthumbnail     λ.Object
						ϒtitle         λ.Object
						ϒupload_date   λ.Object
						ϒuploader      λ.Object
						ϒurl           = λargs[1]
						ϒvideo_id      λ.Object
						ϒvideo_size    λ.Object
						ϒvideo_url     λ.Object
						ϒview_count    λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒvideo_id = λ.Calm(ϒmobj, "group", λ.StrLiteral("id"))
					ϒitem = λ.Calm(λ.Calm(ϒself, "_download_xml", λ.Mod(λ.StrLiteral("http://rd3.videos.sapo.pt/%s/rss2"), ϒvideo_id), ϒvideo_id), "find", λ.StrLiteral("./channel/item"))
					ϒtitle = λ.GetAttr(λ.Calm(ϒitem, "find", λ.StrLiteral("./title")), "text", nil)
					ϒdescription = λ.GetAttr(λ.Calm(ϒitem, "find", λ.StrLiteral("./{http://videos.sapo.pt/mrss/}synopse")), "text", nil)
					ϒthumbnail = λ.Calm(λ.Calm(ϒitem, "find", λ.StrLiteral("./{http://search.yahoo.com/mrss/}content")), "get", λ.StrLiteral("url"))
					ϒduration = λ.Cal(ϒparse_duration, λ.GetAttr(λ.Calm(ϒitem, "find", λ.StrLiteral("./{http://videos.sapo.pt/mrss/}time")), "text", nil))
					ϒuploader = λ.GetAttr(λ.Calm(ϒitem, "find", λ.StrLiteral("./{http://videos.sapo.pt/mrss/}author")), "text", nil)
					ϒupload_date = λ.Cal(ϒunified_strdate, λ.GetAttr(λ.Calm(ϒitem, "find", λ.StrLiteral("./pubDate")), "text", nil))
					ϒview_count = λ.Cal(λ.IntType, λ.GetAttr(λ.Calm(ϒitem, "find", λ.StrLiteral("./{http://videos.sapo.pt/mrss/}views")), "text", nil))
					ϒcomment_count = λ.Cal(λ.IntType, λ.GetAttr(λ.Calm(ϒitem, "find", λ.StrLiteral("./{http://videos.sapo.pt/mrss/}comment_count")), "text", nil))
					ϒtags = λ.GetAttr(λ.Calm(ϒitem, "find", λ.StrLiteral("./{http://videos.sapo.pt/mrss/}tags")), "text", nil)
					ϒcategories = func() λ.Object {
						if λ.IsTrue(ϒtags) {
							return λ.Calm(ϒtags, "split")
						} else {
							return λ.NewList()
						}
					}()
					ϒage_limit = func() λ.Object {
						if λ.IsTrue(λ.Eq(λ.GetAttr(λ.Calm(ϒitem, "find", λ.StrLiteral("./{http://videos.sapo.pt/mrss/}m18")), "text", nil), λ.StrLiteral("true"))) {
							return λ.IntLiteral(18)
						} else {
							return λ.IntLiteral(0)
						}
					}()
					ϒvideo_url = λ.GetAttr(λ.Calm(ϒitem, "find", λ.StrLiteral("./{http://videos.sapo.pt/mrss/}videoFile")), "text", nil)
					ϒvideo_size = λ.Calm(λ.GetAttr(λ.Calm(ϒitem, "find", λ.StrLiteral("./{http://videos.sapo.pt/mrss/}videoSize")), "text", nil), "split", λ.StrLiteral("x"))
					ϒformats = λ.NewList(λ.DictLiteral(map[string]λ.Object{
						"url":       ϒvideo_url,
						"ext":       λ.StrLiteral("mp4"),
						"format_id": λ.StrLiteral("sd"),
						"width":     λ.Cal(λ.IntType, λ.GetItem(ϒvideo_size, λ.IntLiteral(0))),
						"height":    λ.Cal(λ.IntType, λ.GetItem(ϒvideo_size, λ.IntLiteral(1))),
					}))
					if λ.IsTrue(λ.Eq(λ.GetAttr(λ.Calm(ϒitem, "find", λ.StrLiteral("./{http://videos.sapo.pt/mrss/}HD")), "text", nil), λ.StrLiteral("true"))) {
						λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
							"url":       λ.Cal(Ωre.ϒsub, λ.StrLiteral("/mov/1$"), λ.StrLiteral("/mov/39"), ϒvideo_url),
							"ext":       λ.StrLiteral("mp4"),
							"format_id": λ.StrLiteral("hd"),
							"width":     λ.IntLiteral(1280),
							"height":    λ.IntLiteral(720),
						}))
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					return λ.DictLiteral(map[string]λ.Object{
						"id":            ϒvideo_id,
						"title":         ϒtitle,
						"description":   ϒdescription,
						"thumbnail":     ϒthumbnail,
						"duration":      ϒduration,
						"uploader":      ϒuploader,
						"upload_date":   ϒupload_date,
						"view_count":    ϒview_count,
						"comment_count": ϒcomment_count,
						"categories":    ϒcategories,
						"age_limit":     ϒage_limit,
						"formats":       ϒformats,
					})
				})
			return λ.DictLiteral(map[string]λ.Object{
				"_VALID_URL":    SapoIE__VALID_URL,
				"_real_extract": SapoIE__real_extract,
			})
		}())
	})
}

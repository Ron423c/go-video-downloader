// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * tnaflix/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/tnaflix.py
 */

package tnaflix

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	EMPFlixIE             λ.Object
	InfoExtractor         λ.Object
	MovieFapIE            λ.Object
	TNAEMPFlixBaseIE      λ.Object
	TNAFlixIE             λ.Object
	TNAFlixNetworkBaseIE  λ.Object
	TNAFlixNetworkEmbedIE λ.Object
	ϒcompat_str           λ.Object
	ϒfix_xml_ampersands   λ.Object
	ϒfloat_or_none        λ.Object
	ϒint_or_none          λ.Object
	ϒparse_duration       λ.Object
	ϒstr_to_int           λ.Object
	ϒunescapeHTML         λ.Object
	ϒxpath_text           λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒfix_xml_ampersands = Ωutils.ϒfix_xml_ampersands
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒstr_to_int = Ωutils.ϒstr_to_int
		ϒunescapeHTML = Ωutils.ϒunescapeHTML
		ϒxpath_text = Ωutils.ϒxpath_text
		TNAFlixNetworkBaseIE = λ.Cal(λ.TypeType, λ.StrLiteral("TNAFlixNetworkBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				TNAFlixNetworkBaseIE__AVERAGE_RATING_REGEX λ.Object
				TNAFlixNetworkBaseIE__CATEGORIES_REGEX     λ.Object
				TNAFlixNetworkBaseIE__COMMENT_COUNT_REGEX  λ.Object
				TNAFlixNetworkBaseIE__CONFIG_REGEX         λ.Object
				TNAFlixNetworkBaseIE__DESCRIPTION_REGEX    λ.Object
				TNAFlixNetworkBaseIE__HOST                 λ.Object
				TNAFlixNetworkBaseIE__TITLE_REGEX          λ.Object
				TNAFlixNetworkBaseIE__UPLOADER_REGEX       λ.Object
				TNAFlixNetworkBaseIE__VIEW_COUNT_REGEX     λ.Object
				TNAFlixNetworkBaseIE__VKEY_SUFFIX          λ.Object
				TNAFlixNetworkBaseIE__extract_thumbnails   λ.Object
				TNAFlixNetworkBaseIE__real_extract         λ.Object
			)
			TNAFlixNetworkBaseIE__CONFIG_REGEX = λ.NewList(
				λ.StrLiteral("flashvars\\.config\\s*=\\s*escape\\(\"(?P<url>[^\"]+)\""),
				λ.StrLiteral("<input[^>]+name=\"config\\d?\" value=\"(?P<url>[^\"]+)\""),
				λ.StrLiteral("config\\s*=\\s*([\"\\'])(?P<url>(?:https?:)?//(?:(?!\\1).)+)\\1"),
			)
			TNAFlixNetworkBaseIE__HOST = λ.StrLiteral("tna")
			TNAFlixNetworkBaseIE__VKEY_SUFFIX = λ.StrLiteral("")
			TNAFlixNetworkBaseIE__TITLE_REGEX = λ.StrLiteral("<input[^>]+name=\"title\" value=\"([^\"]+)\"")
			TNAFlixNetworkBaseIE__DESCRIPTION_REGEX = λ.StrLiteral("<input[^>]+name=\"description\" value=\"([^\"]+)\"")
			TNAFlixNetworkBaseIE__UPLOADER_REGEX = λ.StrLiteral("<input[^>]+name=\"username\" value=\"([^\"]+)\"")
			TNAFlixNetworkBaseIE__VIEW_COUNT_REGEX = λ.None
			TNAFlixNetworkBaseIE__COMMENT_COUNT_REGEX = λ.None
			TNAFlixNetworkBaseIE__AVERAGE_RATING_REGEX = λ.None
			TNAFlixNetworkBaseIE__CATEGORIES_REGEX = λ.StrLiteral("<li[^>]*>\\s*<span[^>]+class=\"infoTitle\"[^>]*>Categories:</span>\\s*<span[^>]+class=\"listView\"[^>]*>(.+?)</span>\\s*</li>")
			TNAFlixNetworkBaseIE__extract_thumbnails = λ.NewFunction("_extract_thumbnails",
				[]λ.Param{
					{Name: "self"},
					{Name: "flix_xml"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒfirst      λ.Object
						ϒfirst_el   λ.Object
						ϒfirst_text λ.Object
						ϒflix_xml   = λargs[1]
						ϒget_child  λ.Object
						ϒheight     λ.Object
						ϒlast       λ.Object
						ϒlast_el    λ.Object
						ϒlast_text  λ.Object
						ϒpattern_el λ.Object
						ϒself       = λargs[0]
						ϒtimeline   λ.Object
						ϒwidth      λ.Object
					)
					ϒget_child = λ.NewFunction("get_child",
						[]λ.Param{
							{Name: "elem"},
							{Name: "names"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒchild λ.Object
								ϒelem  = λargs[0]
								ϒname  λ.Object
								ϒnames = λargs[1]
								τmp0   λ.Object
								τmp1   λ.Object
							)
							τmp0 = λ.Cal(λ.BuiltinIter, ϒnames)
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒname = τmp1
								ϒchild = λ.Calm(ϒelem, "find", ϒname)
								if ϒchild != λ.None {
									return ϒchild
								}
							}
							return λ.None
						})
					ϒtimeline = λ.Cal(ϒget_child, ϒflix_xml, λ.NewList(
						λ.StrLiteral("timeline"),
						λ.StrLiteral("rolloverBarImage"),
					))
					if ϒtimeline == λ.None {
						return λ.None
					}
					ϒpattern_el = λ.Cal(ϒget_child, ϒtimeline, λ.NewList(
						λ.StrLiteral("imagePattern"),
						λ.StrLiteral("pattern"),
					))
					if λ.IsTrue(func() λ.Object {
						if λv := λ.NewBool(ϒpattern_el == λ.None); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewBool(!λ.IsTrue(λ.GetAttr(ϒpattern_el, "text", nil)))
						}
					}()) {
						return λ.None
					}
					ϒfirst_el = λ.Cal(ϒget_child, ϒtimeline, λ.NewList(
						λ.StrLiteral("imageFirst"),
						λ.StrLiteral("first"),
					))
					ϒlast_el = λ.Cal(ϒget_child, ϒtimeline, λ.NewList(
						λ.StrLiteral("imageLast"),
						λ.StrLiteral("last"),
					))
					if λ.IsTrue(func() λ.Object {
						if λv := λ.NewBool(ϒfirst_el == λ.None); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewBool(ϒlast_el == λ.None)
						}
					}()) {
						return λ.None
					}
					ϒfirst_text = λ.GetAttr(ϒfirst_el, "text", nil)
					ϒlast_text = λ.GetAttr(ϒlast_el, "text", nil)
					if λ.IsTrue(func() λ.Object {
						if λv := λ.NewBool(!λ.IsTrue(λ.Calm(ϒfirst_text, "isdigit"))); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewBool(!λ.IsTrue(λ.Calm(ϒlast_text, "isdigit")))
						}
					}()) {
						return λ.None
					}
					ϒfirst = λ.Cal(λ.IntType, ϒfirst_text)
					ϒlast = λ.Cal(λ.IntType, ϒlast_text)
					if λ.IsTrue(λ.Gt(ϒfirst, ϒlast)) {
						return λ.None
					}
					ϒwidth = λ.Cal(ϒint_or_none, λ.Cal(ϒxpath_text, ϒtimeline, λ.StrLiteral("./imageWidth"), λ.StrLiteral("thumbnail width")))
					ϒheight = λ.Cal(ϒint_or_none, λ.Cal(ϒxpath_text, ϒtimeline, λ.StrLiteral("./imageHeight"), λ.StrLiteral("thumbnail height")))
					return λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒi   λ.Object
									τmp0 λ.Object
									τmp1 λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.RangeType, ϒfirst, λ.Add(ϒlast, λ.IntLiteral(1))))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒi = τmp1
									λgy.Yield(λ.DictLiteral(map[string]λ.Object{
										"url":    λ.Calm(ϒself, "_proto_relative_url", λ.Calm(λ.GetAttr(ϒpattern_el, "text", nil), "replace", λ.StrLiteral("#"), λ.Cal(ϒcompat_str, ϒi)), λ.StrLiteral("http:")),
										"width":  ϒwidth,
										"height": ϒheight,
									}))
								}
								return λ.None
							})
						})))
				})
			TNAFlixNetworkBaseIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒage_limit         λ.Object
						ϒaverage_rating    λ.Object
						ϒcategories        λ.Object
						ϒcategories_str    λ.Object
						ϒcfg_url           λ.Object
						ϒcfg_xml           λ.Object
						ϒcomment_count     λ.Object
						ϒdescription       λ.Object
						ϒdisplay_id        λ.Object
						ϒdisplay_id_key    λ.Object
						ϒduration          λ.Object
						ϒextract_field     λ.Object
						ϒextract_video_url λ.Object
						ϒformat_id         λ.Object
						ϒformats           λ.Object
						ϒheight            λ.Object
						ϒinputs            λ.Object
						ϒitem              λ.Object
						ϒmobj              λ.Object
						ϒres               λ.Object
						ϒself              = λargs[0]
						ϒthumbnail         λ.Object
						ϒthumbnails        λ.Object
						ϒtitle             λ.Object
						ϒuploader          λ.Object
						ϒurl               = λargs[1]
						ϒvideo_id          λ.Object
						ϒvideo_link        λ.Object
						ϒview_count        λ.Object
						ϒwebpage           λ.Object
						τmp0               λ.Object
						τmp1               λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒvideo_id = λ.Calm(ϒmobj, "group", λ.StrLiteral("id"))
					τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
						λ.StrLiteral("display_id"),
						λ.StrLiteral("display_id_2"),
					))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒdisplay_id_key = τmp1
						if λ.Contains(λ.Calm(ϒmobj, "groupdict"), ϒdisplay_id_key) {
							ϒdisplay_id = λ.Calm(ϒmobj, "group", ϒdisplay_id_key)
							if λ.IsTrue(ϒdisplay_id) {
								break
							}
						}
					}
					if τmp1 == λ.AfterLast {
						ϒdisplay_id = ϒvideo_id
					}
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒdisplay_id)
					ϒcfg_url = λ.Calm(ϒself, "_proto_relative_url", λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
						λ.GetAttr(ϒself, "_CONFIG_REGEX", nil),
						ϒwebpage,
						λ.StrLiteral("flashvars.config"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
						{Name: "group", Value: λ.StrLiteral("url")},
					}), λ.StrLiteral("http:"))
					if !λ.IsTrue(ϒcfg_url) {
						ϒinputs = λ.Calm(ϒself, "_hidden_inputs", ϒwebpage)
						ϒcfg_url = λ.Mod(λ.StrLiteral("https://cdn-fck.%sflix.com/%sflix/%s%s.fid?key=%s&VID=%s&premium=1&vip=1&alpha"), λ.NewTuple(
							λ.GetAttr(ϒself, "_HOST", nil),
							λ.GetAttr(ϒself, "_HOST", nil),
							λ.GetItem(ϒinputs, λ.StrLiteral("vkey")),
							λ.GetAttr(ϒself, "_VKEY_SUFFIX", nil),
							λ.GetItem(ϒinputs, λ.StrLiteral("nkey")),
							ϒvideo_id,
						))
					}
					ϒcfg_xml = λ.Call(λ.GetAttr(ϒself, "_download_xml", nil), λ.NewArgs(
						ϒcfg_url,
						ϒdisplay_id,
						λ.StrLiteral("Downloading metadata"),
					), λ.KWArgs{
						{Name: "transform_source", Value: ϒfix_xml_ampersands},
						{Name: "headers", Value: λ.DictLiteral(map[string]λ.Object{
							"Referer": ϒurl,
						})},
					})
					ϒformats = λ.NewList()
					ϒextract_video_url = λ.NewFunction("extract_video_url",
						[]λ.Param{
							{Name: "vl"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒvl = λargs[0]
							)
							return λ.Cal(ϒunescapeHTML, λ.GetAttr(ϒvl, "text", nil))
						})
					ϒvideo_link = λ.Calm(ϒcfg_xml, "find", λ.StrLiteral("./videoLink"))
					if ϒvideo_link != λ.None {
						λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
							"url": λ.Cal(ϒextract_video_url, ϒvideo_link),
							"ext": λ.Call(ϒxpath_text, λ.NewArgs(
								ϒcfg_xml,
								λ.StrLiteral("./videoConfig/type"),
								λ.StrLiteral("type"),
							), λ.KWArgs{
								{Name: "default", Value: λ.StrLiteral("flv")},
							}),
						}))
					}
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒcfg_xml, "findall", λ.StrLiteral("./quality/item")))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒitem = τmp1
						ϒvideo_link = λ.Calm(ϒitem, "find", λ.StrLiteral("./videoLink"))
						if ϒvideo_link == λ.None {
							continue
						}
						ϒres = λ.Calm(ϒitem, "find", λ.StrLiteral("res"))
						ϒformat_id = func() λ.Object {
							if ϒres == λ.None {
								return λ.None
							} else {
								return λ.GetAttr(ϒres, "text", nil)
							}
						}()
						ϒheight = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.StrLiteral("^(\\d+)[pP]"),
							ϒformat_id,
							λ.StrLiteral("height"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}))
						λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
							"url":       λ.Calm(ϒself, "_proto_relative_url", λ.Cal(ϒextract_video_url, ϒvideo_link), λ.StrLiteral("http:")),
							"format_id": ϒformat_id,
							"height":    ϒheight,
						}))
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					ϒthumbnail = λ.Calm(ϒself, "_proto_relative_url", λ.Cal(ϒxpath_text, ϒcfg_xml, λ.StrLiteral("./startThumb"), λ.StrLiteral("thumbnail")), λ.StrLiteral("http:"))
					ϒthumbnails = λ.Calm(ϒself, "_extract_thumbnails", ϒcfg_xml)
					ϒtitle = λ.None
					if λ.IsTrue(λ.GetAttr(ϒself, "_TITLE_REGEX", nil)) {
						ϒtitle = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
							λ.GetAttr(ϒself, "_TITLE_REGEX", nil),
							ϒwebpage,
							λ.StrLiteral("title"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						})
					}
					if !λ.IsTrue(ϒtitle) {
						ϒtitle = λ.Calm(ϒself, "_og_search_title", ϒwebpage)
					}
					ϒage_limit = func() λ.Object {
						if λv := λ.Calm(ϒself, "_rta_search", ϒwebpage); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.IntLiteral(18)
						}
					}()
					ϒduration = λ.Cal(ϒparse_duration, λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
						λ.StrLiteral("duration"),
						ϒwebpage,
						λ.StrLiteral("duration"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					}))
					ϒextract_field = λ.NewFunction("extract_field",
						[]λ.Param{
							{Name: "pattern"},
							{Name: "name"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒname    = λargs[1]
								ϒpattern = λargs[0]
							)
							return func() λ.Object {
								if λ.IsTrue(ϒpattern) {
									return λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
										ϒpattern,
										ϒwebpage,
										ϒname,
									), λ.KWArgs{
										{Name: "default", Value: λ.None},
									})
								} else {
									return λ.None
								}
							}()
						})
					ϒdescription = λ.Cal(ϒextract_field, λ.GetAttr(ϒself, "_DESCRIPTION_REGEX", nil), λ.StrLiteral("description"))
					ϒuploader = λ.Cal(ϒextract_field, λ.GetAttr(ϒself, "_UPLOADER_REGEX", nil), λ.StrLiteral("uploader"))
					ϒview_count = λ.Cal(ϒstr_to_int, λ.Cal(ϒextract_field, λ.GetAttr(ϒself, "_VIEW_COUNT_REGEX", nil), λ.StrLiteral("view count")))
					ϒcomment_count = λ.Cal(ϒstr_to_int, λ.Cal(ϒextract_field, λ.GetAttr(ϒself, "_COMMENT_COUNT_REGEX", nil), λ.StrLiteral("comment count")))
					ϒaverage_rating = λ.Cal(ϒfloat_or_none, λ.Cal(ϒextract_field, λ.GetAttr(ϒself, "_AVERAGE_RATING_REGEX", nil), λ.StrLiteral("average rating")))
					ϒcategories_str = λ.Cal(ϒextract_field, λ.GetAttr(ϒself, "_CATEGORIES_REGEX", nil), λ.StrLiteral("categories"))
					ϒcategories = func() λ.Object {
						if ϒcategories_str != λ.None {
							return λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
								nil,
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
										var (
											ϒc   λ.Object
											τmp0 λ.Object
											τmp1 λ.Object
										)
										τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒcategories_str, "split", λ.StrLiteral(",")))
										for {
											if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
												break
											}
											ϒc = τmp1
											λgy.Yield(λ.Calm(ϒc, "strip"))
										}
										return λ.None
									})
								})))
						} else {
							return λ.NewList()
						}
					}()
					return λ.DictLiteral(map[string]λ.Object{
						"id":             ϒvideo_id,
						"display_id":     ϒdisplay_id,
						"title":          ϒtitle,
						"description":    ϒdescription,
						"thumbnail":      ϒthumbnail,
						"thumbnails":     ϒthumbnails,
						"duration":       ϒduration,
						"age_limit":      ϒage_limit,
						"uploader":       ϒuploader,
						"view_count":     ϒview_count,
						"comment_count":  ϒcomment_count,
						"average_rating": ϒaverage_rating,
						"categories":     ϒcategories,
						"formats":        ϒformats,
					})
				})
			return λ.DictLiteral(map[string]λ.Object{
				"_AVERAGE_RATING_REGEX": TNAFlixNetworkBaseIE__AVERAGE_RATING_REGEX,
				"_CATEGORIES_REGEX":     TNAFlixNetworkBaseIE__CATEGORIES_REGEX,
				"_COMMENT_COUNT_REGEX":  TNAFlixNetworkBaseIE__COMMENT_COUNT_REGEX,
				"_CONFIG_REGEX":         TNAFlixNetworkBaseIE__CONFIG_REGEX,
				"_DESCRIPTION_REGEX":    TNAFlixNetworkBaseIE__DESCRIPTION_REGEX,
				"_HOST":                 TNAFlixNetworkBaseIE__HOST,
				"_TITLE_REGEX":          TNAFlixNetworkBaseIE__TITLE_REGEX,
				"_UPLOADER_REGEX":       TNAFlixNetworkBaseIE__UPLOADER_REGEX,
				"_VIEW_COUNT_REGEX":     TNAFlixNetworkBaseIE__VIEW_COUNT_REGEX,
				"_VKEY_SUFFIX":          TNAFlixNetworkBaseIE__VKEY_SUFFIX,
				"_extract_thumbnails":   TNAFlixNetworkBaseIE__extract_thumbnails,
				"_real_extract":         TNAFlixNetworkBaseIE__real_extract,
			})
		}())
		TNAFlixNetworkEmbedIE = λ.Cal(λ.TypeType, λ.StrLiteral("TNAFlixNetworkEmbedIE"), λ.NewTuple(TNAFlixNetworkBaseIE), func() λ.Dict {
			var (
				TNAFlixNetworkEmbedIE__TITLE_REGEX λ.Object
				TNAFlixNetworkEmbedIE__VALID_URL   λ.Object
			)
			TNAFlixNetworkEmbedIE__VALID_URL = λ.StrLiteral("https?://player\\.(?:tna|emp)flix\\.com/video/(?P<id>\\d+)")
			TNAFlixNetworkEmbedIE__TITLE_REGEX = λ.StrLiteral("<title>([^<]+)</title>")
			return λ.DictLiteral(map[string]λ.Object{
				"_TITLE_REGEX": TNAFlixNetworkEmbedIE__TITLE_REGEX,
				"_VALID_URL":   TNAFlixNetworkEmbedIE__VALID_URL,
			})
		}())
		TNAEMPFlixBaseIE = λ.Cal(λ.TypeType, λ.StrLiteral("TNAEMPFlixBaseIE"), λ.NewTuple(TNAFlixNetworkBaseIE), func() λ.Dict {
			var (
				TNAEMPFlixBaseIE__CATEGORIES_REGEX  λ.Object
				TNAEMPFlixBaseIE__DESCRIPTION_REGEX λ.Object
				TNAEMPFlixBaseIE__UPLOADER_REGEX    λ.Object
			)
			TNAEMPFlixBaseIE__DESCRIPTION_REGEX = λ.StrLiteral("(?s)>Description:</[^>]+>(.+?)<")
			TNAEMPFlixBaseIE__UPLOADER_REGEX = λ.StrLiteral("<span>by\\s*<a[^>]+\\bhref=[\"\\']/profile/[^>]+>([^<]+)<")
			TNAEMPFlixBaseIE__CATEGORIES_REGEX = λ.StrLiteral("(?s)<span[^>]*>Categories:</span>(.+?)</div>")
			return λ.DictLiteral(map[string]λ.Object{
				"_CATEGORIES_REGEX":  TNAEMPFlixBaseIE__CATEGORIES_REGEX,
				"_DESCRIPTION_REGEX": TNAEMPFlixBaseIE__DESCRIPTION_REGEX,
				"_UPLOADER_REGEX":    TNAEMPFlixBaseIE__UPLOADER_REGEX,
			})
		}())
		TNAFlixIE = λ.Cal(λ.TypeType, λ.StrLiteral("TNAFlixIE"), λ.NewTuple(TNAEMPFlixBaseIE), func() λ.Dict {
			var (
				TNAFlixIE__TITLE_REGEX λ.Object
				TNAFlixIE__VALID_URL   λ.Object
			)
			TNAFlixIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?tnaflix\\.com/[^/]+/(?P<display_id>[^/]+)/video(?P<id>\\d+)")
			TNAFlixIE__TITLE_REGEX = λ.StrLiteral("<title>(.+?) - (?:TNAFlix Porn Videos|TNAFlix\\.com)</title>")
			return λ.DictLiteral(map[string]λ.Object{
				"_TITLE_REGEX": TNAFlixIE__TITLE_REGEX,
				"_VALID_URL":   TNAFlixIE__VALID_URL,
			})
		}())
		EMPFlixIE = λ.Cal(λ.TypeType, λ.StrLiteral("EMPFlixIE"), λ.NewTuple(TNAEMPFlixBaseIE), func() λ.Dict {
			var (
				EMPFlixIE__HOST        λ.Object
				EMPFlixIE__VALID_URL   λ.Object
				EMPFlixIE__VKEY_SUFFIX λ.Object
			)
			EMPFlixIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?empflix\\.com/(?:videos/(?P<display_id>.+?)-|[^/]+/(?P<display_id_2>[^/]+)/video)(?P<id>[0-9]+)")
			EMPFlixIE__HOST = λ.StrLiteral("emp")
			EMPFlixIE__VKEY_SUFFIX = λ.StrLiteral("-1")
			return λ.DictLiteral(map[string]λ.Object{
				"_HOST":        EMPFlixIE__HOST,
				"_VALID_URL":   EMPFlixIE__VALID_URL,
				"_VKEY_SUFFIX": EMPFlixIE__VKEY_SUFFIX,
			})
		}())
		MovieFapIE = λ.Cal(λ.TypeType, λ.StrLiteral("MovieFapIE"), λ.NewTuple(TNAFlixNetworkBaseIE), func() λ.Dict {
			var (
				MovieFapIE__AVERAGE_RATING_REGEX λ.Object
				MovieFapIE__CATEGORIES_REGEX     λ.Object
				MovieFapIE__COMMENT_COUNT_REGEX  λ.Object
				MovieFapIE__VALID_URL            λ.Object
				MovieFapIE__VIEW_COUNT_REGEX     λ.Object
			)
			MovieFapIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?moviefap\\.com/videos/(?P<id>[0-9a-f]+)/(?P<display_id>[^/]+)\\.html")
			MovieFapIE__VIEW_COUNT_REGEX = λ.StrLiteral("<br>Views\\s*<strong>([\\d,.]+)</strong>")
			MovieFapIE__COMMENT_COUNT_REGEX = λ.StrLiteral("<span[^>]+id=\"comCount\"[^>]*>([\\d,.]+)</span>")
			MovieFapIE__AVERAGE_RATING_REGEX = λ.StrLiteral("Current Rating\\s*<br>\\s*<strong>([\\d.]+)</strong>")
			MovieFapIE__CATEGORIES_REGEX = λ.StrLiteral("(?s)<div[^>]+id=\"vid_info\"[^>]*>\\s*<div[^>]*>.+?</div>(.*?)<br>")
			return λ.DictLiteral(map[string]λ.Object{
				"_AVERAGE_RATING_REGEX": MovieFapIE__AVERAGE_RATING_REGEX,
				"_CATEGORIES_REGEX":     MovieFapIE__CATEGORIES_REGEX,
				"_COMMENT_COUNT_REGEX":  MovieFapIE__COMMENT_COUNT_REGEX,
				"_VALID_URL":            MovieFapIE__VALID_URL,
				"_VIEW_COUNT_REGEX":     MovieFapIE__VIEW_COUNT_REGEX,
			})
		}())
	})
}

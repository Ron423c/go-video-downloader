// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * tnaflix/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/tnaflix.py
 */

package tnaflix

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	EMPFlixIE             λ.Object
	InfoExtractor         λ.Object
	MovieFapIE            λ.Object
	TNAEMPFlixBaseIE      λ.Object
	TNAFlixIE             λ.Object
	TNAFlixNetworkBaseIE  λ.Object
	TNAFlixNetworkEmbedIE λ.Object
	ϒcompat_str           λ.Object
	ϒfix_xml_ampersands   λ.Object
	ϒfloat_or_none        λ.Object
	ϒint_or_none          λ.Object
	ϒparse_duration       λ.Object
	ϒstr_to_int           λ.Object
	ϒunescapeHTML         λ.Object
	ϒxpath_text           λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒfix_xml_ampersands = Ωutils.ϒfix_xml_ampersands
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒstr_to_int = Ωutils.ϒstr_to_int
		ϒunescapeHTML = Ωutils.ϒunescapeHTML
		ϒxpath_text = Ωutils.ϒxpath_text
		TNAFlixNetworkBaseIE = λ.Cal(λ.TypeType, λ.NewStr("TNAFlixNetworkBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {

			return λ.NewDictWithTable(map[λ.Object]λ.Object{})
		}())
		TNAFlixNetworkEmbedIE = λ.Cal(λ.TypeType, λ.NewStr("TNAFlixNetworkEmbedIE"), λ.NewTuple(TNAFlixNetworkBaseIE), func() λ.Dict {
			var (
				TNAFlixNetworkEmbedIE__VALID_URL λ.Object
			)
			TNAFlixNetworkEmbedIE__VALID_URL = λ.NewStr("https?://player\\.(?:tna|emp)flix\\.com/video/(?P<id>\\d+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): TNAFlixNetworkEmbedIE__VALID_URL,
			})
		}())
		TNAEMPFlixBaseIE = λ.Cal(λ.TypeType, λ.NewStr("TNAEMPFlixBaseIE"), λ.NewTuple(TNAFlixNetworkBaseIE), func() λ.Dict {

			return λ.NewDictWithTable(map[λ.Object]λ.Object{})
		}())
		TNAFlixIE = λ.Cal(λ.TypeType, λ.NewStr("TNAFlixIE"), λ.NewTuple(TNAEMPFlixBaseIE), func() λ.Dict {
			var (
				TNAFlixIE__VALID_URL λ.Object
			)
			TNAFlixIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?tnaflix\\.com/[^/]+/(?P<display_id>[^/]+)/video(?P<id>\\d+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): TNAFlixIE__VALID_URL,
			})
		}())
		EMPFlixIE = λ.Cal(λ.TypeType, λ.NewStr("EMPFlixIE"), λ.NewTuple(TNAEMPFlixBaseIE), func() λ.Dict {
			var (
				EMPFlixIE__VALID_URL λ.Object
			)
			EMPFlixIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?empflix\\.com/(?:videos/(?P<display_id>.+?)-|[^/]+/(?P<display_id_2>[^/]+)/video)(?P<id>[0-9]+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): EMPFlixIE__VALID_URL,
			})
		}())
		MovieFapIE = λ.Cal(λ.TypeType, λ.NewStr("MovieFapIE"), λ.NewTuple(TNAFlixNetworkBaseIE), func() λ.Dict {
			var (
				MovieFapIE__VALID_URL λ.Object
			)
			MovieFapIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?moviefap\\.com/videos/(?P<id>[0-9a-f]+)/(?P<display_id>[^/]+)\\.html")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): MovieFapIE__VALID_URL,
			})
		}())
	})
}

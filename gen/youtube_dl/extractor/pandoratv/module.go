// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * pandoratv/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/pandoratv.py
 */

package pandoratv

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωparse "github.com/tenta-browser/go-video-downloader/gen/urllib/parse"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError      λ.Object
	InfoExtractor       λ.Object
	PandoraTVIE         λ.Object
	ϒcompat_str         λ.Object
	ϒfloat_or_none      λ.Object
	ϒparse_duration     λ.Object
	ϒstr_to_int         λ.Object
	ϒurlencode_postdata λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ExtractorError = Ωutils.ExtractorError
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒstr_to_int = Ωutils.ϒstr_to_int
		ϒurlencode_postdata = Ωutils.ϒurlencode_postdata
		PandoraTVIE = λ.Cal(λ.TypeType, λ.StrLiteral("PandoraTVIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				PandoraTVIE_IE_NAME       λ.Object
				PandoraTVIE__VALID_URL    λ.Object
				PandoraTVIE__real_extract λ.Object
			)
			PandoraTVIE_IE_NAME = λ.StrLiteral("pandora.tv")
			PandoraTVIE__VALID_URL = λ.StrLiteral("(?x)\n                        https?://\n                            (?:\n                                (?:www\\.)?pandora\\.tv/view/(?P<user_id>[^/]+)/(?P<id>\\d+)|  # new format\n                                (?:.+?\\.)?channel\\.pandora\\.tv/channel/video\\.ptv\\?|        # old format\n                                m\\.pandora\\.tv/?\\?                                          # mobile\n                            )\n                    ")
			PandoraTVIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdata       λ.Object
						ϒformat_id  λ.Object
						ϒformat_url λ.Object
						ϒformats    λ.Object
						ϒheight     λ.Object
						ϒinfo       λ.Object
						ϒmobj       λ.Object
						ϒplay_url   λ.Object
						ϒqs         λ.Object
						ϒself       = λargs[0]
						ϒurl        = λargs[1]
						ϒuser_id    λ.Object
						ϒvideo_id   λ.Object
						τmp0        λ.Object
						τmp1        λ.Object
						τmp2        λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒuser_id = λ.Calm(ϒmobj, "group", λ.StrLiteral("user_id"))
					ϒvideo_id = λ.Calm(ϒmobj, "group", λ.StrLiteral("id"))
					if λ.IsTrue(func() λ.Object {
						if λv := λ.NewBool(!λ.IsTrue(ϒuser_id)); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewBool(!λ.IsTrue(ϒvideo_id))
						}
					}()) {
						ϒqs = λ.Cal(Ωparse.ϒparse_qs, λ.GetAttr(λ.Cal(Ωparse.ϒurlparse, ϒurl), "query", nil))
						ϒvideo_id = λ.GetItem(λ.Calm(ϒqs, "get", λ.StrLiteral("prgid"), λ.NewList(λ.None)), λ.IntLiteral(0))
						ϒuser_id = λ.GetItem(λ.Calm(ϒqs, "get", λ.StrLiteral("ch_userid"), λ.NewList(λ.None)), λ.IntLiteral(0))
						if λ.IsTrue(λ.Cal(λ.BuiltinAny, λ.Cal(λ.NewFunction("<generator>",
							nil,
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
									var (
										ϒf   λ.Object
										τmp0 λ.Object
										τmp1 λ.Object
									)
									τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
										ϒvideo_id,
										ϒuser_id,
									))
									for {
										if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
											break
										}
										ϒf = τmp1
										λgy.Yield(λ.NewBool(!λ.IsTrue(ϒf)))
									}
									return λ.None
								})
							})))) {
							panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.StrLiteral("Invalid URL")), λ.KWArgs{
								{Name: "expected", Value: λ.True},
							})))
						}
					}
					ϒdata = λ.Calm(ϒself, "_download_json", λ.Mod(λ.StrLiteral("http://m.pandora.tv/?c=view&m=viewJsonApi&ch_userid=%s&prgid=%s"), λ.NewTuple(
						ϒuser_id,
						ϒvideo_id,
					)), ϒvideo_id)
					ϒinfo = λ.GetItem(λ.GetItem(λ.GetItem(λ.GetItem(ϒdata, λ.StrLiteral("data")), λ.StrLiteral("rows")), λ.StrLiteral("vod_play_info")), λ.StrLiteral("result"))
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒinfo, "items"))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒformat_id = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒformat_url = λ.GetItem(τmp2, λ.IntLiteral(1))
						if !λ.IsTrue(ϒformat_url) {
							continue
						}
						ϒheight = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.StrLiteral("^v(\\d+)[Uu]rl$"),
							ϒformat_id,
							λ.StrLiteral("height"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						})
						if !λ.IsTrue(ϒheight) {
							continue
						}
						ϒplay_url = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
							λ.StrLiteral("http://m.pandora.tv/?c=api&m=play_url"),
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "data", Value: λ.Cal(ϒurlencode_postdata, λ.DictLiteral(map[string]λ.Object{
								"prgid":   ϒvideo_id,
								"runtime": λ.Calm(ϒinfo, "get", λ.StrLiteral("runtime")),
								"vod_url": ϒformat_url,
							}))},
							{Name: "headers", Value: λ.DictLiteral(map[string]λ.Object{
								"Origin":       ϒurl,
								"Content-Type": λ.StrLiteral("application/x-www-form-urlencoded"),
							})},
						})
						ϒformat_url = λ.Calm(ϒplay_url, "get", λ.StrLiteral("url"))
						if !λ.IsTrue(ϒformat_url) {
							continue
						}
						λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
							"format_id": λ.Mod(λ.StrLiteral("%sp"), ϒheight),
							"url":       ϒformat_url,
							"height":    λ.Cal(λ.IntType, ϒheight),
						}))
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒvideo_id,
						"title":       λ.GetItem(ϒinfo, λ.StrLiteral("subject")),
						"description": λ.Calm(ϒinfo, "get", λ.StrLiteral("body")),
						"thumbnail": func() λ.Object {
							if λv := λ.Calm(ϒinfo, "get", λ.StrLiteral("thumbnail")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Calm(ϒinfo, "get", λ.StrLiteral("poster"))
							}
						}(),
						"duration": func() λ.Object {
							if λv := λ.Cal(ϒfloat_or_none, λ.Calm(ϒinfo, "get", λ.StrLiteral("runtime")), λ.IntLiteral(1000)); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(ϒparse_duration, λ.Calm(ϒinfo, "get", λ.StrLiteral("time")))
							}
						}(),
						"upload_date": func() λ.Object {
							if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, λ.Calm(ϒinfo, "get", λ.StrLiteral("fid")), ϒcompat_str)) {
								return λ.GetItem(λ.GetItem(λ.Calm(λ.GetItem(ϒinfo, λ.StrLiteral("fid")), "split", λ.StrLiteral("/")), λ.Neg(λ.IntLiteral(1))), λ.NewSlice(λ.None, λ.IntLiteral(8), λ.None))
							} else {
								return λ.None
							}
						}(),
						"uploader":    λ.Calm(ϒinfo, "get", λ.StrLiteral("nickname")),
						"uploader_id": λ.Calm(ϒinfo, "get", λ.StrLiteral("upload_userid")),
						"view_count":  λ.Cal(ϒstr_to_int, λ.Calm(ϒinfo, "get", λ.StrLiteral("hit"))),
						"like_count":  λ.Cal(ϒstr_to_int, λ.Calm(ϒinfo, "get", λ.StrLiteral("likecnt"))),
						"formats":     ϒformats,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"IE_NAME":       PandoraTVIE_IE_NAME,
				"_VALID_URL":    PandoraTVIE__VALID_URL,
				"_real_extract": PandoraTVIE__real_extract,
			})
		}())
	})
}

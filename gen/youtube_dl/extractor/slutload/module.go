// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * slutload/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/slutload.py
 */

package slutload

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor λ.Object
	SlutloadIE    λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		SlutloadIE = λ.Cal(λ.TypeType, λ.NewStr("SlutloadIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				SlutloadIE__TESTS        λ.Object
				SlutloadIE__VALID_URL    λ.Object
				SlutloadIE__real_extract λ.Object
			)
			SlutloadIE__VALID_URL = λ.NewStr("https?://(?:\\w+\\.)?slutload\\.com/(?:video/[^/]+|embed_player|watch)/(?P<id>[^/]+)")
			SlutloadIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.slutload.com/video/virginie-baisee-en-cam/TD73btpBqSxc/"),
					λ.NewStr("md5"): λ.NewStr("868309628ba00fd488cf516a113fd717"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):        λ.NewStr("TD73btpBqSxc"),
						λ.NewStr("ext"):       λ.NewStr("mp4"),
						λ.NewStr("age_limit"): λ.NewInt(18),
						λ.NewStr("title"):     λ.NewStr("virginie baisee en cam"),
						λ.NewStr("thumbnail"): λ.NewStr("re:https?://.*?\\.jpg"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://mobile.slutload.com/video/masturbation-solo/fviFLmc6kzJ/"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://www.slutload.com/embed_player/TD73btpBqSxc/"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://www.slutload.com/watch/TD73btpBqSxc/Virginie-Baisee-En-Cam.html"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			SlutloadIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒembed_page λ.Object
						ϒextract    λ.Object
						ϒself       = λargs[0]
						ϒtitle      λ.Object
						ϒurl        = λargs[1]
						ϒvideo_id   λ.Object
						ϒvideo_url  λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒembed_page = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
						λ.Mod(λ.NewStr("http://www.slutload.com/embed_player/%s"), ϒvideo_id),
						ϒvideo_id,
						λ.NewStr("Downloading embed page"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					if λ.IsTrue(ϒembed_page) {
						ϒextract = λ.NewFunction("extract",
							[]λ.Param{
								{Name: "what"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒwhat = λargs[0]
								)
								return λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
									λ.Mod(λ.NewStr("data-video-%s=([\"\\'])(?P<url>(?:(?!\\1).)+)\\1"), ϒwhat),
									ϒembed_page,
									λ.Mod(λ.NewStr("video %s"), ϒwhat),
								), λ.KWArgs{
									{Name: "default", Value: λ.None},
									{Name: "group", Value: λ.NewStr("url")},
								})
							})
						ϒvideo_url = λ.Cal(ϒextract, λ.NewStr("url"))
						if λ.IsTrue(ϒvideo_url) {
							ϒtitle = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
								λ.NewStr("<title>([^<]+)"),
								ϒembed_page,
								λ.NewStr("title"),
							), λ.KWArgs{
								{Name: "default", Value: ϒvideo_id},
							})
							return λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("id"):        ϒvideo_id,
								λ.NewStr("url"):       ϒvideo_url,
								λ.NewStr("title"):     ϒtitle,
								λ.NewStr("thumbnail"): λ.Cal(ϒextract, λ.NewStr("preview")),
								λ.NewStr("age_limit"): λ.NewInt(18),
							})
						}
					}
					return λ.NewDictWithTable(map[λ.Object]λ.Object{})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        SlutloadIE__TESTS,
				λ.NewStr("_VALID_URL"):    SlutloadIE__VALID_URL,
				λ.NewStr("_real_extract"): SlutloadIE__real_extract,
			})
		}())
	})
}

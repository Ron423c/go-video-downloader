// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * curiositystream/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/curiositystream.py
 */

package curiositystream

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	CuriosityStreamBaseIE       λ.Object
	CuriosityStreamCollectionIE λ.Object
	CuriosityStreamIE           λ.Object
	ExtractorError              λ.Object
	InfoExtractor               λ.Object
	ϒcompat_str                 λ.Object
	ϒint_or_none                λ.Object
	ϒurlencode_postdata         λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒurlencode_postdata = Ωutils.ϒurlencode_postdata
		ϒcompat_str = Ωutils.ϒcompat_str
		ExtractorError = Ωutils.ExtractorError
		CuriosityStreamBaseIE = λ.Cal(λ.TypeType, λ.NewStr("CuriosityStreamBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				CuriosityStreamBaseIE__API_BASE_URL    λ.Object
				CuriosityStreamBaseIE__NETRC_MACHINE   λ.Object
				CuriosityStreamBaseIE__auth_token      λ.Object
				CuriosityStreamBaseIE__call_api        λ.Object
				CuriosityStreamBaseIE__handle_errors   λ.Object
				CuriosityStreamBaseIE__real_initialize λ.Object
			)
			CuriosityStreamBaseIE__NETRC_MACHINE = λ.NewStr("curiositystream")
			CuriosityStreamBaseIE__auth_token = λ.None
			CuriosityStreamBaseIE__API_BASE_URL = λ.NewStr("https://api.curiositystream.com/v1/")
			CuriosityStreamBaseIE__handle_errors = λ.NewFunction("_handle_errors",
				[]λ.Param{
					{Name: "self"},
					{Name: "result"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒerror  λ.Object
						ϒresult = λargs[1]
						ϒself   = λargs[0]
					)
					ϒerror = λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒresult, "get", nil), λ.NewStr("error"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("message"))
					if λ.IsTrue(ϒerror) {
						if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒerror, λ.DictType)) {
							ϒerror = λ.Cal(λ.GetAttr(λ.NewStr(", "), "join", nil), λ.Cal(λ.GetAttr(ϒerror, "values", nil)))
						}
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.NewStr("%s said: %s"), λ.NewTuple(
							λ.GetAttr(ϒself, "IE_NAME", nil),
							ϒerror,
						))), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					return λ.None
				})
			CuriosityStreamBaseIE__call_api = λ.NewFunction("_call_api",
				[]λ.Param{
					{Name: "self"},
					{Name: "path"},
					{Name: "video_id"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒheaders  λ.Object
						ϒpath     = λargs[1]
						ϒresult   λ.Object
						ϒself     = λargs[0]
						ϒvideo_id = λargs[2]
					)
					ϒheaders = λ.NewDictWithTable(map[λ.Object]λ.Object{})
					if λ.IsTrue(λ.GetAttr(ϒself, "_auth_token", nil)) {
						λ.SetItem(ϒheaders, λ.NewStr("X-Auth-Token"), λ.GetAttr(ϒself, "_auth_token", nil))
					}
					ϒresult = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Add(λ.GetAttr(ϒself, "_API_BASE_URL", nil), ϒpath),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "headers", Value: ϒheaders},
					})
					λ.Cal(λ.GetAttr(ϒself, "_handle_errors", nil), ϒresult)
					return λ.GetItem(ϒresult, λ.NewStr("data"))
				})
			CuriosityStreamBaseIE__real_initialize = λ.NewFunction("_real_initialize",
				[]λ.Param{
					{Name: "self"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒemail    λ.Object
						ϒpassword λ.Object
						ϒresult   λ.Object
						ϒself     = λargs[0]
						τmp0      λ.Object
					)
					τmp0 = λ.Cal(λ.GetAttr(ϒself, "_get_login_info", nil))
					ϒemail = λ.GetItem(τmp0, λ.NewInt(0))
					ϒpassword = λ.GetItem(τmp0, λ.NewInt(1))
					if λ.IsTrue(λ.NewBool(ϒemail == λ.None)) {
						return λ.None
					}
					ϒresult = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Add(λ.GetAttr(ϒself, "_API_BASE_URL", nil), λ.NewStr("login")),
						λ.None,
					), λ.KWArgs{
						{Name: "data", Value: λ.Cal(ϒurlencode_postdata, λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("email"):    ϒemail,
							λ.NewStr("password"): ϒpassword,
						}))},
					})
					λ.Cal(λ.GetAttr(ϒself, "_handle_errors", nil), ϒresult)
					λ.SetAttr(ϒself, "_auth_token", λ.GetItem(λ.GetItem(ϒresult, λ.NewStr("message")), λ.NewStr("auth_token")))
					return λ.None
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_API_BASE_URL"):    CuriosityStreamBaseIE__API_BASE_URL,
				λ.NewStr("_NETRC_MACHINE"):   CuriosityStreamBaseIE__NETRC_MACHINE,
				λ.NewStr("_auth_token"):      CuriosityStreamBaseIE__auth_token,
				λ.NewStr("_call_api"):        CuriosityStreamBaseIE__call_api,
				λ.NewStr("_handle_errors"):   CuriosityStreamBaseIE__handle_errors,
				λ.NewStr("_real_initialize"): CuriosityStreamBaseIE__real_initialize,
			})
		}())
		CuriosityStreamIE = λ.Cal(λ.TypeType, λ.NewStr("CuriosityStreamIE"), λ.NewTuple(CuriosityStreamBaseIE), func() λ.Dict {
			var (
				CuriosityStreamIE_IE_NAME       λ.Object
				CuriosityStreamIE__VALID_URL    λ.Object
				CuriosityStreamIE__real_extract λ.Object
			)
			CuriosityStreamIE_IE_NAME = λ.NewStr("curiositystream")
			CuriosityStreamIE__VALID_URL = λ.NewStr("https?://(?:app\\.)?curiositystream\\.com/video/(?P<id>\\d+)")
			CuriosityStreamIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒclosed_caption λ.Object
						ϒencoding       λ.Object
						ϒencoding_url   λ.Object
						ϒf              λ.Object
						ϒf_url          λ.Object
						ϒfile_url       λ.Object
						ϒfmt            λ.Object
						ϒformats        λ.Object
						ϒlang           λ.Object
						ϒm3u8_url       λ.Object
						ϒmedia          λ.Object
						ϒrtmp           λ.Object
						ϒself           = λargs[0]
						ϒsub_url        λ.Object
						ϒsubtitles      λ.Object
						ϒtitle          λ.Object
						ϒurl            = λargs[1]
						ϒvideo_id       λ.Object
						τmp0            λ.Object
						τmp1            λ.Object
						τmp2            λ.Object
						τmp3            λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒmedia = λ.Cal(λ.GetAttr(ϒself, "_call_api", nil), λ.Add(λ.NewStr("media/"), ϒvideo_id), ϒvideo_id)
					ϒtitle = λ.GetItem(ϒmedia, λ.NewStr("title"))
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒmedia, "get", nil), λ.NewStr("encodings"), λ.NewList()))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒencoding = τmp1
						ϒm3u8_url = λ.Cal(λ.GetAttr(ϒencoding, "get", nil), λ.NewStr("master_playlist_url"))
						if λ.IsTrue(ϒm3u8_url) {
							λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
								ϒm3u8_url,
								ϒvideo_id,
								λ.NewStr("mp4"),
								λ.NewStr("m3u8_native"),
							), λ.KWArgs{
								{Name: "m3u8_id", Value: λ.NewStr("hls")},
								{Name: "fatal", Value: λ.False},
							}))
						}
						ϒencoding_url = λ.Cal(λ.GetAttr(ϒencoding, "get", nil), λ.NewStr("url"))
						ϒfile_url = λ.Cal(λ.GetAttr(ϒencoding, "get", nil), λ.NewStr("file_url"))
						if λ.IsTrue(func() λ.Object {
							if λv := λ.NewBool(!λ.IsTrue(ϒencoding_url)); !λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(!λ.IsTrue(ϒfile_url))
							}
						}()) {
							continue
						}
						ϒf = λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("width"):     λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒencoding, "get", nil), λ.NewStr("width"))),
							λ.NewStr("height"):    λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒencoding, "get", nil), λ.NewStr("height"))),
							λ.NewStr("vbr"):       λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒencoding, "get", nil), λ.NewStr("video_bitrate"))),
							λ.NewStr("abr"):       λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒencoding, "get", nil), λ.NewStr("audio_bitrate"))),
							λ.NewStr("filesize"):  λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒencoding, "get", nil), λ.NewStr("size_in_bytes"))),
							λ.NewStr("vcodec"):    λ.Cal(λ.GetAttr(ϒencoding, "get", nil), λ.NewStr("video_codec")),
							λ.NewStr("acodec"):    λ.Cal(λ.GetAttr(ϒencoding, "get", nil), λ.NewStr("audio_codec")),
							λ.NewStr("container"): λ.Cal(λ.GetAttr(ϒencoding, "get", nil), λ.NewStr("container_type")),
						})
						τmp2 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
							ϒencoding_url,
							ϒfile_url,
						))
						for {
							if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
								break
							}
							ϒf_url = τmp3
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒf_url))) {
								continue
							}
							ϒfmt = λ.Cal(λ.GetAttr(ϒf, "copy", nil))
							ϒrtmp = λ.Cal(Ωre.ϒsearch, λ.NewStr("^(?P<url>rtmpe?://(?P<host>[^/]+)/(?P<app>.+))/(?P<playpath>mp[34]:.+)$"), ϒf_url)
							if λ.IsTrue(ϒrtmp) {
								λ.Cal(λ.GetAttr(ϒfmt, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("url"):       λ.Cal(λ.GetAttr(ϒrtmp, "group", nil), λ.NewStr("url")),
									λ.NewStr("play_path"): λ.Cal(λ.GetAttr(ϒrtmp, "group", nil), λ.NewStr("playpath")),
									λ.NewStr("app"):       λ.Cal(λ.GetAttr(ϒrtmp, "group", nil), λ.NewStr("app")),
									λ.NewStr("ext"):       λ.NewStr("flv"),
									λ.NewStr("format_id"): λ.NewStr("rtmp"),
								}))
							} else {
								λ.Cal(λ.GetAttr(ϒfmt, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("url"):       ϒf_url,
									λ.NewStr("format_id"): λ.NewStr("http"),
								}))
							}
							λ.Cal(λ.GetAttr(ϒformats, "append", nil), ϒfmt)
						}
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒsubtitles = λ.NewDictWithTable(map[λ.Object]λ.Object{})
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒmedia, "get", nil), λ.NewStr("closed_captions"), λ.NewList()))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒclosed_caption = τmp1
						ϒsub_url = λ.Cal(λ.GetAttr(ϒclosed_caption, "get", nil), λ.NewStr("file"))
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒsub_url))) {
							continue
						}
						ϒlang = func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒclosed_caption, "get", nil), λ.NewStr("code")); λ.IsTrue(λv) {
								return λv
							} else if λv := λ.Cal(λ.GetAttr(ϒclosed_caption, "get", nil), λ.NewStr("language")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewStr("en")
							}
						}()
						λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒsubtitles, "setdefault", nil), ϒlang, λ.NewList()), "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"): ϒsub_url,
						}))
					}
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("formats"):     ϒformats,
						λ.NewStr("title"):       ϒtitle,
						λ.NewStr("description"): λ.Cal(λ.GetAttr(ϒmedia, "get", nil), λ.NewStr("description")),
						λ.NewStr("thumbnail"): func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒmedia, "get", nil), λ.NewStr("image_large")); λ.IsTrue(λv) {
								return λv
							} else if λv := λ.Cal(λ.GetAttr(ϒmedia, "get", nil), λ.NewStr("image_medium")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(ϒmedia, "get", nil), λ.NewStr("image_small"))
							}
						}(),
						λ.NewStr("duration"):  λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒmedia, "get", nil), λ.NewStr("duration"))),
						λ.NewStr("tags"):      λ.Cal(λ.GetAttr(ϒmedia, "get", nil), λ.NewStr("tags")),
						λ.NewStr("subtitles"): ϒsubtitles,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):       CuriosityStreamIE_IE_NAME,
				λ.NewStr("_VALID_URL"):    CuriosityStreamIE__VALID_URL,
				λ.NewStr("_real_extract"): CuriosityStreamIE__real_extract,
			})
		}())
		CuriosityStreamCollectionIE = λ.Cal(λ.TypeType, λ.NewStr("CuriosityStreamCollectionIE"), λ.NewTuple(CuriosityStreamBaseIE), func() λ.Dict {
			var (
				CuriosityStreamCollectionIE__VALID_URL λ.Object
			)
			CuriosityStreamCollectionIE__VALID_URL = λ.NewStr("https?://(?:app\\.)?curiositystream\\.com/(?:collection|series)/(?P<id>\\d+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): CuriosityStreamCollectionIE__VALID_URL,
			})
		}())
	})
}

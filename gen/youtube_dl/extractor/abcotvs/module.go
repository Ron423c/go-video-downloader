// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * abcotvs/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/abcotvs.py
 */

package abcotvs

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ABCOTVSClipsIE λ.Object
	ABCOTVSIE      λ.Object
	InfoExtractor  λ.Object
	ϒcompat_str    λ.Object
	ϒdict_get      λ.Object
	ϒint_or_none   λ.Object
	ϒtry_get       λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒdict_get = Ωutils.ϒdict_get
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒtry_get = Ωutils.ϒtry_get
		ABCOTVSIE = λ.Cal(λ.TypeType, λ.NewStr("ABCOTVSIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ABCOTVSIE_IE_NAME       λ.Object
				ABCOTVSIE__SITE_MAP     λ.Object
				ABCOTVSIE__VALID_URL    λ.Object
				ABCOTVSIE__real_extract λ.Object
			)
			ABCOTVSIE_IE_NAME = λ.NewStr("abcotvs")
			ABCOTVSIE__VALID_URL = λ.NewStr("https?://(?P<site>abc(?:7(?:news|ny|chicago)?|11|13|30)|6abc)\\.com(?:(?:/[^/]+)*/(?P<display_id>[^/]+))?/(?P<id>\\d+)")
			ABCOTVSIE__SITE_MAP = λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("6abc"):        λ.NewStr("wpvi"),
				λ.NewStr("abc11"):       λ.NewStr("wtvd"),
				λ.NewStr("abc13"):       λ.NewStr("ktrk"),
				λ.NewStr("abc30"):       λ.NewStr("kfsn"),
				λ.NewStr("abc7"):        λ.NewStr("kabc"),
				λ.NewStr("abc7chicago"): λ.NewStr("wls"),
				λ.NewStr("abc7news"):    λ.NewStr("kgo"),
				λ.NewStr("abc7ny"):      λ.NewStr("wabc"),
			})
			ABCOTVSIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdata       λ.Object
						ϒdisplay_id λ.Object
						ϒformats    λ.Object
						ϒimage      λ.Object
						ϒm3u8_url   λ.Object
						ϒmp4_url    λ.Object
						ϒself       = λargs[0]
						ϒsite       λ.Object
						ϒstation    λ.Object
						ϒtitle      λ.Object
						ϒurl        = λargs[1]
						ϒvideo      λ.Object
						ϒvideo_id   λ.Object
						τmp0        λ.Object
					)
					τmp0 = λ.Cal(λ.GetAttr(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups", nil))
					ϒsite = λ.GetItem(τmp0, λ.NewInt(0))
					ϒdisplay_id = λ.GetItem(τmp0, λ.NewInt(1))
					ϒvideo_id = λ.GetItem(τmp0, λ.NewInt(2))
					ϒdisplay_id = func() λ.Object {
						if λv := ϒdisplay_id; λ.IsTrue(λv) {
							return λv
						} else {
							return ϒvideo_id
						}
					}()
					ϒstation = λ.GetItem(λ.GetAttr(ϒself, "_SITE_MAP", nil), ϒsite)
					ϒdata = λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.NewStr("https://api.abcotvs.com/v2/content"),
						ϒdisplay_id,
					), λ.KWArgs{
						{Name: "query", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("id"):      ϒvideo_id,
							λ.NewStr("key"):     λ.Mod(λ.NewStr("otv.web.%s.story"), ϒstation),
							λ.NewStr("station"): ϒstation,
						})},
					}), λ.NewStr("data"))
					ϒvideo = func() λ.Object {
						if λv := λ.Cal(ϒtry_get, ϒdata, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("featuredMedia")), λ.NewStr("video"))
							}), λ.DictType); λ.IsTrue(λv) {
							return λv
						} else {
							return ϒdata
						}
					}()
					ϒvideo_id = λ.Cal(ϒcompat_str, λ.Cal(ϒdict_get, ϒvideo, λ.NewTuple(
						λ.NewStr("id"),
						λ.NewStr("publishedKey"),
					), ϒvideo_id))
					ϒtitle = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("title")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.GetItem(ϒvideo, λ.NewStr("linkText"))
						}
					}()
					ϒformats = λ.NewList()
					ϒm3u8_url = λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("m3u8"))
					if λ.IsTrue(ϒm3u8_url) {
						ϒformats = λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
							λ.GetItem(λ.Cal(λ.GetAttr(λ.GetItem(ϒvideo, λ.NewStr("m3u8")), "split", nil), λ.NewStr("?")), λ.NewInt(0)),
							ϒdisplay_id,
							λ.NewStr("mp4"),
						), λ.KWArgs{
							{Name: "m3u8_id", Value: λ.NewStr("hls")},
							{Name: "fatal", Value: λ.False},
						})
					}
					ϒmp4_url = λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("mp4"))
					if λ.IsTrue(ϒmp4_url) {
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("abr"):       λ.NewInt(128),
							λ.NewStr("format_id"): λ.NewStr("https"),
							λ.NewStr("height"):    λ.NewInt(360),
							λ.NewStr("url"):       ϒmp4_url,
							λ.NewStr("width"):     λ.NewInt(640),
						}))
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒimage = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("image")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewDictWithTable(map[λ.Object]λ.Object{})
						}
					}()
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):         ϒvideo_id,
						λ.NewStr("display_id"): ϒdisplay_id,
						λ.NewStr("title"):      ϒtitle,
						λ.NewStr("description"): λ.Cal(ϒdict_get, ϒvideo, λ.NewTuple(
							λ.NewStr("description"),
							λ.NewStr("caption"),
						), λ.Cal(ϒtry_get, ϒvideo, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("meta")), λ.NewStr("description"))
							}))),
						λ.NewStr("thumbnail"): λ.Cal(ϒdict_get, ϒimage, λ.NewTuple(
							λ.NewStr("source"),
							λ.NewStr("dynamicSource"),
						)),
						λ.NewStr("timestamp"): λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("date"))),
						λ.NewStr("duration"):  λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("length"))),
						λ.NewStr("formats"):   ϒformats,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):       ABCOTVSIE_IE_NAME,
				λ.NewStr("_SITE_MAP"):     ABCOTVSIE__SITE_MAP,
				λ.NewStr("_VALID_URL"):    ABCOTVSIE__VALID_URL,
				λ.NewStr("_real_extract"): ABCOTVSIE__real_extract,
			})
		}())
		ABCOTVSClipsIE = λ.Cal(λ.TypeType, λ.NewStr("ABCOTVSClipsIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ABCOTVSClipsIE__VALID_URL λ.Object
			)
			ABCOTVSClipsIE__VALID_URL = λ.NewStr("https?://clips\\.abcotvs\\.com/(?:[^/]+/)*video/(?P<id>\\d+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): ABCOTVSClipsIE__VALID_URL,
			})
		}())
	})
}

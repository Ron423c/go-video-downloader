// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * golem/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/golem.py
 */

package golem

import (
	Ωparse "github.com/tenta-browser/go-video-downloader/gen/urllib/parse"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	GolemIE        λ.Object
	InfoExtractor  λ.Object
	ϒcompat_str    λ.Object
	ϒdetermine_ext λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		GolemIE = λ.Cal(λ.TypeType, λ.StrLiteral("GolemIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				GolemIE__PREFIX       λ.Object
				GolemIE__VALID_URL    λ.Object
				GolemIE__real_extract λ.Object
			)
			GolemIE__VALID_URL = λ.StrLiteral("^https?://video\\.golem\\.de/.+?/(?P<id>.+?)/")
			GolemIE__PREFIX = λ.StrLiteral("http://video.golem.de")
			GolemIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒconfig     λ.Object
						ϒe          λ.Object
						ϒformats    λ.Object
						ϒinfo       λ.Object
						ϒself       = λargs[0]
						ϒthumbnails λ.Object
						ϒurl        = λargs[1]
						ϒvideo_id   λ.Object
						τmp0        λ.Object
						τmp1        λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒconfig = λ.Calm(ϒself, "_download_xml", λ.Calm(λ.StrLiteral("https://video.golem.de/xml/{0}.xml"), "format", ϒvideo_id), ϒvideo_id)
					ϒinfo = λ.DictLiteral(map[string]λ.Object{
						"id":       ϒvideo_id,
						"title":    λ.Calm(ϒconfig, "findtext", λ.StrLiteral("./title"), λ.StrLiteral("golem")),
						"duration": λ.Calm(ϒself, "_float", λ.Calm(ϒconfig, "findtext", λ.StrLiteral("./playtime")), λ.StrLiteral("duration")),
					})
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, ϒconfig)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒe = τmp1
						ϒurl = λ.Calm(ϒe, "findtext", λ.StrLiteral("./url"))
						if !λ.IsTrue(ϒurl) {
							continue
						}
						λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
							"format_id": λ.Cal(ϒcompat_str, λ.GetAttr(ϒe, "tag", nil)),
							"url":       λ.Cal(Ωparse.ϒurljoin, λ.GetAttr(ϒself, "_PREFIX", nil), ϒurl),
							"height":    λ.Calm(ϒself, "_int", λ.Calm(ϒe, "get", λ.StrLiteral("height")), λ.StrLiteral("height")),
							"width":     λ.Calm(ϒself, "_int", λ.Calm(ϒe, "get", λ.StrLiteral("width")), λ.StrLiteral("width")),
							"filesize":  λ.Calm(ϒself, "_int", λ.Calm(ϒe, "findtext", λ.StrLiteral("filesize")), λ.StrLiteral("filesize")),
							"ext":       λ.Cal(ϒdetermine_ext, λ.Calm(ϒe, "findtext", λ.StrLiteral("./filename"))),
						}))
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					λ.SetItem(ϒinfo, λ.StrLiteral("formats"), ϒformats)
					ϒthumbnails = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒconfig, "findall", λ.StrLiteral(".//teaser")))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒe = τmp1
						ϒurl = λ.Calm(ϒe, "findtext", λ.StrLiteral("./url"))
						if !λ.IsTrue(ϒurl) {
							continue
						}
						λ.Calm(ϒthumbnails, "append", λ.DictLiteral(map[string]λ.Object{
							"url":    λ.Cal(Ωparse.ϒurljoin, λ.GetAttr(ϒself, "_PREFIX", nil), ϒurl),
							"width":  λ.Calm(ϒself, "_int", λ.Calm(ϒe, "get", λ.StrLiteral("width")), λ.StrLiteral("thumbnail width")),
							"height": λ.Calm(ϒself, "_int", λ.Calm(ϒe, "get", λ.StrLiteral("height")), λ.StrLiteral("thumbnail height")),
						}))
					}
					λ.SetItem(ϒinfo, λ.StrLiteral("thumbnails"), ϒthumbnails)
					return ϒinfo
				})
			return λ.DictLiteral(map[string]λ.Object{
				"_PREFIX":       GolemIE__PREFIX,
				"_VALID_URL":    GolemIE__VALID_URL,
				"_real_extract": GolemIE__real_extract,
			})
		}())
	})
}

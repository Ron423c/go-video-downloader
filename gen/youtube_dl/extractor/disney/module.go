// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * disney/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/disney.py
 */

package disney

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	DisneyIE          λ.Object
	ExtractorError    λ.Object
	InfoExtractor     λ.Object
	ϒcompat_str       λ.Object
	ϒdetermine_ext    λ.Object
	ϒint_or_none      λ.Object
	ϒunified_strdate  λ.Object
	ϒupdate_url_query λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒunified_strdate = Ωutils.ϒunified_strdate
		ϒcompat_str = Ωutils.ϒcompat_str
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ExtractorError = Ωutils.ExtractorError
		ϒupdate_url_query = Ωutils.ϒupdate_url_query
		DisneyIE = λ.Cal(λ.TypeType, λ.NewStr("DisneyIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				DisneyIE__TESTS        λ.Object
				DisneyIE__VALID_URL    λ.Object
				DisneyIE__real_extract λ.Object
			)
			DisneyIE__VALID_URL = λ.NewStr("(?x)\n        https?://(?P<domain>(?:[^/]+\\.)?(?:disney\\.[a-z]{2,3}(?:\\.[a-z]{2})?|disney(?:(?:me|latino)\\.com|turkiye\\.com\\.tr|channel\\.de)|(?:starwars|marvelkids)\\.com))/(?:(?:embed/|(?:[^/]+/)+[\\w-]+-)(?P<id>[a-z0-9]{24})|(?:[^/]+/)?(?P<display_id>[^/?#]+))")
			DisneyIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://video.disney.com/watch/moana-trailer-545ed1857afee5a0ec239977"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("545ed1857afee5a0ec239977"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Moana - Trailer"),
						λ.NewStr("description"): λ.NewStr("A fun adventure for the entire Family!  Bring home Moana on Digital HD Feb 21 & Blu-ray March 7"),
						λ.NewStr("upload_date"): λ.NewStr("20170112"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.starwars.com/video/rogue-one-a-star-wars-story-intro-featurette"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("5454e9f4e9804a552e3524c8"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("\"Intro\" Featurette: Rogue One: A Star Wars Story"),
						λ.NewStr("upload_date"): λ.NewStr("20170104"),
						λ.NewStr("description"): λ.NewStr("Go behind-the-scenes of Rogue One: A Star Wars Story in this featurette with Director Gareth Edwards and the cast of the film."),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://videos.disneylatino.com/ver/spider-man-de-regreso-a-casa-primer-adelanto-543a33a1850bdcfcca13bae2"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://video.en.disneyme.com/watch/future-worm/robo-carp-2001-544b66002aa7353cdd3f5114"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://video.disneyturkiye.com.tr/izle/7c-7-cuceler/kimin-sesi-zaten-5456f3d015f6b36c8afdd0e2"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://disneyjunior.disney.com/embed/546a4798ddba3d1612e4005d"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://www.starwars.com/embed/54690d1e6c42e5f09a0fb097"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://spiderman.marvelkids.com/embed/522900d2ced3c565e4cc0677"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://spiderman.marvelkids.com/videos/contest-of-champions-part-four-clip-1"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://disneyjunior.en.disneyme.com/dj/watch-my-friends-tigger-and-pooh-promo"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://disneychannel.de/sehen/soy-luna-folge-118-5518518987ba27f3cc729268"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://disneyjunior.disney.com/galactech-the-galactech-grab-galactech-an-admiral-rescue"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			DisneyIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcaption        λ.Object
						ϒcaption_format λ.Object
						ϒcaption_url    λ.Object
						ϒdisplay_id     λ.Object
						ϒdomain         λ.Object
						ϒext            λ.Object
						ϒexternal       λ.Object
						ϒf              λ.Object
						ϒflavor         λ.Object
						ϒflavor_format  λ.Object
						ϒflavor_url     λ.Object
						ϒformat_id      λ.Object
						ϒformats        λ.Object
						ϒgrill          λ.Object
						ϒheight         λ.Object
						ϒm3u8_formats   λ.Object
						ϒpage_data      λ.Object
						ϒself           = λargs[0]
						ϒsubtitles      λ.Object
						ϒtbr            λ.Object
						ϒtitle          λ.Object
						ϒurl            = λargs[1]
						ϒvideo_data     λ.Object
						ϒvideo_id       λ.Object
						ϒwebpage        λ.Object
						ϒwidth          λ.Object
						τmp0            λ.Object
						τmp1            λ.Object
						τmp2            λ.Object
						τmp3            λ.Object
					)
					τmp0 = λ.Cal(λ.GetAttr(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups", nil))
					ϒdomain = λ.GetItem(τmp0, λ.NewInt(0))
					ϒvideo_id = λ.GetItem(τmp0, λ.NewInt(1))
					ϒdisplay_id = λ.GetItem(τmp0, λ.NewInt(2))
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒvideo_id))) {
						ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒdisplay_id)
						ϒgrill = λ.Cal(Ωre.ϒsub, λ.NewStr("\"\\s*\\+\\s*\""), λ.NewStr(""), λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("Grill\\.burger\\s*=\\s*({.+})\\s*:"), ϒwebpage, λ.NewStr("grill data")))
						ϒpage_data = λ.Cal(λ.BuiltinNext, λ.Cal(λ.NewFunction("<generator>",
							nil,
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								return λ.NewGenerator(func(λgen λ.Generator) λ.Object {
									var (
										ϒs   λ.Object
										τmp0 λ.Object
										τmp1 λ.Object
									)
									τmp0 = λ.Cal(λ.BuiltinIter, λ.GetItem(λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), ϒgrill, ϒdisplay_id), λ.NewStr("stack")))
									for {
										if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
											break
										}
										ϒs = τmp1
										if λ.IsTrue(λ.Eq(λ.Cal(λ.GetAttr(ϒs, "get", nil), λ.NewStr("type")), λ.NewStr("video"))) {
											λgen.Yield(ϒs)
										}
									}
									return λ.None
								})
							})))
						ϒvideo_data = λ.GetItem(λ.GetItem(ϒpage_data, λ.NewStr("data")), λ.NewInt(0))
					} else {
						ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), λ.Mod(λ.NewStr("http://%s/embed/%s"), λ.NewTuple(
							ϒdomain,
							ϒvideo_id,
						)), ϒvideo_id)
						ϒpage_data = λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("Disney\\.EmbedVideo\\s*=\\s*({.+});"), ϒwebpage, λ.NewStr("embed data")), ϒvideo_id)
						ϒvideo_data = λ.GetItem(ϒpage_data, λ.NewStr("video"))
					}
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("externals"), λ.NewList()))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒexternal = τmp1
						if λ.IsTrue(λ.Eq(λ.Cal(λ.GetAttr(ϒexternal, "get", nil), λ.NewStr("source")), λ.NewStr("vevo"))) {
							return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), λ.Add(λ.NewStr("vevo:"), λ.GetItem(ϒexternal, λ.NewStr("data_id"))), λ.NewStr("Vevo"))
						}
					}
					ϒvideo_id = λ.GetItem(ϒvideo_data, λ.NewStr("id"))
					ϒtitle = λ.GetItem(ϒvideo_data, λ.NewStr("title"))
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("flavors"), λ.NewList()))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒflavor = τmp1
						ϒflavor_format = λ.Cal(λ.GetAttr(ϒflavor, "get", nil), λ.NewStr("format"))
						ϒflavor_url = λ.Cal(λ.GetAttr(ϒflavor, "get", nil), λ.NewStr("url"))
						if λ.IsTrue(func() λ.Object {
							if λv := λ.NewBool(!λ.IsTrue(ϒflavor_url)); λ.IsTrue(λv) {
								return λv
							} else if λv := λ.NewBool(!λ.IsTrue(λ.Cal(Ωre.ϒmatch, λ.NewStr("https?://"), ϒflavor_url))); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Eq(ϒflavor_format, λ.NewStr("mp4_access"))
							}
						}()) {
							continue
						}
						ϒtbr = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒflavor, "get", nil), λ.NewStr("bitrate")))
						if λ.IsTrue(λ.Eq(ϒtbr, λ.NewInt(99999))) {
							ϒflavor_url = λ.Cal(ϒupdate_url_query, ϒflavor_url, λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("ks"): λ.NewStr(""),
							}))
							ϒm3u8_formats = λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
								ϒflavor_url,
								ϒvideo_id,
								λ.NewStr("mp4"),
							), λ.KWArgs{
								{Name: "m3u8_id", Value: ϒflavor_format},
								{Name: "fatal", Value: λ.False},
							})
							τmp2 = λ.Cal(λ.BuiltinIter, ϒm3u8_formats)
							for {
								if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
									break
								}
								ϒf = τmp3
								if λ.IsTrue(λ.NewBool(λ.Contains(λ.GetItem(ϒf, λ.NewStr("url")), λ.NewStr("/fpshls/")))) {
									continue
								}
								λ.Cal(λ.GetAttr(ϒformats, "append", nil), ϒf)
							}
							continue
						}
						ϒformat_id = λ.NewList()
						if λ.IsTrue(ϒflavor_format) {
							λ.Cal(λ.GetAttr(ϒformat_id, "append", nil), ϒflavor_format)
						}
						if λ.IsTrue(ϒtbr) {
							λ.Cal(λ.GetAttr(ϒformat_id, "append", nil), λ.Cal(ϒcompat_str, ϒtbr))
						}
						ϒext = λ.Cal(ϒdetermine_ext, ϒflavor_url)
						if λ.IsTrue(func() λ.Object {
							if λv := λ.Eq(ϒflavor_format, λ.NewStr("applehttp")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Eq(ϒext, λ.NewStr("m3u8"))
							}
						}()) {
							ϒext = λ.NewStr("mp4")
						}
						ϒwidth = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒflavor, "get", nil), λ.NewStr("width")))
						ϒheight = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒflavor, "get", nil), λ.NewStr("height")))
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("format_id"): λ.Cal(λ.GetAttr(λ.NewStr("-"), "join", nil), ϒformat_id),
							λ.NewStr("url"):       ϒflavor_url,
							λ.NewStr("width"):     ϒwidth,
							λ.NewStr("height"):    ϒheight,
							λ.NewStr("tbr"):       ϒtbr,
							λ.NewStr("ext"):       ϒext,
							λ.NewStr("vcodec"): func() λ.Object {
								if λ.IsTrue(func() λ.Object {
									if λv := λ.Eq(ϒwidth, λ.NewInt(0)); !λ.IsTrue(λv) {
										return λv
									} else {
										return λ.Eq(ϒheight, λ.NewInt(0))
									}
								}()) {
									return λ.NewStr("none")
								} else {
									return λ.None
								}
							}(),
						}))
					}
					if λ.IsTrue(func() λ.Object {
						if λv := λ.NewBool(!λ.IsTrue(ϒformats)); !λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("expired"))
						}
					}()) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.NewStr("%s said: %s"), λ.NewTuple(
							λ.GetAttr(ϒself, "IE_NAME", nil),
							λ.GetItem(λ.GetItem(ϒpage_data, λ.NewStr("translations")), λ.NewStr("video_expired")),
						))), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒsubtitles = λ.NewDictWithTable(map[λ.Object]λ.Object{})
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("captions"), λ.NewList()))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒcaption = τmp1
						ϒcaption_url = λ.Cal(λ.GetAttr(ϒcaption, "get", nil), λ.NewStr("url"))
						ϒcaption_format = λ.Cal(λ.GetAttr(ϒcaption, "get", nil), λ.NewStr("format"))
						if λ.IsTrue(func() λ.Object {
							if λv := λ.NewBool(!λ.IsTrue(ϒcaption_url)); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(ϒcaption_format, "startswith", nil), λ.NewStr("unknown"))
							}
						}()) {
							continue
						}
						λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒsubtitles, "setdefault", nil), λ.Cal(λ.GetAttr(ϒcaption, "get", nil), λ.NewStr("language"), λ.NewStr("en")), λ.NewList()), "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"): ϒcaption_url,
							λ.NewStr("ext"): λ.Cal(λ.GetAttr(λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("webvtt"): λ.NewStr("vtt"),
							}), "get", nil), ϒcaption_format, ϒcaption_format),
						}))
					}
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):    ϒvideo_id,
						λ.NewStr("title"): ϒtitle,
						λ.NewStr("description"): func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("description")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("short_desc"))
							}
						}(),
						λ.NewStr("thumbnail"): func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("thumb")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("thumb_secure"))
							}
						}(),
						λ.NewStr("duration"):    λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("duration_sec"))),
						λ.NewStr("upload_date"): λ.Cal(ϒunified_strdate, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("publish_date"))),
						λ.NewStr("formats"):     ϒformats,
						λ.NewStr("subtitles"):   ϒsubtitles,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        DisneyIE__TESTS,
				λ.NewStr("_VALID_URL"):    DisneyIE__VALID_URL,
				λ.NewStr("_real_extract"): DisneyIE__real_extract,
			})
		}())
	})
}

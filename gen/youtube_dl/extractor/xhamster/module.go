// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * xhamster/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/xhamster.py
 */

package xhamster

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError   λ.Object
	InfoExtractor    λ.Object
	XHamsterEmbedIE  λ.Object
	XHamsterIE       λ.Object
	ϒclean_html      λ.Object
	ϒcompat_str      λ.Object
	ϒdetermine_ext   λ.Object
	ϒdict_get        λ.Object
	ϒint_or_none     λ.Object
	ϒparse_duration  λ.Object
	ϒtry_get         λ.Object
	ϒunified_strdate λ.Object
	ϒurl_or_none     λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒclean_html = Ωutils.ϒclean_html
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ϒdict_get = Ωutils.ϒdict_get
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒtry_get = Ωutils.ϒtry_get
		ϒunified_strdate = Ωutils.ϒunified_strdate
		ϒurl_or_none = Ωutils.ϒurl_or_none
		XHamsterIE = λ.Cal(λ.TypeType, λ.NewStr("XHamsterIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				XHamsterIE__TESTS        λ.Object
				XHamsterIE__VALID_URL    λ.Object
				XHamsterIE__real_extract λ.Object
			)
			XHamsterIE__VALID_URL = λ.NewStr("(?x)\n                    https?://\n                        (?:.+?\\.)?xhamster\\.(?:com|one)/\n                        (?:\n                            movies/(?P<id>\\d+)/(?P<display_id>[^/]*)\\.html|\n                            videos/(?P<display_id_2>[^/]*)-(?P<id_2>\\d+)\n                        )\n                    ")
			XHamsterIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://xhamster.com/movies/1509445/femaleagent_shy_beauty_takes_the_bait.html"),
					λ.NewStr("md5"): λ.NewStr("8281348b8d3c53d39fffb377d24eac4e"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("1509445"),
						λ.NewStr("display_id"):  λ.NewStr("femaleagent_shy_beauty_takes_the_bait"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("FemaleAgent Shy beauty takes the bait"),
						λ.NewStr("timestamp"):   λ.NewInt(1350194821),
						λ.NewStr("upload_date"): λ.NewStr("20121014"),
						λ.NewStr("uploader"):    λ.NewStr("Ruseful2011"),
						λ.NewStr("duration"):    λ.NewInt(893),
						λ.NewStr("age_limit"):   λ.NewInt(18),
						λ.NewStr("categories"): λ.NewList(
							λ.NewStr("Fake Hub"),
							λ.NewStr("Amateur"),
							λ.NewStr("MILFs"),
							λ.NewStr("POV"),
							λ.NewStr("Beauti"),
							λ.NewStr("Beauties"),
							λ.NewStr("Beautiful"),
							λ.NewStr("Boss"),
							λ.NewStr("Office"),
							λ.NewStr("Oral"),
							λ.NewStr("Reality"),
							λ.NewStr("Sexy"),
							λ.NewStr("Taking"),
						),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://xhamster.com/movies/2221348/britney_spears_sexy_booty.html?hd"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("2221348"),
						λ.NewStr("display_id"):  λ.NewStr("britney_spears_sexy_booty"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Britney Spears  Sexy Booty"),
						λ.NewStr("timestamp"):   λ.NewInt(1379123460),
						λ.NewStr("upload_date"): λ.NewStr("20130914"),
						λ.NewStr("uploader"):    λ.NewStr("jojo747400"),
						λ.NewStr("duration"):    λ.NewInt(200),
						λ.NewStr("age_limit"):   λ.NewInt(18),
						λ.NewStr("categories"): λ.NewList(
							λ.NewStr("Britney Spears"),
							λ.NewStr("Celebrities"),
							λ.NewStr("HD Videos"),
							λ.NewStr("Sexy"),
							λ.NewStr("Sexy Booty"),
						),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://xhamster.com/movies/5667973/.html"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("5667973"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("...."),
						λ.NewStr("timestamp"):   λ.NewInt(1454948101),
						λ.NewStr("upload_date"): λ.NewStr("20160208"),
						λ.NewStr("uploader"):    λ.NewStr("parejafree"),
						λ.NewStr("duration"):    λ.NewInt(72),
						λ.NewStr("age_limit"):   λ.NewInt(18),
						λ.NewStr("categories"): λ.NewList(
							λ.NewStr("Amateur"),
							λ.NewStr("Blowjobs"),
						),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://m.xhamster.com/videos/cute-teen-jacqueline-solo-masturbation-8559111"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://xhamster.com/movies/2272726/amber_slayed_by_the_knight.html"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://it.xhamster.com/movies/7263980/la_mia_vicina.html"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://pt.xhamster.com/videos/euro-pedal-pumping-7937821"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://xhamster.one/videos/femaleagent-shy-beauty-takes-the-bait-1509445"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			XHamsterIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒage_limit       λ.Object
						ϒc               λ.Object
						ϒc_name          λ.Object
						ϒcategories      λ.Object
						ϒcategories_html λ.Object
						ϒcategories_list λ.Object
						ϒcomment_count   λ.Object
						ϒdescription     λ.Object
						ϒdesktop_url     λ.Object
						ϒdislike_count   λ.Object
						ϒdisplay_id      λ.Object
						ϒduration        λ.Object
						ϒerror           λ.Object
						ϒfilesize        λ.Object
						ϒformat_id       λ.Object
						ϒformat_item     λ.Object
						ϒformat_url      λ.Object
						ϒformat_urls     λ.Object
						ϒformats         λ.Object
						ϒformats_dict    λ.Object
						ϒget_height      λ.Object
						ϒinitials        λ.Object
						ϒlike_count      λ.Object
						ϒmobj            λ.Object
						ϒquality         λ.Object
						ϒself            = λargs[0]
						ϒsources         λ.Object
						ϒthumbnail       λ.Object
						ϒtitle           λ.Object
						ϒupload_date     λ.Object
						ϒuploader        λ.Object
						ϒurl             = λargs[1]
						ϒvideo           λ.Object
						ϒvideo_id        λ.Object
						ϒvideo_url       λ.Object
						ϒview_count      λ.Object
						ϒwebpage         λ.Object
						τmp0             λ.Object
						τmp1             λ.Object
						τmp2             λ.Object
						τmp3             λ.Object
						τmp4             λ.Object
					)
					ϒurl = λ.Cal(Ωre.ϒsub, λ.NewStr("^(https?://(?:.+?\\.)?)m\\."), λ.NewStr("\\1"), ϒurl)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒvideo_id = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("id")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("id_2"))
						}
					}()
					ϒdisplay_id = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("display_id")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("display_id_2"))
						}
					}()
					ϒdesktop_url = λ.Cal(Ωre.ϒsub, λ.NewStr("^(https?://(?:.+?\\.)?)m\\."), λ.NewStr("\\1"), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒdesktop_url, ϒvideo_id)
					ϒerror = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
						λ.NewStr("<div[^>]+id=[\"\\']videoClosed[\"\\'][^>]*>(.+?)</div>"),
						ϒwebpage,
						λ.NewStr("error"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(ϒerror) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(ϒerror), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒage_limit = λ.Cal(λ.GetAttr(ϒself, "_rta_search", nil), ϒwebpage)
					ϒget_height = λ.NewFunction("get_height",
						[]λ.Param{
							{Name: "s"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒs = λargs[0]
							)
							return λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
								λ.NewStr("^(\\d+)[pP]"),
								ϒs,
								λ.NewStr("height"),
							), λ.KWArgs{
								{Name: "default", Value: λ.None},
							}))
						})
					ϒinitials = λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
						λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewStr("window\\.initials\\s*=\\s*({.+?})\\s*;\\s*\\n"),
							ϒwebpage,
							λ.NewStr("initials"),
						), λ.KWArgs{
							{Name: "default", Value: λ.NewStr("{}")},
						}),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					if λ.IsTrue(ϒinitials) {
						ϒvideo = λ.GetItem(ϒinitials, λ.NewStr("videoModel"))
						ϒtitle = λ.GetItem(ϒvideo, λ.NewStr("title"))
						ϒformats = λ.NewList()
						τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(λ.GetItem(ϒvideo, λ.NewStr("sources")), "items", nil)))
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							τmp2 = τmp1
							ϒformat_id = λ.GetItem(τmp2, λ.NewInt(0))
							ϒformats_dict = λ.GetItem(τmp2, λ.NewInt(1))
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒformats_dict, λ.DictType)))) {
								continue
							}
							τmp2 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒformats_dict, "items", nil)))
							for {
								if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
									break
								}
								τmp4 = τmp3
								ϒquality = λ.GetItem(τmp4, λ.NewInt(0))
								ϒformat_item = λ.GetItem(τmp4, λ.NewInt(1))
								if λ.IsTrue(λ.Eq(ϒformat_id, λ.NewStr("download"))) {
									continue
									if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒformat_item, λ.DictType)))) {
										continue
									}
									ϒformat_url = λ.Cal(λ.GetAttr(ϒformat_item, "get", nil), λ.NewStr("link"))
									ϒfilesize = λ.Call(ϒint_or_none, λ.NewArgs(λ.Cal(λ.GetAttr(ϒformat_item, "get", nil), λ.NewStr("size"))), λ.KWArgs{
										{Name: "invscale", Value: λ.NewInt(1000000)},
									})
								} else {
									ϒformat_url = ϒformat_item
									ϒfilesize = λ.None
								}
								ϒformat_url = λ.Cal(ϒurl_or_none, ϒformat_url)
								if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒformat_url))) {
									continue
								}
								λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("format_id"): λ.Mod(λ.NewStr("%s-%s"), λ.NewTuple(
										ϒformat_id,
										ϒquality,
									)),
									λ.NewStr("url"):      ϒformat_url,
									λ.NewStr("ext"):      λ.Cal(ϒdetermine_ext, ϒformat_url, λ.NewStr("mp4")),
									λ.NewStr("height"):   λ.Cal(ϒget_height, ϒquality),
									λ.NewStr("filesize"): ϒfilesize,
								}))
							}
						}
						λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
						ϒcategories_list = λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("categories"))
						if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒcategories_list, λ.ListType)) {
							ϒcategories = λ.NewList()
							τmp0 = λ.Cal(λ.BuiltinIter, ϒcategories_list)
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒc = τmp1
								if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒc, λ.DictType)))) {
									continue
								}
								ϒc_name = λ.Cal(λ.GetAttr(ϒc, "get", nil), λ.NewStr("name"))
								if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒc_name, ϒcompat_str)) {
									λ.Cal(λ.GetAttr(ϒcategories, "append", nil), ϒc_name)
								}
							}
						} else {
							ϒcategories = λ.None
						}
						return λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("id"):          ϒvideo_id,
							λ.NewStr("display_id"):  ϒdisplay_id,
							λ.NewStr("title"):       ϒtitle,
							λ.NewStr("description"): λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("description")),
							λ.NewStr("timestamp"):   λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("created"))),
							λ.NewStr("uploader"): λ.Cal(ϒtry_get, ϒvideo, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("author")), λ.NewStr("name"))
								}), ϒcompat_str),
							λ.NewStr("thumbnail"):  λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("thumbURL")),
							λ.NewStr("duration"):   λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("duration"))),
							λ.NewStr("view_count"): λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("views"))),
							λ.NewStr("like_count"): λ.Cal(ϒint_or_none, λ.Cal(ϒtry_get, ϒvideo, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("rating")), λ.NewStr("likes"))
								}), λ.IntType)),
							λ.NewStr("dislike_count"): λ.Cal(ϒint_or_none, λ.Cal(ϒtry_get, ϒvideo, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("rating")), λ.NewStr("dislikes"))
								}), λ.IntType)),
							λ.NewStr("comment_count"): λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("views"))),
							λ.NewStr("age_limit"):     ϒage_limit,
							λ.NewStr("categories"):    ϒcategories,
							λ.NewStr("formats"):       ϒformats,
						})
					}
					ϒtitle = λ.Cal(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewList(
						λ.NewStr("<h1[^>]*>([^<]+)</h1>"),
						λ.NewStr("<meta[^>]+itemprop=\".*?caption.*?\"[^>]+content=\"(.+?)\""),
						λ.NewStr("<title[^>]*>(.+?)(?:,\\s*[^,]*?\\s*Porn\\s*[^,]*?:\\s*xHamster[^<]*| - xHamster\\.com)</title>"),
					), ϒwebpage, λ.NewStr("title"))
					ϒformats = λ.NewList()
					ϒformat_urls = λ.Cal(λ.SetType)
					ϒsources = λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
						λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewStr("sources\\s*:\\s*({.+?})\\s*,?\\s*\\n"),
							ϒwebpage,
							λ.NewStr("sources"),
						), λ.KWArgs{
							{Name: "default", Value: λ.NewStr("{}")},
						}),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒsources, "items", nil)))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒformat_id = λ.GetItem(τmp2, λ.NewInt(0))
						ϒformat_url = λ.GetItem(τmp2, λ.NewInt(1))
						ϒformat_url = λ.Cal(ϒurl_or_none, ϒformat_url)
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒformat_url))) {
							continue
						}
						if λ.IsTrue(λ.NewBool(λ.Contains(ϒformat_urls, ϒformat_url))) {
							continue
						}
						λ.Cal(λ.GetAttr(ϒformat_urls, "add", nil), ϒformat_url)
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("format_id"): ϒformat_id,
							λ.NewStr("url"):       ϒformat_url,
							λ.NewStr("height"):    λ.Cal(ϒget_height, ϒformat_id),
						}))
					}
					ϒvideo_url = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewList(
							λ.NewStr("file\\s*:\\s*(?P<q>[\"'])(?P<mp4>.+?)(?P=q)"),
							λ.NewStr("<a\\s+href=(?P<q>[\"'])(?P<mp4>.+?)(?P=q)\\s+class=[\"']mp4Thumb"),
							λ.NewStr("<video[^>]+file=(?P<q>[\"'])(?P<mp4>.+?)(?P=q)[^>]*>"),
						),
						ϒwebpage,
						λ.NewStr("video url"),
					), λ.KWArgs{
						{Name: "group", Value: λ.NewStr("mp4")},
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(func() λ.Object {
						if λv := ϒvideo_url; !λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewBool(!λ.Contains(ϒformat_urls, ϒvideo_url))
						}
					}()) {
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"): ϒvideo_url,
						}))
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒmobj = λ.Cal(Ωre.ϒsearch, λ.NewStr("<span>Description: </span>([^<]+)"), ϒwebpage)
					ϒdescription = func() λ.Object {
						if λ.IsTrue(ϒmobj) {
							return λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewInt(1))
						} else {
							return λ.None
						}
					}()
					ϒupload_date = λ.Cal(ϒunified_strdate, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("hint=[\"\\'](\\d{4}-\\d{2}-\\d{2}) \\d{2}:\\d{2}:\\d{2} [A-Z]{3,4}"),
						ϒwebpage,
						λ.NewStr("upload date"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					}))
					ϒuploader = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
						λ.NewStr("<span[^>]+itemprop=[\"\\']author[^>]+><a[^>]+><span[^>]+>([^<]+)"),
						ϒwebpage,
						λ.NewStr("uploader"),
					), λ.KWArgs{
						{Name: "default", Value: λ.NewStr("anonymous")},
					})
					ϒthumbnail = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewList(
							λ.NewStr("[\"']thumbUrl[\"']\\s*:\\s*(?P<q>[\"'])(?P<thumbnail>.+?)(?P=q)"),
							λ.NewStr("<video[^>]+\"poster\"=(?P<q>[\"'])(?P<thumbnail>.+?)(?P=q)[^>]*>"),
						),
						ϒwebpage,
						λ.NewStr("thumbnail"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
						{Name: "group", Value: λ.NewStr("thumbnail")},
					})
					ϒduration = λ.Cal(ϒparse_duration, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewList(
							λ.NewStr("<[^<]+\\bitemprop=[\"\\']duration[\"\\'][^<]+\\bcontent=[\"\\'](.+?)[\"\\']"),
							λ.NewStr("Runtime:\\s*</span>\\s*([\\d:]+)"),
						),
						ϒwebpage,
						λ.NewStr("duration"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					}))
					ϒview_count = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("content=[\"\\']User(?:View|Play)s:(\\d+)"),
						ϒwebpage,
						λ.NewStr("view count"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					}))
					ϒmobj = λ.Cal(Ωre.ϒsearch, λ.NewStr("hint=[\\'\"](?P<likecount>\\d+) Likes / (?P<dislikecount>\\d+) Dislikes"), ϒwebpage)
					τmp0 = func() λ.Object {
						if λ.IsTrue(ϒmobj) {
							return λ.NewTuple(
								λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("likecount")),
								λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("dislikecount")),
							)
						} else {
							return λ.NewTuple(
								λ.None,
								λ.None,
							)
						}
					}()
					ϒlike_count = λ.GetItem(τmp0, λ.NewInt(0))
					ϒdislike_count = λ.GetItem(τmp0, λ.NewInt(1))
					ϒmobj = λ.Cal(Ωre.ϒsearch, λ.NewStr("</label>Comments \\((?P<commentcount>\\d+)\\)</div>"), ϒwebpage)
					ϒcomment_count = func() λ.Object {
						if λ.IsTrue(ϒmobj) {
							return λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("commentcount"))
						} else {
							return λ.NewInt(0)
						}
					}()
					ϒcategories_html = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("(?s)<table.+?(<span>Categories:.+?)</table>"),
						ϒwebpage,
						λ.NewStr("categories"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					ϒcategories = func() λ.Object {
						if λ.IsTrue(ϒcategories_html) {
							return λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
								nil,
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
										var (
											ϒcategory λ.Object
											τmp0      λ.Object
											τmp1      λ.Object
										)
										τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfindall, λ.NewStr("<a[^>]+>(.+?)</a>"), ϒcategories_html))
										for {
											if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
												break
											}
											ϒcategory = τmp1
											λgy.Yield(λ.Cal(ϒclean_html, ϒcategory))
										}
										return λ.None
									})
								})))
						} else {
							return λ.None
						}
					}()
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):            ϒvideo_id,
						λ.NewStr("display_id"):    ϒdisplay_id,
						λ.NewStr("title"):         ϒtitle,
						λ.NewStr("description"):   ϒdescription,
						λ.NewStr("upload_date"):   ϒupload_date,
						λ.NewStr("uploader"):      ϒuploader,
						λ.NewStr("thumbnail"):     ϒthumbnail,
						λ.NewStr("duration"):      ϒduration,
						λ.NewStr("view_count"):    ϒview_count,
						λ.NewStr("like_count"):    λ.Cal(ϒint_or_none, ϒlike_count),
						λ.NewStr("dislike_count"): λ.Cal(ϒint_or_none, ϒdislike_count),
						λ.NewStr("comment_count"): λ.Cal(ϒint_or_none, ϒcomment_count),
						λ.NewStr("age_limit"):     ϒage_limit,
						λ.NewStr("categories"):    ϒcategories,
						λ.NewStr("formats"):       ϒformats,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        XHamsterIE__TESTS,
				λ.NewStr("_VALID_URL"):    XHamsterIE__VALID_URL,
				λ.NewStr("_real_extract"): XHamsterIE__real_extract,
			})
		}())
		XHamsterEmbedIE = λ.Cal(λ.TypeType, λ.NewStr("XHamsterEmbedIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				XHamsterEmbedIE__TEST         λ.Object
				XHamsterEmbedIE__VALID_URL    λ.Object
				XHamsterEmbedIE__real_extract λ.Object
			)
			XHamsterEmbedIE__VALID_URL = λ.NewStr("https?://(?:.+?\\.)?xhamster\\.com/xembed\\.php\\?video=(?P<id>\\d+)")
			XHamsterEmbedIE__TEST = λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("url"): λ.NewStr("http://xhamster.com/xembed.php?video=3328539"),
				λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("id"):          λ.NewStr("3328539"),
					λ.NewStr("ext"):         λ.NewStr("mp4"),
					λ.NewStr("title"):       λ.NewStr("Pen Masturbation"),
					λ.NewStr("timestamp"):   λ.NewInt(1406581861),
					λ.NewStr("upload_date"): λ.NewStr("20140728"),
					λ.NewStr("uploader"):    λ.NewStr("ManyakisArt"),
					λ.NewStr("duration"):    λ.NewInt(5),
					λ.NewStr("age_limit"):   λ.NewInt(18),
				}),
			})
			XHamsterEmbedIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒself      = λargs[0]
						ϒurl       = λargs[1]
						ϒvars      λ.Object
						ϒvideo_id  λ.Object
						ϒvideo_url λ.Object
						ϒwebpage   λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					ϒvideo_url = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.Cal(λ.GetAttr(λ.NewStr("href=\"(https?://xhamster\\.com/(?:movies/{0}/[^\"]*\\.html|videos/[^/]*-{0})[^\"]*)\""), "format", nil), ϒvideo_id),
						ϒwebpage,
						λ.NewStr("xhamster url"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒvideo_url))) {
						ϒvars = λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("vars\\s*:\\s*({.+?})\\s*,\\s*\\n"), ϒwebpage, λ.NewStr("vars")), ϒvideo_id)
						ϒvideo_url = λ.Cal(ϒdict_get, ϒvars, λ.NewTuple(
							λ.NewStr("downloadLink"),
							λ.NewStr("homepageLink"),
							λ.NewStr("commentsLink"),
							λ.NewStr("shareUrl"),
						))
					}
					return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), ϒvideo_url, λ.NewStr("XHamster"))
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TEST"):         XHamsterEmbedIE__TEST,
				λ.NewStr("_VALID_URL"):    XHamsterEmbedIE__VALID_URL,
				λ.NewStr("_real_extract"): XHamsterEmbedIE__real_extract,
			})
		}())
	})
}

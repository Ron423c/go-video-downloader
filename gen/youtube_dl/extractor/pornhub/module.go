// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * pornhub/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/pornhub.py
 */

package pornhub

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωopenload "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/openload"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError             λ.Object
	InfoExtractor              λ.Object
	NO_DEFAULT                 λ.Object
	PhantomJSwrapper           λ.Object
	PornHubBaseIE              λ.Object
	PornHubIE                  λ.Object
	PornHubPagedPlaylistBaseIE λ.Object
	PornHubPagedVideoListIE    λ.Object
	PornHubPlaylistBaseIE      λ.Object
	PornHubUserIE              λ.Object
	PornHubUserVideosUploadIE  λ.Object
	ϒcompat_HTTPError          λ.Object
	ϒcompat_str                λ.Object
	ϒdetermine_ext             λ.Object
	ϒint_or_none               λ.Object
	ϒstr_to_int                λ.Object
	ϒurl_or_none               λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_HTTPError = Ωcompat.ϒcompat_HTTPError
		ϒcompat_str = Ωcompat.ϒcompat_str
		PhantomJSwrapper = Ωopenload.PhantomJSwrapper
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		NO_DEFAULT = Ωutils.NO_DEFAULT
		ϒstr_to_int = Ωutils.ϒstr_to_int
		ϒurl_or_none = Ωutils.ϒurl_or_none
		PornHubBaseIE = λ.Cal(λ.TypeType, λ.StrLiteral("PornHubBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {

			return λ.ClassDictLiteral(map[λ.Object]λ.Object{})
		}())
		PornHubIE = λ.Cal(λ.TypeType, λ.StrLiteral("PornHubIE"), λ.NewTuple(PornHubBaseIE), func() λ.Dict {
			var (
				PornHubIE__VALID_URL λ.Object
			)
			PornHubIE__VALID_URL = λ.StrLiteral("(?x)\n                    https?://\n                        (?:\n                            (?:[^/]+\\.)?(?P<host>pornhub(?:premium)?\\.(?:com|net))/(?:(?:view_video\\.php|video/show)\\?viewkey=|embed/)|\n                            (?:www\\.)?thumbzilla\\.com/video/\n                        )\n                        (?P<id>[\\da-z]+)\n                    ")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": PornHubIE__VALID_URL,
			})
		}())
		PornHubPlaylistBaseIE = λ.Cal(λ.TypeType, λ.StrLiteral("PornHubPlaylistBaseIE"), λ.NewTuple(PornHubBaseIE), func() λ.Dict {

			return λ.ClassDictLiteral(map[λ.Object]λ.Object{})
		}())
		PornHubUserIE = λ.Cal(λ.TypeType, λ.StrLiteral("PornHubUserIE"), λ.NewTuple(PornHubPlaylistBaseIE), func() λ.Dict {
			var (
				PornHubUserIE__VALID_URL λ.Object
			)
			PornHubUserIE__VALID_URL = λ.StrLiteral("(?P<url>https?://(?:[^/]+\\.)?(?P<host>pornhub(?:premium)?\\.(?:com|net))/(?:(?:user|channel)s|model|pornstar)/(?P<id>[^/?#&]+))(?:[?#&]|/(?!videos)|$)")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": PornHubUserIE__VALID_URL,
			})
		}())
		PornHubPagedPlaylistBaseIE = λ.Cal(λ.TypeType, λ.StrLiteral("PornHubPagedPlaylistBaseIE"), λ.NewTuple(PornHubPlaylistBaseIE), func() λ.Dict {

			return λ.ClassDictLiteral(map[λ.Object]λ.Object{})
		}())
		PornHubPagedVideoListIE = λ.Cal(λ.TypeType, λ.StrLiteral("PornHubPagedVideoListIE"), λ.NewTuple(PornHubPagedPlaylistBaseIE), func() λ.Dict {
			var (
				PornHubPagedVideoListIE__VALID_URL λ.Object
				PornHubPagedVideoListIE_suitable   λ.Object
			)
			PornHubPagedVideoListIE__VALID_URL = λ.StrLiteral("https?://(?:[^/]+\\.)?(?P<host>pornhub(?:premium)?\\.(?:com|net))/(?P<id>(?:[^/]+/)*[^/?#&]+)")
			PornHubPagedVideoListIE_suitable = λ.NewFunction("suitable",
				[]λ.Param{
					{Name: "cls"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls = λargs[0]
						ϒurl = λargs[1]
					)
					return func() λ.Object {
						if λ.IsTrue(func() λ.Object {
							if λv := λ.Calm(PornHubIE, "suitable", ϒurl); λ.IsTrue(λv) {
								return λv
							} else if λv := λ.Calm(PornHubUserIE, "suitable", ϒurl); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Calm(PornHubUserVideosUploadIE, "suitable", ϒurl)
							}
						}()) {
							return λ.False
						} else {
							return λ.Calm(λ.Cal(λ.SuperType, PornHubPagedVideoListIE, ϒcls), "suitable", ϒurl)
						}
					}()
				})
			PornHubPagedVideoListIE_suitable = λ.Cal(λ.ClassMethodType, PornHubPagedVideoListIE_suitable)
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": PornHubPagedVideoListIE__VALID_URL,
				"suitable":   PornHubPagedVideoListIE_suitable,
			})
		}())
		PornHubUserVideosUploadIE = λ.Cal(λ.TypeType, λ.StrLiteral("PornHubUserVideosUploadIE"), λ.NewTuple(PornHubPagedPlaylistBaseIE), func() λ.Dict {
			var (
				PornHubUserVideosUploadIE__VALID_URL λ.Object
			)
			PornHubUserVideosUploadIE__VALID_URL = λ.StrLiteral("(?P<url>https?://(?:[^/]+\\.)?(?P<host>pornhub(?:premium)?\\.(?:com|net))/(?:(?:user|channel)s|model|pornstar)/(?P<id>[^/]+)/videos/upload)")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": PornHubUserVideosUploadIE__VALID_URL,
			})
		}())
		λ.GetAttr(PhantomJSwrapper, "__init__", nil)
		λ.GetAttr(PhantomJSwrapper, "get", nil)
	})
}

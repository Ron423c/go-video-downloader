// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * pornhub/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/pornhub.py
 */

package pornhub

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError        λ.Object
	InfoExtractor         λ.Object
	PornHubBaseIE         λ.Object
	PornHubIE             λ.Object
	PornHubPlaylistBaseIE λ.Object
	PornHubPlaylistIE     λ.Object
	PornHubUserVideosIE   λ.Object
	ϒcompat_HTTPError     λ.Object
	ϒcompat_str           λ.Object
	ϒint_or_none          λ.Object
	ϒjs_to_json           λ.Object
	ϒorderedSet           λ.Object
	ϒstr_to_int           λ.Object
	ϒurl_or_none          λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_HTTPError = Ωcompat.ϒcompat_HTTPError
		ϒcompat_str = Ωcompat.ϒcompat_str
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒjs_to_json = Ωutils.ϒjs_to_json
		ϒorderedSet = Ωutils.ϒorderedSet
		ϒstr_to_int = Ωutils.ϒstr_to_int
		ϒurl_or_none = Ωutils.ϒurl_or_none
		PornHubBaseIE = λ.Cal(λ.TypeType, λ.NewStr("PornHubBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {

			return λ.NewDictWithTable(map[λ.Object]λ.Object{})
		}())
		PornHubIE = λ.Cal(λ.TypeType, λ.NewStr("PornHubIE"), λ.NewTuple(PornHubBaseIE), func() λ.Dict {
			var (
				PornHubIE__VALID_URL λ.Object
			)
			PornHubIE__VALID_URL = λ.NewStr("(?x)\n                    https?://\n                        (?:\n                            (?:[^/]+\\.)?(?P<host>pornhub\\.(?:com|net))/(?:(?:view_video\\.php|video/show)\\?viewkey=|embed/)|\n                            (?:www\\.)?thumbzilla\\.com/video/\n                        )\n                        (?P<id>[\\da-z]+)\n                    ")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): PornHubIE__VALID_URL,
			})
		}())
		PornHubPlaylistBaseIE = λ.Cal(λ.TypeType, λ.NewStr("PornHubPlaylistBaseIE"), λ.NewTuple(PornHubBaseIE), func() λ.Dict {

			return λ.NewDictWithTable(map[λ.Object]λ.Object{})
		}())
		PornHubPlaylistIE = λ.Cal(λ.TypeType, λ.NewStr("PornHubPlaylistIE"), λ.NewTuple(PornHubPlaylistBaseIE), func() λ.Dict {
			var (
				PornHubPlaylistIE__VALID_URL λ.Object
			)
			PornHubPlaylistIE__VALID_URL = λ.NewStr("https?://(?:[^/]+\\.)?(?P<host>pornhub\\.(?:com|net))/playlist/(?P<id>\\d+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): PornHubPlaylistIE__VALID_URL,
			})
		}())
		PornHubUserVideosIE = λ.Cal(λ.TypeType, λ.NewStr("PornHubUserVideosIE"), λ.NewTuple(PornHubPlaylistBaseIE), func() λ.Dict {
			var (
				PornHubUserVideosIE__VALID_URL λ.Object
			)
			PornHubUserVideosIE__VALID_URL = λ.NewStr("https?://(?:[^/]+\\.)?(?P<host>pornhub\\.(?:com|net))/(?:(?:user|channel)s|model|pornstar)/(?P<id>[^/]+)/videos")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): PornHubUserVideosIE__VALID_URL,
			})
		}())
	})
}

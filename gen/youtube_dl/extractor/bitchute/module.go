// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * bitchute/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/bitchute.py
 */

package bitchute

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	BitChuteChannelIE   λ.Object
	BitChuteIE          λ.Object
	InfoExtractor       λ.Object
	ϒorderedSet         λ.Object
	ϒunified_strdate    λ.Object
	ϒurlencode_postdata λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒorderedSet = Ωutils.ϒorderedSet
		ϒunified_strdate = Ωutils.ϒunified_strdate
		ϒurlencode_postdata = Ωutils.ϒurlencode_postdata
		BitChuteIE = λ.Cal(λ.TypeType, λ.StrLiteral("BitChuteIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				BitChuteIE__VALID_URL    λ.Object
				BitChuteIE__real_extract λ.Object
			)
			BitChuteIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?bitchute\\.com/(?:video|embed|torrent/[^/]+)/(?P<id>[^/?#&]+)")
			BitChuteIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdescription λ.Object
						ϒformat_urls λ.Object
						ϒformats     λ.Object
						ϒmobj        λ.Object
						ϒself        = λargs[0]
						ϒthumbnail   λ.Object
						ϒtitle       λ.Object
						ϒupload_date λ.Object
						ϒuploader    λ.Object
						ϒurl         = λargs[1]
						ϒvideo_id    λ.Object
						ϒwebpage     λ.Object
						τmp0         λ.Object
						τmp1         λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
						λ.Mod(λ.StrLiteral("https://www.bitchute.com/video/%s"), ϒvideo_id),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "headers", Value: λ.DictLiteral(map[string]string{
							"User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.57 Safari/537.36",
						})},
					})
					ϒtitle = func() λ.Object {
						if λv := λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
							λ.NewTuple(
								λ.StrLiteral("<[^>]+\\bid=[\"\\']video-title[^>]+>([^<]+)"),
								λ.StrLiteral("<title>([^<]+)"),
							),
							ϒwebpage,
							λ.StrLiteral("title"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}); λ.IsTrue(λv) {
							return λv
						} else if λv := λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
							λ.StrLiteral("description"),
							ϒwebpage,
							λ.StrLiteral("title"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒself, "_og_search_description", ϒwebpage)
						}
					}()
					ϒformat_urls = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfinditer, λ.StrLiteral("addWebSeed\\s*\\(\\s*([\"\\'])(?P<url>(?:(?!\\1).)+)\\1"), ϒwebpage))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒmobj = τmp1
						λ.Calm(ϒformat_urls, "append", λ.Calm(ϒmobj, "group", λ.StrLiteral("url")))
					}
					λ.Calm(ϒformat_urls, "extend", λ.Cal(Ωre.ϒfindall, λ.StrLiteral("as=(https?://[^&\"\\']+)"), ϒwebpage))
					ϒformats = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒformat_url λ.Object
									τmp0        λ.Object
									τmp1        λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(ϒorderedSet, ϒformat_urls))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒformat_url = τmp1
									λgy.Yield(λ.DictLiteral(map[string]λ.Object{
										"url": ϒformat_url,
									}))
								}
								return λ.None
							})
						})))
					if !λ.IsTrue(ϒformats) {
						ϒformats = λ.GetItem(λ.GetItem(λ.Calm(ϒself, "_parse_html5_media_entries", ϒurl, ϒwebpage, ϒvideo_id), λ.IntLiteral(0)), λ.StrLiteral("formats"))
					}
					λ.Calm(ϒself, "_check_formats", ϒformats, ϒvideo_id)
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					ϒdescription = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("(?s)<div\\b[^>]+\\bclass=[\"\\']full hidden[^>]+>(.+?)</div>"),
						ϒwebpage,
						λ.StrLiteral("description"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					ϒthumbnail = func() λ.Object {
						if λv := λ.Call(λ.GetAttr(ϒself, "_og_search_thumbnail", nil), λ.NewArgs(ϒwebpage), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒself, "_html_search_meta", λ.StrLiteral("twitter:image:src"), ϒwebpage, λ.StrLiteral("thumbnail"))
						}
					}()
					ϒuploader = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
						λ.NewTuple(
							λ.StrLiteral("(?s)<div class=[\"\\']channel-banner.*?<p\\b[^>]+\\bclass=[\"\\']name[^>]+>(.+?)</p>"),
							λ.StrLiteral("(?s)<p\\b[^>]+\\bclass=[\"\\']video-author[^>]+>(.+?)</p>"),
						),
						ϒwebpage,
						λ.StrLiteral("uploader"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					ϒupload_date = λ.Cal(ϒunified_strdate, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("class=[\"\\']video-publish-date[^>]+>[^<]+ at \\d+:\\d+ UTC on (.+?)\\."),
						ϒwebpage,
						λ.StrLiteral("upload date"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					}))
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒvideo_id,
						"title":       ϒtitle,
						"description": ϒdescription,
						"thumbnail":   ϒthumbnail,
						"uploader":    ϒuploader,
						"upload_date": ϒupload_date,
						"formats":     ϒformats,
					})
				})
			return λ.DictLiteral(map[string]λ.Object{
				"_VALID_URL":    BitChuteIE__VALID_URL,
				"_real_extract": BitChuteIE__real_extract,
			})
		}())
		BitChuteChannelIE = λ.Cal(λ.TypeType, λ.StrLiteral("BitChuteChannelIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				BitChuteChannelIE__VALID_URL λ.Object
			)
			BitChuteChannelIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?bitchute\\.com/channel/(?P<id>[^/?#&]+)")
			return λ.DictLiteral(map[string]λ.Object{
				"_VALID_URL": BitChuteChannelIE__VALID_URL,
			})
		}())
	})
}

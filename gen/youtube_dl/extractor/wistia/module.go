// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * wistia/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/wistia.py
 */

package wistia

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError λ.Object
	InfoExtractor  λ.Object
	WistiaIE       λ.Object
	ϒfloat_or_none λ.Object
	ϒint_or_none   λ.Object
	ϒunescapeHTML  λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒunescapeHTML = Ωutils.ϒunescapeHTML
		WistiaIE = λ.Cal(λ.TypeType, λ.NewStr("WistiaIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				WistiaIE__API_URL      λ.Object
				WistiaIE__IFRAME_URL   λ.Object
				WistiaIE__VALID_URL    λ.Object
				WistiaIE__extract_url  λ.Object
				WistiaIE__real_extract λ.Object
			)
			WistiaIE__VALID_URL = λ.NewStr("(?:wistia:|https?://(?:fast\\.)?wistia\\.(?:net|com)/embed/iframe/)(?P<id>[a-z0-9]+)")
			WistiaIE__API_URL = λ.NewStr("http://fast.wistia.com/embed/medias/%s.json")
			WistiaIE__IFRAME_URL = λ.NewStr("http://fast.wistia.net/embed/iframe/%s")
			WistiaIE__extract_url = λ.NewFunction("_extract_url",
				[]λ.Param{
					{Name: "webpage"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒmatch   λ.Object
						ϒwebpage = λargs[0]
					)
					ϒmatch = λ.Cal(Ωre.ϒsearch, λ.NewStr("<(?:meta[^>]+?content|iframe[^>]+?src)=([\"\\'])(?P<url>(?:https?:)?//(?:fast\\.)?wistia\\.(?:net|com)/embed/iframe/.+?)\\1"), ϒwebpage)
					if λ.IsTrue(ϒmatch) {
						return λ.Cal(ϒunescapeHTML, λ.Cal(λ.GetAttr(ϒmatch, "group", nil), λ.NewStr("url")))
					}
					ϒmatch = λ.Cal(Ωre.ϒsearch, λ.NewStr("(?:id=[\"\\']wistia_|data-wistia-?id=[\"\\']|Wistia\\.embed\\([\"\\'])(?P<id>[^\"\\']+)"), ϒwebpage)
					if λ.IsTrue(ϒmatch) {
						return λ.Mod(λ.NewStr("wistia:%s"), λ.Cal(λ.GetAttr(ϒmatch, "group", nil), λ.NewStr("id")))
					}
					ϒmatch = λ.Cal(Ωre.ϒsearch, λ.NewStr("(?sx)\n                <script[^>]+src=([\"'])(?:https?:)?//fast\\.wistia\\.com/assets/external/E-v1\\.js\\1[^>]*>.*?\n                <div[^>]+class=([\"']).*?\\bwistia_async_(?P<id>[a-z0-9]+)\\b.*?\\2\n            "), ϒwebpage)
					if λ.IsTrue(ϒmatch) {
						return λ.Mod(λ.NewStr("wistia:%s"), λ.Cal(λ.GetAttr(ϒmatch, "group", nil), λ.NewStr("id")))
					}
					return λ.None
				})
			WistiaIE__extract_url = λ.Cal(λ.StaticMethodType, WistiaIE__extract_url)
			WistiaIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒa          λ.Object
						ϒaext       λ.Object
						ϒastatus    λ.Object
						ϒatype      λ.Object
						ϒaurl       λ.Object
						ϒdata       λ.Object
						ϒdata_json  λ.Object
						ϒformats    λ.Object
						ϒis_m3u8    λ.Object
						ϒself       = λargs[0]
						ϒthumbnails λ.Object
						ϒtitle      λ.Object
						ϒurl        = λargs[1]
						ϒvideo_id   λ.Object
						τmp0        λ.Object
						τmp1        λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒdata_json = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Mod(λ.GetAttr(ϒself, "_API_URL", nil), ϒvideo_id),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "headers", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("Referer"): func() λ.Object {
								if λ.IsTrue(λ.Cal(λ.GetAttr(ϒurl, "startswith", nil), λ.NewStr("http"))) {
									return ϒurl
								} else {
									return λ.Mod(λ.GetAttr(ϒself, "_IFRAME_URL", nil), ϒvideo_id)
								}
							}(),
						})},
					})
					if λ.IsTrue(λ.Cal(λ.GetAttr(ϒdata_json, "get", nil), λ.NewStr("error"))) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.NewStr("Error while getting the playlist")), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒdata = λ.GetItem(ϒdata_json, λ.NewStr("media"))
					ϒtitle = λ.GetItem(ϒdata, λ.NewStr("name"))
					ϒformats = λ.NewList()
					ϒthumbnails = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.GetItem(ϒdata, λ.NewStr("assets")))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒa = τmp1
						ϒaurl = λ.Cal(λ.GetAttr(ϒa, "get", nil), λ.NewStr("url"))
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒaurl))) {
							continue
						}
						ϒastatus = λ.Cal(λ.GetAttr(ϒa, "get", nil), λ.NewStr("status"))
						ϒatype = λ.Cal(λ.GetAttr(ϒa, "get", nil), λ.NewStr("type"))
						if λ.IsTrue(func() λ.Object {
							if λv := func() λ.Object {
								if λv := λ.NewBool(ϒastatus != λ.None); !λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Ne(ϒastatus, λ.NewInt(2))
								}
							}(); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(λ.Contains(λ.NewTuple(
									λ.NewStr("preview"),
									λ.NewStr("storyboard"),
								), ϒatype))
							}
						}()) {
							continue
						} else {
							if λ.IsTrue(λ.NewBool(λ.Contains(λ.NewTuple(
								λ.NewStr("still"),
								λ.NewStr("still_image"),
							), ϒatype))) {
								λ.Cal(λ.GetAttr(ϒthumbnails, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("url"):    ϒaurl,
									λ.NewStr("width"):  λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒa, "get", nil), λ.NewStr("width"))),
									λ.NewStr("height"): λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒa, "get", nil), λ.NewStr("height"))),
								}))
							} else {
								ϒaext = λ.Cal(λ.GetAttr(ϒa, "get", nil), λ.NewStr("ext"))
								ϒis_m3u8 = func() λ.Object {
									if λv := λ.Eq(λ.Cal(λ.GetAttr(ϒa, "get", nil), λ.NewStr("container")), λ.NewStr("m3u8")); λ.IsTrue(λv) {
										return λv
									} else {
										return λ.Eq(ϒaext, λ.NewStr("m3u8"))
									}
								}()
								λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("format_id"): ϒatype,
									λ.NewStr("url"):       ϒaurl,
									λ.NewStr("tbr"):       λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒa, "get", nil), λ.NewStr("bitrate"))),
									λ.NewStr("vbr"):       λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒa, "get", nil), λ.NewStr("opt_vbitrate"))),
									λ.NewStr("width"):     λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒa, "get", nil), λ.NewStr("width"))),
									λ.NewStr("height"):    λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒa, "get", nil), λ.NewStr("height"))),
									λ.NewStr("filesize"):  λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒa, "get", nil), λ.NewStr("size"))),
									λ.NewStr("vcodec"):    λ.Cal(λ.GetAttr(ϒa, "get", nil), λ.NewStr("codec")),
									λ.NewStr("container"): λ.Cal(λ.GetAttr(ϒa, "get", nil), λ.NewStr("container")),
									λ.NewStr("ext"): func() λ.Object {
										if λ.IsTrue(ϒis_m3u8) {
											return λ.NewStr("mp4")
										} else {
											return ϒaext
										}
									}(),
									λ.NewStr("protocol"): func() λ.Object {
										if λ.IsTrue(ϒis_m3u8) {
											return λ.NewStr("m3u8")
										} else {
											return λ.None
										}
									}(),
									λ.NewStr("preference"): func() λ.Object {
										if λ.IsTrue(λ.Eq(ϒatype, λ.NewStr("original"))) {
											return λ.NewInt(1)
										} else {
											return λ.None
										}
									}(),
								}))
							}
						}
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("title"):       ϒtitle,
						λ.NewStr("description"): λ.Cal(λ.GetAttr(ϒdata, "get", nil), λ.NewStr("seoDescription")),
						λ.NewStr("formats"):     ϒformats,
						λ.NewStr("thumbnails"):  ϒthumbnails,
						λ.NewStr("duration"):    λ.Cal(ϒfloat_or_none, λ.Cal(λ.GetAttr(ϒdata, "get", nil), λ.NewStr("duration"))),
						λ.NewStr("timestamp"):   λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒdata, "get", nil), λ.NewStr("createdAt"))),
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_API_URL"):      WistiaIE__API_URL,
				λ.NewStr("_IFRAME_URL"):   WistiaIE__IFRAME_URL,
				λ.NewStr("_VALID_URL"):    WistiaIE__VALID_URL,
				λ.NewStr("_extract_url"):  WistiaIE__extract_url,
				λ.NewStr("_real_extract"): WistiaIE__real_extract,
			})
		}())
	})
}

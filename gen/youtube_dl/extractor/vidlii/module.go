// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * vidlii/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/vidlii.py
 */

package vidlii

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor      λ.Object
	VidLiiIE           λ.Object
	ϒfloat_or_none     λ.Object
	ϒget_element_by_id λ.Object
	ϒint_or_none       λ.Object
	ϒstrip_or_none     λ.Object
	ϒunified_strdate   λ.Object
	ϒurljoin           λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒget_element_by_id = Ωutils.ϒget_element_by_id
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒstrip_or_none = Ωutils.ϒstrip_or_none
		ϒunified_strdate = Ωutils.ϒunified_strdate
		ϒurljoin = Ωutils.ϒurljoin
		VidLiiIE = λ.Cal(λ.TypeType, λ.StrLiteral("VidLiiIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				VidLiiIE__VALID_URL    λ.Object
				VidLiiIE__real_extract λ.Object
			)
			VidLiiIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?vidlii\\.com/(?:watch|embed)\\?.*?\\bv=(?P<id>[0-9A-Za-z_-]{11})")
			VidLiiIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒaverage_rating λ.Object
						ϒcategories     λ.Object
						ϒcategory       λ.Object
						ϒcomment_count  λ.Object
						ϒdescription    λ.Object
						ϒduration       λ.Object
						ϒself           = λargs[0]
						ϒtags           λ.Object
						ϒthumbnail      λ.Object
						ϒthumbnail_path λ.Object
						ϒtitle          λ.Object
						ϒupload_date    λ.Object
						ϒuploader       λ.Object
						ϒuploader_url   λ.Object
						ϒurl            = λargs[1]
						ϒvideo_id       λ.Object
						ϒvideo_url      λ.Object
						ϒview_count     λ.Object
						ϒwebpage        λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", λ.Mod(λ.StrLiteral("https://www.vidlii.com/watch?v=%s"), ϒvideo_id), ϒvideo_id)
					ϒvideo_url = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("src\\s*:\\s*([\"\\'])(?P<url>(?:https?://)?(?:(?!\\1).)+)\\1"),
						ϒwebpage,
						λ.StrLiteral("video url"),
					), λ.KWArgs{
						{Name: "group", Value: λ.StrLiteral("url")},
					})
					ϒtitle = λ.Calm(ϒself, "_search_regex", λ.NewTuple(
						λ.StrLiteral("<h1>([^<]+)</h1>"),
						λ.StrLiteral("<title>([^<]+) - VidLii<"),
					), ϒwebpage, λ.StrLiteral("title"))
					ϒdescription = func() λ.Object {
						if λv := λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
							λ.NewTuple(
								λ.StrLiteral("description"),
								λ.StrLiteral("twitter:description"),
							),
							ϒwebpage,
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(ϒstrip_or_none, λ.Cal(ϒget_element_by_id, λ.StrLiteral("des_text"), ϒwebpage))
						}
					}()
					ϒthumbnail = λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
						λ.StrLiteral("twitter:image"),
						ϒwebpage,
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if !λ.IsTrue(ϒthumbnail) {
						ϒthumbnail_path = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.StrLiteral("img\\s*:\\s*([\"\\'])(?P<url>(?:(?!\\1).)+)\\1"),
							ϒwebpage,
							λ.StrLiteral("thumbnail"),
						), λ.KWArgs{
							{Name: "fatal", Value: λ.False},
							{Name: "group", Value: λ.StrLiteral("url")},
						})
						if λ.IsTrue(ϒthumbnail_path) {
							ϒthumbnail = λ.Cal(ϒurljoin, ϒurl, ϒthumbnail_path)
						}
					}
					ϒuploader = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("<div[^>]+class=[\"\\']wt_person[^>]+>\\s*<a[^>]+\\bhref=[\"\\']/user/[^>]+>([^<]+)"),
						ϒwebpage,
						λ.StrLiteral("uploader"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					ϒuploader_url = func() λ.Object {
						if λ.IsTrue(ϒuploader) {
							return λ.Mod(λ.StrLiteral("https://www.vidlii.com/user/%s"), ϒuploader)
						} else {
							return λ.None
						}
					}()
					ϒupload_date = λ.Cal(ϒunified_strdate, func() λ.Object {
						if λv := λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
							λ.StrLiteral("datePublished"),
							ϒwebpage,
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
								λ.StrLiteral("<date>([^<]+)"),
								ϒwebpage,
								λ.StrLiteral("upload date"),
							), λ.KWArgs{
								{Name: "fatal", Value: λ.False},
							})
						}
					}())
					ϒduration = λ.Cal(ϒint_or_none, func() λ.Object {
						if λv := λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
							λ.StrLiteral("video:duration"),
							ϒwebpage,
							λ.StrLiteral("duration"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
								λ.StrLiteral("duration\\s*:\\s*(\\d+)"),
								ϒwebpage,
								λ.StrLiteral("duration"),
							), λ.KWArgs{
								{Name: "fatal", Value: λ.False},
							})
						}
					}())
					ϒview_count = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewTuple(
							λ.StrLiteral("<strong>(\\d+)</strong> views"),
							λ.StrLiteral("Views\\s*:\\s*<strong>(\\d+)</strong>"),
						),
						ϒwebpage,
						λ.StrLiteral("view count"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					}))
					ϒcomment_count = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewTuple(
							λ.StrLiteral("<span[^>]+id=[\"\\']cmt_num[^>]+>(\\d+)"),
							λ.StrLiteral("Comments\\s*:\\s*<strong>(\\d+)"),
						),
						ϒwebpage,
						λ.StrLiteral("comment count"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					}))
					ϒaverage_rating = λ.Cal(ϒfloat_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("rating\\s*:\\s*([\\d.]+)"),
						ϒwebpage,
						λ.StrLiteral("average rating"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					}))
					ϒcategory = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("<div>Category\\s*:\\s*</div>\\s*<div>\\s*<a[^>]+>([^<]+)"),
						ϒwebpage,
						λ.StrLiteral("category"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					ϒcategories = func() λ.Object {
						if λ.IsTrue(ϒcategory) {
							return λ.NewList(ϒcategory)
						} else {
							return λ.None
						}
					}()
					ϒtags = func() λ.Object {
						if λv := λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
							nil,
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
									var (
										ϒtag λ.Object
										τmp0 λ.Object
										τmp1 λ.Object
									)
									τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfindall, λ.StrLiteral("<a[^>]+\\bhref=[\"\\']/results\\?.*?q=[^>]*>([^<]+)"), ϒwebpage))
									for {
										if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
											break
										}
										ϒtag = τmp1
										if λ.IsTrue(λ.Cal(ϒstrip_or_none, ϒtag)) {
											λgy.Yield(λ.Cal(ϒstrip_or_none, ϒtag))
										}
									}
									return λ.None
								})
							}))); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.None
						}
					}()
					return λ.DictLiteral(map[string]λ.Object{
						"id":             ϒvideo_id,
						"url":            ϒvideo_url,
						"title":          ϒtitle,
						"description":    ϒdescription,
						"thumbnail":      ϒthumbnail,
						"uploader":       ϒuploader,
						"uploader_url":   ϒuploader_url,
						"upload_date":    ϒupload_date,
						"duration":       ϒduration,
						"view_count":     ϒview_count,
						"comment_count":  ϒcomment_count,
						"average_rating": ϒaverage_rating,
						"categories":     ϒcategories,
						"tags":           ϒtags,
					})
				})
			return λ.DictLiteral(map[string]λ.Object{
				"_VALID_URL":    VidLiiIE__VALID_URL,
				"_real_extract": VidLiiIE__real_extract,
			})
		}())
	})
}

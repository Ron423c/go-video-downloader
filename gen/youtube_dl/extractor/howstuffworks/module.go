// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * howstuffworks/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/howstuffworks.py
 */

package howstuffworks

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	HowStuffWorksIE  λ.Object
	InfoExtractor    λ.Object
	ϒdetermine_ext   λ.Object
	ϒfind_xpath_attr λ.Object
	ϒint_or_none     λ.Object
	ϒjs_to_json      λ.Object
	ϒunescapeHTML    λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒfind_xpath_attr = Ωutils.ϒfind_xpath_attr
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒjs_to_json = Ωutils.ϒjs_to_json
		ϒunescapeHTML = Ωutils.ϒunescapeHTML
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		HowStuffWorksIE = λ.Cal(λ.TypeType, λ.NewStr("HowStuffWorksIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				HowStuffWorksIE__VALID_URL    λ.Object
				HowStuffWorksIE__real_extract λ.Object
			)
			HowStuffWorksIE__VALID_URL = λ.NewStr("https?://[\\da-z-]+\\.(?:howstuffworks|stuff(?:(?:youshould|theydontwantyouto)know|toblowyourmind|momnevertoldyou)|(?:brain|car)stuffshow|fwthinking|geniusstuff)\\.com/(?:[^/]+/)*(?:\\d+-)?(?P<id>.+?)-video\\.htm")
			HowStuffWorksIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						URL_SUFFIX  λ.Object
						ϒclip_info  λ.Object
						ϒclip_js    λ.Object
						ϒdisplay_id λ.Object
						ϒflv_url    λ.Object
						ϒformats    λ.Object
						ϒhttp_base  λ.Object
						ϒm3u8_url   λ.Object
						ϒself       = λargs[0]
						ϒsmil       λ.Object
						ϒurl        = λargs[1]
						ϒvbr        λ.Object
						ϒvideo      λ.Object
						ϒvideo_id   λ.Object
						ϒwebpage    λ.Object
						τmp0        λ.Object
						τmp1        λ.Object
					)
					ϒdisplay_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒdisplay_id)
					ϒclip_js = λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("(?s)var clip = ({.*?});"), ϒwebpage, λ.NewStr("clip info"))
					ϒclip_info = λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
						ϒclip_js,
						ϒdisplay_id,
					), λ.KWArgs{
						{Name: "transform_source", Value: ϒjs_to_json},
					})
					ϒvideo_id = λ.GetItem(ϒclip_info, λ.NewStr("content_id"))
					ϒformats = λ.NewList()
					ϒm3u8_url = λ.Cal(λ.GetAttr(ϒclip_info, "get", nil), λ.NewStr("m3u8"))
					if λ.IsTrue(func() λ.Object {
						if λv := ϒm3u8_url; !λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Eq(λ.Cal(ϒdetermine_ext, ϒm3u8_url), λ.NewStr("m3u8"))
						}
					}()) {
						λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
							ϒm3u8_url,
							ϒvideo_id,
							λ.NewStr("mp4"),
						), λ.KWArgs{
							{Name: "format_id", Value: λ.NewStr("hls")},
							{Name: "fatal", Value: λ.True},
						}))
					}
					ϒflv_url = λ.Cal(λ.GetAttr(ϒclip_info, "get", nil), λ.NewStr("flv_url"))
					if λ.IsTrue(ϒflv_url) {
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"):       ϒflv_url,
							λ.NewStr("format_id"): λ.NewStr("flv"),
						}))
					}
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒclip_info, "get", nil), λ.NewStr("mp4"), λ.NewList()))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒvideo = τmp1
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"):       λ.GetItem(ϒvideo, λ.NewStr("src")),
							λ.NewStr("format_id"): λ.Mod(λ.NewStr("mp4-%s"), λ.GetItem(ϒvideo, λ.NewStr("bitrate"))),
							λ.NewStr("vbr"):       λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(λ.GetItem(ϒvideo, λ.NewStr("bitrate")), "rstrip", nil), λ.NewStr("k"))),
						}))
					}
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒformats))) {
						ϒsmil = λ.Cal(λ.GetAttr(ϒself, "_download_xml", nil), λ.Mod(λ.NewStr("http://services.media.howstuffworks.com/videos/%s/smil-service.smil"), ϒvideo_id), ϒvideo_id, λ.NewStr("Downloading video SMIL"))
						ϒhttp_base = λ.Cal(λ.GetAttr(λ.Cal(ϒfind_xpath_attr, ϒsmil, λ.Cal(λ.GetAttr(λ.NewStr("./{0}head/{0}meta"), "format", nil), λ.NewStr("{http://www.w3.org/2001/SMIL20/Language}")), λ.NewStr("name"), λ.NewStr("httpBase")), "get", nil), λ.NewStr("content"))
						URL_SUFFIX = λ.NewStr("?v=2.11.3&fp=LNX 11,2,202,356&r=A&g=A")
						τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒsmil, "findall", nil), λ.Cal(λ.GetAttr(λ.NewStr("./{0}body/{0}switch/{0}video"), "format", nil), λ.NewStr("{http://www.w3.org/2001/SMIL20/Language}"))))
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒvideo = τmp1
							ϒvbr = λ.Call(ϒint_or_none, λ.NewArgs(λ.GetItem(λ.GetAttr(ϒvideo, "attrib", nil), λ.NewStr("system-bitrate"))), λ.KWArgs{
								{Name: "scale", Value: λ.NewInt(1000)},
							})
							λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("url"): λ.Mod(λ.NewStr("%s/%s%s"), λ.NewTuple(
									ϒhttp_base,
									λ.GetItem(λ.GetAttr(ϒvideo, "attrib", nil), λ.NewStr("src")),
									URL_SUFFIX,
								)),
								λ.NewStr("format_id"): λ.Mod(λ.NewStr("%dk"), ϒvbr),
								λ.NewStr("vbr"):       ϒvbr,
							}))
						}
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.Mod(λ.NewStr("%s"), ϒvideo_id),
						λ.NewStr("display_id"):  ϒdisplay_id,
						λ.NewStr("title"):       λ.Cal(ϒunescapeHTML, λ.GetItem(ϒclip_info, λ.NewStr("clip_title"))),
						λ.NewStr("description"): λ.Cal(ϒunescapeHTML, λ.Cal(λ.GetAttr(ϒclip_info, "get", nil), λ.NewStr("caption"))),
						λ.NewStr("thumbnail"):   λ.Cal(λ.GetAttr(ϒclip_info, "get", nil), λ.NewStr("video_still_url")),
						λ.NewStr("duration"):    λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒclip_info, "get", nil), λ.NewStr("duration"))),
						λ.NewStr("formats"):     ϒformats,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"):    HowStuffWorksIE__VALID_URL,
				λ.NewStr("_real_extract"): HowStuffWorksIE__real_extract,
			})
		}())
	})
}

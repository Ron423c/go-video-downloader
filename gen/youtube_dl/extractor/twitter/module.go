// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * twitter/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/twitter.py
 */

package twitter

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωperiscope "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/periscope"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError   λ.Object
	InfoExtractor    λ.Object
	PeriscopeIE      λ.Object
	TwitterAmplifyIE λ.Object
	TwitterBaseIE    λ.Object
	TwitterCardIE    λ.Object
	TwitterIE        λ.Object
	ϒdetermine_ext   λ.Object
	ϒdict_get        λ.Object
	ϒfloat_or_none   λ.Object
	ϒint_or_none     λ.Object
	ϒremove_end      λ.Object
	ϒtry_get         λ.Object
	ϒxpath_text      λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ϒdict_get = Ωutils.ϒdict_get
		ExtractorError = Ωutils.ExtractorError
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒremove_end = Ωutils.ϒremove_end
		ϒtry_get = Ωutils.ϒtry_get
		ϒxpath_text = Ωutils.ϒxpath_text
		PeriscopeIE = Ωperiscope.PeriscopeIE
		TwitterBaseIE = λ.Cal(λ.TypeType, λ.NewStr("TwitterBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				TwitterBaseIE__extract_formats_from_vmap_url λ.Object
			)
			TwitterBaseIE__extract_formats_from_vmap_url = λ.NewFunction("_extract_formats_from_vmap_url",
				[]λ.Param{
					{Name: "self"},
					{Name: "vmap_url"},
					{Name: "video_id"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒself      = λargs[0]
						ϒvideo_id  = λargs[2]
						ϒvideo_url λ.Object
						ϒvmap_data λ.Object
						ϒvmap_url  = λargs[1]
					)
					ϒvmap_data = λ.Cal(λ.GetAttr(ϒself, "_download_xml", nil), ϒvmap_url, ϒvideo_id)
					ϒvideo_url = λ.Cal(λ.GetAttr(λ.Cal(ϒxpath_text, ϒvmap_data, λ.NewStr(".//MediaFile")), "strip", nil))
					if λ.IsTrue(λ.Eq(λ.Cal(ϒdetermine_ext, ϒvideo_url), λ.NewStr("m3u8"))) {
						return λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
							ϒvideo_url,
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "ext", Value: λ.NewStr("mp4")},
							{Name: "m3u8_id", Value: λ.NewStr("hls")},
							{Name: "entry_protocol", Value: λ.NewStr("m3u8_native")},
						})
					}
					return λ.NewList(λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("url"): ϒvideo_url,
					}))
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_extract_formats_from_vmap_url"): TwitterBaseIE__extract_formats_from_vmap_url,
			})
		}())
		TwitterCardIE = λ.Cal(λ.TypeType, λ.NewStr("TwitterCardIE"), λ.NewTuple(TwitterBaseIE), func() λ.Dict {
			var (
				TwitterCardIE_IE_NAME       λ.Object
				TwitterCardIE__API_BASE     λ.Object
				TwitterCardIE__VALID_URL    λ.Object
				TwitterCardIE__real_extract λ.Object
			)
			TwitterCardIE_IE_NAME = λ.NewStr("twitter:card")
			TwitterCardIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?twitter\\.com/i/(?P<path>cards/tfw/v1|videos(?:/tweet)?)/(?P<id>\\d+)")
			TwitterCardIE__API_BASE = λ.NewStr("https://api.twitter.com/1.1")
			TwitterCardIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒconfig        λ.Object
						ϒct0           λ.Object
						ϒduration      λ.Object
						ϒentity        λ.Object
						ϒf             λ.Object
						ϒformats       λ.Object
						ϒguest_token   λ.Object
						ϒheaders       λ.Object
						ϒiframe_url    λ.Object
						ϒmedia_info    λ.Object
						ϒpath          λ.Object
						ϒperiscope_url λ.Object
						ϒplayback_url  λ.Object
						ϒself          = λargs[0]
						ϒthumbnail     λ.Object
						ϒtitle         λ.Object
						ϒtrack         λ.Object
						ϒu             λ.Object
						ϒurl           = λargs[1]
						ϒurls          λ.Object
						ϒusername      λ.Object
						ϒvideo_id      λ.Object
						ϒvideo_url     λ.Object
						ϒvmap_url      λ.Object
						ϒwebpage       λ.Object
						τmp0           λ.Object
						τmp1           λ.Object
						τmp2           λ.Object
						τmp3           λ.Object
					)
					τmp0 = λ.Cal(λ.GetAttr(λ.Cal(Ωre.ϒsearch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups", nil))
					ϒpath = λ.GetItem(τmp0, λ.NewInt(0))
					ϒvideo_id = λ.GetItem(τmp0, λ.NewInt(1))
					ϒconfig = λ.None
					ϒformats = λ.NewList()
					ϒduration = λ.None
					ϒurls = λ.NewList(ϒurl)
					if λ.IsTrue(λ.Cal(λ.GetAttr(ϒpath, "startswith", nil), λ.NewStr("cards/"))) {
						λ.Cal(λ.GetAttr(ϒurls, "append", nil), λ.Add(λ.NewStr("https://twitter.com/i/videos/"), ϒvideo_id))
					}
					τmp0 = λ.Cal(λ.BuiltinIter, ϒurls)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒu = τmp1
						ϒwebpage = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
							ϒu,
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "headers", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("Referer"): λ.NewStr("https://twitter.com/"),
							})},
						})
						ϒiframe_url = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
							λ.NewStr("<iframe[^>]+src=\"((?:https?:)?//(?:www\\.youtube\\.com/embed/[^\"]+|(?:www\\.)?vine\\.co/v/\\w+/card))\""),
							ϒwebpage,
							λ.NewStr("video iframe"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						})
						if λ.IsTrue(ϒiframe_url) {
							return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), ϒiframe_url)
						}
						ϒconfig = λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
							λ.NewStr("data-(?:player-)?config=\"([^\"]+)\""),
							ϒwebpage,
							λ.NewStr("data player config"),
						), λ.KWArgs{
							{Name: "default", Value: λ.NewStr("{}")},
						}), ϒvideo_id)
						if λ.IsTrue(λ.Eq(λ.Cal(λ.GetAttr(ϒconfig, "get", nil), λ.NewStr("source_type")), λ.NewStr("vine"))) {
							return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), λ.GetItem(ϒconfig, λ.NewStr("player_url")), λ.NewStr("Vine"))
						}
						ϒperiscope_url = λ.Cal(λ.GetAttr(PeriscopeIE, "_extract_url", nil), ϒwebpage)
						if λ.IsTrue(ϒperiscope_url) {
							return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), ϒperiscope_url, λ.Cal(λ.GetAttr(PeriscopeIE, "ie_key", nil)))
						}
						ϒvideo_url = func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒconfig, "get", nil), λ.NewStr("video_url")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(λ.GetItem(λ.Cal(λ.GetAttr(ϒconfig, "get", nil), λ.NewStr("playlist"), λ.NewList(λ.NewDictWithTable(map[λ.Object]λ.Object{}))), λ.NewInt(0)), "get", nil), λ.NewStr("source"))
							}
						}()
						if λ.IsTrue(ϒvideo_url) {
							if λ.IsTrue(λ.Eq(λ.Cal(ϒdetermine_ext, ϒvideo_url), λ.NewStr("m3u8"))) {
								λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
									ϒvideo_url,
									ϒvideo_id,
								), λ.KWArgs{
									{Name: "ext", Value: λ.NewStr("mp4")},
									{Name: "m3u8_id", Value: λ.NewStr("hls")},
								}))
							} else {
								ϒf = λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("url"): ϒvideo_url,
								})
								λ.Cal(λ.GetAttr(ϒself, "_search_dimensions_in_video_url", nil), ϒf, ϒvideo_url)
								λ.Cal(λ.GetAttr(ϒformats, "append", nil), ϒf)
							}
						}
						ϒvmap_url = func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒconfig, "get", nil), λ.NewStr("vmapUrl")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(ϒconfig, "get", nil), λ.NewStr("vmap_url"))
							}
						}()
						if λ.IsTrue(ϒvmap_url) {
							λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Cal(λ.GetAttr(ϒself, "_extract_formats_from_vmap_url", nil), ϒvmap_url, ϒvideo_id))
						}
						ϒmedia_info = λ.None
						τmp2 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒconfig, "get", nil), λ.NewStr("status"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("entities"), λ.NewList()))
						for {
							if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
								break
							}
							ϒentity = τmp3
							if λ.IsTrue(λ.NewBool(λ.Contains(ϒentity, λ.NewStr("mediaInfo")))) {
								ϒmedia_info = λ.GetItem(ϒentity, λ.NewStr("mediaInfo"))
							}
						}
						if λ.IsTrue(ϒmedia_info) {
							λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Cal(λ.GetAttr(ϒself, "_parse_media_info", nil), ϒmedia_info, ϒvideo_id))
							ϒduration = λ.Call(ϒfloat_or_none, λ.NewArgs(λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒmedia_info, "get", nil), λ.NewStr("duration"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("nanos"))), λ.KWArgs{
								{Name: "scale", Value: λ.NewFloat(1000000000.0)},
							})
						}
						ϒusername = λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒconfig, "get", nil), λ.NewStr("user"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("screen_name"))
						if λ.IsTrue(ϒusername) {
							λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Cal(λ.GetAttr(ϒself, "_extract_mobile_formats", nil), ϒusername, ϒvideo_id))
						}
						if λ.IsTrue(ϒformats) {
							ϒtitle = λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("<title>([^<]+)</title>"), ϒwebpage, λ.NewStr("title"))
							ϒthumbnail = func() λ.Object {
								if λv := λ.Cal(λ.GetAttr(ϒconfig, "get", nil), λ.NewStr("posterImageUrl")); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Cal(λ.GetAttr(ϒconfig, "get", nil), λ.NewStr("image_src"))
								}
							}()
							ϒduration = func() λ.Object {
								if λv := λ.Call(ϒfloat_or_none, λ.NewArgs(λ.Cal(λ.GetAttr(ϒconfig, "get", nil), λ.NewStr("duration"))), λ.KWArgs{
									{Name: "scale", Value: λ.NewInt(1000)},
								}); λ.IsTrue(λv) {
									return λv
								} else {
									return ϒduration
								}
							}()
							break
						}
					}
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒformats))) {
						ϒheaders = λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("Authorization"): λ.NewStr("Bearer AAAAAAAAAAAAAAAAAAAAAPYXBAAAAAAACLXUNDekMxqa8h%2F40K4moUkGsoc%3DTYfbDKbT3jJPCEVnMYqilB28NHfOPqkca3qaAxGfsyKCs0wRbw"),
							λ.NewStr("Referer"):       ϒurl,
						})
						ϒct0 = λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒself, "_get_cookies", nil), ϒurl), "get", nil), λ.NewStr("ct0"))
						if λ.IsTrue(ϒct0) {
							λ.SetItem(ϒheaders, λ.NewStr("csrf_token"), λ.GetAttr(ϒct0, "value", nil))
						}
						ϒguest_token = λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
							λ.Mod(λ.NewStr("%s/guest/activate.json"), λ.GetAttr(ϒself, "_API_BASE", nil)),
							ϒvideo_id,
							λ.NewStr("Downloading guest token"),
						), λ.KWArgs{
							{Name: "data", Value: λ.NewBytes()},
							{Name: "headers", Value: ϒheaders},
						}), λ.NewStr("guest_token"))
						λ.SetItem(ϒheaders, λ.NewStr("x-guest-token"), ϒguest_token)
						λ.Cal(λ.GetAttr(ϒself, "_set_cookie", nil), λ.NewStr("api.twitter.com"), λ.NewStr("gt"), ϒguest_token)
						ϒconfig = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
							λ.Mod(λ.NewStr("%s/videos/tweet/config/%s.json"), λ.NewTuple(
								λ.GetAttr(ϒself, "_API_BASE", nil),
								ϒvideo_id,
							)),
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "headers", Value: ϒheaders},
						})
						ϒtrack = λ.GetItem(ϒconfig, λ.NewStr("track"))
						ϒvmap_url = λ.Cal(λ.GetAttr(ϒtrack, "get", nil), λ.NewStr("vmapUrl"))
						if λ.IsTrue(ϒvmap_url) {
							ϒformats = λ.Cal(λ.GetAttr(ϒself, "_extract_formats_from_vmap_url", nil), ϒvmap_url, ϒvideo_id)
						} else {
							ϒplayback_url = λ.GetItem(ϒtrack, λ.NewStr("playbackUrl"))
							if λ.IsTrue(λ.Eq(λ.Cal(ϒdetermine_ext, ϒplayback_url), λ.NewStr("m3u8"))) {
								ϒformats = λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
									ϒplayback_url,
									ϒvideo_id,
									λ.NewStr("mp4"),
								), λ.KWArgs{
									{Name: "entry_protocol", Value: λ.NewStr("m3u8_native")},
									{Name: "m3u8_id", Value: λ.NewStr("hls")},
								})
							} else {
								ϒformats = λ.NewList(λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("url"): ϒplayback_url,
								}))
							}
						}
						ϒtitle = λ.NewStr("Twitter web player")
						ϒthumbnail = λ.Cal(λ.GetAttr(ϒconfig, "get", nil), λ.NewStr("posterImage"))
						ϒduration = λ.Call(ϒfloat_or_none, λ.NewArgs(λ.Cal(λ.GetAttr(ϒtrack, "get", nil), λ.NewStr("durationMs"))), λ.KWArgs{
							{Name: "scale", Value: λ.NewInt(1000)},
						})
					}
					λ.Cal(λ.GetAttr(ϒself, "_remove_duplicate_formats", nil), ϒformats)
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):        ϒvideo_id,
						λ.NewStr("title"):     ϒtitle,
						λ.NewStr("thumbnail"): ϒthumbnail,
						λ.NewStr("duration"):  ϒduration,
						λ.NewStr("formats"):   ϒformats,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):       TwitterCardIE_IE_NAME,
				λ.NewStr("_API_BASE"):     TwitterCardIE__API_BASE,
				λ.NewStr("_VALID_URL"):    TwitterCardIE__VALID_URL,
				λ.NewStr("_real_extract"): TwitterCardIE__real_extract,
			})
		}())
		TwitterIE = λ.Cal(λ.TypeType, λ.NewStr("TwitterIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				TwitterIE__VALID_URL λ.Object
			)
			TwitterIE__VALID_URL = λ.NewStr("https?://(?:www\\.|m\\.|mobile\\.)?twitter\\.com/(?:i/web|(?P<user_id>[^/]+))/status/(?P<id>\\d+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): TwitterIE__VALID_URL,
			})
		}())
		TwitterAmplifyIE = λ.Cal(λ.TypeType, λ.NewStr("TwitterAmplifyIE"), λ.NewTuple(TwitterBaseIE), func() λ.Dict {
			var (
				TwitterAmplifyIE_IE_NAME       λ.Object
				TwitterAmplifyIE__VALID_URL    λ.Object
				TwitterAmplifyIE__real_extract λ.Object
			)
			TwitterAmplifyIE_IE_NAME = λ.NewStr("twitter:amplify")
			TwitterAmplifyIE__VALID_URL = λ.NewStr("https?://amp\\.twimg\\.com/v/(?P<id>[0-9a-f\\-]{36})")
			TwitterAmplifyIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒ_find_dimension λ.Object
						ϒformats         λ.Object
						ϒself            = λargs[0]
						ϒthumbnail       λ.Object
						ϒthumbnail_h     λ.Object
						ϒthumbnail_w     λ.Object
						ϒthumbnails      λ.Object
						ϒurl             = λargs[1]
						ϒvideo_h         λ.Object
						ϒvideo_id        λ.Object
						ϒvideo_w         λ.Object
						ϒvmap_url        λ.Object
						ϒwebpage         λ.Object
						τmp0             λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					ϒvmap_url = λ.Cal(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewStr("twitter:amplify:vmap"), ϒwebpage, λ.NewStr("vmap url"))
					ϒformats = λ.Cal(λ.GetAttr(ϒself, "_extract_formats_from_vmap_url", nil), ϒvmap_url, ϒvideo_id)
					ϒthumbnails = λ.NewList()
					ϒthumbnail = λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
						λ.NewStr("twitter:image:src"),
						ϒwebpage,
						λ.NewStr("thumbnail"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					ϒ_find_dimension = λ.NewFunction("_find_dimension",
						[]λ.Param{
							{Name: "target"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒh      λ.Object
								ϒtarget = λargs[0]
								ϒw      λ.Object
							)
							ϒw = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
								λ.Mod(λ.NewStr("twitter:%s:width"), ϒtarget),
								ϒwebpage,
							), λ.KWArgs{
								{Name: "fatal", Value: λ.False},
							}))
							ϒh = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
								λ.Mod(λ.NewStr("twitter:%s:height"), ϒtarget),
								ϒwebpage,
							), λ.KWArgs{
								{Name: "fatal", Value: λ.False},
							}))
							return λ.NewTuple(
								ϒw,
								ϒh,
							)
						})
					if λ.IsTrue(ϒthumbnail) {
						τmp0 = λ.Cal(ϒ_find_dimension, λ.NewStr("image"))
						ϒthumbnail_w = λ.GetItem(τmp0, λ.NewInt(0))
						ϒthumbnail_h = λ.GetItem(τmp0, λ.NewInt(1))
						λ.Cal(λ.GetAttr(ϒthumbnails, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"):    ϒthumbnail,
							λ.NewStr("width"):  ϒthumbnail_w,
							λ.NewStr("height"): ϒthumbnail_h,
						}))
					}
					τmp0 = λ.Cal(ϒ_find_dimension, λ.NewStr("player"))
					ϒvideo_w = λ.GetItem(τmp0, λ.NewInt(0))
					ϒvideo_h = λ.GetItem(τmp0, λ.NewInt(1))
					λ.Cal(λ.GetAttr(λ.GetItem(ϒformats, λ.NewInt(0)), "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("width"):  ϒvideo_w,
						λ.NewStr("height"): ϒvideo_h,
					}))
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):         ϒvideo_id,
						λ.NewStr("title"):      λ.NewStr("Twitter Video"),
						λ.NewStr("formats"):    ϒformats,
						λ.NewStr("thumbnails"): ϒthumbnails,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):       TwitterAmplifyIE_IE_NAME,
				λ.NewStr("_VALID_URL"):    TwitterAmplifyIE__VALID_URL,
				λ.NewStr("_real_extract"): TwitterAmplifyIE__real_extract,
			})
		}())
	})
}

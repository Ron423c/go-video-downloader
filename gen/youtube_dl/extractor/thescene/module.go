// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * thescene/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/thescene.py
 */

package thescene

import (
	Ωparse "github.com/tenta-browser/go-video-downloader/gen/urllib/parse"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor λ.Object
	TheSceneIE    λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		TheSceneIE = λ.Cal(λ.TypeType, λ.NewStr("TheSceneIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				TheSceneIE__TEST         λ.Object
				TheSceneIE__VALID_URL    λ.Object
				TheSceneIE__real_extract λ.Object
			)
			TheSceneIE__VALID_URL = λ.NewStr("https?://thescene\\.com/watch/[^/]+/(?P<id>[^/#?]+)")
			TheSceneIE__TEST = λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("url"): λ.NewStr("https://thescene.com/watch/vogue/narciso-rodriguez-spring-2013-ready-to-wear"),
				λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("id"):          λ.NewStr("520e8faac2b4c00e3c6e5f43"),
					λ.NewStr("ext"):         λ.NewStr("mp4"),
					λ.NewStr("title"):       λ.NewStr("Narciso Rodriguez: Spring 2013 Ready-to-Wear"),
					λ.NewStr("display_id"):  λ.NewStr("narciso-rodriguez-spring-2013-ready-to-wear"),
					λ.NewStr("duration"):    λ.NewInt(127),
					λ.NewStr("series"):      λ.NewStr("Style.com Fashion Shows"),
					λ.NewStr("season"):      λ.NewStr("Ready To Wear Spring 2013"),
					λ.NewStr("tags"):        λ.ListType,
					λ.NewStr("categories"):  λ.ListType,
					λ.NewStr("upload_date"): λ.NewStr("20120913"),
					λ.NewStr("timestamp"):   λ.NewInt(1347512400),
					λ.NewStr("uploader"):    λ.NewStr("vogue"),
				}),
			})
			TheSceneIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdisplay_id λ.Object
						ϒplayer_url λ.Object
						ϒself       = λargs[0]
						ϒurl        = λargs[1]
						ϒwebpage    λ.Object
					)
					ϒdisplay_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒdisplay_id)
					ϒplayer_url = λ.Cal(Ωparse.ϒurljoin, ϒurl, λ.Cal(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewStr("id=\\'js-player-script\\'[^>]+src=\\'(.+?)\\'"), ϒwebpage, λ.NewStr("player url")))
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("_type"):      λ.NewStr("url_transparent"),
						λ.NewStr("display_id"): ϒdisplay_id,
						λ.NewStr("url"):        ϒplayer_url,
						λ.NewStr("ie_key"):     λ.NewStr("CondeNast"),
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TEST"):         TheSceneIE__TEST,
				λ.NewStr("_VALID_URL"):    TheSceneIE__VALID_URL,
				λ.NewStr("_real_extract"): TheSceneIE__real_extract,
			})
		}())
	})
}

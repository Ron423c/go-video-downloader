// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * myspace/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/myspace.py
 */

package myspace

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError λ.Object
	InfoExtractor  λ.Object
	MySpaceAlbumIE λ.Object
	MySpaceIE      λ.Object
	ϒint_or_none   λ.Object
	ϒparse_iso8601 λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		MySpaceIE = λ.Cal(λ.TypeType, λ.NewStr("MySpaceIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				MySpaceIE__TESTS        λ.Object
				MySpaceIE__VALID_URL    λ.Object
				MySpaceIE__real_extract λ.Object
			)
			MySpaceIE__VALID_URL = λ.NewStr("(?x)\n                    https?://\n                        myspace\\.com/[^/]+/\n                        (?P<mediatype>\n                            video/[^/]+/(?P<video_id>\\d+)|\n                            music/song/[^/?#&]+-(?P<song_id>\\d+)-\\d+(?:[/?#&]|$)\n                        )\n                    ")
			MySpaceIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://myspace.com/fiveminutestothestage/video/little-big-town/109594919"),
					λ.NewStr("md5"): λ.NewStr("9c1483c106f4a695c47d2911feed50a7"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("109594919"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Little Big Town"),
						λ.NewStr("description"): λ.NewStr("This country quartet was all smiles while playing a sold out show at the Pacific Amphitheatre in Orange County, California."),
						λ.NewStr("uploader"):    λ.NewStr("Five Minutes to the Stage"),
						λ.NewStr("uploader_id"): λ.NewStr("fiveminutestothestage"),
						λ.NewStr("timestamp"):   λ.NewInt(1414108751),
						λ.NewStr("upload_date"): λ.NewStr("20141023"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://myspace.com/killsorrow/music/song/of-weakened-soul...-93388656-103880681"),
					λ.NewStr("md5"): λ.NewStr("1d7ee4604a3da226dd69a123f748b262"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("93388656"),
						λ.NewStr("ext"):         λ.NewStr("m4a"),
						λ.NewStr("title"):       λ.NewStr("Of weakened soul..."),
						λ.NewStr("uploader"):    λ.NewStr("Killsorrow"),
						λ.NewStr("uploader_id"): λ.NewStr("killsorrow"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("add_ie"): λ.NewList(λ.NewStr("Youtube")),
					λ.NewStr("url"):    λ.NewStr("https://myspace.com/threedaysgrace/music/song/animal-i-have-become-28400208-28218041"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("xqds0B_meys"),
						λ.NewStr("ext"):         λ.NewStr("webm"),
						λ.NewStr("title"):       λ.NewStr("Three Days Grace - Animal I Have Become"),
						λ.NewStr("description"): λ.NewStr("md5:8bd86b3693e72a077cf863a8530c54bb"),
						λ.NewStr("uploader"):    λ.NewStr("ThreeDaysGraceVEVO"),
						λ.NewStr("uploader_id"): λ.NewStr("ThreeDaysGraceVEVO"),
						λ.NewStr("upload_date"): λ.NewStr("20091002"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://myspace.com/starset2/music/song/first-light-95799905-106964426"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://myspace.com/thelargemouthbassband/music/song/02-pure-eyes.mp3-94422330-105113388"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			MySpaceIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒformats                  λ.Object
						ϒformats_from_stream_urls λ.Object
						ϒis_song                  λ.Object
						ϒmobj                     λ.Object
						ϒplayer_url               λ.Object
						ϒsearch_data              λ.Object
						ϒself                     = λargs[0]
						ϒsong_data                λ.Object
						ϒurl                      = λargs[1]
						ϒvevo_id                  λ.Object
						ϒvideo                    λ.Object
						ϒvideo_id                 λ.Object
						ϒwebpage                  λ.Object
						ϒyoutube_id               λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒvideo_id = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("video_id")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("song_id"))
						}
					}()
					ϒis_song = λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("mediatype")), "startswith", nil), λ.NewStr("music/song"))
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					ϒplayer_url = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("videoSwf\":\"([^\"?]*)"),
						ϒwebpage,
						λ.NewStr("player URL"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					ϒformats_from_stream_urls = λ.NewFunction("formats_from_stream_urls",
						[]λ.Param{
							{Name: "stream_url"},
							{Name: "hls_stream_url"},
							{Name: "http_stream_url"},
							{Name: "width", Def: λ.None},
							{Name: "height", Def: λ.None},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒformats         λ.Object
								ϒheight          = λargs[4]
								ϒhls_stream_url  = λargs[1]
								ϒhttp_stream_url = λargs[2]
								ϒplay_path       λ.Object
								ϒrtmp_url        λ.Object
								ϒstream_url      = λargs[0]
								ϒvcodec          λ.Object
								ϒwidth           = λargs[3]
								τmp0             λ.Object
							)
							ϒformats = λ.NewList()
							ϒvcodec = func() λ.Object {
								if λ.IsTrue(ϒis_song) {
									return λ.NewStr("none")
								} else {
									return λ.None
								}
							}()
							if λ.IsTrue(ϒhls_stream_url) {
								λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("format_id"): λ.NewStr("hls"),
									λ.NewStr("url"):       ϒhls_stream_url,
									λ.NewStr("protocol"):  λ.NewStr("m3u8_native"),
									λ.NewStr("ext"): func() λ.Object {
										if λ.IsTrue(ϒis_song) {
											return λ.NewStr("m4a")
										} else {
											return λ.NewStr("mp4")
										}
									}(),
									λ.NewStr("vcodec"): ϒvcodec,
								}))
							}
							if λ.IsTrue(func() λ.Object {
								if λv := ϒstream_url; !λ.IsTrue(λv) {
									return λv
								} else {
									return ϒplayer_url
								}
							}()) {
								τmp0 = λ.Cal(λ.GetAttr(ϒstream_url, "split", nil), λ.NewStr(";"), λ.NewInt(1))
								ϒrtmp_url = λ.GetItem(τmp0, λ.NewInt(0))
								ϒplay_path = λ.GetItem(τmp0, λ.NewInt(1))
								λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("format_id"):  λ.NewStr("rtmp"),
									λ.NewStr("url"):        ϒrtmp_url,
									λ.NewStr("play_path"):  ϒplay_path,
									λ.NewStr("player_url"): ϒplayer_url,
									λ.NewStr("protocol"):   λ.NewStr("rtmp"),
									λ.NewStr("ext"):        λ.NewStr("flv"),
									λ.NewStr("width"):      ϒwidth,
									λ.NewStr("height"):     ϒheight,
									λ.NewStr("vcodec"):     ϒvcodec,
								}))
							}
							if λ.IsTrue(ϒhttp_stream_url) {
								λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("format_id"): λ.NewStr("http"),
									λ.NewStr("url"):       ϒhttp_stream_url,
									λ.NewStr("width"):     ϒwidth,
									λ.NewStr("height"):    ϒheight,
									λ.NewStr("vcodec"):    ϒvcodec,
								}))
							}
							return ϒformats
						})
					if λ.IsTrue(ϒis_song) {
						ϒsong_data = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.Mod(λ.NewStr("<button.*data-song-id=([\"\\'])%s\\1.*"), ϒvideo_id),
							ϒwebpage,
							λ.NewStr("song_data"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
							{Name: "group", Value: λ.NewInt(0)},
						})
						if λ.IsTrue(λ.NewBool(ϒsong_data == λ.None)) {
							λ.Cal(λ.GetAttr(ϒself, "report_warning", nil), λ.Mod(λ.NewStr("%s: No downloadable song on this page"), ϒvideo_id))
							return λ.None
						}
						ϒsearch_data = λ.NewFunction("search_data",
							[]λ.Param{
								{Name: "name"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒname = λargs[0]
								)
								return λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
									λ.Mod(λ.NewStr("data-%s=([\\'\"])(?P<data>.*?)\\1"), ϒname),
									ϒsong_data,
									ϒname,
								), λ.KWArgs{
									{Name: "default", Value: λ.NewStr("")},
									{Name: "group", Value: λ.NewStr("data")},
								})
							})
						ϒformats = λ.Cal(ϒformats_from_stream_urls, λ.Cal(ϒsearch_data, λ.NewStr("stream-url")), λ.Cal(ϒsearch_data, λ.NewStr("hls-stream-url")), λ.Cal(ϒsearch_data, λ.NewStr("http-stream-url")))
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒformats))) {
							ϒvevo_id = λ.Cal(ϒsearch_data, λ.NewStr("vevo-id"))
							ϒyoutube_id = λ.Cal(ϒsearch_data, λ.NewStr("youtube-id"))
							if λ.IsTrue(ϒvevo_id) {
								λ.Cal(λ.GetAttr(ϒself, "to_screen", nil), λ.Mod(λ.NewStr("Vevo video detected: %s"), ϒvevo_id))
								return λ.Call(λ.GetAttr(ϒself, "url_result", nil), λ.NewArgs(λ.Mod(λ.NewStr("vevo:%s"), ϒvevo_id)), λ.KWArgs{
									{Name: "ie", Value: λ.NewStr("Vevo")},
								})
							} else {
								if λ.IsTrue(ϒyoutube_id) {
									λ.Cal(λ.GetAttr(ϒself, "to_screen", nil), λ.Mod(λ.NewStr("Youtube video detected: %s"), ϒyoutube_id))
									return λ.Call(λ.GetAttr(ϒself, "url_result", nil), λ.NewArgs(ϒyoutube_id), λ.KWArgs{
										{Name: "ie", Value: λ.NewStr("Youtube")},
									})
								} else {
									panic(λ.Raise(λ.Cal(ExtractorError, λ.NewStr("Found song but don't know how to download it"))))
								}
							}
						}
						λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
						return λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("id"):          ϒvideo_id,
							λ.NewStr("title"):       λ.Cal(λ.GetAttr(ϒself, "_og_search_title", nil), ϒwebpage),
							λ.NewStr("uploader"):    λ.Cal(ϒsearch_data, λ.NewStr("artist-name")),
							λ.NewStr("uploader_id"): λ.Cal(ϒsearch_data, λ.NewStr("artist-username")),
							λ.NewStr("thumbnail"):   λ.Cal(λ.GetAttr(ϒself, "_og_search_thumbnail", nil), ϒwebpage),
							λ.NewStr("duration"):    λ.Cal(ϒint_or_none, λ.Cal(ϒsearch_data, λ.NewStr("duration"))),
							λ.NewStr("formats"):     ϒformats,
						})
					} else {
						ϒvideo = λ.GetItem(λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("context = ({.*?});"), ϒwebpage, λ.NewStr("context")), ϒvideo_id), λ.NewStr("video"))
						ϒformats = λ.Cal(ϒformats_from_stream_urls, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("streamUrl")), λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("hlsStreamUrl")), λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("mp4StreamUrl")), λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("width"))), λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("height"))))
						λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
						return λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("id"):          ϒvideo_id,
							λ.NewStr("title"):       λ.GetItem(ϒvideo, λ.NewStr("title")),
							λ.NewStr("description"): λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("description")),
							λ.NewStr("thumbnail"):   λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("imageUrl")),
							λ.NewStr("uploader"):    λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("artistName")),
							λ.NewStr("uploader_id"): λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("artistUsername")),
							λ.NewStr("duration"):    λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("duration"))),
							λ.NewStr("timestamp"):   λ.Cal(ϒparse_iso8601, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("dateAdded"))),
							λ.NewStr("formats"):     ϒformats,
						})
					}
					return λ.None
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        MySpaceIE__TESTS,
				λ.NewStr("_VALID_URL"):    MySpaceIE__VALID_URL,
				λ.NewStr("_real_extract"): MySpaceIE__real_extract,
			})
		}())
		MySpaceAlbumIE = λ.Cal(λ.TypeType, λ.NewStr("MySpaceAlbumIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				MySpaceAlbumIE__VALID_URL λ.Object
			)
			MySpaceAlbumIE__VALID_URL = λ.NewStr("https?://myspace\\.com/([^/]+)/music/album/(?P<title>.*-)(?P<id>\\d+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): MySpaceAlbumIE__VALID_URL,
			})
		}())
	})
}

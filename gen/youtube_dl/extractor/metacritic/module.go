// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * metacritic/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/metacritic.py
 */

package metacritic

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor       λ.Object
	MetacriticIE        λ.Object
	ϒfix_xml_ampersands λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒfix_xml_ampersands = Ωutils.ϒfix_xml_ampersands
		MetacriticIE = λ.Cal(λ.TypeType, λ.StrLiteral("MetacriticIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				MetacriticIE__VALID_URL    λ.Object
				MetacriticIE__real_extract λ.Object
			)
			MetacriticIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?metacritic\\.com/.+?/trailers/(?P<id>\\d+)")
			MetacriticIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒclip        λ.Object
						ϒdescription λ.Object
						ϒformats     λ.Object
						ϒinfo        λ.Object
						ϒmobj        λ.Object
						ϒrate_str    λ.Object
						ϒself        = λargs[0]
						ϒurl         = λargs[1]
						ϒvideoFile   λ.Object
						ϒvideo_id    λ.Object
						ϒvideo_url   λ.Object
						ϒwebpage     λ.Object
						τmp0         λ.Object
						τmp1         λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒvideo_id = λ.Calm(ϒmobj, "group", λ.StrLiteral("id"))
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒvideo_id)
					ϒinfo = λ.Call(λ.GetAttr(ϒself, "_download_xml", nil), λ.NewArgs(
						λ.Add(λ.StrLiteral("http://www.metacritic.com/video_data?video="), ϒvideo_id),
						ϒvideo_id,
						λ.StrLiteral("Downloading info xml"),
					), λ.KWArgs{
						{Name: "transform_source", Value: ϒfix_xml_ampersands},
					})
					ϒclip = λ.Cal(λ.BuiltinNext, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒc   λ.Object
									τmp0 λ.Object
									τmp1 λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒinfo, "findall", λ.StrLiteral("playList/clip")))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒc = τmp1
									if λ.IsTrue(λ.Eq(λ.GetAttr(λ.Calm(ϒc, "find", λ.StrLiteral("id")), "text", nil), ϒvideo_id)) {
										λgy.Yield(ϒc)
									}
								}
								return λ.None
							})
						})))
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒclip, "findall", λ.StrLiteral("httpURI/videoFile")))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒvideoFile = τmp1
						ϒrate_str = λ.GetAttr(λ.Calm(ϒvideoFile, "find", λ.StrLiteral("rate")), "text", nil)
						ϒvideo_url = λ.GetAttr(λ.Calm(ϒvideoFile, "find", λ.StrLiteral("filePath")), "text", nil)
						λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
							"url":       ϒvideo_url,
							"ext":       λ.StrLiteral("mp4"),
							"format_id": ϒrate_str,
							"tbr":       λ.Cal(λ.IntType, ϒrate_str),
						}))
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					ϒdescription = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("<b>Description:</b>(.*?)</p>"),
						ϒwebpage,
						λ.StrLiteral("description"),
					), λ.KWArgs{
						{Name: "flags", Value: Ωre.DOTALL},
					})
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒvideo_id,
						"title":       λ.GetAttr(λ.Calm(ϒclip, "find", λ.StrLiteral("title")), "text", nil),
						"formats":     ϒformats,
						"description": ϒdescription,
						"duration":    λ.Cal(λ.IntType, λ.GetAttr(λ.Calm(ϒclip, "find", λ.StrLiteral("duration")), "text", nil)),
					})
				})
			return λ.DictLiteral(map[string]λ.Object{
				"_VALID_URL":    MetacriticIE__VALID_URL,
				"_real_extract": MetacriticIE__real_extract,
			})
		}())
	})
}

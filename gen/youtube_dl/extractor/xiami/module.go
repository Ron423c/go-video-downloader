// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * xiami/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/xiami.py
 */

package xiami

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor                λ.Object
	XiamiAlbumIE                 λ.Object
	XiamiArtistIE                λ.Object
	XiamiBaseIE                  λ.Object
	XiamiCollectionIE            λ.Object
	XiamiPlaylistBaseIE          λ.Object
	XiamiSongIE                  λ.Object
	ϒcompat_urllib_parse_unquote λ.Object
	ϒint_or_none                 λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_urllib_parse_unquote = Ωcompat.ϒcompat_urllib_parse_unquote
		ϒint_or_none = Ωutils.ϒint_or_none
		XiamiBaseIE = λ.Cal(λ.TypeType, λ.NewStr("XiamiBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				XiamiBaseIE__API_BASE_URL            λ.Object
				XiamiBaseIE__decrypt                 λ.Object
				XiamiBaseIE__download_webpage_handle λ.Object
				XiamiBaseIE__extract_track           λ.Object
				XiamiBaseIE__extract_tracks          λ.Object
			)
			XiamiBaseIE__API_BASE_URL = λ.NewStr("http://www.xiami.com/song/playlist/cat/json/id")
			XiamiBaseIE__download_webpage_handle = λ.NewFunction("_download_webpage_handle",
				[]λ.Param{
					{Name: "self"},
				},
				0, true, true,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒargs    = λargs[1]
						ϒkwargs  = λargs[2]
						ϒself    = λargs[0]
						ϒwebpage λ.Object
					)
					ϒwebpage = λ.Call(λ.GetAttr(λ.Cal(λ.SuperType, XiamiBaseIE, ϒself), "_download_webpage_handle", nil), λ.NewArgs(λ.Unpack(λ.AsStarred(ϒargs))...), λ.KWArgs{
						{Name: "", Value: ϒkwargs},
					})
					if λ.IsTrue(λ.NewBool(λ.Contains(ϒwebpage, λ.NewStr(">Xiami is currently not available in your country.<")))) {
						λ.Cal(λ.GetAttr(ϒself, "raise_geo_restricted", nil), λ.NewStr("Xiami is currently not available in your country"))
					}
					return ϒwebpage
				})
			XiamiBaseIE__extract_track = λ.NewFunction("_extract_track",
				[]λ.Param{
					{Name: "self"},
					{Name: "track"},
					{Name: "track_id", Def: λ.None},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒartist     λ.Object
						ϒlyrics_url λ.Object
						ϒself       = λargs[0]
						ϒsubtitles  λ.Object
						ϒtitle      λ.Object
						ϒtrack      = λargs[1]
						ϒtrack_id   = λargs[2]
						ϒtrack_name λ.Object
						ϒtrack_url  λ.Object
					)
					ϒtrack_name = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒtrack, "get", nil), λ.NewStr("songName")); λ.IsTrue(λv) {
							return λv
						} else if λv := λ.Cal(λ.GetAttr(ϒtrack, "get", nil), λ.NewStr("name")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.GetItem(ϒtrack, λ.NewStr("subName"))
						}
					}()
					ϒartist = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒtrack, "get", nil), λ.NewStr("artist")); λ.IsTrue(λv) {
							return λv
						} else if λv := λ.Cal(λ.GetAttr(ϒtrack, "get", nil), λ.NewStr("artist_name")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒtrack, "get", nil), λ.NewStr("singers"))
						}
					}()
					ϒtitle = func() λ.Object {
						if λ.IsTrue(ϒartist) {
							return λ.Mod(λ.NewStr("%s - %s"), λ.NewTuple(
								ϒartist,
								ϒtrack_name,
							))
						} else {
							return ϒtrack_name
						}
					}()
					ϒtrack_url = λ.Cal(λ.GetAttr(ϒself, "_decrypt", nil), λ.GetItem(ϒtrack, λ.NewStr("location")))
					ϒsubtitles = λ.NewDictWithTable(map[λ.Object]λ.Object{})
					ϒlyrics_url = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒtrack, "get", nil), λ.NewStr("lyric_url")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒtrack, "get", nil), λ.NewStr("lyric"))
						}
					}()
					if λ.IsTrue(func() λ.Object {
						if λv := ϒlyrics_url; !λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒlyrics_url, "startswith", nil), λ.NewStr("http"))
						}
					}()) {
						λ.SetItem(ϒsubtitles, λ.NewStr("origin"), λ.NewList(λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"): ϒlyrics_url,
						})))
					}
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"): func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒtrack, "get", nil), λ.NewStr("song_id")); λ.IsTrue(λv) {
								return λv
							} else {
								return ϒtrack_id
							}
						}(),
						λ.NewStr("url"):   ϒtrack_url,
						λ.NewStr("title"): ϒtitle,
						λ.NewStr("thumbnail"): func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒtrack, "get", nil), λ.NewStr("pic")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(ϒtrack, "get", nil), λ.NewStr("album_pic"))
							}
						}(),
						λ.NewStr("duration"):     λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒtrack, "get", nil), λ.NewStr("length"))),
						λ.NewStr("creator"):      λ.GetItem(λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒtrack, "get", nil), λ.NewStr("artist"), λ.NewStr("")), "split", nil), λ.NewStr(";")), λ.NewInt(0)),
						λ.NewStr("track"):        ϒtrack_name,
						λ.NewStr("track_number"): λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒtrack, "get", nil), λ.NewStr("track"))),
						λ.NewStr("album"): func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒtrack, "get", nil), λ.NewStr("album_name")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(ϒtrack, "get", nil), λ.NewStr("title"))
							}
						}(),
						λ.NewStr("artist"):    ϒartist,
						λ.NewStr("subtitles"): ϒsubtitles,
					})
				})
			XiamiBaseIE__extract_tracks = λ.NewFunction("_extract_tracks",
				[]λ.Param{
					{Name: "self"},
					{Name: "item_id"},
					{Name: "referer"},
					{Name: "typ", Def: λ.None},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒitem_id  = λargs[1]
						ϒplaylist λ.Object
						ϒreferer  = λargs[2]
						ϒself     = λargs[0]
						ϒtyp      = λargs[3]
					)
					ϒplaylist = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Mod(λ.NewStr("%s/%s%s"), λ.NewTuple(
							λ.GetAttr(ϒself, "_API_BASE_URL", nil),
							ϒitem_id,
							func() λ.Object {
								if λ.IsTrue(ϒtyp) {
									return λ.Mod(λ.NewStr("/type/%s"), ϒtyp)
								} else {
									return λ.NewStr("")
								}
							}(),
						)),
						ϒitem_id,
					), λ.KWArgs{
						{Name: "headers", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("Referer"): ϒreferer,
						})},
					})
					return λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgen λ.Generator) λ.Object {
								var (
									ϒtrack λ.Object
									τmp0   λ.Object
									τmp1   λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.GetItem(λ.GetItem(ϒplaylist, λ.NewStr("data")), λ.NewStr("trackList")))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒtrack = τmp1
									λgen.Yield(λ.Cal(λ.GetAttr(ϒself, "_extract_track", nil), ϒtrack, ϒitem_id))
								}
								return λ.None
							})
						})))
				})
			XiamiBaseIE__decrypt = λ.NewFunction("_decrypt",
				[]λ.Param{
					{Name: "origin"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒans         λ.Object
						ϒi           λ.Object
						ϒj           λ.Object
						ϒl           λ.Object
						ϒlength      λ.Object
						ϒlong_num    λ.Object
						ϒn           λ.Object
						ϒorigin      = λargs[0]
						ϒshort_lenth λ.Object
						τmp0         λ.Object
						τmp1         λ.Object
						τmp2         λ.Object
						τmp3         λ.Object
						τmp4         λ.Object
					)
					ϒn = λ.Cal(λ.IntType, λ.GetItem(ϒorigin, λ.NewInt(0)))
					ϒorigin = λ.GetItem(ϒorigin, λ.NewSlice(λ.NewInt(1), λ.None, λ.None))
					ϒshort_lenth = λ.FloorDiv(λ.Cal(λ.BuiltinLen, ϒorigin), ϒn)
					ϒlong_num = λ.Sub(λ.Cal(λ.BuiltinLen, ϒorigin), λ.Mul(ϒshort_lenth, ϒn))
					ϒl = λ.Cal(λ.TupleType)
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.RangeType, λ.NewInt(0), ϒn))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒi = τmp1
						ϒlength = ϒshort_lenth
						if λ.IsTrue(λ.Lt(ϒi, ϒlong_num)) {
							τmp2 = λ.IAdd(ϒlength, λ.NewInt(1))
							ϒlength = τmp2
						}
						τmp2 = λ.IAdd(ϒl, λ.NewTuple(λ.GetItem(ϒorigin, λ.NewSlice(λ.NewInt(0), ϒlength, λ.None))))
						ϒl = τmp2
						ϒorigin = λ.GetItem(ϒorigin, λ.NewSlice(ϒlength, λ.None, λ.None))
					}
					ϒans = λ.NewStr("")
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.RangeType, λ.NewInt(0), λ.Add(ϒshort_lenth, λ.NewInt(1))))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒi = τmp1
						τmp2 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.RangeType, λ.NewInt(0), ϒn))
						for {
							if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
								break
							}
							ϒj = τmp3
							if λ.IsTrue(λ.Gt(λ.Cal(λ.BuiltinLen, λ.GetItem(ϒl, ϒj)), ϒi)) {
								τmp4 = λ.IAdd(ϒans, λ.GetItem(λ.GetItem(ϒl, ϒj), ϒi))
								ϒans = τmp4
							}
						}
					}
					return λ.Cal(λ.GetAttr(λ.Cal(ϒcompat_urllib_parse_unquote, ϒans), "replace", nil), λ.NewStr("^"), λ.NewStr("0"))
				})
			XiamiBaseIE__decrypt = λ.Cal(λ.StaticMethodType, XiamiBaseIE__decrypt)
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_API_BASE_URL"):            XiamiBaseIE__API_BASE_URL,
				λ.NewStr("_decrypt"):                 XiamiBaseIE__decrypt,
				λ.NewStr("_download_webpage_handle"): XiamiBaseIE__download_webpage_handle,
				λ.NewStr("_extract_track"):           XiamiBaseIE__extract_track,
				λ.NewStr("_extract_tracks"):          XiamiBaseIE__extract_tracks,
			})
		}())
		XiamiSongIE = λ.Cal(λ.TypeType, λ.NewStr("XiamiSongIE"), λ.NewTuple(XiamiBaseIE), func() λ.Dict {
			var (
				XiamiSongIE_IE_NAME       λ.Object
				XiamiSongIE__TESTS        λ.Object
				XiamiSongIE__VALID_URL    λ.Object
				XiamiSongIE__real_extract λ.Object
			)
			XiamiSongIE_IE_NAME = λ.NewStr("xiami:song")
			XiamiSongIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?xiami\\.com/song/(?P<id>[^/?#&]+)")
			XiamiSongIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.xiami.com/song/1775610518"),
					λ.NewStr("md5"): λ.NewStr("521dd6bea40fd5c9c69f913c232cb57e"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):        λ.NewStr("1775610518"),
						λ.NewStr("ext"):       λ.NewStr("mp3"),
						λ.NewStr("title"):     λ.NewStr("HONNE - Woman"),
						λ.NewStr("thumbnail"): λ.NewStr("re:http://img\\.xiami\\.net/images/album/.*\\.jpg"),
						λ.NewStr("duration"):  λ.NewInt(265),
						λ.NewStr("creator"):   λ.NewStr("HONNE"),
						λ.NewStr("track"):     λ.NewStr("Woman"),
						λ.NewStr("album"):     λ.NewStr("Woman"),
						λ.NewStr("artist"):    λ.NewStr("HONNE"),
						λ.NewStr("subtitles"): λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("origin"): λ.NewList(λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("ext"): λ.NewStr("lrc"),
							})),
						}),
					}),
					λ.NewStr("skip"): λ.NewStr("Georestricted"),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.xiami.com/song/1775256504"),
					λ.NewStr("md5"): λ.NewStr("932a3abd45c6aa2b1fdbe028fcb4c4fc"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):        λ.NewStr("1775256504"),
						λ.NewStr("ext"):       λ.NewStr("mp3"),
						λ.NewStr("title"):     λ.NewStr("戴荃 - 悟空"),
						λ.NewStr("thumbnail"): λ.NewStr("re:http://img\\.xiami\\.net/images/album/.*\\.jpg"),
						λ.NewStr("duration"):  λ.NewInt(200),
						λ.NewStr("creator"):   λ.NewStr("戴荃"),
						λ.NewStr("track"):     λ.NewStr("悟空"),
						λ.NewStr("album"):     λ.NewStr("悟空"),
						λ.NewStr("artist"):    λ.NewStr("戴荃"),
						λ.NewStr("subtitles"): λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("origin"): λ.NewList(λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("ext"): λ.NewStr("lrc"),
							})),
						}),
					}),
					λ.NewStr("skip"): λ.NewStr("Georestricted"),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.xiami.com/song/1775953850"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           λ.NewStr("1775953850"),
						λ.NewStr("ext"):          λ.NewStr("mp3"),
						λ.NewStr("title"):        λ.NewStr("До Скону - Чума Пожирает Землю"),
						λ.NewStr("thumbnail"):    λ.NewStr("re:http://img\\.xiami\\.net/images/album/.*\\.jpg"),
						λ.NewStr("duration"):     λ.NewInt(683),
						λ.NewStr("creator"):      λ.NewStr("До Скону"),
						λ.NewStr("track"):        λ.NewStr("Чума Пожирает Землю"),
						λ.NewStr("track_number"): λ.NewInt(7),
						λ.NewStr("album"):        λ.NewStr("Ад"),
						λ.NewStr("artist"):       λ.NewStr("До Скону"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://www.xiami.com/song/xLHGwgd07a1"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			XiamiSongIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒself = λargs[0]
						ϒurl  = λargs[1]
					)
					return λ.GetItem(λ.Cal(λ.GetAttr(ϒself, "_extract_tracks", nil), λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl), ϒurl), λ.NewInt(0))
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):       XiamiSongIE_IE_NAME,
				λ.NewStr("_TESTS"):        XiamiSongIE__TESTS,
				λ.NewStr("_VALID_URL"):    XiamiSongIE__VALID_URL,
				λ.NewStr("_real_extract"): XiamiSongIE__real_extract,
			})
		}())
		XiamiPlaylistBaseIE = λ.Cal(λ.TypeType, λ.NewStr("XiamiPlaylistBaseIE"), λ.NewTuple(XiamiBaseIE), func() λ.Dict {

			return λ.NewDictWithTable(map[λ.Object]λ.Object{})
		}())
		XiamiAlbumIE = λ.Cal(λ.TypeType, λ.NewStr("XiamiAlbumIE"), λ.NewTuple(XiamiPlaylistBaseIE), func() λ.Dict {
			var (
				XiamiAlbumIE__VALID_URL λ.Object
			)
			XiamiAlbumIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?xiami\\.com/album/(?P<id>[^/?#&]+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): XiamiAlbumIE__VALID_URL,
			})
		}())
		XiamiArtistIE = λ.Cal(λ.TypeType, λ.NewStr("XiamiArtistIE"), λ.NewTuple(XiamiPlaylistBaseIE), func() λ.Dict {
			var (
				XiamiArtistIE__VALID_URL λ.Object
			)
			XiamiArtistIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?xiami\\.com/artist/(?P<id>[^/?#&]+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): XiamiArtistIE__VALID_URL,
			})
		}())
		XiamiCollectionIE = λ.Cal(λ.TypeType, λ.NewStr("XiamiCollectionIE"), λ.NewTuple(XiamiPlaylistBaseIE), func() λ.Dict {
			var (
				XiamiCollectionIE__VALID_URL λ.Object
			)
			XiamiCollectionIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?xiami\\.com/collect/(?P<id>[^/?#&]+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): XiamiCollectionIE__VALID_URL,
			})
		}())
	})
}

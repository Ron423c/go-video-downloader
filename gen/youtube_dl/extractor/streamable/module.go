// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * streamable/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/streamable.py
 */

package streamable

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError λ.Object
	InfoExtractor  λ.Object
	StreamableIE   λ.Object
	ϒfloat_or_none λ.Object
	ϒint_or_none   λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ExtractorError = Ωutils.ExtractorError
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒint_or_none = Ωutils.ϒint_or_none
		StreamableIE = λ.Cal(λ.TypeType, λ.NewStr("StreamableIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				StreamableIE__TESTS        λ.Object
				StreamableIE__VALID_URL    λ.Object
				StreamableIE__real_extract λ.Object
			)
			StreamableIE__VALID_URL = λ.NewStr("https?://streamable\\.com/(?:[es]/)?(?P<id>\\w+)")
			StreamableIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://streamable.com/dnd1"),
					λ.NewStr("md5"): λ.NewStr("3e3bc5ca088b48c2d436529b64397fef"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("dnd1"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Mikel Oiarzabal scores to make it 0-3 for La Real against Espanyol"),
						λ.NewStr("thumbnail"):   λ.NewStr("re:https?://.*\\.jpg$"),
						λ.NewStr("uploader"):    λ.NewStr("teabaker"),
						λ.NewStr("timestamp"):   λ.NewFloat(1454964157.35115),
						λ.NewStr("upload_date"): λ.NewStr("20160208"),
						λ.NewStr("duration"):    λ.NewFloat(61.516),
						λ.NewStr("view_count"):  λ.IntType,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://streamable.com/moo"),
					λ.NewStr("md5"): λ.NewStr("2cf6923639b87fba3279ad0df3a64e73"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("moo"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("\"Please don't eat me!\""),
						λ.NewStr("thumbnail"):   λ.NewStr("re:https?://.*\\.jpg$"),
						λ.NewStr("timestamp"):   λ.NewInt(1426115495),
						λ.NewStr("upload_date"): λ.NewStr("20150311"),
						λ.NewStr("duration"):    λ.NewInt(12),
						λ.NewStr("view_count"):  λ.IntType,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://streamable.com/e/dnd1"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://streamable.com/s/okkqk/drxjds"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			StreamableIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒformats  λ.Object
						ϒinfo     λ.Object
						ϒkey      λ.Object
						ϒself     = λargs[0]
						ϒstatus   λ.Object
						ϒtitle    λ.Object
						ϒurl      = λargs[1]
						ϒvideo    λ.Object
						ϒvideo_id λ.Object
						τmp0      λ.Object
						τmp1      λ.Object
						τmp2      λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒvideo = λ.Cal(λ.GetAttr(ϒself, "_download_json", nil), λ.Mod(λ.NewStr("https://ajax.streamable.com/videos/%s"), ϒvideo_id), ϒvideo_id)
					ϒstatus = λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("status"))
					if λ.IsTrue(λ.Ne(ϒstatus, λ.NewInt(2))) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.NewStr("This video is currently unavailable. It may still be uploading or processing.")), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒtitle = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("reddit_title")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.GetItem(ϒvideo, λ.NewStr("title"))
						}
					}()
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(λ.GetItem(ϒvideo, λ.NewStr("files")), "items", nil)))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒkey = λ.GetItem(τmp2, λ.NewInt(0))
						ϒinfo = λ.GetItem(τmp2, λ.NewInt(1))
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("url"))))) {
							continue
						}
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("format_id"): ϒkey,
							λ.NewStr("url"):       λ.Cal(λ.GetAttr(ϒself, "_proto_relative_url", nil), λ.GetItem(ϒinfo, λ.NewStr("url"))),
							λ.NewStr("width"):     λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("width"))),
							λ.NewStr("height"):    λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("height"))),
							λ.NewStr("filesize"):  λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("size"))),
							λ.NewStr("fps"):       λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("framerate"))),
							λ.NewStr("vbr"):       λ.Cal(ϒfloat_or_none, λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("bitrate")), λ.NewInt(1000)),
						}))
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("title"):       ϒtitle,
						λ.NewStr("description"): λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("description")),
						λ.NewStr("thumbnail"):   λ.Cal(λ.GetAttr(ϒself, "_proto_relative_url", nil), λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("thumbnail_url"))),
						λ.NewStr("uploader"):    λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("owner"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("user_name")),
						λ.NewStr("timestamp"):   λ.Cal(ϒfloat_or_none, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("date_added"))),
						λ.NewStr("duration"):    λ.Cal(ϒfloat_or_none, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("duration"))),
						λ.NewStr("view_count"):  λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("plays"))),
						λ.NewStr("formats"):     ϒformats,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        StreamableIE__TESTS,
				λ.NewStr("_VALID_URL"):    StreamableIE__VALID_URL,
				λ.NewStr("_real_extract"): StreamableIE__real_extract,
			})
		}())
	})
}

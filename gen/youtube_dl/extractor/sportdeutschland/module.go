// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * sportdeutschland/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/sportdeutschland.py
 */

package sportdeutschland

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor      λ.Object
	SportDeutschlandIE λ.Object
	ϒparse_iso8601     λ.Object
	ϒsanitized_Request λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		ϒsanitized_Request = Ωutils.ϒsanitized_Request
		SportDeutschlandIE = λ.Cal(λ.TypeType, λ.StrLiteral("SportDeutschlandIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				SportDeutschlandIE__VALID_URL    λ.Object
				SportDeutschlandIE__real_extract λ.Object
			)
			SportDeutschlandIE__VALID_URL = λ.StrLiteral("https?://sportdeutschland\\.tv/(?P<sport>[^/?#]+)/(?P<id>[^?#/]+)(?:$|[?#])")
			SportDeutschlandIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒapi_url     λ.Object
						ϒasset       λ.Object
						ϒbase_url    λ.Object
						ϒbase_url_el λ.Object
						ϒcategories  λ.Object
						ϒdata        λ.Object
						ϒformats     λ.Object
						ϒm3u8_url    λ.Object
						ϒmobj        λ.Object
						ϒreq         λ.Object
						ϒself        = λargs[0]
						ϒsmil_doc    λ.Object
						ϒsmil_url    λ.Object
						ϒsport_id    λ.Object
						ϒurl         = λargs[1]
						ϒvideo_id    λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒvideo_id = λ.Calm(ϒmobj, "group", λ.StrLiteral("id"))
					ϒsport_id = λ.Calm(ϒmobj, "group", λ.StrLiteral("sport"))
					ϒapi_url = λ.Mod(λ.StrLiteral("https://proxy.vidibusdynamic.net/ssl/backend.sportdeutschland.tv/api/permalinks/%s/%s?access_token=true"), λ.NewTuple(
						ϒsport_id,
						ϒvideo_id,
					))
					ϒreq = λ.Call(ϒsanitized_Request, λ.NewArgs(ϒapi_url), λ.KWArgs{
						{Name: "headers", Value: λ.DictLiteral(map[string]λ.Object{
							"Accept":  λ.StrLiteral("application/vnd.vidibus.v2.html+json"),
							"Referer": ϒurl,
						})},
					})
					ϒdata = λ.Calm(ϒself, "_download_json", ϒreq, ϒvideo_id)
					ϒasset = λ.GetItem(ϒdata, λ.StrLiteral("asset"))
					ϒcategories = λ.NewList(λ.GetItem(λ.GetItem(ϒdata, λ.StrLiteral("section")), λ.StrLiteral("title")))
					ϒformats = λ.NewList()
					ϒsmil_url = λ.GetItem(ϒasset, λ.StrLiteral("video"))
					if λ.Contains(ϒsmil_url, λ.StrLiteral(".smil")) {
						ϒm3u8_url = λ.Calm(ϒsmil_url, "replace", λ.StrLiteral(".smil"), λ.StrLiteral(".m3u8"))
						λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
							ϒm3u8_url,
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "ext", Value: λ.StrLiteral("mp4")},
						}))
						ϒsmil_doc = λ.Call(λ.GetAttr(ϒself, "_download_xml", nil), λ.NewArgs(
							ϒsmil_url,
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "note", Value: λ.StrLiteral("Downloading SMIL metadata")},
						})
						ϒbase_url_el = λ.Calm(ϒsmil_doc, "find", λ.StrLiteral("./head/meta"))
						if λ.IsTrue(ϒbase_url_el) {
							ϒbase_url = λ.GetItem(λ.GetAttr(ϒbase_url_el, "attrib", nil), λ.StrLiteral("base"))
						}
						λ.Calm(ϒformats, "extend", λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
							nil,
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
									var (
										ϒn   λ.Object
										τmp0 λ.Object
										τmp1 λ.Object
									)
									τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒsmil_doc, "findall", λ.StrLiteral("./body/video")))
									for {
										if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
											break
										}
										ϒn = τmp1
										λgy.Yield(λ.DictLiteral(map[string]λ.Object{
											"format_id": λ.StrLiteral("rmtp"),
											"url": func() λ.Object {
												if λ.IsTrue(ϒbase_url_el) {
													return ϒbase_url
												} else {
													return λ.GetItem(λ.GetAttr(ϒn, "attrib", nil), λ.StrLiteral("src"))
												}
											}(),
											"play_path":   λ.GetItem(λ.GetAttr(ϒn, "attrib", nil), λ.StrLiteral("src")),
											"ext":         λ.StrLiteral("flv"),
											"preference":  λ.Neg(λ.IntLiteral(100)),
											"format_note": λ.StrLiteral("Seems to fail at example stream"),
										}))
									}
									return λ.None
								})
							}))))
					} else {
						λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
							"url": ϒsmil_url,
						}))
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒvideo_id,
						"formats":     ϒformats,
						"title":       λ.GetItem(ϒasset, λ.StrLiteral("title")),
						"thumbnail":   λ.Calm(ϒasset, "get", λ.StrLiteral("image")),
						"description": λ.Calm(ϒasset, "get", λ.StrLiteral("teaser")),
						"duration":    λ.Calm(ϒasset, "get", λ.StrLiteral("duration")),
						"categories":  ϒcategories,
						"view_count":  λ.Calm(ϒasset, "get", λ.StrLiteral("views")),
						"rtmp_live":   λ.Calm(ϒasset, "get", λ.StrLiteral("live")),
						"timestamp":   λ.Cal(ϒparse_iso8601, λ.Calm(ϒasset, "get", λ.StrLiteral("date"))),
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    SportDeutschlandIE__VALID_URL,
				"_real_extract": SportDeutschlandIE__real_extract,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * gamespot/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/gamespot.py
 */

package gamespot

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωonce "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/once"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	GameSpotIE                   λ.Object
	OnceIE                       λ.Object
	ϒcompat_urllib_parse_unquote λ.Object
	ϒdict_get                    λ.Object
	ϒunescapeHTML                λ.Object
	ϒurl_basename                λ.Object
)

func init() {
	λ.InitModule(func() {
		OnceIE = Ωonce.OnceIE
		ϒcompat_urllib_parse_unquote = Ωcompat.ϒcompat_urllib_parse_unquote
		ϒunescapeHTML = Ωutils.ϒunescapeHTML
		ϒurl_basename = Ωutils.ϒurl_basename
		ϒdict_get = Ωutils.ϒdict_get
		GameSpotIE = λ.Cal(λ.TypeType, λ.NewStr("GameSpotIE"), λ.NewTuple(OnceIE), func() λ.Dict {
			var (
				GameSpotIE__TESTS        λ.Object
				GameSpotIE__VALID_URL    λ.Object
				GameSpotIE__real_extract λ.Object
			)
			GameSpotIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?gamespot\\.com/(?:video|article|review)s/(?:[^/]+/\\d+-|embed/)(?P<id>\\d+)")
			GameSpotIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.gamespot.com/videos/arma-3-community-guide-sitrep-i/2300-6410818/"),
					λ.NewStr("md5"): λ.NewStr("b2a30deaa8654fcccd43713a6b6a4825"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("gs-2300-6410818"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Arma 3 - Community Guide: SITREP I"),
						λ.NewStr("description"): λ.NewStr("Check out this video where some of the basics of Arma 3 is explained."),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.gamespot.com/videos/the-witcher-3-wild-hunt-xbox-one-now-playing/2300-6424837/"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("gs-2300-6424837"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Now Playing - The Witcher 3: Wild Hunt"),
						λ.NewStr("description"): λ.NewStr("Join us as we take a look at the early hours of The Witcher 3: Wild Hunt and more."),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://www.gamespot.com/videos/embed/6439218/"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://www.gamespot.com/articles/the-last-of-us-2-receives-new-ps4-trailer/1100-6454469/"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://www.gamespot.com/reviews/gears-of-war-review/1900-6161188/"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			GameSpotIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						QUALITIES_RE        λ.Object
						ϒdata_video         λ.Object
						ϒdata_video_json    λ.Object
						ϒf                  λ.Object
						ϒf4m_url            λ.Object
						ϒflv_url            λ.Object
						ϒformats            λ.Object
						ϒhttp_template      λ.Object
						ϒhttp_url_basename  λ.Object
						ϒm3u8_format        λ.Object
						ϒm3u8_formats       λ.Object
						ϒm3u8_url           λ.Object
						ϒmanifest_url       λ.Object
						ϒonceux_json        λ.Object
						ϒonceux_url         λ.Object
						ϒpage_id            λ.Object
						ϒprogressive_url    λ.Object
						ϒq                  λ.Object
						ϒqualities          λ.Object
						ϒqualities_basename λ.Object
						ϒquality            λ.Object
						ϒself               = λargs[0]
						ϒstreams            λ.Object
						ϒurl                = λargs[1]
						ϒwebpage            λ.Object
						τmp0                λ.Object
						τmp1                λ.Object
						τmp2                λ.Object
					)
					ϒpage_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒpage_id)
					ϒdata_video_json = λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("data-video=[\"\\'](.*?)[\"\\']"), ϒwebpage, λ.NewStr("data video"))
					ϒdata_video = λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), λ.Cal(ϒunescapeHTML, ϒdata_video_json), ϒpage_id)
					ϒstreams = λ.GetItem(ϒdata_video, λ.NewStr("videoStreams"))
					ϒmanifest_url = λ.None
					ϒformats = λ.NewList()
					ϒf4m_url = λ.Cal(λ.GetAttr(ϒstreams, "get", nil), λ.NewStr("f4m_stream"))
					if λ.IsTrue(ϒf4m_url) {
						ϒmanifest_url = ϒf4m_url
						λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_f4m_formats", nil), λ.NewArgs(
							λ.Add(ϒf4m_url, λ.NewStr("?hdcore=3.7.0")),
							ϒpage_id,
						), λ.KWArgs{
							{Name: "f4m_id", Value: λ.NewStr("hds")},
							{Name: "fatal", Value: λ.False},
						}))
					}
					ϒm3u8_url = λ.Cal(ϒdict_get, ϒstreams, λ.NewTuple(
						λ.NewStr("m3u8_stream"),
						λ.NewStr("adaptive_stream"),
					))
					if λ.IsTrue(ϒm3u8_url) {
						ϒmanifest_url = ϒm3u8_url
						ϒm3u8_formats = λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
							ϒm3u8_url,
							ϒpage_id,
							λ.NewStr("mp4"),
							λ.NewStr("m3u8_native"),
						), λ.KWArgs{
							{Name: "m3u8_id", Value: λ.NewStr("hls")},
							{Name: "fatal", Value: λ.False},
						})
						λ.Cal(λ.GetAttr(ϒformats, "extend", nil), ϒm3u8_formats)
					}
					ϒprogressive_url = λ.Cal(ϒdict_get, ϒstreams, λ.NewTuple(
						λ.NewStr("progressive_hd"),
						λ.NewStr("progressive_high"),
						λ.NewStr("progressive_low"),
						λ.NewStr("other_lr"),
					))
					if λ.IsTrue(func() λ.Object {
						if λv := ϒprogressive_url; !λ.IsTrue(λv) {
							return λv
						} else {
							return ϒmanifest_url
						}
					}()) {
						ϒqualities_basename = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewStr("/([^/]+)\\.csmil/"),
							ϒmanifest_url,
							λ.NewStr("qualities basename"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						})
						if λ.IsTrue(ϒqualities_basename) {
							QUALITIES_RE = λ.NewStr("((,\\d+)+,?)")
							ϒqualities = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
								QUALITIES_RE,
								ϒqualities_basename,
								λ.NewStr("qualities"),
							), λ.KWArgs{
								{Name: "default", Value: λ.None},
							})
							if λ.IsTrue(ϒqualities) {
								ϒqualities = λ.Cal(λ.ListType, λ.Cal(λ.MapIteratorType, λ.NewFunction("<lambda>",
									[]λ.Param{
										{Name: "q"},
									},
									0, false, false,
									func(λargs []λ.Object) λ.Object {
										var (
											ϒq = λargs[0]
										)
										return λ.Cal(λ.IntType, ϒq)
									}), λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒqualities, "strip", nil), λ.NewStr(",")), "split", nil), λ.NewStr(","))))
								λ.Cal(λ.GetAttr(ϒqualities, "sort", nil))
								ϒhttp_template = λ.Cal(Ωre.ϒsub, QUALITIES_RE, λ.NewStr("%d"), ϒqualities_basename)
								ϒhttp_url_basename = λ.Cal(ϒurl_basename, ϒprogressive_url)
								if λ.IsTrue(ϒm3u8_formats) {
									λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒm3u8_formats)
									ϒm3u8_formats = λ.Cal(λ.ListType, λ.Cal(λ.FilterIteratorType, λ.NewFunction("<lambda>",
										[]λ.Param{
											{Name: "f"},
										},
										0, false, false,
										func(λargs []λ.Object) λ.Object {
											var (
												ϒf = λargs[0]
											)
											return λ.Ne(λ.Cal(λ.GetAttr(ϒf, "get", nil), λ.NewStr("vcodec")), λ.NewStr("none"))
										}), ϒm3u8_formats))
								}
								if λ.IsTrue(λ.Eq(λ.Cal(λ.BuiltinLen, ϒqualities), λ.Cal(λ.BuiltinLen, ϒm3u8_formats))) {
									τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.ZipIteratorType, ϒqualities, ϒm3u8_formats))
									for {
										if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
											break
										}
										τmp2 = τmp1
										ϒq = λ.GetItem(τmp2, λ.NewInt(0))
										ϒm3u8_format = λ.GetItem(τmp2, λ.NewInt(1))
										ϒf = λ.Cal(λ.GetAttr(ϒm3u8_format, "copy", nil))
										λ.Cal(λ.GetAttr(ϒf, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
											λ.NewStr("url"):       λ.Cal(λ.GetAttr(ϒprogressive_url, "replace", nil), ϒhttp_url_basename, λ.Mod(ϒhttp_template, ϒq)),
											λ.NewStr("format_id"): λ.Cal(λ.GetAttr(λ.GetItem(ϒf, λ.NewStr("format_id")), "replace", nil), λ.NewStr("hls"), λ.NewStr("http")),
											λ.NewStr("protocol"):  λ.NewStr("http"),
										}))
										λ.Cal(λ.GetAttr(ϒformats, "append", nil), ϒf)
									}
								} else {
									τmp0 = λ.Cal(λ.BuiltinIter, ϒqualities)
									for {
										if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
											break
										}
										ϒq = τmp1
										λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
											λ.NewStr("url"):       λ.Cal(λ.GetAttr(ϒprogressive_url, "replace", nil), ϒhttp_url_basename, λ.Mod(ϒhttp_template, ϒq)),
											λ.NewStr("ext"):       λ.NewStr("mp4"),
											λ.NewStr("format_id"): λ.Mod(λ.NewStr("http-%d"), ϒq),
											λ.NewStr("tbr"):       ϒq,
										}))
									}
								}
							}
						}
					}
					ϒonceux_json = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("data-onceux-options=[\"\\'](.*?)[\"\\']"),
						ϒwebpage,
						λ.NewStr("data video"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(ϒonceux_json) {
						ϒonceux_url = λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), λ.Cal(ϒunescapeHTML, ϒonceux_json), ϒpage_id), "get", nil), λ.NewStr("metadataUri"))
						if λ.IsTrue(ϒonceux_url) {
							λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_once_formats", nil), λ.NewArgs(λ.Cal(Ωre.ϒsub, λ.NewStr("https?://[^/]+"), λ.NewStr("http://once.unicornmedia.com"), ϒonceux_url)), λ.KWArgs{
								{Name: "http_formats_preference", Value: λ.Neg(λ.NewInt(1))},
							}))
						}
					}
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒformats))) {
						τmp0 = λ.Cal(λ.BuiltinIter, λ.NewList(
							λ.NewStr("sd"),
							λ.NewStr("hd"),
						))
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒquality = τmp1
							ϒflv_url = λ.Cal(λ.GetAttr(ϒstreams, "get", nil), λ.Cal(λ.GetAttr(λ.NewStr("f4m_{0}"), "format", nil), ϒquality))
							if λ.IsTrue(λ.NewBool(ϒflv_url != λ.None)) {
								λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("url"):       ϒflv_url,
									λ.NewStr("ext"):       λ.NewStr("flv"),
									λ.NewStr("format_id"): ϒquality,
								}))
							}
						}
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.GetItem(ϒdata_video, λ.NewStr("guid")),
						λ.NewStr("display_id"):  ϒpage_id,
						λ.NewStr("title"):       λ.Cal(ϒcompat_urllib_parse_unquote, λ.GetItem(ϒdata_video, λ.NewStr("title"))),
						λ.NewStr("formats"):     ϒformats,
						λ.NewStr("description"): λ.Cal(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewStr("description"), ϒwebpage),
						λ.NewStr("thumbnail"):   λ.Cal(λ.GetAttr(ϒself, "_og_search_thumbnail", nil), ϒwebpage),
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        GameSpotIE__TESTS,
				λ.NewStr("_VALID_URL"):    GameSpotIE__VALID_URL,
				λ.NewStr("_real_extract"): GameSpotIE__real_extract,
			})
		}())
	})
}

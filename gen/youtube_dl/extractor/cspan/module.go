// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * cspan/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/cspan.py
 */

package cspan

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωsenateisvp "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/senateisvp"
	Ωustream "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/ustream"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	CSpanIE               λ.Object
	ExtractorError        λ.Object
	InfoExtractor         λ.Object
	SenateISVPIE          λ.Object
	UstreamIE             λ.Object
	ϒdetermine_ext        λ.Object
	ϒextract_attributes   λ.Object
	ϒfind_xpath_attr      λ.Object
	ϒget_element_by_class λ.Object
	ϒint_or_none          λ.Object
	ϒsmuggle_url          λ.Object
	ϒunescapeHTML         λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ExtractorError = Ωutils.ExtractorError
		ϒextract_attributes = Ωutils.ϒextract_attributes
		ϒfind_xpath_attr = Ωutils.ϒfind_xpath_attr
		ϒget_element_by_class = Ωutils.ϒget_element_by_class
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒsmuggle_url = Ωutils.ϒsmuggle_url
		ϒunescapeHTML = Ωutils.ϒunescapeHTML
		SenateISVPIE = Ωsenateisvp.SenateISVPIE
		UstreamIE = Ωustream.UstreamIE
		CSpanIE = λ.Cal(λ.TypeType, λ.NewStr("CSpanIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				CSpanIE__TESTS        λ.Object
				CSpanIE__VALID_URL    λ.Object
				CSpanIE__real_extract λ.Object
			)
			CSpanIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?c-span\\.org/video/\\?(?P<id>[0-9a-f]+)")
			CSpanIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.c-span.org/video/?313572-1/HolderonV"),
					λ.NewStr("md5"): λ.NewStr("94b29a4f131ff03d23471dd6f60b6a1d"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):    λ.NewStr("315139"),
						λ.NewStr("title"): λ.NewStr("Attorney General Eric Holder on Voting Rights Act Decision"),
					}),
					λ.NewStr("playlist_mincount"): λ.NewInt(2),
					λ.NewStr("skip"):              λ.NewStr("Regularly fails on travis, for unknown reasons"),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.c-span.org/video/?c4486943/cspan-international-health-care-models"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("c4486943"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("CSPAN - International Health Care Models"),
						λ.NewStr("description"): λ.NewStr("md5:7a985a2d595dba00af3d9c9f0783c967"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.c-span.org/video/?318608-1/gm-ignition-switch-recall"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):    λ.NewStr("342759"),
						λ.NewStr("title"): λ.NewStr("General Motors Ignition Switch Recall"),
					}),
					λ.NewStr("playlist_mincount"): λ.NewInt(6),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.c-span.org/video/?104517-1/immigration-reforms-needed-protect-skilled-american-workers"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):    λ.NewStr("judiciary031715"),
						λ.NewStr("ext"):   λ.NewStr("mp4"),
						λ.NewStr("title"): λ.NewStr("Immigration Reforms Needed to Protect Skilled American Workers"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.c-span.org/video/?114917-1/armed-services"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("58428542"),
						λ.NewStr("ext"):         λ.NewStr("flv"),
						λ.NewStr("title"):       λ.NewStr("USHR07 Armed Services Committee"),
						λ.NewStr("description"): λ.NewStr("hsas00-2118-20150204-1000et-07\n\n\nUSHR07 Armed Services Committee"),
						λ.NewStr("timestamp"):   λ.NewInt(1423060374),
						λ.NewStr("upload_date"): λ.NewStr("20150204"),
						λ.NewStr("uploader"):    λ.NewStr("HouseCommittee"),
						λ.NewStr("uploader_id"): λ.NewStr("12987475"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://www.c-span.org/video/?437336-1/judiciary-antitrust-competition-policy-consumer-rights"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			CSpanIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒbc              λ.Object
						ϒbc_attr         λ.Object
						ϒbc_url          λ.Object
						ϒcapfile         λ.Object
						ϒdata            λ.Object
						ϒdescription     λ.Object
						ϒdoc             λ.Object
						ϒentries         λ.Object
						ϒentry           λ.Object
						ϒerror_message   λ.Object
						ϒf               λ.Object
						ϒfiles           λ.Object
						ϒformats         λ.Object
						ϒget_text_attr   λ.Object
						ϒm               λ.Object
						ϒmatches         λ.Object
						ϒpartnum         λ.Object
						ϒpath            λ.Object
						ϒpatterns        λ.Object
						ϒquality         λ.Object
						ϒresults         λ.Object
						ϒself            = λargs[0]
						ϒsenate_isvp_url λ.Object
						ϒsurl            λ.Object
						ϒthumbnail       λ.Object
						ϒtitle           λ.Object
						ϒurl             = λargs[1]
						ϒustream_url     λ.Object
						ϒvideo_id        λ.Object
						ϒvideo_type      λ.Object
						ϒwebpage         λ.Object
						τmp0             λ.Object
						τmp1             λ.Object
						τmp2             λ.Object
						τmp3             λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒvideo_type = λ.None
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					ϒustream_url = λ.Cal(λ.GetAttr(UstreamIE, "_extract_url", nil), ϒwebpage)
					if λ.IsTrue(ϒustream_url) {
						return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), ϒustream_url, λ.Cal(λ.GetAttr(UstreamIE, "ie_key", nil)))
					}
					if λ.IsTrue(λ.NewBool(!λ.Contains(ϒurl, λ.NewStr("&vod")))) {
						ϒbc = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewStr("(<[^>]+id='brightcove-player-embed'[^>]+>)"),
							ϒwebpage,
							λ.NewStr("brightcove embed"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						})
						if λ.IsTrue(ϒbc) {
							ϒbc_attr = λ.Cal(ϒextract_attributes, ϒbc)
							ϒbc_url = λ.Mod(λ.GetAttr(ϒself, "BRIGHTCOVE_URL_TEMPLATE", nil), λ.NewTuple(
								λ.Cal(λ.GetAttr(ϒbc_attr, "get", nil), λ.NewStr("data-bcaccountid"), λ.NewStr("3162030207001")),
								λ.Cal(λ.GetAttr(ϒbc_attr, "get", nil), λ.NewStr("data-noprebcplayerid"), λ.NewStr("SyGGpuJy3g")),
								λ.Cal(λ.GetAttr(ϒbc_attr, "get", nil), λ.NewStr("data-newbcplayerid"), λ.NewStr("default")),
								λ.GetItem(ϒbc_attr, λ.NewStr("data-bcid")),
							))
							return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), λ.Cal(ϒsmuggle_url, ϒbc_url, λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("source_url"): ϒurl,
							})))
						}
					}
					ϒpatterns = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgen λ.Generator) λ.Object {
								var (
									ϒt   λ.Object
									τmp0 λ.Object
									τmp1 λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
									λ.NewStr("id"),
									λ.NewStr("prog"),
								))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒt = τmp1
									λgen.Yield(λ.Mod(λ.NewStr("id=\\'clip(%s)\\'\\s*value=\\'([0-9]+)\\'"), ϒt))
								}
								return λ.None
							})
						})))
					ϒresults = λ.Cal(λ.ListType, λ.Cal(λ.FilterIteratorType, λ.None, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgen λ.Generator) λ.Object {
								var (
									ϒp   λ.Object
									τmp0 λ.Object
									τmp1 λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, ϒpatterns)
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒp = τmp1
									λgen.Yield(λ.Cal(Ωre.ϒsearch, ϒp, ϒwebpage))
								}
								return λ.None
							})
						}))))
					if λ.IsTrue(ϒresults) {
						ϒmatches = λ.GetItem(ϒresults, λ.NewInt(0))
						τmp0 = λ.Cal(λ.GetAttr(ϒmatches, "groups", nil))
						ϒvideo_type = λ.GetItem(τmp0, λ.NewInt(0))
						ϒvideo_id = λ.GetItem(τmp0, λ.NewInt(1))
						ϒvideo_type = func() λ.Object {
							if λ.IsTrue(λ.Eq(ϒvideo_type, λ.NewStr("id"))) {
								return λ.NewStr("clip")
							} else {
								return λ.NewStr("program")
							}
						}()
					} else {
						ϒm = λ.Cal(Ωre.ϒsearch, λ.NewStr("data-(?P<type>clip|prog)id=[\"\\'](?P<id>\\d+)"), ϒwebpage)
						if λ.IsTrue(ϒm) {
							ϒvideo_id = λ.Cal(λ.GetAttr(ϒm, "group", nil), λ.NewStr("id"))
							ϒvideo_type = func() λ.Object {
								if λ.IsTrue(λ.Eq(λ.Cal(λ.GetAttr(ϒm, "group", nil), λ.NewStr("type")), λ.NewStr("prog"))) {
									return λ.NewStr("program")
								} else {
									return λ.NewStr("clip")
								}
							}()
						} else {
							ϒsenate_isvp_url = λ.Cal(λ.GetAttr(SenateISVPIE, "_search_iframe_url", nil), ϒwebpage)
							if λ.IsTrue(ϒsenate_isvp_url) {
								ϒtitle = λ.Cal(λ.GetAttr(ϒself, "_og_search_title", nil), ϒwebpage)
								ϒsurl = λ.Cal(ϒsmuggle_url, ϒsenate_isvp_url, λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("force_title"): ϒtitle,
								}))
								return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), ϒsurl, λ.NewStr("SenateISVP"), ϒvideo_id, ϒtitle)
							}
							ϒvideo_id = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
								λ.NewStr("jwsetup\\.clipprog\\s*=\\s*(\\d+);"),
								ϒwebpage,
								λ.NewStr("jwsetup program id"),
							), λ.KWArgs{
								{Name: "default", Value: λ.None},
							})
							if λ.IsTrue(ϒvideo_id) {
								ϒvideo_type = λ.NewStr("program")
							}
						}
					}
					if λ.IsTrue(func() λ.Object {
						if λv := λ.NewBool(ϒvideo_type == λ.None); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewBool(ϒvideo_id == λ.None)
						}
					}()) {
						ϒerror_message = λ.Cal(ϒget_element_by_class, λ.NewStr("VLplayer-error-message"), ϒwebpage)
						if λ.IsTrue(ϒerror_message) {
							panic(λ.Raise(λ.Cal(ExtractorError, ϒerror_message)))
						}
						panic(λ.Raise(λ.Cal(ExtractorError, λ.NewStr("unable to find video id and type"))))
					}
					ϒget_text_attr = λ.NewFunction("get_text_attr",
						[]λ.Param{
							{Name: "d"},
							{Name: "attr"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒattr = λargs[1]
								ϒd    = λargs[0]
							)
							return λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒd, "get", nil), ϒattr, λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("#text"))
						})
					ϒdata = λ.GetItem(λ.Cal(λ.GetAttr(ϒself, "_download_json", nil), λ.Mod(λ.NewStr("http://www.c-span.org/assets/player/ajax-player.php?os=android&html5=%s&id=%s"), λ.NewTuple(
						ϒvideo_type,
						ϒvideo_id,
					)), ϒvideo_id), λ.NewStr("video"))
					if λ.IsTrue(λ.Ne(λ.GetItem(ϒdata, λ.NewStr("@status")), λ.NewStr("Success"))) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.NewStr("%s said: %s"), λ.NewTuple(
							λ.GetAttr(ϒself, "IE_NAME", nil),
							λ.Cal(ϒget_text_attr, ϒdata, λ.NewStr("error")),
						))), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒdoc = λ.Cal(λ.GetAttr(ϒself, "_download_xml", nil), λ.Mod(λ.NewStr("http://www.c-span.org/common/services/flashXml.php?%sid=%s"), λ.NewTuple(
						ϒvideo_type,
						ϒvideo_id,
					)), ϒvideo_id)
					ϒdescription = λ.Cal(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewStr("description"), ϒwebpage)
					ϒtitle = λ.GetAttr(λ.Cal(ϒfind_xpath_attr, ϒdoc, λ.NewStr(".//string"), λ.NewStr("name"), λ.NewStr("title")), "text", nil)
					ϒthumbnail = λ.GetAttr(λ.Cal(ϒfind_xpath_attr, ϒdoc, λ.NewStr(".//string"), λ.NewStr("name"), λ.NewStr("poster")), "text", nil)
					ϒfiles = λ.GetItem(ϒdata, λ.NewStr("files"))
					ϒcapfile = λ.Cal(ϒget_text_attr, ϒdata, λ.NewStr("capfile"))
					ϒentries = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.EnumerateIteratorType, ϒfiles))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒpartnum = λ.GetItem(τmp2, λ.NewInt(0))
						ϒf = λ.GetItem(τmp2, λ.NewInt(1))
						ϒformats = λ.NewList()
						τmp2 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒf, "get", nil), λ.NewStr("qualities"), λ.NewList()))
						for {
							if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
								break
							}
							ϒquality = τmp3
							λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("format_id"): λ.Mod(λ.NewStr("%s-%sp"), λ.NewTuple(
									λ.Cal(ϒget_text_attr, ϒquality, λ.NewStr("bitrate")),
									λ.Cal(ϒget_text_attr, ϒquality, λ.NewStr("height")),
								)),
								λ.NewStr("url"):    λ.Cal(ϒunescapeHTML, λ.Cal(ϒget_text_attr, ϒquality, λ.NewStr("file"))),
								λ.NewStr("height"): λ.Cal(ϒint_or_none, λ.Cal(ϒget_text_attr, ϒquality, λ.NewStr("height"))),
								λ.NewStr("tbr"):    λ.Cal(ϒint_or_none, λ.Cal(ϒget_text_attr, ϒquality, λ.NewStr("bitrate"))),
							}))
						}
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒformats))) {
							ϒpath = λ.Cal(ϒunescapeHTML, λ.Cal(ϒget_text_attr, ϒf, λ.NewStr("path")))
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒpath))) {
								continue
							}
							ϒformats = func() λ.Object {
								if λ.IsTrue(λ.Eq(λ.Cal(ϒdetermine_ext, ϒpath), λ.NewStr("m3u8"))) {
									return λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
										ϒpath,
										ϒvideo_id,
										λ.NewStr("mp4"),
									), λ.KWArgs{
										{Name: "entry_protocol", Value: λ.NewStr("m3u8_native")},
										{Name: "m3u8_id", Value: λ.NewStr("hls")},
									})
								} else {
									return λ.NewList(λ.NewDictWithTable(map[λ.Object]λ.Object{
										λ.NewStr("url"): ϒpath,
									}))
								}
							}()
						}
						λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
						λ.Cal(λ.GetAttr(ϒentries, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("id"): λ.Mod(λ.NewStr("%s_%d"), λ.NewTuple(
								ϒvideo_id,
								λ.Add(ϒpartnum, λ.NewInt(1)),
							)),
							λ.NewStr("title"): func() λ.Object {
								if λ.IsTrue(λ.Eq(λ.Cal(λ.BuiltinLen, ϒfiles), λ.NewInt(1))) {
									return ϒtitle
								} else {
									return λ.Mod(λ.NewStr("%s part %d"), λ.NewTuple(
										ϒtitle,
										λ.Add(ϒpartnum, λ.NewInt(1)),
									))
								}
							}(),
							λ.NewStr("formats"):     ϒformats,
							λ.NewStr("description"): ϒdescription,
							λ.NewStr("thumbnail"):   ϒthumbnail,
							λ.NewStr("duration"):    λ.Cal(ϒint_or_none, λ.Cal(ϒget_text_attr, ϒf, λ.NewStr("length"))),
							λ.NewStr("subtitles"): func() λ.Object {
								if λ.IsTrue(ϒcapfile) {
									return λ.NewDictWithTable(map[λ.Object]λ.Object{
										λ.NewStr("en"): λ.NewList(λ.NewDictWithTable(map[λ.Object]λ.Object{
											λ.NewStr("url"): ϒcapfile,
											λ.NewStr("ext"): λ.Cal(ϒdetermine_ext, ϒcapfile, λ.NewStr("dfxp")),
										})),
									})
								} else {
									return λ.None
								}
							}(),
						}))
					}
					if λ.IsTrue(λ.Eq(λ.Cal(λ.BuiltinLen, ϒentries), λ.NewInt(1))) {
						ϒentry = λ.Cal(λ.DictType, λ.GetItem(ϒentries, λ.NewInt(0)))
						λ.SetItem(ϒentry, λ.NewStr("id"), func() λ.Object {
							if λ.IsTrue(λ.Eq(ϒvideo_type, λ.NewStr("clip"))) {
								return λ.Add(λ.NewStr("c"), ϒvideo_id)
							} else {
								return ϒvideo_id
							}
						}())
						return ϒentry
					} else {
						return λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("_type"):   λ.NewStr("playlist"),
							λ.NewStr("entries"): ϒentries,
							λ.NewStr("title"):   ϒtitle,
							λ.NewStr("id"): func() λ.Object {
								if λ.IsTrue(λ.Eq(ϒvideo_type, λ.NewStr("clip"))) {
									return λ.Add(λ.NewStr("c"), ϒvideo_id)
								} else {
									return ϒvideo_id
								}
							}(),
						})
					}
					return λ.None
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        CSpanIE__TESTS,
				λ.NewStr("_VALID_URL"):    CSpanIE__VALID_URL,
				λ.NewStr("_real_extract"): CSpanIE__real_extract,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * jeuxvideo/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/jeuxvideo.py
 */

package jeuxvideo

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor λ.Object
	JeuxVideoIE   λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		JeuxVideoIE = λ.Cal(λ.TypeType, λ.StrLiteral("JeuxVideoIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				JeuxVideoIE__VALID_URL    λ.Object
				JeuxVideoIE__real_extract λ.Object
			)
			JeuxVideoIE__VALID_URL = λ.StrLiteral("https?://.*?\\.jeuxvideo\\.com/.*/(.*?)\\.htm")
			JeuxVideoIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒconfig     λ.Object
						ϒconfig_url λ.Object
						ϒformats    λ.Object
						ϒmobj       λ.Object
						ϒself       = λargs[0]
						ϒtitle      λ.Object
						ϒurl        = λargs[1]
						ϒvideo_id   λ.Object
						ϒwebpage    λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒtitle = λ.Calm(ϒmobj, "group", λ.IntLiteral(1))
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒtitle)
					ϒtitle = func() λ.Object {
						if λv := λ.Calm(ϒself, "_html_search_meta", λ.StrLiteral("name"), ϒwebpage); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒself, "_og_search_title", ϒwebpage)
						}
					}()
					ϒconfig_url = λ.Calm(ϒself, "_html_search_regex", λ.StrLiteral("data-src(?:set-video)?=\"(/contenu/medias/video\\.php.*?)\""), ϒwebpage, λ.StrLiteral("config URL"))
					ϒconfig_url = λ.Add(λ.StrLiteral("http://www.jeuxvideo.com"), ϒconfig_url)
					ϒvideo_id = λ.Calm(ϒself, "_search_regex", λ.StrLiteral("id=(\\d+)"), ϒconfig_url, λ.StrLiteral("video ID"))
					ϒconfig = λ.Calm(ϒself, "_download_json", ϒconfig_url, ϒtitle, λ.StrLiteral("Downloading JSON config"))
					ϒformats = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒsource λ.Object
									τmp0    λ.Object
									τmp1    λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.ReversedIteratorType, λ.GetItem(ϒconfig, λ.StrLiteral("sources"))))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒsource = τmp1
									λgy.Yield(λ.DictLiteral(map[string]λ.Object{
										"url":        λ.GetItem(ϒsource, λ.StrLiteral("file")),
										"format_id":  λ.GetItem(ϒsource, λ.StrLiteral("label")),
										"resolution": λ.GetItem(ϒsource, λ.StrLiteral("label")),
									}))
								}
								return λ.None
							})
						})))
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒvideo_id,
						"title":       ϒtitle,
						"formats":     ϒformats,
						"description": λ.Calm(ϒself, "_og_search_description", ϒwebpage),
						"thumbnail":   λ.Calm(ϒconfig, "get", λ.StrLiteral("image")),
					})
				})
			return λ.DictLiteral(map[string]λ.Object{
				"_VALID_URL":    JeuxVideoIE__VALID_URL,
				"_real_extract": JeuxVideoIE__real_extract,
			})
		}())
	})
}

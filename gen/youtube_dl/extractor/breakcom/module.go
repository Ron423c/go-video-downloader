// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * breakcom/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/breakcom.py
 */

package breakcom

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωyoutube "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/youtube"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	BreakIE       λ.Object
	InfoExtractor λ.Object
	YoutubeIE     λ.Object
	ϒint_or_none  λ.Object
	ϒurl_or_none  λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		YoutubeIE = Ωyoutube.YoutubeIE
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒurl_or_none = Ωutils.ϒurl_or_none
		BreakIE = λ.Cal(λ.TypeType, λ.NewStr("BreakIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				BreakIE__TESTS        λ.Object
				BreakIE__VALID_URL    λ.Object
				BreakIE__real_extract λ.Object
			)
			BreakIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?break\\.com/video/(?P<display_id>[^/]+?)(?:-(?P<id>\\d+))?(?:[/?#&]|$)")
			BreakIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.break.com/video/when-girls-act-like-guys-2468056"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):        λ.NewStr("2468056"),
						λ.NewStr("ext"):       λ.NewStr("mp4"),
						λ.NewStr("title"):     λ.NewStr("When Girls Act Like D-Bags"),
						λ.NewStr("age_limit"): λ.NewInt(13),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.break.com/video/someone-forgot-boat-brakes-work"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("RrrDLdeL2HQ"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Whale Watching Boat Crashing Into San Diego Dock"),
						λ.NewStr("description"): λ.NewStr("md5:afc1b2772f0a8468be51dd80eb021069"),
						λ.NewStr("upload_date"): λ.NewStr("20160331"),
						λ.NewStr("uploader"):    λ.NewStr("Steve Holden"),
						λ.NewStr("uploader_id"): λ.NewStr("sdholden07"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://www.break.com/video/ugc/baby-flex-2773063"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			BreakIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒage_limit   λ.Object
						ϒbitrate     λ.Object
						ϒcontent     λ.Object
						ϒdisplay_id  λ.Object
						ϒformats     λ.Object
						ϒget         λ.Object
						ϒself        = λargs[0]
						ϒtitle       λ.Object
						ϒurl         = λargs[1]
						ϒvideo       λ.Object
						ϒvideo_id    λ.Object
						ϒvideo_url   λ.Object
						ϒwebpage     λ.Object
						ϒyoutube_url λ.Object
						τmp0         λ.Object
						τmp1         λ.Object
					)
					τmp0 = λ.Cal(λ.GetAttr(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups", nil))
					ϒdisplay_id = λ.GetItem(τmp0, λ.NewInt(0))
					ϒvideo_id = λ.GetItem(τmp0, λ.NewInt(1))
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒdisplay_id)
					ϒyoutube_url = λ.Cal(λ.GetAttr(YoutubeIE, "_extract_url", nil), ϒwebpage)
					if λ.IsTrue(ϒyoutube_url) {
						return λ.Call(λ.GetAttr(ϒself, "url_result", nil), λ.NewArgs(ϒyoutube_url), λ.KWArgs{
							{Name: "ie", Value: λ.Cal(λ.GetAttr(YoutubeIE, "ie_key", nil))},
						})
					}
					ϒcontent = λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("(?s)content[\"\\']\\s*:\\s*(\\[.+?\\])\\s*[,\\n]"), ϒwebpage, λ.NewStr("content")), ϒdisplay_id)
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, ϒcontent)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒvideo = τmp1
						ϒvideo_url = λ.Cal(ϒurl_or_none, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("url")))
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒvideo_url))) {
							continue
						}
						ϒbitrate = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewStr("(\\d+)_kbps"),
							ϒvideo_url,
							λ.NewStr("tbr"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}))
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"): ϒvideo_url,
							λ.NewStr("format_id"): func() λ.Object {
								if λ.IsTrue(ϒbitrate) {
									return λ.Mod(λ.NewStr("http-%d"), ϒbitrate)
								} else {
									return λ.NewStr("http")
								}
							}(),
							λ.NewStr("tbr"): ϒbitrate,
						}))
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒtitle = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewTuple(
							λ.NewStr("title[\"\\']\\s*:\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1"),
							λ.NewStr("<h1[^>]*>(?P<value>[^<]+)"),
						),
						ϒwebpage,
						λ.NewStr("title"),
					), λ.KWArgs{
						{Name: "group", Value: λ.NewStr("value")},
					})
					ϒget = λ.NewFunction("get",
						[]λ.Param{
							{Name: "key"},
							{Name: "name"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒkey  = λargs[0]
								ϒname = λargs[1]
							)
							return λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
								λ.Mod(λ.NewStr("%s[\"\\']\\s*:\\s*[\"\\'](\\d+)"), ϒkey),
								ϒwebpage,
								ϒname,
							), λ.KWArgs{
								{Name: "default", Value: λ.None},
							}))
						})
					ϒage_limit = λ.Cal(ϒget, λ.NewStr("ratings"), λ.NewStr("age limit"))
					ϒvideo_id = func() λ.Object {
						if λv := ϒvideo_id; λ.IsTrue(λv) {
							return λv
						} else if λv := λ.Cal(ϒget, λ.NewStr("pid"), λ.NewStr("video id")); λ.IsTrue(λv) {
							return λv
						} else {
							return ϒdisplay_id
						}
					}()
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):         ϒvideo_id,
						λ.NewStr("display_id"): ϒdisplay_id,
						λ.NewStr("title"):      ϒtitle,
						λ.NewStr("thumbnail"):  λ.Cal(λ.GetAttr(ϒself, "_og_search_thumbnail", nil), ϒwebpage),
						λ.NewStr("age_limit"):  ϒage_limit,
						λ.NewStr("formats"):    ϒformats,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        BreakIE__TESTS,
				λ.NewStr("_VALID_URL"):    BreakIE__VALID_URL,
				λ.NewStr("_real_extract"): BreakIE__real_extract,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * screencastomatic/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/screencastomatic.py
 */

package screencastomatic

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor      λ.Object
	ScreencastOMaticIE λ.Object
	ϒjs_to_json        λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒjs_to_json = Ωutils.ϒjs_to_json
		ScreencastOMaticIE = λ.Cal(λ.TypeType, λ.StrLiteral("ScreencastOMaticIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ScreencastOMaticIE__VALID_URL    λ.Object
				ScreencastOMaticIE__real_extract λ.Object
			)
			ScreencastOMaticIE__VALID_URL = λ.StrLiteral("https?://screencast-o-matic\\.com/watch/(?P<id>[0-9a-zA-Z]+)")
			ScreencastOMaticIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒinfo_dict     λ.Object
						ϒjwplayer_data λ.Object
						ϒself          = λargs[0]
						ϒurl           = λargs[1]
						ϒvideo_id      λ.Object
						ϒwebpage       λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒvideo_id)
					ϒjwplayer_data = λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
						λ.Calm(ϒself, "_search_regex", λ.StrLiteral("(?s)jwplayer\\('mp4Player'\\).setup\\((\\{.*?\\})\\);"), ϒwebpage, λ.StrLiteral("setup code")),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "transform_source", Value: ϒjs_to_json},
					})
					ϒinfo_dict = λ.Call(λ.GetAttr(ϒself, "_parse_jwplayer_data", nil), λ.NewArgs(
						ϒjwplayer_data,
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "require_title", Value: λ.False},
					})
					λ.Calm(ϒinfo_dict, "update", λ.DictLiteral(map[string]λ.Object{
						"title":       λ.Calm(ϒself, "_og_search_title", ϒwebpage),
						"description": λ.Calm(ϒself, "_og_search_description", ϒwebpage),
					}))
					return ϒinfo_dict
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    ScreencastOMaticIE__VALID_URL,
				"_real_extract": ScreencastOMaticIE__real_extract,
			})
		}())
	})
}

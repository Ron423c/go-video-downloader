// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * khanacademy/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/khanacademy.py
 */

package khanacademy

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor    λ.Object
	KhanAcademyIE    λ.Object
	ϒunified_strdate λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒunified_strdate = Ωutils.ϒunified_strdate
		KhanAcademyIE = λ.Cal(λ.TypeType, λ.NewStr("KhanAcademyIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				KhanAcademyIE_IE_NAME       λ.Object
				KhanAcademyIE__VALID_URL    λ.Object
				KhanAcademyIE__real_extract λ.Object
			)
			KhanAcademyIE__VALID_URL = λ.NewStr("^https?://(?:(?:www|api)\\.)?khanacademy\\.org/(?P<key>[^/]+)/(?:[^/]+/){,2}(?P<id>[^?#/]+)(?:$|[?#])")
			KhanAcademyIE_IE_NAME = λ.NewStr("KhanAcademy")
			KhanAcademyIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdata        λ.Object
						ϒentries     λ.Object
						ϒm           λ.Object
						ϒself        = λargs[0]
						ϒupload_date λ.Object
						ϒuploader    λ.Object
						ϒurl         = λargs[1]
						ϒvideo_id    λ.Object
					)
					ϒm = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒm, "group", nil), λ.NewStr("id"))
					if λ.IsTrue(λ.Eq(λ.Cal(λ.GetAttr(ϒm, "group", nil), λ.NewStr("key")), λ.NewStr("video"))) {
						ϒdata = λ.Cal(λ.GetAttr(ϒself, "_download_json", nil), λ.Add(λ.NewStr("http://api.khanacademy.org/api/v1/videos/"), ϒvideo_id), ϒvideo_id, λ.NewStr("Downloading video info"))
						ϒupload_date = λ.Cal(ϒunified_strdate, λ.GetItem(ϒdata, λ.NewStr("date_added")))
						ϒuploader = λ.Cal(λ.GetAttr(λ.NewStr(", "), "join", nil), λ.GetItem(ϒdata, λ.NewStr("author_names")))
						return λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("_type"):       λ.NewStr("url_transparent"),
							λ.NewStr("url"):         λ.GetItem(ϒdata, λ.NewStr("url")),
							λ.NewStr("id"):          ϒvideo_id,
							λ.NewStr("title"):       λ.GetItem(ϒdata, λ.NewStr("title")),
							λ.NewStr("thumbnail"):   λ.GetItem(ϒdata, λ.NewStr("image_url")),
							λ.NewStr("duration"):    λ.GetItem(ϒdata, λ.NewStr("duration")),
							λ.NewStr("description"): λ.GetItem(ϒdata, λ.NewStr("description")),
							λ.NewStr("uploader"):    ϒuploader,
							λ.NewStr("upload_date"): ϒupload_date,
						})
					} else {
						ϒdata = λ.Cal(λ.GetAttr(ϒself, "_download_json", nil), λ.Add(λ.NewStr("http://api.khanacademy.org/api/v1/topic/"), ϒvideo_id), ϒvideo_id, λ.NewStr("Downloading topic info"))
						ϒentries = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
							nil,
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
									var (
										ϒc   λ.Object
										τmp0 λ.Object
										τmp1 λ.Object
									)
									τmp0 = λ.Cal(λ.BuiltinIter, λ.GetItem(ϒdata, λ.NewStr("children")))
									for {
										if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
											break
										}
										ϒc = τmp1
										if λ.IsTrue(λ.NewBool(λ.Contains(λ.NewTuple(
											λ.NewStr("Video"),
											λ.NewStr("Topic"),
										), λ.GetItem(ϒc, λ.NewStr("kind"))))) {
											λgy.Yield(λ.NewDictWithTable(map[λ.Object]λ.Object{
												λ.NewStr("_type"): λ.NewStr("url"),
												λ.NewStr("url"):   λ.GetItem(ϒc, λ.NewStr("url")),
												λ.NewStr("id"):    λ.GetItem(ϒc, λ.NewStr("id")),
												λ.NewStr("title"): λ.GetItem(ϒc, λ.NewStr("title")),
											}))
										}
									}
									return λ.None
								})
							})))
						return λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("_type"):       λ.NewStr("playlist"),
							λ.NewStr("id"):          ϒvideo_id,
							λ.NewStr("title"):       λ.GetItem(ϒdata, λ.NewStr("title")),
							λ.NewStr("description"): λ.GetItem(ϒdata, λ.NewStr("description")),
							λ.NewStr("entries"):     ϒentries,
						})
					}
					return λ.None
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):       KhanAcademyIE_IE_NAME,
				λ.NewStr("_VALID_URL"):    KhanAcademyIE__VALID_URL,
				λ.NewStr("_real_extract"): KhanAcademyIE__real_extract,
			})
		}())
	})
}

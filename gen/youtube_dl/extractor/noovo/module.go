// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * noovo/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/noovo.py
 */

package noovo

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωbrightcove "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/brightcove"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	BrightcoveNewIE λ.Object
	InfoExtractor   λ.Object
	NoovoIE         λ.Object
	ϒcompat_str     λ.Object
	ϒint_or_none    λ.Object
	ϒjs_to_json     λ.Object
	ϒsmuggle_url    λ.Object
	ϒtry_get        λ.Object
)

func init() {
	λ.InitModule(func() {
		BrightcoveNewIE = Ωbrightcove.BrightcoveNewIE
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒjs_to_json = Ωutils.ϒjs_to_json
		ϒsmuggle_url = Ωutils.ϒsmuggle_url
		ϒtry_get = Ωutils.ϒtry_get
		NoovoIE = λ.Cal(λ.TypeType, λ.NewStr("NoovoIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				NoovoIE_BRIGHTCOVE_URL_TEMPLATE λ.Object
				NoovoIE__VALID_URL              λ.Object
				NoovoIE__real_extract           λ.Object
			)
			NoovoIE__VALID_URL = λ.NewStr("https?://(?:[^/]+\\.)?noovo\\.ca/videos/(?P<id>[^/]+/[^/?#&]+)")
			NoovoIE_BRIGHTCOVE_URL_TEMPLATE = λ.NewStr("http://players.brightcove.net/618566855001/default_default/index.html?videoId=%s")
			NoovoIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒbrightcove_id  λ.Object
						ϒdata           λ.Object
						ϒdescription    λ.Object
						ϒepisode        λ.Object
						ϒepisode_el     λ.Object
						ϒepisode_number λ.Object
						ϒseason         λ.Object
						ϒseason_el      λ.Object
						ϒseason_number  λ.Object
						ϒself           = λargs[0]
						ϒseries         λ.Object
						ϒtitle          λ.Object
						ϒurl            = λargs[1]
						ϒvideo_id       λ.Object
						ϒwebpage        λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					ϒbrightcove_id = λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("data-video-id=[\"\\'](\\d+)"), ϒwebpage, λ.NewStr("brightcove id"))
					ϒdata = λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
						λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewStr("(?s)dataLayer\\.push\\(\\s*({.+?})\\s*\\);"),
							ϒwebpage,
							λ.NewStr("data"),
						), λ.KWArgs{
							{Name: "default", Value: λ.NewStr("{}")},
						}),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "transform_source", Value: ϒjs_to_json},
						{Name: "fatal", Value: λ.False},
					})
					ϒtitle = func() λ.Object {
						if λv := λ.Cal(ϒtry_get, ϒdata, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("video")), λ.NewStr("nom"))
							}), ϒcompat_str); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
								λ.NewStr("dcterms.Title"),
								ϒwebpage,
								λ.NewStr("title"),
							), λ.KWArgs{
								{Name: "fatal", Value: λ.True},
							})
						}
					}()
					ϒdescription = λ.Cal(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewTuple(
						λ.NewStr("dcterms.Description"),
						λ.NewStr("description"),
					), ϒwebpage, λ.NewStr("description"))
					ϒseries = func() λ.Object {
						if λv := λ.Cal(ϒtry_get, ϒdata, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("emission")), λ.NewStr("nom"))
							})); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
								λ.NewStr("<div[^>]+class=\"banner-card__subtitle h4\"[^>]*>([^<]+)"),
								ϒwebpage,
								λ.NewStr("series"),
							), λ.KWArgs{
								{Name: "default", Value: λ.None},
							})
						}
					}()
					ϒseason_el = func() λ.Object {
						if λv := λ.Cal(ϒtry_get, ϒdata, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("emission")), λ.NewStr("saison"))
							}), λ.DictType); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewDictWithTable(map[λ.Object]λ.Object{})
						}
					}()
					ϒseason = λ.Cal(ϒtry_get, ϒseason_el, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(ϒx, λ.NewStr("nom"))
						}), ϒcompat_str)
					ϒseason_number = λ.Cal(ϒint_or_none, λ.Cal(ϒtry_get, ϒseason_el, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(ϒx, λ.NewStr("numero"))
						})))
					ϒepisode_el = func() λ.Object {
						if λv := λ.Cal(ϒtry_get, ϒseason_el, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(ϒx, λ.NewStr("episode"))
							}), λ.DictType); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewDictWithTable(map[λ.Object]λ.Object{})
						}
					}()
					ϒepisode = λ.Cal(ϒtry_get, ϒepisode_el, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(ϒx, λ.NewStr("nom"))
						}), ϒcompat_str)
					ϒepisode_number = λ.Cal(ϒint_or_none, λ.Cal(ϒtry_get, ϒepisode_el, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(ϒx, λ.NewStr("numero"))
						})))
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("_type"):  λ.NewStr("url_transparent"),
						λ.NewStr("ie_key"): λ.Cal(λ.GetAttr(BrightcoveNewIE, "ie_key", nil)),
						λ.NewStr("url"): λ.Cal(ϒsmuggle_url, λ.Mod(λ.GetAttr(ϒself, "BRIGHTCOVE_URL_TEMPLATE", nil), ϒbrightcove_id), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("geo_countries"): λ.NewList(λ.NewStr("CA")),
						})),
						λ.NewStr("id"):             ϒbrightcove_id,
						λ.NewStr("title"):          ϒtitle,
						λ.NewStr("description"):    ϒdescription,
						λ.NewStr("series"):         ϒseries,
						λ.NewStr("season"):         ϒseason,
						λ.NewStr("season_number"):  ϒseason_number,
						λ.NewStr("episode"):        ϒepisode,
						λ.NewStr("episode_number"): ϒepisode_number,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("BRIGHTCOVE_URL_TEMPLATE"): NoovoIE_BRIGHTCOVE_URL_TEMPLATE,
				λ.NewStr("_VALID_URL"):              NoovoIE__VALID_URL,
				λ.NewStr("_real_extract"):           NoovoIE__real_extract,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * cbc/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/cbc.py
 */

package cbc

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	CBCIE             λ.Object
	CBCOlympicsIE     λ.Object
	CBCPlayerIE       λ.Object
	CBCWatchBaseIE    λ.Object
	CBCWatchIE        λ.Object
	CBCWatchVideoIE   λ.Object
	ExtractorError    λ.Object
	InfoExtractor     λ.Object
	ϒcompat_HTTPError λ.Object
	ϒcompat_str       λ.Object
	ϒfind_xpath_attr  λ.Object
	ϒint_or_none      λ.Object
	ϒjs_to_json       λ.Object
	ϒparse_age_limit  λ.Object
	ϒparse_duration   λ.Object
	ϒparse_iso8601    λ.Object
	ϒsmuggle_url      λ.Object
	ϒstrip_or_none    λ.Object
	ϒtry_get          λ.Object
	ϒxpath_element    λ.Object
	ϒxpath_text       λ.Object
	ϒxpath_with_ns    λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒcompat_HTTPError = Ωcompat.ϒcompat_HTTPError
		ϒjs_to_json = Ωutils.ϒjs_to_json
		ϒsmuggle_url = Ωutils.ϒsmuggle_url
		ϒtry_get = Ωutils.ϒtry_get
		ϒxpath_text = Ωutils.ϒxpath_text
		ϒxpath_element = Ωutils.ϒxpath_element
		ϒxpath_with_ns = Ωutils.ϒxpath_with_ns
		ϒfind_xpath_attr = Ωutils.ϒfind_xpath_attr
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		ϒparse_age_limit = Ωutils.ϒparse_age_limit
		ϒstrip_or_none = Ωutils.ϒstrip_or_none
		ϒint_or_none = Ωutils.ϒint_or_none
		ExtractorError = Ωutils.ExtractorError
		CBCIE = λ.Cal(λ.TypeType, λ.NewStr("CBCIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				CBCIE__VALID_URL λ.Object
				CBCIE_suitable   λ.Object
			)
			CBCIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?cbc\\.ca/(?!player/)(?:[^/]+/)+(?P<id>[^/?#]+)")
			CBCIE_suitable = λ.NewFunction("suitable",
				[]λ.Param{
					{Name: "cls"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls = λargs[0]
						ϒurl = λargs[1]
					)
					return func() λ.Object {
						if λ.IsTrue(λ.Cal(λ.GetAttr(CBCPlayerIE, "suitable", nil), ϒurl)) {
							return λ.False
						} else {
							return λ.Cal(λ.GetAttr(λ.Cal(λ.SuperType, CBCIE, ϒcls), "suitable", nil), ϒurl)
						}
					}()
				})
			CBCIE_suitable = λ.Cal(λ.ClassMethodType, CBCIE_suitable)
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): CBCIE__VALID_URL,
				λ.NewStr("suitable"):   CBCIE_suitable,
			})
		}())
		CBCPlayerIE = λ.Cal(λ.TypeType, λ.NewStr("CBCPlayerIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				CBCPlayerIE_IE_NAME       λ.Object
				CBCPlayerIE__TESTS        λ.Object
				CBCPlayerIE__VALID_URL    λ.Object
				CBCPlayerIE__real_extract λ.Object
			)
			CBCPlayerIE_IE_NAME = λ.NewStr("cbc.ca:player")
			CBCPlayerIE__VALID_URL = λ.NewStr("(?:cbcplayer:|https?://(?:www\\.)?cbc\\.ca/(?:player/play/|i/caffeine/syndicate/\\?mediaId=))(?P<id>\\d+)")
			CBCPlayerIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.cbc.ca/player/play/2683190193"),
					λ.NewStr("md5"): λ.NewStr("64d25f841ddf4ddb28a235338af32e2c"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("2683190193"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Gerry Runs a Sweat Shop"),
						λ.NewStr("description"): λ.NewStr("md5:b457e1c01e8ff408d9d801c1c2cd29b0"),
						λ.NewStr("timestamp"):   λ.NewInt(1455071400),
						λ.NewStr("upload_date"): λ.NewStr("20160210"),
						λ.NewStr("uploader"):    λ.NewStr("CBCC-NEW"),
					}),
					λ.NewStr("skip"): λ.NewStr("Geo-restricted to Canada"),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.cbc.ca/player/play/2657631896"),
					λ.NewStr("md5"): λ.NewStr("e5e708c34ae6fca156aafe17c43e8b75"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("2657631896"),
						λ.NewStr("ext"):         λ.NewStr("mp3"),
						λ.NewStr("title"):       λ.NewStr("CBC Montreal is organizing its first ever community hackathon!"),
						λ.NewStr("description"): λ.NewStr("The modern technology we tend to depend on so heavily, is never without it's share of hiccups and headaches. Next weekend - CBC Montreal will be getting members of the public for its first Hackathon."),
						λ.NewStr("timestamp"):   λ.NewInt(1425704400),
						λ.NewStr("upload_date"): λ.NewStr("20150307"),
						λ.NewStr("uploader"):    λ.NewStr("CBCC-NEW"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.cbc.ca/player/play/2164402062"),
					λ.NewStr("md5"): λ.NewStr("33fcd8f6719b9dd60a5e73adcb83b9f6"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("2164402062"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Cancer survivor four times over"),
						λ.NewStr("description"): λ.NewStr("Tim Mayer has beaten three different forms of cancer four times in five years."),
						λ.NewStr("timestamp"):   λ.NewInt(1320410746),
						λ.NewStr("upload_date"): λ.NewStr("20111104"),
						λ.NewStr("uploader"):    λ.NewStr("CBCC-NEW"),
					}),
				}),
			)
			CBCPlayerIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒself     = λargs[0]
						ϒurl      = λargs[1]
						ϒvideo_id λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("_type"):  λ.NewStr("url_transparent"),
						λ.NewStr("ie_key"): λ.NewStr("ThePlatform"),
						λ.NewStr("url"): λ.Cal(ϒsmuggle_url, λ.Mod(λ.NewStr("http://link.theplatform.com/s/ExhSPC/media/guid/2655402169/%s?mbr=true&formats=MPEG4,FLV,MP3"), ϒvideo_id), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("force_smil_url"): λ.True,
						})),
						λ.NewStr("id"): ϒvideo_id,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):       CBCPlayerIE_IE_NAME,
				λ.NewStr("_TESTS"):        CBCPlayerIE__TESTS,
				λ.NewStr("_VALID_URL"):    CBCPlayerIE__VALID_URL,
				λ.NewStr("_real_extract"): CBCPlayerIE__real_extract,
			})
		}())
		CBCWatchBaseIE = λ.Cal(λ.TypeType, λ.NewStr("CBCWatchBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {

			return λ.NewDictWithTable(map[λ.Object]λ.Object{})
		}())
		CBCWatchVideoIE = λ.Cal(λ.TypeType, λ.NewStr("CBCWatchVideoIE"), λ.NewTuple(CBCWatchBaseIE), func() λ.Dict {
			var (
				CBCWatchVideoIE__VALID_URL λ.Object
			)
			CBCWatchVideoIE__VALID_URL = λ.NewStr("https?://api-cbc\\.cloud\\.clearleap\\.com/cloffice/client/web/play/?\\?.*?\\bcontentId=(?P<id>[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): CBCWatchVideoIE__VALID_URL,
			})
		}())
		CBCWatchIE = λ.Cal(λ.TypeType, λ.NewStr("CBCWatchIE"), λ.NewTuple(CBCWatchBaseIE), func() λ.Dict {
			var (
				CBCWatchIE__VALID_URL λ.Object
			)
			CBCWatchIE__VALID_URL = λ.NewStr("https?://(?:gem|watch)\\.cbc\\.ca/(?:[^/]+/)+(?P<id>[0-9a-f-]+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): CBCWatchIE__VALID_URL,
			})
		}())
		CBCOlympicsIE = λ.Cal(λ.TypeType, λ.NewStr("CBCOlympicsIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				CBCOlympicsIE__VALID_URL λ.Object
			)
			CBCOlympicsIE__VALID_URL = λ.NewStr("https?://olympics\\.cbc\\.ca/video/[^/]+/(?P<id>[^/?#]+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): CBCOlympicsIE__VALID_URL,
			})
		}())
	})
}

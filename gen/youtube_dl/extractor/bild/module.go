// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * bild/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/bild.py
 */

package bild

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	BildIE        λ.Object
	InfoExtractor λ.Object
	ϒint_or_none  λ.Object
	ϒunescapeHTML λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒunescapeHTML = Ωutils.ϒunescapeHTML
		BildIE = λ.Cal(λ.TypeType, λ.NewStr("BildIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				BildIE__TEST         λ.Object
				BildIE__VALID_URL    λ.Object
				BildIE__real_extract λ.Object
			)
			BildIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?bild\\.de/(?:[^/]+/)+(?P<display_id>[^/]+)-(?P<id>\\d+)(?:,auto=true)?\\.bild\\.html")
			BildIE__TEST = λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("url"): λ.NewStr("http://www.bild.de/video/clip/apple-ipad-air/das-koennen-die-neuen-ipads-38184146.bild.html"),
				λ.NewStr("md5"): λ.NewStr("dd495cbd99f2413502a1713a1156ac8a"),
				λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("id"):          λ.NewStr("38184146"),
					λ.NewStr("ext"):         λ.NewStr("mp4"),
					λ.NewStr("title"):       λ.NewStr("Das können die  neuen iPads"),
					λ.NewStr("description"): λ.NewStr("md5:a4058c4fa2a804ab59c00d7244bbf62f"),
					λ.NewStr("thumbnail"):   λ.NewStr("re:^https?://.*\\.jpg$"),
					λ.NewStr("duration"):    λ.NewInt(196),
				}),
			})
			BildIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒself       = λargs[0]
						ϒurl        = λargs[1]
						ϒvideo_data λ.Object
						ϒvideo_id   λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒvideo_data = λ.Cal(λ.GetAttr(ϒself, "_download_json", nil), λ.Add(λ.GetItem(λ.Cal(λ.GetAttr(ϒurl, "split", nil), λ.NewStr(".bild.html")), λ.NewInt(0)), λ.NewStr(",view=json.bild.html")), ϒvideo_id)
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("title"):       λ.Cal(λ.GetAttr(λ.Cal(ϒunescapeHTML, λ.GetItem(ϒvideo_data, λ.NewStr("title"))), "strip", nil)),
						λ.NewStr("description"): λ.Cal(ϒunescapeHTML, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("description"))),
						λ.NewStr("url"):         λ.GetItem(λ.GetItem(λ.GetItem(λ.GetItem(λ.GetItem(ϒvideo_data, λ.NewStr("clipList")), λ.NewInt(0)), λ.NewStr("srces")), λ.NewInt(0)), λ.NewStr("src")),
						λ.NewStr("thumbnail"):   λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("poster")),
						λ.NewStr("duration"):    λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("durationSec"))),
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TEST"):         BildIE__TEST,
				λ.NewStr("_VALID_URL"):    BildIE__VALID_URL,
				λ.NewStr("_real_extract"): BildIE__real_extract,
			})
		}())
	})
}

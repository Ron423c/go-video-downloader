// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * videopress/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/videopress.py
 */

package videopress

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor      λ.Object
	VideoPressIE       λ.Object
	ϒcompat_str        λ.Object
	ϒdetermine_ext     λ.Object
	ϒfloat_or_none     λ.Object
	ϒparse_age_limit   λ.Object
	ϒqualities         λ.Object
	ϒrandom_birthday   λ.Object
	ϒtry_get           λ.Object
	ϒunified_timestamp λ.Object
	ϒurljoin           λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒparse_age_limit = Ωutils.ϒparse_age_limit
		ϒqualities = Ωutils.ϒqualities
		ϒrandom_birthday = Ωutils.ϒrandom_birthday
		ϒtry_get = Ωutils.ϒtry_get
		ϒunified_timestamp = Ωutils.ϒunified_timestamp
		ϒurljoin = Ωutils.ϒurljoin
		VideoPressIE = λ.Cal(λ.TypeType, λ.NewStr("VideoPressIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				VideoPressIE__TESTS        λ.Object
				VideoPressIE__VALID_URL    λ.Object
				VideoPressIE__real_extract λ.Object
			)
			VideoPressIE__VALID_URL = λ.NewStr("https?://videopress\\.com/embed/(?P<id>[\\da-zA-Z]+)")
			VideoPressIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://videopress.com/embed/kUJmAcSf"),
					λ.NewStr("md5"): λ.NewStr("706956a6c875873d51010921310e4bc6"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("kUJmAcSf"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("VideoPress Demo"),
						λ.NewStr("thumbnail"):   λ.NewStr("re:^https?://.*\\.jpg"),
						λ.NewStr("duration"):    λ.NewFloat(634.6),
						λ.NewStr("timestamp"):   λ.NewInt(1434983935),
						λ.NewStr("upload_date"): λ.NewStr("20150622"),
						λ.NewStr("age_limit"):   λ.NewInt(0),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://videopress.com/embed/iH3gstfZ"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			VideoPressIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						QUALITIES     λ.Object
						ϒbase_url     λ.Object
						ϒext          λ.Object
						ϒf            λ.Object
						ϒformat_id    λ.Object
						ϒformats      λ.Object
						ϒoriginal_url λ.Object
						ϒpath         λ.Object
						ϒquality      λ.Object
						ϒquery        λ.Object
						ϒself         = λargs[0]
						ϒtitle        λ.Object
						ϒurl          = λargs[1]
						ϒvideo        λ.Object
						ϒvideo_id     λ.Object
						τmp0          λ.Object
						τmp1          λ.Object
						τmp2          λ.Object
						τmp3          λ.Object
						τmp4          λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒquery = λ.Cal(ϒrandom_birthday, λ.NewStr("birth_year"), λ.NewStr("birth_month"), λ.NewStr("birth_day"))
					ϒvideo = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Mod(λ.NewStr("https://public-api.wordpress.com/rest/v1.1/videos/%s"), ϒvideo_id),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "query", Value: ϒquery},
					})
					ϒtitle = λ.GetItem(ϒvideo, λ.NewStr("title"))
					ϒbase_url = λ.NewFunction("base_url",
						[]λ.Param{
							{Name: "scheme"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒscheme = λargs[0]
							)
							return λ.Cal(ϒtry_get, ϒvideo, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("file_url_base")), ϒscheme)
								}), ϒcompat_str)
						})
					ϒbase_url = func() λ.Object {
						if λv := λ.Cal(ϒbase_url, λ.NewStr("https")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(ϒbase_url, λ.NewStr("http"))
						}
					}()
					QUALITIES = λ.NewTuple(
						λ.NewStr("std"),
						λ.NewStr("dvd"),
						λ.NewStr("hd"),
					)
					ϒquality = λ.Cal(ϒqualities, QUALITIES)
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(λ.GetItem(ϒvideo, λ.NewStr("files")), "items", nil)))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒformat_id = λ.GetItem(τmp2, λ.NewInt(0))
						ϒf = λ.GetItem(τmp2, λ.NewInt(1))
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒf, λ.DictType)))) {
							continue
						}
						τmp2 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒf, "items", nil)))
						for {
							if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
								break
							}
							τmp4 = τmp3
							ϒext = λ.GetItem(τmp4, λ.NewInt(0))
							ϒpath = λ.GetItem(τmp4, λ.NewInt(1))
							if λ.IsTrue(λ.NewBool(λ.Contains(λ.NewTuple(
								λ.NewStr("mp4"),
								λ.NewStr("ogg"),
							), ϒext))) {
								λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("url"): λ.Cal(ϒurljoin, ϒbase_url, ϒpath),
									λ.NewStr("format_id"): λ.Mod(λ.NewStr("%s-%s"), λ.NewTuple(
										ϒformat_id,
										ϒext,
									)),
									λ.NewStr("ext"):     λ.Cal(ϒdetermine_ext, ϒpath, ϒext),
									λ.NewStr("quality"): λ.Cal(ϒquality, ϒformat_id),
								}))
							}
						}
					}
					ϒoriginal_url = λ.Cal(ϒtry_get, ϒvideo, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(ϒx, λ.NewStr("original"))
						}), ϒcompat_str)
					if λ.IsTrue(ϒoriginal_url) {
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"):       ϒoriginal_url,
							λ.NewStr("format_id"): λ.NewStr("original"),
							λ.NewStr("quality"):   λ.Cal(λ.BuiltinLen, QUALITIES),
						}))
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("title"):       ϒtitle,
						λ.NewStr("description"): λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("description")),
						λ.NewStr("thumbnail"):   λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("poster")),
						λ.NewStr("duration"):    λ.Cal(ϒfloat_or_none, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("duration")), λ.NewInt(1000)),
						λ.NewStr("timestamp"):   λ.Cal(ϒunified_timestamp, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("upload_date"))),
						λ.NewStr("age_limit"):   λ.Cal(ϒparse_age_limit, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("rating"))),
						λ.NewStr("formats"):     ϒformats,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        VideoPressIE__TESTS,
				λ.NewStr("_VALID_URL"):    VideoPressIE__VALID_URL,
				λ.NewStr("_real_extract"): VideoPressIE__real_extract,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * bleacherreport/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/bleacherreport.py
 */

package bleacherreport

import (
	Ωamp "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/amp"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	AMPIE               λ.Object
	BleacherReportCMSIE λ.Object
	BleacherReportIE    λ.Object
	ExtractorError      λ.Object
	InfoExtractor       λ.Object
	ϒint_or_none        λ.Object
	ϒparse_iso8601      λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		AMPIE = Ωamp.AMPIE
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		BleacherReportIE = λ.Cal(λ.TypeType, λ.NewStr("BleacherReportIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				BleacherReportIE__VALID_URL    λ.Object
				BleacherReportIE__real_extract λ.Object
			)
			BleacherReportIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?bleacherreport\\.com/articles/(?P<id>\\d+)")
			BleacherReportIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒarticle_data  λ.Object
						ϒarticle_id    λ.Object
						ϒinfo          λ.Object
						ϒprimary_photo λ.Object
						ϒself          = λargs[0]
						ϒthumbnails    λ.Object
						ϒurl           = λargs[1]
						ϒvideo         λ.Object
						ϒvideo_type    λ.Object
					)
					ϒarticle_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒarticle_data = λ.GetItem(λ.Cal(λ.GetAttr(ϒself, "_download_json", nil), λ.Mod(λ.NewStr("http://api.bleacherreport.com/api/v1/articles/%s"), ϒarticle_id), ϒarticle_id), λ.NewStr("article"))
					ϒthumbnails = λ.NewList()
					ϒprimary_photo = λ.Cal(λ.GetAttr(ϒarticle_data, "get", nil), λ.NewStr("primaryPhoto"))
					if λ.IsTrue(ϒprimary_photo) {
						ϒthumbnails = λ.NewList(λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"):    λ.GetItem(ϒprimary_photo, λ.NewStr("url")),
							λ.NewStr("width"):  λ.Cal(λ.GetAttr(ϒprimary_photo, "get", nil), λ.NewStr("width")),
							λ.NewStr("height"): λ.Cal(λ.GetAttr(ϒprimary_photo, "get", nil), λ.NewStr("height")),
						}))
					}
					ϒinfo = λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("_type"):         λ.NewStr("url_transparent"),
						λ.NewStr("id"):            ϒarticle_id,
						λ.NewStr("title"):         λ.GetItem(ϒarticle_data, λ.NewStr("title")),
						λ.NewStr("uploader"):      λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒarticle_data, "get", nil), λ.NewStr("author"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("name")),
						λ.NewStr("uploader_id"):   λ.Cal(λ.GetAttr(ϒarticle_data, "get", nil), λ.NewStr("authorId")),
						λ.NewStr("timestamp"):     λ.Cal(ϒparse_iso8601, λ.Cal(λ.GetAttr(ϒarticle_data, "get", nil), λ.NewStr("createdAt"))),
						λ.NewStr("thumbnails"):    ϒthumbnails,
						λ.NewStr("comment_count"): λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒarticle_data, "get", nil), λ.NewStr("commentsCount"))),
						λ.NewStr("view_count"):    λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒarticle_data, "get", nil), λ.NewStr("hitCount"))),
					})
					ϒvideo = λ.Cal(λ.GetAttr(ϒarticle_data, "get", nil), λ.NewStr("video"))
					if λ.IsTrue(ϒvideo) {
						ϒvideo_type = λ.GetItem(ϒvideo, λ.NewStr("type"))
						if λ.IsTrue(λ.NewBool(λ.Contains(λ.NewTuple(
							λ.NewStr("cms.bleacherreport.com"),
							λ.NewStr("vid.bleacherreport.com"),
						), ϒvideo_type))) {
							λ.SetItem(ϒinfo, λ.NewStr("url"), λ.Mod(λ.NewStr("http://bleacherreport.com/video_embed?id=%s"), λ.GetItem(ϒvideo, λ.NewStr("id"))))
						} else {
							if λ.IsTrue(λ.Eq(ϒvideo_type, λ.NewStr("ooyala.com"))) {
								λ.SetItem(ϒinfo, λ.NewStr("url"), λ.Mod(λ.NewStr("ooyala:%s"), λ.GetItem(ϒvideo, λ.NewStr("id"))))
							} else {
								if λ.IsTrue(λ.Eq(ϒvideo_type, λ.NewStr("youtube.com"))) {
									λ.SetItem(ϒinfo, λ.NewStr("url"), λ.GetItem(ϒvideo, λ.NewStr("id")))
								} else {
									if λ.IsTrue(λ.Eq(ϒvideo_type, λ.NewStr("vine.co"))) {
										λ.SetItem(ϒinfo, λ.NewStr("url"), λ.Mod(λ.NewStr("https://vine.co/v/%s"), λ.GetItem(ϒvideo, λ.NewStr("id"))))
									} else {
										λ.SetItem(ϒinfo, λ.NewStr("url"), λ.Add(ϒvideo_type, λ.GetItem(ϒvideo, λ.NewStr("id"))))
									}
								}
							}
						}
						return ϒinfo
					} else {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.NewStr("no video in the article")), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					return λ.None
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"):    BleacherReportIE__VALID_URL,
				λ.NewStr("_real_extract"): BleacherReportIE__real_extract,
			})
		}())
		BleacherReportCMSIE = λ.Cal(λ.TypeType, λ.NewStr("BleacherReportCMSIE"), λ.NewTuple(AMPIE), func() λ.Dict {
			var (
				BleacherReportCMSIE__VALID_URL    λ.Object
				BleacherReportCMSIE__real_extract λ.Object
			)
			BleacherReportCMSIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?bleacherreport\\.com/video_embed\\?id=(?P<id>[0-9a-f-]{36}|\\d{5})")
			BleacherReportCMSIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒinfo     λ.Object
						ϒself     = λargs[0]
						ϒurl      = λargs[1]
						ϒvideo_id λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒinfo = λ.Cal(λ.GetAttr(ϒself, "_extract_feed_info", nil), λ.Mod(λ.NewStr("http://vid.bleacherreport.com/videos/%s.akamai"), ϒvideo_id))
					λ.SetItem(ϒinfo, λ.NewStr("id"), ϒvideo_id)
					return ϒinfo
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"):    BleacherReportCMSIE__VALID_URL,
				λ.NewStr("_real_extract"): BleacherReportCMSIE__real_extract,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * adobetv/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/adobetv.py
 */

package adobetv

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	AdobeTVBaseIE         λ.Object
	AdobeTVChannelIE      λ.Object
	AdobeTVIE             λ.Object
	AdobeTVPlaylistBaseIE λ.Object
	AdobeTVShowIE         λ.Object
	AdobeTVVideoIE        λ.Object
	ISO639Utils           λ.Object
	InfoExtractor         λ.Object
	ϒcompat_str           λ.Object
	ϒdetermine_ext        λ.Object
	ϒfloat_or_none        λ.Object
	ϒint_or_none          λ.Object
	ϒparse_duration       λ.Object
	ϒstr_to_int           λ.Object
	ϒunified_strdate      λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒunified_strdate = Ωutils.ϒunified_strdate
		ϒstr_to_int = Ωutils.ϒstr_to_int
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ISO639Utils = Ωutils.ISO639Utils
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		AdobeTVBaseIE = λ.Cal(λ.TypeType, λ.NewStr("AdobeTVBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				AdobeTVBaseIE__API_BASE_URL λ.Object
			)
			AdobeTVBaseIE__API_BASE_URL = λ.NewStr("http://tv.adobe.com/api/v4/")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_API_BASE_URL"): AdobeTVBaseIE__API_BASE_URL,
			})
		}())
		AdobeTVIE = λ.Cal(λ.TypeType, λ.NewStr("AdobeTVIE"), λ.NewTuple(AdobeTVBaseIE), func() λ.Dict {
			var (
				AdobeTVIE__TEST         λ.Object
				AdobeTVIE__VALID_URL    λ.Object
				AdobeTVIE__real_extract λ.Object
			)
			AdobeTVIE__VALID_URL = λ.NewStr("https?://tv\\.adobe\\.com/(?:(?P<language>fr|de|es|jp)/)?watch/(?P<show_urlname>[^/]+)/(?P<id>[^/]+)")
			AdobeTVIE__TEST = λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("url"): λ.NewStr("http://tv.adobe.com/watch/the-complete-picture-with-julieanne-kost/quick-tip-how-to-draw-a-circle-around-an-object-in-photoshop/"),
				λ.NewStr("md5"): λ.NewStr("9bc5727bcdd55251f35ad311ca74fa1e"),
				λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("id"):          λ.NewStr("10981"),
					λ.NewStr("ext"):         λ.NewStr("mp4"),
					λ.NewStr("title"):       λ.NewStr("Quick Tip - How to Draw a Circle Around an Object in Photoshop"),
					λ.NewStr("description"): λ.NewStr("md5:99ec318dc909d7ba2a1f2b038f7d2311"),
					λ.NewStr("thumbnail"):   λ.NewStr("re:https?://.*\\.jpg$"),
					λ.NewStr("upload_date"): λ.NewStr("20110914"),
					λ.NewStr("duration"):    λ.NewInt(60),
					λ.NewStr("view_count"):  λ.IntType,
				}),
			})
			AdobeTVIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒformats      λ.Object
						ϒlanguage     λ.Object
						ϒself         = λargs[0]
						ϒshow_urlname λ.Object
						ϒurl          = λargs[1]
						ϒurlname      λ.Object
						ϒvideo_data   λ.Object
						τmp0          λ.Object
					)
					τmp0 = λ.Cal(λ.GetAttr(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups", nil))
					ϒlanguage = λ.GetItem(τmp0, λ.NewInt(0))
					ϒshow_urlname = λ.GetItem(τmp0, λ.NewInt(1))
					ϒurlname = λ.GetItem(τmp0, λ.NewInt(2))
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒlanguage))) {
						ϒlanguage = λ.NewStr("en")
					}
					ϒvideo_data = λ.GetItem(λ.GetItem(λ.Cal(λ.GetAttr(ϒself, "_download_json", nil), λ.Add(λ.GetAttr(ϒself, "_API_BASE_URL", nil), λ.Mod(λ.NewStr("episode/get/?language=%s&show_urlname=%s&urlname=%s&disclosure=standard"), λ.NewTuple(
						ϒlanguage,
						ϒshow_urlname,
						ϒurlname,
					))), ϒurlname), λ.NewStr("data")), λ.NewInt(0))
					ϒformats = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgen λ.Generator) λ.Object {
								var (
									ϒsource λ.Object
									τmp0    λ.Object
									τmp1    λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.GetItem(ϒvideo_data, λ.NewStr("videos")))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒsource = τmp1
									λgen.Yield(λ.NewDictWithTable(map[λ.Object]λ.Object{
										λ.NewStr("url"): λ.GetItem(ϒsource, λ.NewStr("url")),
										λ.NewStr("format_id"): func() λ.Object {
											if λv := λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("quality_level")); λ.IsTrue(λv) {
												return λv
											} else if λv := λ.GetItem(λ.Cal(λ.GetAttr(λ.GetItem(λ.Cal(λ.GetAttr(λ.GetItem(ϒsource, λ.NewStr("url")), "split", nil), λ.NewStr("-")), λ.Neg(λ.NewInt(1))), "split", nil), λ.NewStr(".")), λ.NewInt(0)); λ.IsTrue(λv) {
												return λv
											} else {
												return λ.None
											}
										}(),
										λ.NewStr("width"):  λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("width"))),
										λ.NewStr("height"): λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("height"))),
										λ.NewStr("tbr"):    λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("video_data_rate"))),
									}))
								}
								return λ.None
							})
						})))
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.Cal(ϒcompat_str, λ.GetItem(ϒvideo_data, λ.NewStr("id"))),
						λ.NewStr("title"):       λ.GetItem(ϒvideo_data, λ.NewStr("title")),
						λ.NewStr("description"): λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("description")),
						λ.NewStr("thumbnail"):   λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("thumbnail")),
						λ.NewStr("upload_date"): λ.Cal(ϒunified_strdate, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("start_date"))),
						λ.NewStr("duration"):    λ.Cal(ϒparse_duration, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("duration"))),
						λ.NewStr("view_count"):  λ.Cal(ϒstr_to_int, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("playcount"))),
						λ.NewStr("formats"):     ϒformats,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TEST"):         AdobeTVIE__TEST,
				λ.NewStr("_VALID_URL"):    AdobeTVIE__VALID_URL,
				λ.NewStr("_real_extract"): AdobeTVIE__real_extract,
			})
		}())
		AdobeTVPlaylistBaseIE = λ.Cal(λ.TypeType, λ.NewStr("AdobeTVPlaylistBaseIE"), λ.NewTuple(AdobeTVBaseIE), func() λ.Dict {

			return λ.NewDictWithTable(map[λ.Object]λ.Object{})
		}())
		AdobeTVShowIE = λ.Cal(λ.TypeType, λ.NewStr("AdobeTVShowIE"), λ.NewTuple(AdobeTVPlaylistBaseIE), func() λ.Dict {
			var (
				AdobeTVShowIE__VALID_URL λ.Object
			)
			AdobeTVShowIE__VALID_URL = λ.NewStr("https?://tv\\.adobe\\.com/(?:(?P<language>fr|de|es|jp)/)?show/(?P<id>[^/]+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): AdobeTVShowIE__VALID_URL,
			})
		}())
		AdobeTVChannelIE = λ.Cal(λ.TypeType, λ.NewStr("AdobeTVChannelIE"), λ.NewTuple(AdobeTVPlaylistBaseIE), func() λ.Dict {
			var (
				AdobeTVChannelIE__VALID_URL λ.Object
			)
			AdobeTVChannelIE__VALID_URL = λ.NewStr("https?://tv\\.adobe\\.com/(?:(?P<language>fr|de|es|jp)/)?channel/(?P<id>[^/]+)(?:/(?P<category_urlname>[^/]+))?")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): AdobeTVChannelIE__VALID_URL,
			})
		}())
		AdobeTVVideoIE = λ.Cal(λ.TypeType, λ.NewStr("AdobeTVVideoIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				AdobeTVVideoIE__TEST         λ.Object
				AdobeTVVideoIE__VALID_URL    λ.Object
				AdobeTVVideoIE__real_extract λ.Object
			)
			AdobeTVVideoIE__VALID_URL = λ.NewStr("https?://video\\.tv\\.adobe\\.com/v/(?P<id>\\d+)")
			AdobeTVVideoIE__TEST = λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("url"): λ.NewStr("https://video.tv.adobe.com/v/2456/"),
				λ.NewStr("md5"): λ.NewStr("43662b577c018ad707a63766462b1e87"),
				λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("id"):          λ.NewStr("2456"),
					λ.NewStr("ext"):         λ.NewStr("mp4"),
					λ.NewStr("title"):       λ.NewStr("New experience with Acrobat DC"),
					λ.NewStr("description"): λ.NewStr("New experience with Acrobat DC"),
					λ.NewStr("duration"):    λ.NewFloat(248.667),
				}),
			})
			AdobeTVVideoIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒduration    λ.Object
						ϒformats     λ.Object
						ϒlang_id     λ.Object
						ϒself        = λargs[0]
						ϒsubtitles   λ.Object
						ϒtranslation λ.Object
						ϒurl         = λargs[1]
						ϒvideo_data  λ.Object
						ϒvideo_id    λ.Object
						ϒwebpage     λ.Object
						τmp0         λ.Object
						τmp1         λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					ϒvideo_data = λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("var\\s+bridge\\s*=\\s*([^;]+);"), ϒwebpage, λ.NewStr("bridged data")), ϒvideo_id)
					ϒformats = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgen λ.Generator) λ.Object {
								var (
									ϒsource λ.Object
									τmp0    λ.Object
									τmp1    λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.GetItem(ϒvideo_data, λ.NewStr("sources")))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒsource = τmp1
									λgen.Yield(λ.NewDictWithTable(map[λ.Object]λ.Object{
										λ.NewStr("format_id"): λ.Mod(λ.NewStr("%s-%s"), λ.NewTuple(
											λ.Cal(ϒdetermine_ext, λ.GetItem(ϒsource, λ.NewStr("src"))),
											λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("height")),
										)),
										λ.NewStr("url"):    λ.GetItem(ϒsource, λ.NewStr("src")),
										λ.NewStr("width"):  λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("width"))),
										λ.NewStr("height"): λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("height"))),
										λ.NewStr("tbr"):    λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("bitrate"))),
									}))
								}
								return λ.None
							})
						})))
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒduration = λ.Cal(λ.BuiltinMax, λ.Cal(λ.FilterIteratorType, λ.None, λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgen λ.Generator) λ.Object {
								var (
									ϒsource λ.Object
									τmp0    λ.Object
									τmp1    λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.GetItem(ϒvideo_data, λ.NewStr("sources")))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒsource = τmp1
									λgen.Yield(λ.Call(ϒfloat_or_none, λ.NewArgs(λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("duration"))), λ.KWArgs{
										{Name: "scale", Value: λ.NewInt(1000)},
									}))
								}
								return λ.None
							})
						})))))
					ϒsubtitles = λ.NewDictWithTable(map[λ.Object]λ.Object{})
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("translations"), λ.NewList()))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒtranslation = τmp1
						ϒlang_id = func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒtranslation, "get", nil), λ.NewStr("language_w3c")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(ISO639Utils, "long2short", nil), λ.GetItem(ϒtranslation, λ.NewStr("language_medium")))
							}
						}()
						if λ.IsTrue(λ.NewBool(!λ.Contains(ϒsubtitles, ϒlang_id))) {
							λ.SetItem(ϒsubtitles, ϒlang_id, λ.NewList())
						}
						λ.Cal(λ.GetAttr(λ.GetItem(ϒsubtitles, ϒlang_id), "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"): λ.GetItem(ϒtranslation, λ.NewStr("vttPath")),
							λ.NewStr("ext"): λ.NewStr("vtt"),
						}))
					}
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("formats"):     ϒformats,
						λ.NewStr("title"):       λ.GetItem(ϒvideo_data, λ.NewStr("title")),
						λ.NewStr("description"): λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("description")),
						λ.NewStr("thumbnail"):   λ.Cal(λ.GetAttr(λ.GetItem(ϒvideo_data, λ.NewStr("video")), "get", nil), λ.NewStr("poster")),
						λ.NewStr("duration"):    ϒduration,
						λ.NewStr("subtitles"):   ϒsubtitles,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TEST"):         AdobeTVVideoIE__TEST,
				λ.NewStr("_VALID_URL"):    AdobeTVVideoIE__VALID_URL,
				λ.NewStr("_real_extract"): AdobeTVVideoIE__real_extract,
			})
		}())
	})
}

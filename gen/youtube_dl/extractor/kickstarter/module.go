// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * kickstarter/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/kickstarter.py
 */

package kickstarter

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor λ.Object
	KickStarterIE λ.Object
	ϒsmuggle_url  λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒsmuggle_url = Ωutils.ϒsmuggle_url
		KickStarterIE = λ.Cal(λ.TypeType, λ.NewStr("KickStarterIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				KickStarterIE__VALID_URL    λ.Object
				KickStarterIE__real_extract λ.Object
			)
			KickStarterIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?kickstarter\\.com/projects/(?P<id>[^/]*)/.*")
			KickStarterIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒself      = λargs[0]
						ϒthumbnail λ.Object
						ϒtitle     λ.Object
						ϒurl       = λargs[1]
						ϒvideo_id  λ.Object
						ϒvideo_url λ.Object
						ϒwebpage   λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					ϒtitle = λ.Cal(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewStr("<title>\\s*(.*?)(?:\\s*&mdash;\\s*Kickstarter)?\\s*</title>"), ϒwebpage, λ.NewStr("title"))
					ϒvideo_url = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("data-video-url=\"(.*?)\""),
						ϒwebpage,
						λ.NewStr("video URL"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(λ.NewBool(ϒvideo_url == λ.None)) {
						return λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("_type"):  λ.NewStr("url_transparent"),
							λ.NewStr("ie_key"): λ.NewStr("Generic"),
							λ.NewStr("url"): λ.Cal(ϒsmuggle_url, ϒurl, λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("to_generic"): λ.True,
							})),
							λ.NewStr("title"): ϒtitle,
						})
					}
					ϒthumbnail = λ.Call(λ.GetAttr(ϒself, "_og_search_thumbnail", nil), λ.NewArgs(ϒwebpage), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(λ.NewBool(ϒthumbnail == λ.None)) {
						ϒthumbnail = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
							λ.NewStr("<img[^>]+class=\"[^\"]+\\s*poster\\s*[^\"]+\"[^>]+src=\"([^\"]+)\""),
							ϒwebpage,
							λ.NewStr("thumbnail image"),
						), λ.KWArgs{
							{Name: "fatal", Value: λ.False},
						})
					}
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):    ϒvideo_id,
						λ.NewStr("url"):   ϒvideo_url,
						λ.NewStr("title"): ϒtitle,
						λ.NewStr("description"): λ.Call(λ.GetAttr(ϒself, "_og_search_description", nil), λ.NewArgs(ϒwebpage), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}),
						λ.NewStr("thumbnail"): ϒthumbnail,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"):    KickStarterIE__VALID_URL,
				λ.NewStr("_real_extract"): KickStarterIE__real_extract,
			})
		}())
	})
}

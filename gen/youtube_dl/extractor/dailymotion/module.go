// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * dailymotion/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/dailymotion.py
 */

package dailymotion

import (
	Ωjson "github.com/tenta-browser/go-video-downloader/gen/json"
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	DailymotionBaseInfoExtractor λ.Object
	DailymotionIE                λ.Object
	DailymotionPlaylistBaseIE    λ.Object
	DailymotionPlaylistIE        λ.Object
	DailymotionUserIE            λ.Object
	ExtractorError               λ.Object
	InfoExtractor                λ.Object
	ϒage_restricted              λ.Object
	ϒclean_html                  λ.Object
	ϒint_or_none                 λ.Object
	ϒtry_get                     λ.Object
	ϒunescapeHTML                λ.Object
	ϒurlencode_postdata          λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒage_restricted = Ωutils.ϒage_restricted
		ϒclean_html = Ωutils.ϒclean_html
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒtry_get = Ωutils.ϒtry_get
		ϒunescapeHTML = Ωutils.ϒunescapeHTML
		ϒurlencode_postdata = Ωutils.ϒurlencode_postdata
		DailymotionBaseInfoExtractor = λ.Cal(λ.TypeType, λ.NewStr("DailymotionBaseInfoExtractor"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				DailymotionBaseInfoExtractor__FAMILY_FILTER           λ.Object
				DailymotionBaseInfoExtractor__HEADERS                 λ.Object
				DailymotionBaseInfoExtractor__NETRC_MACHINE           λ.Object
				DailymotionBaseInfoExtractor__call_api                λ.Object
				DailymotionBaseInfoExtractor__get_cookie_value        λ.Object
				DailymotionBaseInfoExtractor__get_dailymotion_cookies λ.Object
				DailymotionBaseInfoExtractor__real_initialize         λ.Object
				DailymotionBaseInfoExtractor__set_dailymotion_cookie  λ.Object
			)
			DailymotionBaseInfoExtractor__FAMILY_FILTER = λ.None
			DailymotionBaseInfoExtractor__HEADERS = λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("Content-Type"): λ.NewStr("application/json"),
				λ.NewStr("Origin"):       λ.NewStr("https://www.dailymotion.com"),
			})
			DailymotionBaseInfoExtractor__NETRC_MACHINE = λ.NewStr("dailymotion")
			DailymotionBaseInfoExtractor__get_dailymotion_cookies = λ.NewFunction("_get_dailymotion_cookies",
				[]λ.Param{
					{Name: "self"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒself = λargs[0]
					)
					return λ.Cal(λ.GetAttr(ϒself, "_get_cookies", nil), λ.NewStr("https://www.dailymotion.com/"))
				})
			DailymotionBaseInfoExtractor__get_cookie_value = λ.NewFunction("_get_cookie_value",
				[]λ.Param{
					{Name: "cookies"},
					{Name: "name"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcookie  λ.Object
						ϒcookies = λargs[0]
						ϒname    = λargs[1]
					)
					_ = ϒname
					ϒcookie = λ.Cal(λ.GetAttr(ϒcookies, "get", nil), λ.NewStr("name"))
					if λ.IsTrue(ϒcookie) {
						return λ.GetAttr(ϒcookie, "value", nil)
					}
					return λ.None
				})
			DailymotionBaseInfoExtractor__get_cookie_value = λ.Cal(λ.StaticMethodType, DailymotionBaseInfoExtractor__get_cookie_value)
			DailymotionBaseInfoExtractor__set_dailymotion_cookie = λ.NewFunction("_set_dailymotion_cookie",
				[]λ.Param{
					{Name: "self"},
					{Name: "name"},
					{Name: "value"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒname  = λargs[1]
						ϒself  = λargs[0]
						ϒvalue = λargs[2]
					)
					λ.Cal(λ.GetAttr(ϒself, "_set_cookie", nil), λ.NewStr("www.dailymotion.com"), ϒname, ϒvalue)
					return λ.None
				})
			DailymotionBaseInfoExtractor__real_initialize = λ.NewFunction("_real_initialize",
				[]λ.Param{
					{Name: "self"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcookies λ.Object
						ϒff      λ.Object
						ϒself    = λargs[0]
					)
					ϒcookies = λ.Cal(λ.GetAttr(ϒself, "_get_dailymotion_cookies", nil))
					ϒff = λ.Cal(λ.GetAttr(ϒself, "_get_cookie_value", nil), ϒcookies, λ.NewStr("ff"))
					λ.SetAttr(ϒself, "_FAMILY_FILTER", func() λ.Object {
						if λ.IsTrue(ϒff) {
							return λ.Eq(ϒff, λ.NewStr("on"))
						} else {
							return λ.Cal(ϒage_restricted, λ.NewInt(18), λ.Cal(λ.GetAttr(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "params", nil), "get", nil), λ.NewStr("age_limit")))
						}
					}())
					λ.Cal(λ.GetAttr(ϒself, "_set_dailymotion_cookie", nil), λ.NewStr("ff"), func() λ.Object {
						if λ.IsTrue(λ.GetAttr(ϒself, "_FAMILY_FILTER", nil)) {
							return λ.NewStr("on")
						} else {
							return λ.NewStr("off")
						}
					}())
					return λ.None
				})
			DailymotionBaseInfoExtractor__call_api = λ.NewFunction("_call_api",
				[]λ.Param{
					{Name: "self"},
					{Name: "object_type"},
					{Name: "xid"},
					{Name: "object_fields"},
					{Name: "note"},
					{Name: "filter_extra", Def: λ.None},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcookies       λ.Object
						ϒdata          λ.Object
						ϒfilter_extra  = λargs[5]
						ϒnote          = λargs[4]
						ϒobj           λ.Object
						ϒobject_fields = λargs[3]
						ϒobject_type   = λargs[1]
						ϒpassword      λ.Object
						ϒresp          λ.Object
						ϒself          = λargs[0]
						ϒtoken         λ.Object
						ϒusername      λ.Object
						ϒxid           = λargs[2]
						τmp0           λ.Object
						τmp1           λ.Object
					)
					_ = τmp0
					_ = τmp1
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.Cal(λ.GetAttr(λ.GetAttr(ϒself, "_HEADERS", nil), "get", nil), λ.NewStr("Authorization"))))) {
						ϒcookies = λ.Cal(λ.GetAttr(ϒself, "_get_dailymotion_cookies", nil))
						ϒtoken = func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒself, "_get_cookie_value", nil), ϒcookies, λ.NewStr("access_token")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(ϒself, "_get_cookie_value", nil), ϒcookies, λ.NewStr("client_token"))
							}
						}()
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒtoken))) {
							ϒdata = λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("client_id"):     λ.NewStr("f1a362d288c1b98099c7"),
								λ.NewStr("client_secret"): λ.NewStr("eea605b96e01c796ff369935357eca920c5da4c5"),
							})
							τmp0 = λ.Cal(λ.GetAttr(ϒself, "_get_login_info", nil))
							ϒusername = λ.GetItem(τmp0, λ.NewInt(0))
							ϒpassword = λ.GetItem(τmp0, λ.NewInt(1))
							if λ.IsTrue(ϒusername) {
								λ.Cal(λ.GetAttr(ϒdata, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("grant_type"): λ.NewStr("password"),
									λ.NewStr("password"):   ϒpassword,
									λ.NewStr("username"):   ϒusername,
								}))
							} else {
								λ.SetItem(ϒdata, λ.NewStr("grant_type"), λ.NewStr("client_credentials"))
							}
							τmp0, τmp1 = func() (λexit λ.Object, λret λ.Object) {
								defer λ.CatchMulti(
									nil,
									&λ.Catcher{ExtractorError, func(λex λ.BaseException) {
										var ϒe λ.Object = λex
										if λ.IsTrue(func() λ.Object {
											if λv := λ.Cal(λ.BuiltinIsInstance, λ.GetAttr(ϒe, "cause", nil), λ.None); !λ.IsTrue(λv) {
												return λv
											} else {
												return λ.Eq(λ.GetAttr(λ.GetAttr(ϒe, "cause", nil), "code", nil), λ.NewInt(400))
											}
										}()) {
											panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.GetItem(λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(λ.GetAttr(ϒe, "cause", nil), "read", nil)), "decode", nil)), ϒxid), λ.NewStr("error_description"))), λ.KWArgs{
												{Name: "expected", Value: λ.True},
											})))
										}
										panic(λ.Raise(λex))
									}},
								)
								ϒtoken = λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
									λ.NewStr("https://graphql.api.dailymotion.com/oauth/token"),
									λ.None,
									λ.NewStr("Downloading Access Token"),
								), λ.KWArgs{
									{Name: "data", Value: λ.Cal(ϒurlencode_postdata, ϒdata)},
								}), λ.NewStr("access_token"))
								return λ.BlockExitNormally, nil
							}()
							λ.Cal(λ.GetAttr(ϒself, "_set_dailymotion_cookie", nil), func() λ.Object {
								if λ.IsTrue(ϒusername) {
									return λ.NewStr("access_token")
								} else {
									return λ.NewStr("client_token")
								}
							}(), ϒtoken)
						}
						λ.SetItem(λ.GetAttr(ϒself, "_HEADERS", nil), λ.NewStr("Authorization"), λ.Add(λ.NewStr("Bearer "), ϒtoken))
					}
					ϒresp = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.NewStr("https://graphql.api.dailymotion.com/"),
						ϒxid,
						ϒnote,
					), λ.KWArgs{
						{Name: "data", Value: λ.Cal(λ.GetAttr(λ.Cal(Ωjson.ϒdumps, λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("query"): λ.Mod(λ.NewStr("{\n  %s(xid: \"%s\"%s) {\n    %s\n  }\n}"), λ.NewTuple(
								ϒobject_type,
								ϒxid,
								func() λ.Object {
									if λ.IsTrue(ϒfilter_extra) {
										return λ.Add(λ.NewStr(", "), ϒfilter_extra)
									} else {
										return λ.NewStr("")
									}
								}(),
								ϒobject_fields,
							)),
						})), "encode", nil))},
						{Name: "headers", Value: λ.GetAttr(ϒself, "_HEADERS", nil)},
					})
					ϒobj = λ.GetItem(λ.GetItem(ϒresp, λ.NewStr("data")), ϒobject_type)
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒobj))) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.GetItem(λ.GetItem(λ.GetItem(ϒresp, λ.NewStr("errors")), λ.NewInt(0)), λ.NewStr("message"))), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					return ϒobj
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_FAMILY_FILTER"):           DailymotionBaseInfoExtractor__FAMILY_FILTER,
				λ.NewStr("_HEADERS"):                 DailymotionBaseInfoExtractor__HEADERS,
				λ.NewStr("_NETRC_MACHINE"):           DailymotionBaseInfoExtractor__NETRC_MACHINE,
				λ.NewStr("_call_api"):                DailymotionBaseInfoExtractor__call_api,
				λ.NewStr("_get_cookie_value"):        DailymotionBaseInfoExtractor__get_cookie_value,
				λ.NewStr("_get_dailymotion_cookies"): DailymotionBaseInfoExtractor__get_dailymotion_cookies,
				λ.NewStr("_real_initialize"):         DailymotionBaseInfoExtractor__real_initialize,
				λ.NewStr("_set_dailymotion_cookie"):  DailymotionBaseInfoExtractor__set_dailymotion_cookie,
			})
		}())
		DailymotionIE = λ.Cal(λ.TypeType, λ.NewStr("DailymotionIE"), λ.NewTuple(DailymotionBaseInfoExtractor), func() λ.Dict {
			var (
				DailymotionIE_IE_NAME              λ.Object
				DailymotionIE__COMMON_MEDIA_FIELDS λ.Object
				DailymotionIE__GEO_BYPASS          λ.Object
				DailymotionIE__VALID_URL           λ.Object
				DailymotionIE__extract_urls        λ.Object
				DailymotionIE__real_extract        λ.Object
			)
			DailymotionIE__VALID_URL = λ.NewStr("(?ix)\n                    https?://\n                        (?:\n                            (?:(?:www|touch)\\.)?dailymotion\\.[a-z]{2,3}/(?:(?:(?:embed|swf|\\#)/)?video|swf)|\n                            (?:www\\.)?lequipe\\.fr/video\n                        )\n                        /(?P<id>[^/?_]+)(?:.+?\\bplaylist=(?P<playlist_id>x[0-9a-z]+))?\n                    ")
			DailymotionIE_IE_NAME = λ.NewStr("dailymotion")
			DailymotionIE__GEO_BYPASS = λ.False
			DailymotionIE__COMMON_MEDIA_FIELDS = λ.NewStr("description\n      geoblockedCountries {\n        allowed\n      }\n      xid")
			DailymotionIE__extract_urls = λ.NewFunction("_extract_urls",
				[]λ.Param{
					{Name: "webpage"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒmobj    λ.Object
						ϒurls    λ.Object
						ϒwebpage = λargs[0]
						τmp0     λ.Object
						τmp1     λ.Object
					)
					ϒurls = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfinditer, λ.NewStr("<(?:(?:embed|iframe)[^>]+?src=|input[^>]+id=[\\'\"]dmcloudUrlEmissionSelect[\\'\"][^>]+value=)([\"\\'])(?P<url>(?:https?:)?//(?:www\\.)?dailymotion\\.com/(?:embed|swf)/video/.+?)\\1"), ϒwebpage))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒmobj = τmp1
						λ.Cal(λ.GetAttr(ϒurls, "append", nil), λ.Cal(ϒunescapeHTML, λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("url"))))
					}
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfinditer, λ.NewStr("(?s)DM\\.player\\([^,]+,\\s*{.*?video[\\'\"]?\\s*:\\s*[\"\\']?(?P<id>[0-9a-zA-Z]+).+?}\\s*\\);"), ϒwebpage))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒmobj = τmp1
						λ.Cal(λ.GetAttr(ϒurls, "append", nil), λ.Add(λ.NewStr("https://www.dailymotion.com/embed/video/"), λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("id"))))
					}
					return ϒurls
				})
			DailymotionIE__extract_urls = λ.Cal(λ.StaticMethodType, DailymotionIE__extract_urls)
			DailymotionIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒallowed_countries λ.Object
						ϒerror             λ.Object
						ϒf                 λ.Object
						ϒformats           λ.Object
						ϒfps               λ.Object
						ϒget_count         λ.Object
						ϒheight            λ.Object
						ϒis_live           λ.Object
						ϒm                 λ.Object
						ϒmedia             λ.Object
						ϒmedia_list        λ.Object
						ϒmedia_type        λ.Object
						ϒmedia_url         λ.Object
						ϒmetadata          λ.Object
						ϒowner             λ.Object
						ϒpassword          λ.Object
						ϒplaylist_id       λ.Object
						ϒposter_url        λ.Object
						ϒquality           λ.Object
						ϒself              = λargs[0]
						ϒstats             λ.Object
						ϒsubtitle          λ.Object
						ϒsubtitle_lang     λ.Object
						ϒsubtitles         λ.Object
						ϒsubtitles_data    λ.Object
						ϒthumbnails        λ.Object
						ϒtitle             λ.Object
						ϒurl               = λargs[1]
						ϒvideo_id          λ.Object
						ϒwidth             λ.Object
						ϒxid               λ.Object
						τmp0               λ.Object
						τmp1               λ.Object
						τmp2               λ.Object
						τmp3               λ.Object
						τmp4               λ.Object
					)
					τmp0 = λ.Cal(λ.GetAttr(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups", nil))
					ϒvideo_id = λ.GetItem(τmp0, λ.NewInt(0))
					ϒplaylist_id = λ.GetItem(τmp0, λ.NewInt(1))
					if λ.IsTrue(ϒplaylist_id) {
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.Cal(λ.GetAttr(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "params", nil), "get", nil), λ.NewStr("noplaylist"))))) {
							λ.Cal(λ.GetAttr(ϒself, "to_screen", nil), λ.Mod(λ.NewStr("Downloading playlist %s - add --no-playlist to just download video"), ϒplaylist_id))
							return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), λ.Add(λ.NewStr("http://www.dailymotion.com/playlist/"), ϒplaylist_id), λ.NewStr("DailymotionPlaylist"), ϒplaylist_id)
						}
						λ.Cal(λ.GetAttr(ϒself, "to_screen", nil), λ.Mod(λ.NewStr("Downloading just video %s because of --no-playlist"), ϒvideo_id))
					}
					ϒpassword = λ.Cal(λ.GetAttr(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "params", nil), "get", nil), λ.NewStr("videopassword"))
					ϒmedia = λ.Cal(λ.GetAttr(ϒself, "_call_api", nil), λ.NewStr("media"), ϒvideo_id, λ.Mod(λ.NewStr("... on Video {\n      %s\n      stats {\n        likes {\n          total\n        }\n        views {\n          total\n        }\n      }\n    }\n    ... on Live {\n      %s\n      audienceCount\n      isOnAir\n    }"), λ.NewTuple(
						λ.GetAttr(ϒself, "_COMMON_MEDIA_FIELDS", nil),
						λ.GetAttr(ϒself, "_COMMON_MEDIA_FIELDS", nil),
					)), λ.NewStr("Downloading media JSON metadata"), func() λ.Object {
						if λ.IsTrue(ϒpassword) {
							return λ.Mod(λ.NewStr("password: \"%s\""), λ.Cal(λ.GetAttr(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "params", nil), "get", nil), λ.NewStr("videopassword")))
						} else {
							return λ.None
						}
					}())
					ϒxid = λ.GetItem(ϒmedia, λ.NewStr("xid"))
					ϒmetadata = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Add(λ.NewStr("https://www.dailymotion.com/player/metadata/video/"), ϒxid),
						ϒxid,
						λ.NewStr("Downloading metadata JSON"),
					), λ.KWArgs{
						{Name: "query", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("app"): λ.NewStr("com.dailymotion.neon"),
						})},
					})
					ϒerror = λ.Cal(λ.GetAttr(ϒmetadata, "get", nil), λ.NewStr("error"))
					if λ.IsTrue(ϒerror) {
						ϒtitle = func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒerror, "get", nil), λ.NewStr("title")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.GetItem(ϒerror, λ.NewStr("raw_message"))
							}
						}()
						if λ.IsTrue(λ.Eq(λ.Cal(λ.GetAttr(ϒerror, "get", nil), λ.NewStr("code")), λ.NewStr("DM007"))) {
							ϒallowed_countries = λ.Cal(ϒtry_get, ϒmedia, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("geoblockedCountries")), λ.NewStr("allowed"))
								}), λ.ListType)
							λ.Call(λ.GetAttr(ϒself, "raise_geo_restricted", nil), nil, λ.KWArgs{
								{Name: "msg", Value: ϒtitle},
								{Name: "countries", Value: ϒallowed_countries},
							})
						}
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.NewStr("%s said: %s"), λ.NewTuple(
							λ.GetAttr(ϒself, "IE_NAME", nil),
							ϒtitle,
						))), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒtitle = λ.GetItem(ϒmetadata, λ.NewStr("title"))
					ϒis_live = λ.Cal(λ.GetAttr(ϒmedia, "get", nil), λ.NewStr("isOnAir"))
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(λ.GetItem(ϒmetadata, λ.NewStr("qualities")), "items", nil)))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒquality = λ.GetItem(τmp2, λ.NewInt(0))
						ϒmedia_list = λ.GetItem(τmp2, λ.NewInt(1))
						τmp2 = λ.Cal(λ.BuiltinIter, ϒmedia_list)
						for {
							if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
								break
							}
							ϒm = τmp3
							ϒmedia_url = λ.Cal(λ.GetAttr(ϒm, "get", nil), λ.NewStr("url"))
							ϒmedia_type = λ.Cal(λ.GetAttr(ϒm, "get", nil), λ.NewStr("type"))
							if λ.IsTrue(func() λ.Object {
								if λv := λ.NewBool(!λ.IsTrue(ϒmedia_url)); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Eq(ϒmedia_type, λ.NewStr("application/vnd.lumberjack.manifest"))
								}
							}()) {
								continue
							}
							if λ.IsTrue(λ.Eq(ϒmedia_type, λ.NewStr("application/x-mpegURL"))) {
								λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
									ϒmedia_url,
									ϒvideo_id,
									λ.NewStr("mp4"),
									func() λ.Object {
										if λ.IsTrue(ϒis_live) {
											return λ.NewStr("m3u8")
										} else {
											return λ.NewStr("m3u8_native")
										}
									}(),
								), λ.KWArgs{
									{Name: "m3u8_id", Value: λ.NewStr("hls")},
									{Name: "fatal", Value: λ.False},
								}))
							} else {
								ϒf = λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("url"):       ϒmedia_url,
									λ.NewStr("format_id"): λ.Add(λ.NewStr("http-"), ϒquality),
								})
								ϒm = λ.Cal(Ωre.ϒsearch, λ.NewStr("/H264-(\\d+)x(\\d+)(?:-(60)/)?"), ϒmedia_url)
								if λ.IsTrue(ϒm) {
									τmp4 = λ.Cal(λ.MapIteratorType, ϒint_or_none, λ.Cal(λ.GetAttr(ϒm, "groups", nil)))
									ϒwidth = λ.GetItem(τmp4, λ.NewInt(0))
									ϒheight = λ.GetItem(τmp4, λ.NewInt(1))
									ϒfps = λ.GetItem(τmp4, λ.NewInt(2))
									λ.Cal(λ.GetAttr(ϒf, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
										λ.NewStr("fps"):    ϒfps,
										λ.NewStr("height"): ϒheight,
										λ.NewStr("width"):  ϒwidth,
									}))
								}
								λ.Cal(λ.GetAttr(ϒformats, "append", nil), ϒf)
							}
						}
					}
					τmp0 = λ.Cal(λ.BuiltinIter, ϒformats)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒf = τmp1
						λ.SetItem(ϒf, λ.NewStr("url"), λ.GetItem(λ.Cal(λ.GetAttr(λ.GetItem(ϒf, λ.NewStr("url")), "split", nil), λ.NewStr("#")), λ.NewInt(0)))
						if λ.IsTrue(func() λ.Object {
							if λv := λ.NewBool(!λ.IsTrue(λ.Cal(λ.GetAttr(ϒf, "get", nil), λ.NewStr("fps")))); !λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(λ.GetItem(ϒf, λ.NewStr("format_id")), "endswith", nil), λ.NewStr("@60"))
							}
						}()) {
							λ.SetItem(ϒf, λ.NewStr("fps"), λ.NewInt(60))
						}
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒsubtitles = λ.NewDictWithTable(map[λ.Object]λ.Object{})
					ϒsubtitles_data = func() λ.Object {
						if λv := λ.Cal(ϒtry_get, ϒmetadata, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("subtitles")), λ.NewStr("data"))
							}), λ.DictType); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewDictWithTable(map[λ.Object]λ.Object{})
						}
					}()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒsubtitles_data, "items", nil)))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒsubtitle_lang = λ.GetItem(τmp2, λ.NewInt(0))
						ϒsubtitle = λ.GetItem(τmp2, λ.NewInt(1))
						λ.SetItem(ϒsubtitles, ϒsubtitle_lang, λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
							nil,
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
									var (
										ϒsubtitle_url λ.Object
										τmp0          λ.Object
										τmp1          λ.Object
									)
									τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒsubtitle, "get", nil), λ.NewStr("urls"), λ.NewList()))
									for {
										if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
											break
										}
										ϒsubtitle_url = τmp1
										λgy.Yield(λ.NewDictWithTable(map[λ.Object]λ.Object{
											λ.NewStr("url"): ϒsubtitle_url,
										}))
									}
									return λ.None
								})
							}))))
					}
					ϒthumbnails = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒmetadata, "get", nil), λ.NewStr("posters"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "items", nil)))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒheight = λ.GetItem(τmp2, λ.NewInt(0))
						ϒposter_url = λ.GetItem(τmp2, λ.NewInt(1))
						λ.Cal(λ.GetAttr(ϒthumbnails, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("height"): λ.Cal(ϒint_or_none, ϒheight),
							λ.NewStr("id"):     ϒheight,
							λ.NewStr("url"):    ϒposter_url,
						}))
					}
					ϒowner = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒmetadata, "get", nil), λ.NewStr("owner")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewDictWithTable(map[λ.Object]λ.Object{})
						}
					}()
					ϒstats = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒmedia, "get", nil), λ.NewStr("stats")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewDictWithTable(map[λ.Object]λ.Object{})
						}
					}()
					ϒget_count = λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.Cal(ϒint_or_none, λ.Cal(ϒtry_get, ϒstats, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "y"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒy = λargs[0]
									)
									return λ.GetItem(λ.GetItem(ϒy, λ.Add(ϒx, λ.NewStr("s"))), λ.NewStr("total"))
								})))
						})
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"): ϒvideo_id,
						λ.NewStr("title"): func() λ.Object {
							if λ.IsTrue(ϒis_live) {
								return λ.Cal(λ.GetAttr(ϒself, "_live_title", nil), ϒtitle)
							} else {
								return ϒtitle
							}
						}(),
						λ.NewStr("description"): λ.Cal(ϒclean_html, λ.Cal(λ.GetAttr(ϒmedia, "get", nil), λ.NewStr("description"))),
						λ.NewStr("thumbnails"):  ϒthumbnails,
						λ.NewStr("duration"): func() λ.Object {
							if λv := λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒmetadata, "get", nil), λ.NewStr("duration"))); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.None
							}
						}(),
						λ.NewStr("timestamp"): λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒmetadata, "get", nil), λ.NewStr("created_time"))),
						λ.NewStr("uploader"):  λ.Cal(λ.GetAttr(ϒowner, "get", nil), λ.NewStr("screenname")),
						λ.NewStr("uploader_id"): func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒowner, "get", nil), λ.NewStr("id")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(ϒmetadata, "get", nil), λ.NewStr("screenname"))
							}
						}(),
						λ.NewStr("age_limit"): func() λ.Object {
							if λ.IsTrue(λ.Cal(λ.GetAttr(ϒmetadata, "get", nil), λ.NewStr("explicit"))) {
								return λ.NewInt(18)
							} else {
								return λ.NewInt(0)
							}
						}(),
						λ.NewStr("tags"): λ.Cal(λ.GetAttr(ϒmetadata, "get", nil), λ.NewStr("tags")),
						λ.NewStr("view_count"): func() λ.Object {
							if λv := λ.Cal(ϒget_count, λ.NewStr("view")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒmedia, "get", nil), λ.NewStr("audienceCount")))
							}
						}(),
						λ.NewStr("like_count"): λ.Cal(ϒget_count, λ.NewStr("like")),
						λ.NewStr("formats"):    ϒformats,
						λ.NewStr("subtitles"):  ϒsubtitles,
						λ.NewStr("is_live"):    ϒis_live,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):              DailymotionIE_IE_NAME,
				λ.NewStr("_COMMON_MEDIA_FIELDS"): DailymotionIE__COMMON_MEDIA_FIELDS,
				λ.NewStr("_GEO_BYPASS"):          DailymotionIE__GEO_BYPASS,
				λ.NewStr("_VALID_URL"):           DailymotionIE__VALID_URL,
				λ.NewStr("_extract_urls"):        DailymotionIE__extract_urls,
				λ.NewStr("_real_extract"):        DailymotionIE__real_extract,
			})
		}())
		DailymotionPlaylistBaseIE = λ.Cal(λ.TypeType, λ.NewStr("DailymotionPlaylistBaseIE"), λ.NewTuple(DailymotionBaseInfoExtractor), func() λ.Dict {

			return λ.NewDictWithTable(map[λ.Object]λ.Object{})
		}())
		DailymotionPlaylistIE = λ.Cal(λ.TypeType, λ.NewStr("DailymotionPlaylistIE"), λ.NewTuple(DailymotionPlaylistBaseIE), func() λ.Dict {
			var (
				DailymotionPlaylistIE__VALID_URL λ.Object
			)
			DailymotionPlaylistIE__VALID_URL = λ.NewStr("(?:https?://)?(?:www\\.)?dailymotion\\.[a-z]{2,3}/playlist/(?P<id>x[0-9a-z]+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): DailymotionPlaylistIE__VALID_URL,
			})
		}())
		DailymotionUserIE = λ.Cal(λ.TypeType, λ.NewStr("DailymotionUserIE"), λ.NewTuple(DailymotionPlaylistBaseIE), func() λ.Dict {
			var (
				DailymotionUserIE__VALID_URL λ.Object
			)
			DailymotionUserIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?dailymotion\\.[a-z]{2,3}/(?!(?:embed|swf|#|video|playlist)/)(?:(?:old/)?user/)?(?P<id>[^/]+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): DailymotionUserIE__VALID_URL,
			})
		}())
	})
}

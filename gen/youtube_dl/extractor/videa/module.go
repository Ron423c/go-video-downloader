// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * videa/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/videa.py
 */

package videa

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor  λ.Object
	VideaIE        λ.Object
	ϒint_or_none   λ.Object
	ϒmimetype2ext  λ.Object
	ϒparse_codecs  λ.Object
	ϒxpath_element λ.Object
	ϒxpath_text    λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒmimetype2ext = Ωutils.ϒmimetype2ext
		ϒparse_codecs = Ωutils.ϒparse_codecs
		ϒxpath_element = Ωutils.ϒxpath_element
		ϒxpath_text = Ωutils.ϒxpath_text
		VideaIE = λ.Cal(λ.TypeType, λ.StrLiteral("VideaIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				VideaIE__VALID_URL    λ.Object
				VideaIE__real_extract λ.Object
			)
			VideaIE__VALID_URL = λ.StrLiteral("(?x)\n                    https?://\n                        videa(?:kid)?\\.hu/\n                        (?:\n                            videok/(?:[^/]+/)*[^?#&]+-|\n                            player\\?.*?\\bv=|\n                            player/v/\n                        )\n                        (?P<id>[^?#&]+)\n                    ")
			VideaIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒage_limit  λ.Object
						ϒduration   λ.Object
						ϒf          λ.Object
						ϒformats    λ.Object
						ϒinfo       λ.Object
						ϒis_adult   λ.Object
						ϒself       = λargs[0]
						ϒsource     λ.Object
						ϒsource_url λ.Object
						ϒsources    λ.Object
						ϒthumbnail  λ.Object
						ϒtitle      λ.Object
						ϒurl        = λargs[1]
						ϒvideo      λ.Object
						ϒvideo_id   λ.Object
						τmp0        λ.Object
						τmp1        λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒinfo = λ.Call(λ.GetAttr(ϒself, "_download_xml", nil), λ.NewArgs(
						λ.StrLiteral("http://videa.hu/videaplayer_get_xml.php"),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "query", Value: λ.DictLiteral(map[string]λ.Object{
							"v": ϒvideo_id,
						})},
					})
					ϒvideo = λ.Call(ϒxpath_element, λ.NewArgs(
						ϒinfo,
						λ.StrLiteral(".//video"),
						λ.StrLiteral("video"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.True},
					})
					ϒsources = λ.Call(ϒxpath_element, λ.NewArgs(
						ϒinfo,
						λ.StrLiteral(".//video_sources"),
						λ.StrLiteral("sources"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.True},
					})
					ϒtitle = λ.Call(ϒxpath_text, λ.NewArgs(
						ϒvideo,
						λ.StrLiteral("./title"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.True},
					})
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒsources, "findall", λ.StrLiteral("./video_source")))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒsource = τmp1
						ϒsource_url = λ.GetAttr(ϒsource, "text", nil)
						if !λ.IsTrue(ϒsource_url) {
							continue
						}
						ϒf = λ.Cal(ϒparse_codecs, λ.Calm(ϒsource, "get", λ.StrLiteral("codecs")))
						λ.Calm(ϒf, "update", λ.DictLiteral(map[string]λ.Object{
							"url": ϒsource_url,
							"ext": func() λ.Object {
								if λv := λ.Cal(ϒmimetype2ext, λ.Calm(ϒsource, "get", λ.StrLiteral("mimetype"))); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.StrLiteral("mp4")
								}
							}(),
							"format_id": λ.Calm(ϒsource, "get", λ.StrLiteral("name")),
							"width":     λ.Cal(ϒint_or_none, λ.Calm(ϒsource, "get", λ.StrLiteral("width"))),
							"height":    λ.Cal(ϒint_or_none, λ.Calm(ϒsource, "get", λ.StrLiteral("height"))),
						}))
						λ.Calm(ϒformats, "append", ϒf)
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					ϒthumbnail = λ.Cal(ϒxpath_text, ϒvideo, λ.StrLiteral("./poster_src"))
					ϒduration = λ.Cal(ϒint_or_none, λ.Cal(ϒxpath_text, ϒvideo, λ.StrLiteral("./duration")))
					ϒage_limit = λ.None
					ϒis_adult = λ.Call(ϒxpath_text, λ.NewArgs(
						ϒvideo,
						λ.StrLiteral("./is_adult_content"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(ϒis_adult) {
						ϒage_limit = func() λ.Object {
							if λ.IsTrue(λ.Eq(ϒis_adult, λ.StrLiteral("1"))) {
								return λ.IntLiteral(18)
							} else {
								return λ.IntLiteral(0)
							}
						}()
					}
					return λ.DictLiteral(map[string]λ.Object{
						"id":        ϒvideo_id,
						"title":     ϒtitle,
						"thumbnail": ϒthumbnail,
						"duration":  ϒduration,
						"age_limit": ϒage_limit,
						"formats":   ϒformats,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    VideaIE__VALID_URL,
				"_real_extract": VideaIE__real_extract,
			})
		}())
	})
}

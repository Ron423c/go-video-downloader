// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * daum/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/daum.py
 */

package daum

import (
	Ωitertools "github.com/tenta-browser/go-video-downloader/gen/itertools"
	Ωparse "github.com/tenta-browser/go-video-downloader/gen/urllib/parse"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	DaumBaseIE                   λ.Object
	DaumClipIE                   λ.Object
	DaumIE                       λ.Object
	DaumListIE                   λ.Object
	DaumPlaylistIE               λ.Object
	DaumUserIE                   λ.Object
	InfoExtractor                λ.Object
	ϒcompat_parse_qs             λ.Object
	ϒcompat_urllib_parse_unquote λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_parse_qs = Ωcompat.ϒcompat_parse_qs
		ϒcompat_urllib_parse_unquote = Ωcompat.ϒcompat_urllib_parse_unquote
		DaumBaseIE = λ.Cal(λ.TypeType, λ.NewStr("DaumBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				DaumBaseIE__KAKAO_EMBED_BASE λ.Object
			)
			DaumBaseIE__KAKAO_EMBED_BASE = λ.NewStr("http://tv.kakao.com/embed/player/cliplink/")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_KAKAO_EMBED_BASE"): DaumBaseIE__KAKAO_EMBED_BASE,
			})
		}())
		DaumIE = λ.Cal(λ.TypeType, λ.NewStr("DaumIE"), λ.NewTuple(DaumBaseIE), func() λ.Dict {
			var (
				DaumIE_IE_NAME       λ.Object
				DaumIE__TESTS        λ.Object
				DaumIE__VALID_URL    λ.Object
				DaumIE__real_extract λ.Object
			)
			DaumIE__VALID_URL = λ.NewStr("https?://(?:(?:m\\.)?tvpot\\.daum\\.net/v/|videofarm\\.daum\\.net/controller/player/VodPlayer\\.swf\\?vid=)(?P<id>[^?#&]+)")
			DaumIE_IE_NAME = λ.NewStr("daum.net")
			DaumIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://tvpot.daum.net/v/vab4dyeDBysyBssyukBUjBz"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):            λ.NewStr("vab4dyeDBysyBssyukBUjBz"),
						λ.NewStr("ext"):           λ.NewStr("mp4"),
						λ.NewStr("title"):         λ.NewStr("마크 헌트 vs 안토니오 실바"),
						λ.NewStr("description"):   λ.NewStr("Mark Hunt vs Antonio Silva"),
						λ.NewStr("upload_date"):   λ.NewStr("20131217"),
						λ.NewStr("thumbnail"):     λ.NewStr("re:^https?://.*\\.(?:jpg|png)"),
						λ.NewStr("duration"):      λ.NewInt(2117),
						λ.NewStr("view_count"):    λ.IntType,
						λ.NewStr("comment_count"): λ.IntType,
						λ.NewStr("uploader_id"):   λ.NewInt(186139),
						λ.NewStr("uploader"):      λ.NewStr("콘간지"),
						λ.NewStr("timestamp"):     λ.NewInt(1387310323),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://m.tvpot.daum.net/v/65139429"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):            λ.NewStr("65139429"),
						λ.NewStr("ext"):           λ.NewStr("mp4"),
						λ.NewStr("title"):         λ.NewStr("1297회, '아빠 아들로 태어나길 잘 했어' 민수, 감동의 눈물[아빠 어디가] 20150118"),
						λ.NewStr("description"):   λ.NewStr("md5:79794514261164ff27e36a21ad229fc5"),
						λ.NewStr("upload_date"):   λ.NewStr("20150118"),
						λ.NewStr("thumbnail"):     λ.NewStr("re:^https?://.*\\.(?:jpg|png)"),
						λ.NewStr("duration"):      λ.NewInt(154),
						λ.NewStr("view_count"):    λ.IntType,
						λ.NewStr("comment_count"): λ.IntType,
						λ.NewStr("uploader"):      λ.NewStr("MBC 예능"),
						λ.NewStr("uploader_id"):   λ.NewInt(132251),
						λ.NewStr("timestamp"):     λ.NewInt(1421604228),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://tvpot.daum.net/v/07dXWRka62Y%24"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://videofarm.daum.net/controller/player/VodPlayer.swf?vid=vwIpVpCQsT8%24&ref="),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):            λ.NewStr("vwIpVpCQsT8$"),
						λ.NewStr("ext"):           λ.NewStr("flv"),
						λ.NewStr("title"):         λ.NewStr("01-Korean War ( Trouble on the horizon )"),
						λ.NewStr("description"):   λ.NewStr("Korean War 01\r\nTrouble on the horizon\r\n전쟁의 먹구름"),
						λ.NewStr("upload_date"):   λ.NewStr("20080223"),
						λ.NewStr("thumbnail"):     λ.NewStr("re:^https?://.*\\.(?:jpg|png)"),
						λ.NewStr("duration"):      λ.NewInt(249),
						λ.NewStr("view_count"):    λ.IntType,
						λ.NewStr("comment_count"): λ.IntType,
						λ.NewStr("uploader"):      λ.NewStr("까칠한 墮落始祖 황비홍님의"),
						λ.NewStr("uploader_id"):   λ.NewInt(560824),
						λ.NewStr("timestamp"):     λ.NewInt(1203770745),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://tvpot.daum.net/v/s3794Uf1NZeZ1qMpGpeqeRU"),
					λ.NewStr("md5"): λ.NewStr("a8917742069a4dd442516b86e7d66529"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("s3794Uf1NZeZ1qMpGpeqeRU"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("러블리즈 - Destiny (나의 지구) (Lovelyz - Destiny)"),
						λ.NewStr("description"): λ.NewStr("러블리즈 - Destiny (나의 지구) (Lovelyz - Destiny)\r\n\r\n[쇼! 음악중심] 20160611, 507회"),
						λ.NewStr("upload_date"): λ.NewStr("20170129"),
						λ.NewStr("uploader"):    λ.NewStr("쇼! 음악중심"),
						λ.NewStr("uploader_id"): λ.NewInt(2653210),
						λ.NewStr("timestamp"):   λ.NewInt(1485684628),
					}),
				}),
			)
			DaumIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒself     = λargs[0]
						ϒurl      = λargs[1]
						ϒvideo_id λ.Object
						τmp0      λ.Object
					)
					ϒvideo_id = λ.Cal(ϒcompat_urllib_parse_unquote, λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl))
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.Cal(λ.GetAttr(ϒvideo_id, "isdigit", nil))))) {
						τmp0 = λ.IAdd(ϒvideo_id, λ.NewStr("@my"))
						ϒvideo_id = τmp0
					}
					return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), λ.Add(λ.GetAttr(ϒself, "_KAKAO_EMBED_BASE", nil), ϒvideo_id), λ.NewStr("Kakao"), ϒvideo_id)
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):       DaumIE_IE_NAME,
				λ.NewStr("_TESTS"):        DaumIE__TESTS,
				λ.NewStr("_VALID_URL"):    DaumIE__VALID_URL,
				λ.NewStr("_real_extract"): DaumIE__real_extract,
			})
		}())
		DaumClipIE = λ.Cal(λ.TypeType, λ.NewStr("DaumClipIE"), λ.NewTuple(DaumBaseIE), func() λ.Dict {
			var (
				DaumClipIE_IE_NAME       λ.Object
				DaumClipIE__TESTS        λ.Object
				DaumClipIE__URL_TEMPLATE λ.Object
				DaumClipIE__VALID_URL    λ.Object
				DaumClipIE__real_extract λ.Object
				DaumClipIE_suitable      λ.Object
			)
			DaumClipIE__VALID_URL = λ.NewStr("https?://(?:m\\.)?tvpot\\.daum\\.net/(?:clip/ClipView.(?:do|tv)|mypot/View.do)\\?.*?clipid=(?P<id>\\d+)")
			DaumClipIE_IE_NAME = λ.NewStr("daum.net:clip")
			DaumClipIE__URL_TEMPLATE = λ.NewStr("http://tvpot.daum.net/clip/ClipView.do?clipid=%s")
			DaumClipIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://tvpot.daum.net/clip/ClipView.do?clipid=52554690"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("52554690"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("DOTA 2GETHER 시즌2 6회 - 2부"),
						λ.NewStr("description"): λ.NewStr("DOTA 2GETHER 시즌2 6회 - 2부"),
						λ.NewStr("upload_date"): λ.NewStr("20130831"),
						λ.NewStr("thumbnail"):   λ.NewStr("re:^https?://.*\\.(?:jpg|png)"),
						λ.NewStr("duration"):    λ.NewInt(3868),
						λ.NewStr("view_count"):  λ.IntType,
						λ.NewStr("uploader"):    λ.NewStr("GOMeXP"),
						λ.NewStr("uploader_id"): λ.NewInt(6667),
						λ.NewStr("timestamp"):   λ.NewInt(1377911092),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://m.tvpot.daum.net/clip/ClipView.tv?clipid=54999425"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			DaumClipIE_suitable = λ.NewFunction("suitable",
				[]λ.Param{
					{Name: "cls"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls = λargs[0]
						ϒurl = λargs[1]
					)
					return func() λ.Object {
						if λ.IsTrue(func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(DaumPlaylistIE, "suitable", nil), ϒurl); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(DaumUserIE, "suitable", nil), ϒurl)
							}
						}()) {
							return λ.False
						} else {
							return λ.Cal(λ.GetAttr(λ.Cal(λ.SuperType, DaumClipIE, ϒcls), "suitable", nil), ϒurl)
						}
					}()
				})
			DaumClipIE_suitable = λ.Cal(λ.ClassMethodType, DaumClipIE_suitable)
			DaumClipIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒself     = λargs[0]
						ϒurl      = λargs[1]
						ϒvideo_id λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), λ.Add(λ.GetAttr(ϒself, "_KAKAO_EMBED_BASE", nil), ϒvideo_id), λ.NewStr("Kakao"), ϒvideo_id)
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):       DaumClipIE_IE_NAME,
				λ.NewStr("_TESTS"):        DaumClipIE__TESTS,
				λ.NewStr("_URL_TEMPLATE"): DaumClipIE__URL_TEMPLATE,
				λ.NewStr("_VALID_URL"):    DaumClipIE__VALID_URL,
				λ.NewStr("_real_extract"): DaumClipIE__real_extract,
				λ.NewStr("suitable"):      DaumClipIE_suitable,
			})
		}())
		DaumListIE = λ.Cal(λ.TypeType, λ.NewStr("DaumListIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				DaumListIE__check_clip  λ.Object
				DaumListIE__get_entries λ.Object
			)
			DaumListIE__get_entries = λ.NewFunction("_get_entries",
				[]λ.Param{
					{Name: "self"},
					{Name: "list_id"},
					{Name: "list_id_type"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒentries      λ.Object
						ϒlist_id      = λargs[1]
						ϒlist_id_type = λargs[2]
						ϒlist_info    λ.Object
						ϒname         λ.Object
						ϒpagenum      λ.Object
						ϒself         = λargs[0]
						τmp0          λ.Object
						τmp1          λ.Object
					)
					ϒname = λ.None
					ϒentries = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωitertools.ϒcount, λ.NewInt(1)))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒpagenum = τmp1
						ϒlist_info = λ.Cal(λ.GetAttr(ϒself, "_download_json", nil), λ.Mod(λ.NewStr("http://tvpot.daum.net/mypot/json/GetClipInfo.do?size=48&init=true&order=date&page=%d&%s=%s"), λ.NewTuple(
							ϒpagenum,
							ϒlist_id_type,
							ϒlist_id,
						)), ϒlist_id, λ.Mod(λ.NewStr("Downloading list info - %s"), ϒpagenum))
						λ.Cal(λ.GetAttr(ϒentries, "extend", nil), λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
							nil,
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
									var (
										ϒclip λ.Object
										τmp0  λ.Object
										τmp1  λ.Object
									)
									τmp0 = λ.Cal(λ.BuiltinIter, λ.GetItem(ϒlist_info, λ.NewStr("clip_list")))
									for {
										if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
											break
										}
										ϒclip = τmp1
										λgy.Yield(λ.Cal(λ.GetAttr(ϒself, "url_result", nil), λ.Mod(λ.NewStr("http://tvpot.daum.net/v/%s"), λ.GetItem(ϒclip, λ.NewStr("vid")))))
									}
									return λ.None
								})
							}))))
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒname))) {
							ϒname = func() λ.Object {
								if λv := λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒlist_info, "get", nil), λ.NewStr("playlist_bean"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("name")); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒlist_info, "get", nil), λ.NewStr("potInfo"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("name"))
								}
							}()
						}
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.Cal(λ.GetAttr(ϒlist_info, "get", nil), λ.NewStr("has_more"))))) {
							break
						}
					}
					return λ.NewTuple(
						ϒname,
						ϒentries,
					)
				})
			DaumListIE__check_clip = λ.NewFunction("_check_clip",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
					{Name: "list_id"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒclip_id    λ.Object
						ϒlist_id    = λargs[2]
						ϒquery_dict λ.Object
						ϒself       = λargs[0]
						ϒurl        = λargs[1]
					)
					ϒquery_dict = λ.Cal(ϒcompat_parse_qs, λ.GetAttr(λ.Cal(Ωparse.ϒurlparse, ϒurl), "query", nil))
					if λ.IsTrue(λ.NewBool(λ.Contains(ϒquery_dict, λ.NewStr("clipid")))) {
						ϒclip_id = λ.GetItem(λ.GetItem(ϒquery_dict, λ.NewStr("clipid")), λ.NewInt(0))
						if λ.IsTrue(λ.Cal(λ.GetAttr(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "params", nil), "get", nil), λ.NewStr("noplaylist"))) {
							λ.Cal(λ.GetAttr(ϒself, "to_screen", nil), λ.Mod(λ.NewStr("Downloading just video %s because of --no-playlist"), ϒclip_id))
							return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), λ.Mod(λ.GetAttr(DaumClipIE, "_URL_TEMPLATE", nil), ϒclip_id), λ.NewStr("DaumClip"))
						} else {
							λ.Cal(λ.GetAttr(ϒself, "to_screen", nil), λ.Mod(λ.NewStr("Downloading playlist %s - add --no-playlist to just download video"), ϒlist_id))
						}
					}
					return λ.None
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_check_clip"):  DaumListIE__check_clip,
				λ.NewStr("_get_entries"): DaumListIE__get_entries,
			})
		}())
		DaumPlaylistIE = λ.Cal(λ.TypeType, λ.NewStr("DaumPlaylistIE"), λ.NewTuple(DaumListIE), func() λ.Dict {
			var (
				DaumPlaylistIE_IE_NAME       λ.Object
				DaumPlaylistIE__TESTS        λ.Object
				DaumPlaylistIE__URL_TEMPLATE λ.Object
				DaumPlaylistIE__VALID_URL    λ.Object
				DaumPlaylistIE__real_extract λ.Object
				DaumPlaylistIE_suitable      λ.Object
			)
			DaumPlaylistIE__VALID_URL = λ.NewStr("https?://(?:m\\.)?tvpot\\.daum\\.net/mypot/(?:View\\.do|Top\\.tv)\\?.*?playlistid=(?P<id>[0-9]+)")
			DaumPlaylistIE_IE_NAME = λ.NewStr("daum.net:playlist")
			DaumPlaylistIE__URL_TEMPLATE = λ.NewStr("http://tvpot.daum.net/mypot/View.do?playlistid=%s")
			DaumPlaylistIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("note"): λ.NewStr("Playlist url with clipid"),
					λ.NewStr("url"):  λ.NewStr("http://tvpot.daum.net/mypot/View.do?playlistid=6213966&clipid=73806844"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):    λ.NewStr("6213966"),
						λ.NewStr("title"): λ.NewStr("Woorissica Official"),
					}),
					λ.NewStr("playlist_mincount"): λ.NewInt(181),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("note"): λ.NewStr("Playlist url with clipid - noplaylist"),
					λ.NewStr("url"):  λ.NewStr("http://tvpot.daum.net/mypot/View.do?playlistid=6213966&clipid=73806844"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("73806844"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("151017 Airport"),
						λ.NewStr("upload_date"): λ.NewStr("20160117"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("noplaylist"):    λ.True,
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
			)
			DaumPlaylistIE_suitable = λ.NewFunction("suitable",
				[]λ.Param{
					{Name: "cls"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls = λargs[0]
						ϒurl = λargs[1]
					)
					return func() λ.Object {
						if λ.IsTrue(λ.Cal(λ.GetAttr(DaumUserIE, "suitable", nil), ϒurl)) {
							return λ.False
						} else {
							return λ.Cal(λ.GetAttr(λ.Cal(λ.SuperType, DaumPlaylistIE, ϒcls), "suitable", nil), ϒurl)
						}
					}()
				})
			DaumPlaylistIE_suitable = λ.Cal(λ.ClassMethodType, DaumPlaylistIE_suitable)
			DaumPlaylistIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒclip_result λ.Object
						ϒentries     λ.Object
						ϒlist_id     λ.Object
						ϒname        λ.Object
						ϒself        = λargs[0]
						ϒurl         = λargs[1]
						τmp0         λ.Object
					)
					ϒlist_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒclip_result = λ.Cal(λ.GetAttr(ϒself, "_check_clip", nil), ϒurl, ϒlist_id)
					if λ.IsTrue(ϒclip_result) {
						return ϒclip_result
					}
					τmp0 = λ.Cal(λ.GetAttr(ϒself, "_get_entries", nil), ϒlist_id, λ.NewStr("playlistid"))
					ϒname = λ.GetItem(τmp0, λ.NewInt(0))
					ϒentries = λ.GetItem(τmp0, λ.NewInt(1))
					return λ.Cal(λ.GetAttr(ϒself, "playlist_result", nil), ϒentries, ϒlist_id, ϒname)
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):       DaumPlaylistIE_IE_NAME,
				λ.NewStr("_TESTS"):        DaumPlaylistIE__TESTS,
				λ.NewStr("_URL_TEMPLATE"): DaumPlaylistIE__URL_TEMPLATE,
				λ.NewStr("_VALID_URL"):    DaumPlaylistIE__VALID_URL,
				λ.NewStr("_real_extract"): DaumPlaylistIE__real_extract,
				λ.NewStr("suitable"):      DaumPlaylistIE_suitable,
			})
		}())
		DaumUserIE = λ.Cal(λ.TypeType, λ.NewStr("DaumUserIE"), λ.NewTuple(DaumListIE), func() λ.Dict {
			var (
				DaumUserIE_IE_NAME       λ.Object
				DaumUserIE__TESTS        λ.Object
				DaumUserIE__VALID_URL    λ.Object
				DaumUserIE__real_extract λ.Object
			)
			DaumUserIE__VALID_URL = λ.NewStr("https?://(?:m\\.)?tvpot\\.daum\\.net/mypot/(?:View|Top)\\.(?:do|tv)\\?.*?ownerid=(?P<id>[0-9a-zA-Z]+)")
			DaumUserIE_IE_NAME = λ.NewStr("daum.net:user")
			DaumUserIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://tvpot.daum.net/mypot/View.do?ownerid=o2scDLIVbHc0"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):    λ.NewStr("o2scDLIVbHc0"),
						λ.NewStr("title"): λ.NewStr("마이 리틀 텔레비전"),
					}),
					λ.NewStr("playlist_mincount"): λ.NewInt(213),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://tvpot.daum.net/mypot/View.do?ownerid=o2scDLIVbHc0&clipid=73801156"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("73801156"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("[미공개] 김구라, 오만석이 부릅니다 '오케피' - 마이 리틀 텔레비전 20160116"),
						λ.NewStr("upload_date"): λ.NewStr("20160117"),
						λ.NewStr("description"): λ.NewStr("md5:5e91d2d6747f53575badd24bd62b9f36"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("noplaylist"):    λ.True,
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("note"): λ.NewStr("Playlist url has ownerid and playlistid, playlistid takes precedence"),
					λ.NewStr("url"):  λ.NewStr("http://tvpot.daum.net/mypot/View.do?ownerid=o2scDLIVbHc0&playlistid=6196631"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):    λ.NewStr("6196631"),
						λ.NewStr("title"): λ.NewStr("마이 리틀 텔레비전 - 20160109"),
					}),
					λ.NewStr("playlist_count"): λ.NewInt(11),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://tvpot.daum.net/mypot/Top.do?ownerid=o2scDLIVbHc0"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://m.tvpot.daum.net/mypot/Top.tv?ownerid=45x1okb1If50&playlistid=3569733"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			DaumUserIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒclip_result λ.Object
						ϒentries     λ.Object
						ϒlist_id     λ.Object
						ϒname        λ.Object
						ϒplaylist_id λ.Object
						ϒquery_dict  λ.Object
						ϒself        = λargs[0]
						ϒurl         = λargs[1]
						τmp0         λ.Object
					)
					ϒlist_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒclip_result = λ.Cal(λ.GetAttr(ϒself, "_check_clip", nil), ϒurl, ϒlist_id)
					if λ.IsTrue(ϒclip_result) {
						return ϒclip_result
					}
					ϒquery_dict = λ.Cal(ϒcompat_parse_qs, λ.GetAttr(λ.Cal(Ωparse.ϒurlparse, ϒurl), "query", nil))
					if λ.IsTrue(λ.NewBool(λ.Contains(ϒquery_dict, λ.NewStr("playlistid")))) {
						ϒplaylist_id = λ.GetItem(λ.GetItem(ϒquery_dict, λ.NewStr("playlistid")), λ.NewInt(0))
						return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), λ.Mod(λ.GetAttr(DaumPlaylistIE, "_URL_TEMPLATE", nil), ϒplaylist_id), λ.NewStr("DaumPlaylist"))
					}
					τmp0 = λ.Cal(λ.GetAttr(ϒself, "_get_entries", nil), ϒlist_id, λ.NewStr("ownerid"))
					ϒname = λ.GetItem(τmp0, λ.NewInt(0))
					ϒentries = λ.GetItem(τmp0, λ.NewInt(1))
					return λ.Cal(λ.GetAttr(ϒself, "playlist_result", nil), ϒentries, ϒlist_id, ϒname)
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):       DaumUserIE_IE_NAME,
				λ.NewStr("_TESTS"):        DaumUserIE__TESTS,
				λ.NewStr("_VALID_URL"):    DaumUserIE__VALID_URL,
				λ.NewStr("_real_extract"): DaumUserIE__real_extract,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * pornflip/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/pornflip.py
 */

package pornflip

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor      λ.Object
	PornFlipIE         λ.Object
	ϒcompat_parse_qs   λ.Object
	ϒcompat_str        λ.Object
	ϒint_or_none       λ.Object
	ϒtry_get           λ.Object
	ϒunified_timestamp λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_parse_qs = Ωcompat.ϒcompat_parse_qs
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒtry_get = Ωutils.ϒtry_get
		ϒunified_timestamp = Ωutils.ϒunified_timestamp
		PornFlipIE = λ.Cal(λ.TypeType, λ.NewStr("PornFlipIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				PornFlipIE__TESTS        λ.Object
				PornFlipIE__VALID_URL    λ.Object
				PornFlipIE__real_extract λ.Object
			)
			PornFlipIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?pornflip\\.com/(?:v|embed)/(?P<id>[^/?#&]+)")
			PornFlipIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.pornflip.com/v/wz7DfNhMmep"),
					λ.NewStr("md5"): λ.NewStr("98c46639849145ae1fd77af532a9278c"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("wz7DfNhMmep"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("2 Amateurs swallow make his dream cumshots true"),
						λ.NewStr("thumbnail"):   λ.NewStr("re:^https?://.*\\.jpg$"),
						λ.NewStr("duration"):    λ.NewInt(112),
						λ.NewStr("timestamp"):   λ.NewInt(1481655502),
						λ.NewStr("upload_date"): λ.NewStr("20161213"),
						λ.NewStr("uploader_id"): λ.NewStr("106786"),
						λ.NewStr("uploader"):    λ.NewStr("figifoto"),
						λ.NewStr("view_count"):  λ.IntType,
						λ.NewStr("age_limit"):   λ.NewInt(18),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://www.pornflip.com/embed/wz7DfNhMmep"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://www.pornflip.com/v/EkRD6-vS2-s"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://www.pornflip.com/embed/EkRD6-vS2-s"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://www.pornflip.com/v/NG9q6Pb_iK8"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			PornFlipIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒflashvar   λ.Object
						ϒflashvars  λ.Object
						ϒformat_url λ.Object
						ϒformats    λ.Object
						ϒheight     λ.Object
						ϒkey        λ.Object
						ϒself       = λargs[0]
						ϒtitle      λ.Object
						ϒuploader   λ.Object
						ϒurl        = λargs[1]
						ϒvalue      λ.Object
						ϒvideo_id   λ.Object
						ϒwebpage    λ.Object
						τmp0        λ.Object
						τmp1        λ.Object
						τmp2        λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), λ.Mod(λ.NewStr("https://www.pornflip.com/v/%s"), ϒvideo_id), ϒvideo_id)
					ϒflashvars = λ.Cal(ϒcompat_parse_qs, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("<embed[^>]+flashvars=([\"\\'])(?P<flashvars>(?:(?!\\1).)+)\\1"),
						ϒwebpage,
						λ.NewStr("flashvars"),
					), λ.KWArgs{
						{Name: "group", Value: λ.NewStr("flashvars")},
					}))
					ϒtitle = λ.GetItem(λ.GetItem(ϒflashvars, λ.NewStr("video_vars[title]")), λ.NewInt(0))
					ϒflashvar = λ.NewFunction("flashvar",
						[]λ.Param{
							{Name: "kind"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒkind = λargs[0]
							)
							return λ.Cal(ϒtry_get, ϒflashvars, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(ϒx, λ.Mod(λ.NewStr("video_vars[%s]"), ϒkind)), λ.NewInt(0))
								}), ϒcompat_str)
						})
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒflashvars, "items", nil)))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒkey = λ.GetItem(τmp2, λ.NewInt(0))
						ϒvalue = λ.GetItem(τmp2, λ.NewInt(1))
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(func() λ.Object {
							if λv := ϒvalue; !λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.BuiltinIsInstance, ϒvalue, λ.ListType)
							}
						}()))) {
							continue
						}
						ϒformat_url = λ.GetItem(ϒvalue, λ.NewInt(0))
						if λ.IsTrue(λ.Eq(ϒkey, λ.NewStr("video_vars[hds_manifest]"))) {
							λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_mpd_formats", nil), λ.NewArgs(
								ϒformat_url,
								ϒvideo_id,
							), λ.KWArgs{
								{Name: "mpd_id", Value: λ.NewStr("dash")},
								{Name: "fatal", Value: λ.False},
							}))
							continue
						}
						ϒheight = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewStr("video_vars\\[video_urls\\]\\[(\\d+)"),
							ϒkey,
							λ.NewStr("height"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						})
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒheight))) {
							continue
						}
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"):       ϒformat_url,
							λ.NewStr("format_id"): λ.Mod(λ.NewStr("http-%s"), ϒheight),
							λ.NewStr("height"):    λ.Cal(ϒint_or_none, ϒheight),
						}))
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒuploader = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
						λ.NewTuple(
							λ.NewStr("<span[^>]+class=\"name\"[^>]*>\\s*<a[^>]+>\\s*<strong>(?P<uploader>[^<]+)"),
							λ.NewStr("<meta[^>]+content=([\"\\'])[^>]*\\buploaded by (?P<uploader>.+?)\\1"),
						),
						ϒwebpage,
						λ.NewStr("uploader"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
						{Name: "group", Value: λ.NewStr("uploader")},
					})
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("formats"):     ϒformats,
						λ.NewStr("title"):       ϒtitle,
						λ.NewStr("thumbnail"):   λ.Cal(ϒflashvar, λ.NewStr("big_thumb")),
						λ.NewStr("duration"):    λ.Cal(ϒint_or_none, λ.Cal(ϒflashvar, λ.NewStr("duration"))),
						λ.NewStr("timestamp"):   λ.Cal(ϒunified_timestamp, λ.Cal(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewStr("uploadDate"), ϒwebpage, λ.NewStr("timestamp"))),
						λ.NewStr("uploader_id"): λ.Cal(ϒflashvar, λ.NewStr("author_id")),
						λ.NewStr("uploader"):    ϒuploader,
						λ.NewStr("view_count"):  λ.Cal(ϒint_or_none, λ.Cal(ϒflashvar, λ.NewStr("views"))),
						λ.NewStr("age_limit"):   λ.NewInt(18),
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        PornFlipIE__TESTS,
				λ.NewStr("_VALID_URL"):    PornFlipIE__VALID_URL,
				λ.NewStr("_real_extract"): PornFlipIE__real_extract,
			})
		}())
	})
}

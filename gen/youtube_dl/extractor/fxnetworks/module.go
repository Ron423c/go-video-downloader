// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * fxnetworks/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/fxnetworks.py
 */

package fxnetworks

import (
	Ωadobepass "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/adobepass"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	AdobePassIE         λ.Object
	FXNetworksIE        λ.Object
	ϒextract_attributes λ.Object
	ϒint_or_none        λ.Object
	ϒparse_age_limit    λ.Object
	ϒsmuggle_url        λ.Object
	ϒupdate_url_query   λ.Object
)

func init() {
	λ.InitModule(func() {
		AdobePassIE = Ωadobepass.AdobePassIE
		ϒextract_attributes = Ωutils.ϒextract_attributes
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_age_limit = Ωutils.ϒparse_age_limit
		ϒsmuggle_url = Ωutils.ϒsmuggle_url
		ϒupdate_url_query = Ωutils.ϒupdate_url_query
		FXNetworksIE = λ.Cal(λ.TypeType, λ.NewStr("FXNetworksIE"), λ.NewTuple(AdobePassIE), func() λ.Dict {
			var (
				FXNetworksIE__VALID_URL    λ.Object
				FXNetworksIE__real_extract λ.Object
			)
			FXNetworksIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?(?:fxnetworks|simpsonsworld)\\.com/video/(?P<id>\\d+)")
			FXNetworksIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒplayer_type λ.Object
						ϒquery       λ.Object
						ϒrating      λ.Object
						ϒrelease_url λ.Object
						ϒresource    λ.Object
						ϒself        = λargs[0]
						ϒtitle       λ.Object
						ϒurl         = λargs[1]
						ϒvideo_data  λ.Object
						ϒvideo_id    λ.Object
						ϒwebpage     λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					if λ.IsTrue(λ.NewBool(λ.Contains(ϒwebpage, λ.NewStr("The content you are trying to access is not available in your region.")))) {
						λ.Cal(λ.GetAttr(ϒself, "raise_geo_restricted", nil))
					}
					ϒvideo_data = λ.Cal(ϒextract_attributes, λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("(<a.+?rel=\"https?://link\\.theplatform\\.com/s/.+?</a>)"), ϒwebpage, λ.NewStr("video data")))
					ϒplayer_type = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("playerType\\s*=\\s*[\\'\"]([^\\'\"]+)"),
						ϒwebpage,
						λ.NewStr("player type"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					ϒrelease_url = λ.GetItem(ϒvideo_data, λ.NewStr("rel"))
					ϒtitle = λ.GetItem(ϒvideo_data, λ.NewStr("data-title"))
					ϒrating = λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("data-rating"))
					ϒquery = λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("mbr"): λ.NewStr("true"),
					})
					if λ.IsTrue(λ.Eq(ϒplayer_type, λ.NewStr("movies"))) {
						λ.Cal(λ.GetAttr(ϒquery, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("manifest"): λ.NewStr("m3u"),
						}))
					} else {
						λ.Cal(λ.GetAttr(ϒquery, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("switch"): λ.NewStr("http"),
						}))
					}
					if λ.IsTrue(λ.Eq(λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("data-req-auth")), λ.NewStr("1"))) {
						ϒresource = λ.Cal(λ.GetAttr(ϒself, "_get_mvpd_resource", nil), λ.GetItem(ϒvideo_data, λ.NewStr("data-channel")), ϒtitle, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("data-guid")), ϒrating)
						λ.SetItem(ϒquery, λ.NewStr("auth"), λ.Cal(λ.GetAttr(ϒself, "_extract_mvpd_auth", nil), ϒurl, ϒvideo_id, λ.NewStr("fx"), ϒresource))
					}
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("_type"): λ.NewStr("url_transparent"),
						λ.NewStr("id"):    ϒvideo_id,
						λ.NewStr("title"): ϒtitle,
						λ.NewStr("url"): λ.Cal(ϒsmuggle_url, λ.Cal(ϒupdate_url_query, ϒrelease_url, ϒquery), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("force_smil_url"): λ.True,
						})),
						λ.NewStr("series"):         λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("data-show-title")),
						λ.NewStr("episode_number"): λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("data-episode"))),
						λ.NewStr("season_number"):  λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("data-season"))),
						λ.NewStr("thumbnail"):      λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("data-large-thumb")),
						λ.NewStr("age_limit"):      λ.Cal(ϒparse_age_limit, ϒrating),
						λ.NewStr("ie_key"):         λ.NewStr("ThePlatform"),
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"):    FXNetworksIE__VALID_URL,
				λ.NewStr("_real_extract"): FXNetworksIE__real_extract,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * coub/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/coub.py
 */

package coub

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	CoubIE         λ.Object
	ExtractorError λ.Object
	InfoExtractor  λ.Object
	ϒfloat_or_none λ.Object
	ϒint_or_none   λ.Object
	ϒparse_iso8601 λ.Object
	ϒqualities     λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ExtractorError = Ωutils.ExtractorError
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		ϒqualities = Ωutils.ϒqualities
		CoubIE = λ.Cal(λ.TypeType, λ.NewStr("CoubIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				CoubIE__TESTS        λ.Object
				CoubIE__VALID_URL    λ.Object
				CoubIE__real_extract λ.Object
			)
			CoubIE__VALID_URL = λ.NewStr("(?:coub:|https?://(?:coub\\.com/(?:view|embed|coubs)/|c-cdn\\.coub\\.com/fb-player\\.swf\\?.*\\bcoub(?:ID|id)=))(?P<id>[\\da-z]+)")
			CoubIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://coub.com/view/5u5n1"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           λ.NewStr("5u5n1"),
						λ.NewStr("ext"):          λ.NewStr("mp4"),
						λ.NewStr("title"):        λ.NewStr("The Matrix Moonwalk"),
						λ.NewStr("thumbnail"):    λ.NewStr("re:^https?://.*\\.jpg$"),
						λ.NewStr("duration"):     λ.NewFloat(4.6),
						λ.NewStr("timestamp"):    λ.NewInt(1428527772),
						λ.NewStr("upload_date"):  λ.NewStr("20150408"),
						λ.NewStr("uploader"):     λ.NewStr("Artyom Loskutnikov"),
						λ.NewStr("uploader_id"):  λ.NewStr("artyom.loskutnikov"),
						λ.NewStr("view_count"):   λ.IntType,
						λ.NewStr("like_count"):   λ.IntType,
						λ.NewStr("repost_count"): λ.IntType,
						λ.NewStr("age_limit"):    λ.NewInt(0),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://c-cdn.coub.com/fb-player.swf?bot_type=vk&coubID=7w5a4"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("coub:5u5n1"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://coub.com/view/237d5l5h"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			CoubIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						HTML5             λ.Object
						IPHONE            λ.Object
						MOBILE            λ.Object
						QUALITIES         λ.Object
						SOURCE_PREFERENCE λ.Object
						ϒage_limit        λ.Object
						ϒage_restricted   λ.Object
						ϒcoub             λ.Object
						ϒduration         λ.Object
						ϒfile_versions    λ.Object
						ϒformats          λ.Object
						ϒiphone_url       λ.Object
						ϒitem             λ.Object
						ϒitem_url         λ.Object
						ϒitems            λ.Object
						ϒkind             λ.Object
						ϒlike_count       λ.Object
						ϒmobile_url       λ.Object
						ϒpreference_key   λ.Object
						ϒquality          λ.Object
						ϒquality_key      λ.Object
						ϒrepost_count     λ.Object
						ϒself             = λargs[0]
						ϒthumbnail        λ.Object
						ϒtimestamp        λ.Object
						ϒtitle            λ.Object
						ϒuploader         λ.Object
						ϒuploader_id      λ.Object
						ϒurl              = λargs[1]
						ϒvideo_id         λ.Object
						ϒview_count       λ.Object
						τmp0              λ.Object
						τmp1              λ.Object
						τmp2              λ.Object
						τmp3              λ.Object
						τmp4              λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒcoub = λ.Cal(λ.GetAttr(ϒself, "_download_json", nil), λ.Mod(λ.NewStr("http://coub.com/api/v2/coubs/%s.json"), ϒvideo_id), ϒvideo_id)
					if λ.IsTrue(λ.Cal(λ.GetAttr(ϒcoub, "get", nil), λ.NewStr("error"))) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.NewStr("%s said: %s"), λ.NewTuple(
							λ.GetAttr(ϒself, "IE_NAME", nil),
							λ.GetItem(ϒcoub, λ.NewStr("error")),
						))), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒtitle = λ.GetItem(ϒcoub, λ.NewStr("title"))
					ϒfile_versions = λ.GetItem(ϒcoub, λ.NewStr("file_versions"))
					QUALITIES = λ.NewTuple(
						λ.NewStr("low"),
						λ.NewStr("med"),
						λ.NewStr("high"),
					)
					MOBILE = λ.NewStr("mobile")
					IPHONE = λ.NewStr("iphone")
					HTML5 = λ.NewStr("html5")
					SOURCE_PREFERENCE = λ.NewTuple(
						MOBILE,
						IPHONE,
						HTML5,
					)
					ϒquality_key = λ.Cal(ϒqualities, QUALITIES)
					ϒpreference_key = λ.Cal(ϒqualities, SOURCE_PREFERENCE)
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒfile_versions, "get", nil), HTML5, λ.NewDictWithTable(map[λ.Object]λ.Object{})), "items", nil)))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒkind = λ.GetItem(τmp2, λ.NewInt(0))
						ϒitems = λ.GetItem(τmp2, λ.NewInt(1))
						if λ.IsTrue(λ.NewBool(!λ.Contains(λ.NewTuple(
							λ.NewStr("video"),
							λ.NewStr("audio"),
						), ϒkind))) {
							continue
						}
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒitems, λ.DictType)))) {
							continue
						}
						τmp2 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒitems, "items", nil)))
						for {
							if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
								break
							}
							τmp4 = τmp3
							ϒquality = λ.GetItem(τmp4, λ.NewInt(0))
							ϒitem = λ.GetItem(τmp4, λ.NewInt(1))
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒitem, λ.DictType)))) {
								continue
							}
							ϒitem_url = λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("url"))
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒitem_url))) {
								continue
							}
							λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("url"): ϒitem_url,
								λ.NewStr("format_id"): λ.Mod(λ.NewStr("%s-%s-%s"), λ.NewTuple(
									HTML5,
									ϒkind,
									ϒquality,
								)),
								λ.NewStr("filesize"): λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("size"))),
								λ.NewStr("vcodec"): func() λ.Object {
									if λ.IsTrue(λ.Eq(ϒkind, λ.NewStr("audio"))) {
										return λ.NewStr("none")
									} else {
										return λ.None
									}
								}(),
								λ.NewStr("quality"):    λ.Cal(ϒquality_key, ϒquality),
								λ.NewStr("preference"): λ.Cal(ϒpreference_key, HTML5),
							}))
						}
					}
					ϒiphone_url = λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒfile_versions, "get", nil), IPHONE, λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("url"))
					if λ.IsTrue(ϒiphone_url) {
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"):        ϒiphone_url,
							λ.NewStr("format_id"):  IPHONE,
							λ.NewStr("preference"): λ.Cal(ϒpreference_key, IPHONE),
						}))
					}
					ϒmobile_url = λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒfile_versions, "get", nil), MOBILE, λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("audio_url"))
					if λ.IsTrue(ϒmobile_url) {
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"):        ϒmobile_url,
							λ.NewStr("format_id"):  λ.Mod(λ.NewStr("%s-audio"), MOBILE),
							λ.NewStr("preference"): λ.Cal(ϒpreference_key, MOBILE),
						}))
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒthumbnail = λ.Cal(λ.GetAttr(ϒcoub, "get", nil), λ.NewStr("picture"))
					ϒduration = λ.Cal(ϒfloat_or_none, λ.Cal(λ.GetAttr(ϒcoub, "get", nil), λ.NewStr("duration")))
					ϒtimestamp = λ.Cal(ϒparse_iso8601, func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒcoub, "get", nil), λ.NewStr("published_at")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒcoub, "get", nil), λ.NewStr("created_at"))
						}
					}())
					ϒuploader = λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒcoub, "get", nil), λ.NewStr("channel"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("title"))
					ϒuploader_id = λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒcoub, "get", nil), λ.NewStr("channel"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("permalink"))
					ϒview_count = λ.Cal(ϒint_or_none, func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒcoub, "get", nil), λ.NewStr("views_count")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒcoub, "get", nil), λ.NewStr("views_increase_count"))
						}
					}())
					ϒlike_count = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒcoub, "get", nil), λ.NewStr("likes_count")))
					ϒrepost_count = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒcoub, "get", nil), λ.NewStr("recoubs_count")))
					ϒage_restricted = λ.Cal(λ.GetAttr(ϒcoub, "get", nil), λ.NewStr("age_restricted"), λ.Cal(λ.GetAttr(ϒcoub, "get", nil), λ.NewStr("age_restricted_by_admin")))
					if λ.IsTrue(λ.NewBool(ϒage_restricted != λ.None)) {
						ϒage_limit = func() λ.Object {
							if λ.IsTrue(λ.NewBool(ϒage_restricted == λ.True)) {
								return λ.NewInt(18)
							} else {
								return λ.NewInt(0)
							}
						}()
					} else {
						ϒage_limit = λ.None
					}
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           ϒvideo_id,
						λ.NewStr("title"):        ϒtitle,
						λ.NewStr("thumbnail"):    ϒthumbnail,
						λ.NewStr("duration"):     ϒduration,
						λ.NewStr("timestamp"):    ϒtimestamp,
						λ.NewStr("uploader"):     ϒuploader,
						λ.NewStr("uploader_id"):  ϒuploader_id,
						λ.NewStr("view_count"):   ϒview_count,
						λ.NewStr("like_count"):   ϒlike_count,
						λ.NewStr("repost_count"): ϒrepost_count,
						λ.NewStr("age_limit"):    ϒage_limit,
						λ.NewStr("formats"):      ϒformats,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        CoubIE__TESTS,
				λ.NewStr("_VALID_URL"):    CoubIE__VALID_URL,
				λ.NewStr("_real_extract"): CoubIE__real_extract,
			})
		}())
	})
}

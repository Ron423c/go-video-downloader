// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * dctp/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/dctp.py
 */

package dctp

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	DctpTvIE           λ.Object
	InfoExtractor      λ.Object
	ϒcompat_str        λ.Object
	ϒfloat_or_none     λ.Object
	ϒint_or_none       λ.Object
	ϒunified_timestamp λ.Object
	ϒurl_or_none       λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒunified_timestamp = Ωutils.ϒunified_timestamp
		ϒurl_or_none = Ωutils.ϒurl_or_none
		DctpTvIE = λ.Cal(λ.TypeType, λ.StrLiteral("DctpTvIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				DctpTvIE__BASE_URL     λ.Object
				DctpTvIE__VALID_URL    λ.Object
				DctpTvIE__real_extract λ.Object
			)
			DctpTvIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?dctp\\.tv/(?:#/)?filme/(?P<id>[^/?#&]+)")
			DctpTvIE__BASE_URL = λ.StrLiteral("http://dctp-ivms2-restapi.s3.amazonaws.com")
			DctpTvIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒadd_formats  λ.Object
						ϒdisplay_id   λ.Object
						ϒformats      λ.Object
						ϒimage        λ.Object
						ϒimage_url    λ.Object
						ϒimages       λ.Object
						ϒinfo         λ.Object
						ϒis_wide      λ.Object
						ϒmedia        λ.Object
						ϒrestapi_base λ.Object
						ϒself         = λargs[0]
						ϒthumbnails   λ.Object
						ϒtitle        λ.Object
						ϒurl          = λargs[1]
						ϒuuid         λ.Object
						ϒversion      λ.Object
						τmp0          λ.Object
						τmp1          λ.Object
					)
					ϒdisplay_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒversion = λ.Calm(ϒself, "_download_json", λ.Mod(λ.StrLiteral("%s/version.json"), λ.GetAttr(ϒself, "_BASE_URL", nil)), ϒdisplay_id, λ.StrLiteral("Downloading version JSON"))
					ϒrestapi_base = λ.Mod(λ.StrLiteral("%s/%s/restapi"), λ.NewTuple(
						λ.GetAttr(ϒself, "_BASE_URL", nil),
						λ.GetItem(ϒversion, λ.StrLiteral("version_name")),
					))
					ϒinfo = λ.Calm(ϒself, "_download_json", λ.Mod(λ.StrLiteral("%s/slugs/%s.json"), λ.NewTuple(
						ϒrestapi_base,
						ϒdisplay_id,
					)), ϒdisplay_id, λ.StrLiteral("Downloading video info JSON"))
					ϒmedia = λ.Calm(ϒself, "_download_json", λ.Mod(λ.StrLiteral("%s/media/%s.json"), λ.NewTuple(
						ϒrestapi_base,
						λ.Cal(ϒcompat_str, λ.GetItem(ϒinfo, λ.StrLiteral("object_id"))),
					)), ϒdisplay_id, λ.StrLiteral("Downloading media JSON"))
					ϒuuid = λ.GetItem(ϒmedia, λ.StrLiteral("uuid"))
					ϒtitle = λ.GetItem(ϒmedia, λ.StrLiteral("title"))
					ϒis_wide = λ.Calm(ϒmedia, "get", λ.StrLiteral("is_wide"))
					ϒformats = λ.NewList()
					ϒadd_formats = λ.NewFunction("add_formats",
						[]λ.Param{
							{Name: "suffix"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒsuffix = λargs[0]
								ϒtempl  λ.Object
							)
							ϒtempl = λ.Mod(λ.StrLiteral("https://%%s/%s_dctp_%s.m4v"), λ.NewTuple(
								ϒuuid,
								ϒsuffix,
							))
							λ.Calm(ϒformats, "extend", λ.NewList(
								λ.DictLiteral(map[string]λ.Object{
									"format_id": λ.Add(λ.StrLiteral("hls-"), ϒsuffix),
									"url":       λ.Add(λ.Mod(ϒtempl, λ.StrLiteral("cdn-segments.dctp.tv")), λ.StrLiteral("/playlist.m3u8")),
									"protocol":  λ.StrLiteral("m3u8_native"),
								}),
								λ.DictLiteral(map[string]λ.Object{
									"format_id": λ.Add(λ.StrLiteral("s3-"), ϒsuffix),
									"url":       λ.Mod(ϒtempl, λ.StrLiteral("completed-media.s3.amazonaws.com")),
								}),
								λ.DictLiteral(map[string]λ.Object{
									"format_id": λ.Add(λ.StrLiteral("http-"), ϒsuffix),
									"url":       λ.Mod(ϒtempl, λ.StrLiteral("cdn-media.dctp.tv")),
								}),
							))
							return λ.None
						})
					λ.Cal(ϒadd_formats, λ.Add(λ.StrLiteral("0500_"), func() λ.Object {
						if λ.IsTrue(ϒis_wide) {
							return λ.StrLiteral("16x9")
						} else {
							return λ.StrLiteral("4x3")
						}
					}()))
					if λ.IsTrue(ϒis_wide) {
						λ.Cal(ϒadd_formats, λ.StrLiteral("720p"))
					}
					ϒthumbnails = λ.NewList()
					ϒimages = λ.Calm(ϒmedia, "get", λ.StrLiteral("images"))
					if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒimages, λ.ListType)) {
						τmp0 = λ.Cal(λ.BuiltinIter, ϒimages)
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒimage = τmp1
							if !λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒimage, λ.DictType)) {
								continue
							}
							ϒimage_url = λ.Cal(ϒurl_or_none, λ.Calm(ϒimage, "get", λ.StrLiteral("url")))
							if !λ.IsTrue(ϒimage_url) {
								continue
							}
							λ.Calm(ϒthumbnails, "append", λ.DictLiteral(map[string]λ.Object{
								"url":    ϒimage_url,
								"width":  λ.Cal(ϒint_or_none, λ.Calm(ϒimage, "get", λ.StrLiteral("width"))),
								"height": λ.Cal(ϒint_or_none, λ.Calm(ϒimage, "get", λ.StrLiteral("height"))),
							}))
						}
					}
					return λ.DictLiteral(map[string]λ.Object{
						"id":         ϒuuid,
						"display_id": ϒdisplay_id,
						"title":      ϒtitle,
						"alt_title":  λ.Calm(ϒmedia, "get", λ.StrLiteral("subtitle")),
						"description": func() λ.Object {
							if λv := λ.Calm(ϒmedia, "get", λ.StrLiteral("description")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Calm(ϒmedia, "get", λ.StrLiteral("teaser"))
							}
						}(),
						"timestamp": λ.Cal(ϒunified_timestamp, λ.Calm(ϒmedia, "get", λ.StrLiteral("created"))),
						"duration": λ.Call(ϒfloat_or_none, λ.NewArgs(λ.Calm(ϒmedia, "get", λ.StrLiteral("duration_in_ms"))), λ.KWArgs{
							{Name: "scale", Value: λ.IntLiteral(1000)},
						}),
						"thumbnails": ϒthumbnails,
						"formats":    ϒformats,
					})
				})
			return λ.DictLiteral(map[string]λ.Object{
				"_BASE_URL":     DctpTvIE__BASE_URL,
				"_VALID_URL":    DctpTvIE__VALID_URL,
				"_real_extract": DctpTvIE__real_extract,
			})
		}())
	})
}

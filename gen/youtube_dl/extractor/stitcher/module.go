// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * stitcher/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/stitcher.py
 */

package stitcher

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor  λ.Object
	StitcherIE     λ.Object
	ϒdetermine_ext λ.Object
	ϒint_or_none   λ.Object
	ϒjs_to_json    λ.Object
	ϒunescapeHTML  λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒjs_to_json = Ωutils.ϒjs_to_json
		ϒunescapeHTML = Ωutils.ϒunescapeHTML
		StitcherIE = λ.Cal(λ.TypeType, λ.StrLiteral("StitcherIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				StitcherIE__VALID_URL    λ.Object
				StitcherIE__real_extract λ.Object
			)
			StitcherIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?stitcher\\.com/podcast/(?:[^/]+/)+e/(?:(?P<display_id>[^/#?&]+?)-)?(?P<id>\\d+)(?:[/#?&]|$)")
			StitcherIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒaudio_id    λ.Object
						ϒdescription λ.Object
						ϒdisplay_id  λ.Object
						ϒduration    λ.Object
						ϒepisode     λ.Object
						ϒformats     λ.Object
						ϒmobj        λ.Object
						ϒself        = λargs[0]
						ϒthumbnail   λ.Object
						ϒtitle       λ.Object
						ϒurl         = λargs[1]
						ϒwebpage     λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒaudio_id = λ.Calm(ϒmobj, "group", λ.StrLiteral("id"))
					ϒdisplay_id = func() λ.Object {
						if λv := λ.Calm(ϒmobj, "group", λ.StrLiteral("display_id")); λ.IsTrue(λv) {
							return λv
						} else {
							return ϒaudio_id
						}
					}()
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒdisplay_id)
					ϒepisode = λ.GetItem(λ.GetItem(λ.Calm(ϒself, "_parse_json", λ.Cal(ϒjs_to_json, λ.Calm(ϒself, "_search_regex", λ.StrLiteral("(?s)var\\s+stitcher(?:Config)?\\s*=\\s*({.+?});\\n"), ϒwebpage, λ.StrLiteral("episode config"))), ϒdisplay_id), λ.StrLiteral("config")), λ.StrLiteral("episode"))
					ϒtitle = λ.Cal(ϒunescapeHTML, λ.GetItem(ϒepisode, λ.StrLiteral("title")))
					ϒformats = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒepisode_key λ.Object
									τmp0         λ.Object
									τmp1         λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(λ.StrLiteral("episodeURL")))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒepisode_key = τmp1
									if λ.IsTrue(λ.Calm(ϒepisode, "get", ϒepisode_key)) {
										λgy.Yield(λ.DictLiteral(map[string]λ.Object{
											"url": λ.GetItem(ϒepisode, ϒepisode_key),
											"ext": func() λ.Object {
												if λv := λ.Cal(ϒdetermine_ext, λ.GetItem(ϒepisode, ϒepisode_key)); λ.IsTrue(λv) {
													return λv
												} else {
													return λ.StrLiteral("mp3")
												}
											}(),
											"vcodec": λ.StrLiteral("none"),
										}))
									}
								}
								return λ.None
							})
						})))
					ϒdescription = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("Episode Info:\\s*</span>([^<]+)<"),
						ϒwebpage,
						λ.StrLiteral("description"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					ϒduration = λ.Cal(ϒint_or_none, λ.Calm(ϒepisode, "get", λ.StrLiteral("duration")))
					ϒthumbnail = λ.Calm(ϒepisode, "get", λ.StrLiteral("episodeImage"))
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒaudio_id,
						"display_id":  ϒdisplay_id,
						"title":       ϒtitle,
						"description": ϒdescription,
						"duration":    ϒduration,
						"thumbnail":   ϒthumbnail,
						"formats":     ϒformats,
					})
				})
			return λ.DictLiteral(map[string]λ.Object{
				"_VALID_URL":    StitcherIE__VALID_URL,
				"_real_extract": StitcherIE__real_extract,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * xuite/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/xuite.py
 */

package xuite

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError            λ.Object
	InfoExtractor             λ.Object
	XuiteIE                   λ.Object
	ϒfloat_or_none            λ.Object
	ϒget_element_by_attribute λ.Object
	ϒparse_iso8601            λ.Object
	ϒremove_end               λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ExtractorError = Ωutils.ExtractorError
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒget_element_by_attribute = Ωutils.ϒget_element_by_attribute
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		ϒremove_end = Ωutils.ϒremove_end
		XuiteIE = λ.Cal(λ.TypeType, λ.StrLiteral("XuiteIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				XuiteIE__REGEX_BASE64 λ.Object
				XuiteIE__VALID_URL    λ.Object
				XuiteIE__real_extract λ.Object
			)
			XuiteIE__REGEX_BASE64 = λ.StrLiteral("(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?")
			XuiteIE__VALID_URL = λ.Mod(λ.StrLiteral("https?://vlog\\.xuite\\.net/(?:play|embed)/(?P<id>%s)"), XuiteIE__REGEX_BASE64)
			XuiteIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒauthor_div   λ.Object
						ϒcategories   λ.Object
						ϒcategory     λ.Object
						ϒerror_msg    λ.Object
						ϒformat_id    λ.Object
						ϒformats      λ.Object
						ϒkey          λ.Object
						ϒmedia_info   λ.Object
						ϒself         = λargs[0]
						ϒtimestamp    λ.Object
						ϒuploader     λ.Object
						ϒuploader_url λ.Object
						ϒurl          = λargs[1]
						ϒvideo_id     λ.Object
						ϒvideo_url    λ.Object
						ϒwebpage      λ.Object
						τmp0          λ.Object
						τmp1          λ.Object
					)
					ϒurl = λ.Calm(ϒurl, "replace", λ.StrLiteral("/embed/"), λ.StrLiteral("/play/"))
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒvideo_id)
					ϒerror_msg = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("<div id=\"error-message-content\">([^<]+)"),
						ϒwebpage,
						λ.StrLiteral("error message"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(ϒerror_msg) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.StrLiteral("%s returned error: %s"), λ.NewTuple(
							λ.GetAttr(ϒself, "IE_NAME", nil),
							ϒerror_msg,
						))), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒmedia_info = λ.Calm(ϒself, "_parse_json", λ.Calm(ϒself, "_search_regex", λ.StrLiteral("var\\s+mediaInfo\\s*=\\s*({.*});"), ϒwebpage, λ.StrLiteral("media info")), ϒvideo_id)
					ϒvideo_id = λ.GetItem(ϒmedia_info, λ.StrLiteral("MEDIA_ID"))
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
						λ.StrLiteral("html5Url"),
						λ.StrLiteral("html5HQUrl"),
					))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒkey = τmp1
						ϒvideo_url = λ.Calm(ϒmedia_info, "get", ϒkey)
						if !λ.IsTrue(ϒvideo_url) {
							continue
						}
						ϒformat_id = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.StrLiteral("\\bq=(.+?)\\b"),
							ϒvideo_url,
							λ.StrLiteral("format id"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						})
						λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
							"url": ϒvideo_url,
							"ext": func() λ.Object {
								if λ.IsTrue(λ.Calm(ϒformat_id, "isnumeric")) {
									return λ.StrLiteral("mp4")
								} else {
									return ϒformat_id
								}
							}(),
							"format_id": ϒformat_id,
							"height": func() λ.Object {
								if λ.IsTrue(λ.Calm(ϒformat_id, "isnumeric")) {
									return λ.Cal(λ.IntType, ϒformat_id)
								} else {
									return λ.None
								}
							}(),
						}))
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					ϒtimestamp = λ.Calm(ϒmedia_info, "get", λ.StrLiteral("PUBLISH_DATETIME"))
					if λ.IsTrue(ϒtimestamp) {
						ϒtimestamp = λ.Cal(ϒparse_iso8601, λ.Add(ϒtimestamp, λ.StrLiteral(" +0800")), λ.StrLiteral(" "))
					}
					ϒcategory = λ.Calm(ϒmedia_info, "get", λ.StrLiteral("catName"))
					ϒcategories = func() λ.Object {
						if λ.IsTrue(ϒcategory) {
							return λ.NewList(ϒcategory)
						} else {
							return λ.NewList()
						}
					}()
					ϒuploader = λ.Calm(ϒmedia_info, "get", λ.StrLiteral("NICKNAME"))
					ϒuploader_url = λ.None
					ϒauthor_div = λ.Cal(ϒget_element_by_attribute, λ.StrLiteral("itemprop"), λ.StrLiteral("author"), ϒwebpage)
					if λ.IsTrue(ϒauthor_div) {
						ϒuploader = func() λ.Object {
							if λv := ϒuploader; λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Calm(ϒself, "_html_search_meta", λ.StrLiteral("name"), ϒauthor_div)
							}
						}()
						ϒuploader_url = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
							λ.StrLiteral("<link[^>]+itemprop=\"url\"[^>]+href=\"([^\"]+)\""),
							ϒauthor_div,
							λ.StrLiteral("uploader URL"),
						), λ.KWArgs{
							{Name: "fatal", Value: λ.False},
						})
					}
					return λ.DictLiteral(map[string]λ.Object{
						"id":           ϒvideo_id,
						"title":        λ.GetItem(ϒmedia_info, λ.StrLiteral("TITLE")),
						"description":  λ.Cal(ϒremove_end, λ.Calm(ϒmedia_info, "get", λ.StrLiteral("metaDesc")), λ.StrLiteral(" (Xuite 影音)")),
						"thumbnail":    λ.Calm(ϒmedia_info, "get", λ.StrLiteral("ogImageUrl")),
						"timestamp":    ϒtimestamp,
						"uploader":     ϒuploader,
						"uploader_id":  λ.Calm(ϒmedia_info, "get", λ.StrLiteral("MEMBER_ID")),
						"uploader_url": ϒuploader_url,
						"duration":     λ.Cal(ϒfloat_or_none, λ.Calm(ϒmedia_info, "get", λ.StrLiteral("MEDIA_DURATION")), λ.IntLiteral(1000000)),
						"categories":   ϒcategories,
						"formats":      ϒformats,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_REGEX_BASE64": XuiteIE__REGEX_BASE64,
				"_VALID_URL":    XuiteIE__VALID_URL,
				"_real_extract": XuiteIE__real_extract,
			})
		}())
	})
}

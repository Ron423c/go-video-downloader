// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * onet/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/onet.py
 */

package onet

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError        λ.Object
	InfoExtractor         λ.Object
	NO_DEFAULT            λ.Object
	OnetBaseIE            λ.Object
	OnetChannelIE         λ.Object
	OnetIE                λ.Object
	OnetMVPIE             λ.Object
	OnetPlIE              λ.Object
	ϒdetermine_ext        λ.Object
	ϒfloat_or_none        λ.Object
	ϒget_element_by_class λ.Object
	ϒint_or_none          λ.Object
	ϒjs_to_json           λ.Object
	ϒparse_iso8601        λ.Object
	ϒremove_start         λ.Object
	ϒstrip_or_none        λ.Object
	ϒurl_basename         λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ExtractorError = Ωutils.ExtractorError
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒget_element_by_class = Ωutils.ϒget_element_by_class
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒjs_to_json = Ωutils.ϒjs_to_json
		NO_DEFAULT = Ωutils.NO_DEFAULT
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		ϒremove_start = Ωutils.ϒremove_start
		ϒstrip_or_none = Ωutils.ϒstrip_or_none
		ϒurl_basename = Ωutils.ϒurl_basename
		OnetBaseIE = λ.Cal(λ.TypeType, λ.StrLiteral("OnetBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				OnetBaseIE__URL_BASE_RE     λ.Object
				OnetBaseIE__extract_from_id λ.Object
				OnetBaseIE__search_mvp_id   λ.Object
			)
			OnetBaseIE__URL_BASE_RE = λ.StrLiteral("https?://(?:(?:www\\.)?onet\\.tv|onet100\\.vod\\.pl)/[a-z]/")
			OnetBaseIE__search_mvp_id = λ.NewFunction("_search_mvp_id",
				[]λ.Param{
					{Name: "self"},
					{Name: "webpage"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒself    = λargs[0]
						ϒwebpage = λargs[1]
					)
					return λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("id=([\"\\'])mvp:(?P<id>.+?)\\1"),
						ϒwebpage,
						λ.StrLiteral("mvp id"),
					), λ.KWArgs{
						{Name: "group", Value: λ.StrLiteral("id")},
					})
				})
			OnetBaseIE__extract_from_id = λ.NewFunction("_extract_from_id",
				[]λ.Param{
					{Name: "self"},
					{Name: "video_id"},
					{Name: "webpage", Def: λ.None},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdescription  λ.Object
						ϒduration     λ.Object
						ϒerror        λ.Object
						ϒext          λ.Object
						ϒf            λ.Object
						ϒformat_id    λ.Object
						ϒformat_list  λ.Object
						ϒformat_type  λ.Object
						ϒformats      λ.Object
						ϒformats_dict λ.Object
						ϒhttp_f       λ.Object
						ϒmeta         λ.Object
						ϒresponse     λ.Object
						ϒself         = λargs[0]
						ϒtimestamp    λ.Object
						ϒtitle        λ.Object
						ϒvideo        λ.Object
						ϒvideo_id     = λargs[1]
						ϒvideo_url    λ.Object
						ϒwebpage      = λargs[2]
						τmp0          λ.Object
						τmp1          λ.Object
						τmp2          λ.Object
						τmp3          λ.Object
						τmp4          λ.Object
						τmp5          λ.Object
					)
					ϒresponse = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.StrLiteral("http://qi.ckm.onetapi.pl/"),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "query", Value: λ.DictLiteral(map[string]λ.Object{
							"body[id]":                    ϒvideo_id,
							"body[jsonrpc]":               λ.StrLiteral("2.0"),
							"body[method]":                λ.StrLiteral("get_asset_detail"),
							"body[params][ID_Publikacji]": ϒvideo_id,
							"body[params][Service]":       λ.StrLiteral("www.onet.pl"),
							"content-type":                λ.StrLiteral("application/jsonp"),
							"x-onet-app":                  λ.StrLiteral("player.front.onetapi.pl"),
						})},
					})
					ϒerror = λ.Calm(ϒresponse, "get", λ.StrLiteral("error"))
					if λ.IsTrue(ϒerror) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.StrLiteral("%s said: %s"), λ.NewTuple(
							λ.GetAttr(ϒself, "IE_NAME", nil),
							λ.GetItem(ϒerror, λ.StrLiteral("message")),
						))), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒvideo = λ.Calm(λ.GetItem(ϒresponse, λ.StrLiteral("result")), "get", λ.StrLiteral("0"))
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(λ.GetItem(ϒvideo, λ.StrLiteral("formats")), "items"))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒformat_type = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒformats_dict = λ.GetItem(τmp2, λ.IntLiteral(1))
						if !λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒformats_dict, λ.DictType)) {
							continue
						}
						τmp2 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒformats_dict, "items"))
						for {
							if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
								break
							}
							τmp4 = τmp3
							ϒformat_id = λ.GetItem(τmp4, λ.IntLiteral(0))
							ϒformat_list = λ.GetItem(τmp4, λ.IntLiteral(1))
							if !λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒformat_list, λ.ListType)) {
								continue
							}
							τmp4 = λ.Cal(λ.BuiltinIter, ϒformat_list)
							for {
								if τmp5 = λ.NextDefault(τmp4, λ.AfterLast); τmp5 == λ.AfterLast {
									break
								}
								ϒf = τmp5
								ϒvideo_url = λ.Calm(ϒf, "get", λ.StrLiteral("url"))
								if !λ.IsTrue(ϒvideo_url) {
									continue
								}
								ϒext = λ.Cal(ϒdetermine_ext, ϒvideo_url)
								if λ.IsTrue(λ.Calm(ϒformat_id, "startswith", λ.StrLiteral("ism"))) {
									λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_ism_formats", nil), λ.NewArgs(
										ϒvideo_url,
										ϒvideo_id,
										λ.StrLiteral("mss"),
									), λ.KWArgs{
										{Name: "fatal", Value: λ.False},
									}))
								} else {
									if λ.IsTrue(λ.Eq(ϒext, λ.StrLiteral("mpd"))) {
										λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_mpd_formats", nil), λ.NewArgs(
											ϒvideo_url,
											ϒvideo_id,
										), λ.KWArgs{
											{Name: "mpd_id", Value: λ.StrLiteral("dash")},
											{Name: "fatal", Value: λ.False},
										}))
									} else {
										if λ.IsTrue(λ.Calm(ϒformat_id, "startswith", λ.StrLiteral("hls"))) {
											λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
												ϒvideo_url,
												ϒvideo_id,
												λ.StrLiteral("mp4"),
												λ.StrLiteral("m3u8_native"),
											), λ.KWArgs{
												{Name: "m3u8_id", Value: λ.StrLiteral("hls")},
												{Name: "fatal", Value: λ.False},
											}))
										} else {
											ϒhttp_f = λ.DictLiteral(map[string]λ.Object{
												"url":       ϒvideo_url,
												"format_id": ϒformat_id,
												"abr":       λ.Cal(ϒfloat_or_none, λ.Calm(ϒf, "get", λ.StrLiteral("audio_bitrate"))),
											})
											if λ.IsTrue(λ.Eq(ϒformat_type, λ.StrLiteral("audio"))) {
												λ.SetItem(ϒhttp_f, λ.StrLiteral("vcodec"), λ.StrLiteral("none"))
											} else {
												λ.Calm(ϒhttp_f, "update", λ.DictLiteral(map[string]λ.Object{
													"height": λ.Cal(ϒint_or_none, λ.Calm(ϒf, "get", λ.StrLiteral("vertical_resolution"))),
													"width":  λ.Cal(ϒint_or_none, λ.Calm(ϒf, "get", λ.StrLiteral("horizontal_resolution"))),
													"vbr":    λ.Cal(ϒfloat_or_none, λ.Calm(ϒf, "get", λ.StrLiteral("video_bitrate"))),
												}))
											}
											λ.Calm(ϒformats, "append", ϒhttp_f)
										}
									}
								}
							}
						}
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					ϒmeta = λ.Calm(ϒvideo, "get", λ.StrLiteral("meta"), λ.DictLiteral(map[λ.Object]λ.Object{}))
					ϒtitle = func() λ.Object {
						if λv := func() λ.Object {
							if λ.IsTrue(ϒwebpage) {
								return λ.Call(λ.GetAttr(ϒself, "_og_search_title", nil), λ.NewArgs(ϒwebpage), λ.KWArgs{
									{Name: "default", Value: λ.None},
								})
							} else {
								return λ.None
							}
						}(); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.GetItem(ϒmeta, λ.StrLiteral("title"))
						}
					}()
					ϒdescription = func() λ.Object {
						if λv := func() λ.Object {
							if λ.IsTrue(ϒwebpage) {
								return λ.Call(λ.GetAttr(ϒself, "_og_search_description", nil), λ.NewArgs(ϒwebpage), λ.KWArgs{
									{Name: "default", Value: λ.None},
								})
							} else {
								return λ.None
							}
						}(); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒmeta, "get", λ.StrLiteral("description"))
						}
					}()
					ϒduration = func() λ.Object {
						if λv := λ.Calm(ϒmeta, "get", λ.StrLiteral("length")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒmeta, "get", λ.StrLiteral("lenght"))
						}
					}()
					ϒtimestamp = λ.Cal(ϒparse_iso8601, λ.Calm(ϒmeta, "get", λ.StrLiteral("addDate")), λ.StrLiteral(" "))
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒvideo_id,
						"title":       ϒtitle,
						"description": ϒdescription,
						"duration":    ϒduration,
						"timestamp":   ϒtimestamp,
						"formats":     ϒformats,
					})
				})
			return λ.DictLiteral(map[string]λ.Object{
				"_URL_BASE_RE":     OnetBaseIE__URL_BASE_RE,
				"_extract_from_id": OnetBaseIE__extract_from_id,
				"_search_mvp_id":   OnetBaseIE__search_mvp_id,
			})
		}())
		OnetMVPIE = λ.Cal(λ.TypeType, λ.StrLiteral("OnetMVPIE"), λ.NewTuple(OnetBaseIE), func() λ.Dict {
			var (
				OnetMVPIE__VALID_URL λ.Object
			)
			OnetMVPIE__VALID_URL = λ.StrLiteral("onetmvp:(?P<id>\\d+\\.\\d+)")
			return λ.DictLiteral(map[string]λ.Object{
				"_VALID_URL": OnetMVPIE__VALID_URL,
			})
		}())
		OnetIE = λ.Cal(λ.TypeType, λ.StrLiteral("OnetIE"), λ.NewTuple(OnetBaseIE), func() λ.Dict {
			var (
				OnetIE_IE_NAME       λ.Object
				OnetIE__VALID_URL    λ.Object
				OnetIE__real_extract λ.Object
			)
			OnetIE__VALID_URL = λ.Add(λ.GetAttr(OnetBaseIE, "_URL_BASE_RE", nil), λ.StrLiteral("[a-z]+/(?P<display_id>[0-9a-z-]+)/(?P<id>[0-9a-z]+)"))
			OnetIE_IE_NAME = λ.StrLiteral("onet.tv")
			OnetIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdisplay_id λ.Object
						ϒinfo_dict  λ.Object
						ϒmobj       λ.Object
						ϒmvp_id     λ.Object
						ϒself       = λargs[0]
						ϒurl        = λargs[1]
						ϒvideo_id   λ.Object
						ϒwebpage    λ.Object
						τmp0        λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					τmp0 = λ.Calm(ϒmobj, "group", λ.StrLiteral("display_id"), λ.StrLiteral("id"))
					ϒdisplay_id = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒvideo_id = λ.GetItem(τmp0, λ.IntLiteral(1))
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒdisplay_id)
					ϒmvp_id = λ.Calm(ϒself, "_search_mvp_id", ϒwebpage)
					ϒinfo_dict = λ.Calm(ϒself, "_extract_from_id", ϒmvp_id, ϒwebpage)
					λ.Calm(ϒinfo_dict, "update", λ.DictLiteral(map[string]λ.Object{
						"id":         ϒvideo_id,
						"display_id": ϒdisplay_id,
					}))
					return ϒinfo_dict
				})
			return λ.DictLiteral(map[string]λ.Object{
				"IE_NAME":       OnetIE_IE_NAME,
				"_VALID_URL":    OnetIE__VALID_URL,
				"_real_extract": OnetIE__real_extract,
			})
		}())
		OnetChannelIE = λ.Cal(λ.TypeType, λ.StrLiteral("OnetChannelIE"), λ.NewTuple(OnetBaseIE), func() λ.Dict {
			var (
				OnetChannelIE_IE_NAME       λ.Object
				OnetChannelIE__VALID_URL    λ.Object
				OnetChannelIE__real_extract λ.Object
			)
			OnetChannelIE__VALID_URL = λ.Add(λ.GetAttr(OnetBaseIE, "_URL_BASE_RE", nil), λ.StrLiteral("(?P<id>[a-z]+)(?:[?#]|$)"))
			OnetChannelIE_IE_NAME = λ.StrLiteral("onet.tv:channel")
			OnetChannelIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒchannel_description λ.Object
						ϒchannel_id          λ.Object
						ϒchannel_title       λ.Object
						ϒcurrent_clip_info   λ.Object
						ϒentries             λ.Object
						ϒmatches             λ.Object
						ϒself                = λargs[0]
						ϒurl                 = λargs[1]
						ϒvideo_id            λ.Object
						ϒvideo_name          λ.Object
						ϒwebpage             λ.Object
					)
					ϒchannel_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒchannel_id)
					ϒcurrent_clip_info = λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
						λ.Calm(ϒself, "_search_regex", λ.StrLiteral("var\\s+currentClip\\s*=\\s*({[^}]+})"), ϒwebpage, λ.StrLiteral("video info")),
						ϒchannel_id,
					), λ.KWArgs{
						{Name: "transform_source", Value: λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "s"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒs = λargs[0]
								)
								return λ.Cal(ϒjs_to_json, λ.Cal(Ωre.ϒsub, λ.StrLiteral("\\'\\s*\\+\\s*\\'"), λ.StrLiteral(""), ϒs))
							})},
					})
					ϒvideo_id = λ.Cal(ϒremove_start, λ.GetItem(ϒcurrent_clip_info, λ.StrLiteral("ckmId")), λ.StrLiteral("mvp:"))
					ϒvideo_name = λ.Cal(ϒurl_basename, λ.GetItem(ϒcurrent_clip_info, λ.StrLiteral("url")))
					if λ.IsTrue(λ.Calm(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "params", nil), "get", λ.StrLiteral("noplaylist"))) {
						λ.Calm(ϒself, "to_screen", λ.Mod(λ.StrLiteral("Downloading just video %s because of --no-playlist"), ϒvideo_name))
						return λ.Calm(ϒself, "_extract_from_id", ϒvideo_id, ϒwebpage)
					}
					λ.Calm(ϒself, "to_screen", λ.Mod(λ.StrLiteral("Downloading channel %s - add --no-playlist to just download video %s"), λ.NewTuple(
						ϒchannel_id,
						ϒvideo_name,
					)))
					ϒmatches = λ.Cal(Ωre.ϒfindall, λ.Mod(λ.StrLiteral("<a[^>]+href=[\\'\"](%s[a-z]+/[0-9a-z-]+/[0-9a-z]+)"), λ.GetAttr(ϒself, "_URL_BASE_RE", nil)), ϒwebpage)
					ϒentries = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒvideo_link λ.Object
									τmp0        λ.Object
									τmp1        λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, ϒmatches)
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒvideo_link = τmp1
									λgy.Yield(λ.Calm(ϒself, "url_result", ϒvideo_link, λ.Calm(OnetIE, "ie_key")))
								}
								return λ.None
							})
						})))
					ϒchannel_title = λ.Cal(ϒstrip_or_none, λ.Cal(ϒget_element_by_class, λ.StrLiteral("o_channelName"), ϒwebpage))
					ϒchannel_description = λ.Cal(ϒstrip_or_none, λ.Cal(ϒget_element_by_class, λ.StrLiteral("o_channelDesc"), ϒwebpage))
					return λ.Calm(ϒself, "playlist_result", ϒentries, ϒchannel_id, ϒchannel_title, ϒchannel_description)
				})
			return λ.DictLiteral(map[string]λ.Object{
				"IE_NAME":       OnetChannelIE_IE_NAME,
				"_VALID_URL":    OnetChannelIE__VALID_URL,
				"_real_extract": OnetChannelIE__real_extract,
			})
		}())
		OnetPlIE = λ.Cal(λ.TypeType, λ.StrLiteral("OnetPlIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				OnetPlIE__VALID_URL λ.Object
			)
			OnetPlIE__VALID_URL = λ.StrLiteral("https?://(?:[^/]+\\.)?(?:onet|businessinsider\\.com|plejada)\\.pl/(?:[^/]+/)+(?P<id>[0-9a-z]+)")
			return λ.DictLiteral(map[string]λ.Object{
				"_VALID_URL": OnetPlIE__VALID_URL,
			})
		}())
	})
}

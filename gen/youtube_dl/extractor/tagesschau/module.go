// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * tagesschau/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/tagesschau.py
 */

package tagesschau

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor      λ.Object
	TagesschauIE       λ.Object
	TagesschauPlayerIE λ.Object
	ϒdetermine_ext     λ.Object
	ϒjs_to_json        λ.Object
	ϒparse_filesize    λ.Object
	ϒparse_iso8601     λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ϒjs_to_json = Ωutils.ϒjs_to_json
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		ϒparse_filesize = Ωutils.ϒparse_filesize
		TagesschauPlayerIE = λ.Cal(λ.TypeType, λ.StrLiteral("TagesschauPlayerIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				TagesschauPlayerIE__VALID_URL λ.Object
			)
			TagesschauPlayerIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?tagesschau\\.de/multimedia/(?P<kind>audio|video)/(?P=kind)-(?P<id>\\d+)~player(?:_[^/?#&]+)?\\.html")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": TagesschauPlayerIE__VALID_URL,
			})
		}())
		TagesschauIE = λ.Cal(λ.TypeType, λ.StrLiteral("TagesschauIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				TagesschauIE__VALID_URL       λ.Object
				TagesschauIE__extract_formats λ.Object
				TagesschauIE__real_extract    λ.Object
				TagesschauIE_suitable         λ.Object
			)
			TagesschauIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?tagesschau\\.de/(?P<path>[^/]+/(?:[^/]+/)*?(?P<id>[^/#?]+?(?:-?[0-9]+)?))(?:~_?[^/#?]+?)?\\.html")
			TagesschauIE_suitable = λ.NewFunction("suitable",
				[]λ.Param{
					{Name: "cls"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls = λargs[0]
						ϒurl = λargs[1]
					)
					return func() λ.Object {
						if λ.IsTrue(λ.Calm(TagesschauPlayerIE, "suitable", ϒurl)) {
							return λ.False
						} else {
							return λ.Calm(λ.Cal(λ.SuperType, TagesschauIE, ϒcls), "suitable", ϒurl)
						}
					}()
				})
			TagesschauIE_suitable = λ.Cal(λ.ClassMethodType, TagesschauIE_suitable)
			TagesschauIE__extract_formats = λ.NewFunction("_extract_formats",
				[]λ.Param{
					{Name: "self"},
					{Name: "download_text"},
					{Name: "media_kind"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdownload_text = λargs[1]
						ϒformat        λ.Object
						ϒformat_id     λ.Object
						ϒformats       λ.Object
						ϒl             λ.Object
						ϒlink_url      λ.Object
						ϒlinks         λ.Object
						ϒm             λ.Object
						ϒmedia_kind    = λargs[2]
						ϒself          = λargs[0]
						ϒtitle         λ.Object
						τmp0           λ.Object
						τmp1           λ.Object
					)
					ϒlinks = λ.Cal(Ωre.ϒfinditer, λ.StrLiteral("<div class=\"button\" title=\"(?P<title>[^\"]*)\"><a href=\"(?P<url>[^\"]+)\">(?P<name>.+?)</a></div>"), ϒdownload_text)
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, ϒlinks)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒl = τmp1
						ϒlink_url = λ.Calm(ϒl, "group", λ.StrLiteral("url"))
						if !λ.IsTrue(ϒlink_url) {
							continue
						}
						ϒformat_id = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.StrLiteral(".*/[^/.]+\\.([^/]+)\\.[^/.]+$"),
							ϒlink_url,
							λ.StrLiteral("format ID"),
						), λ.KWArgs{
							{Name: "default", Value: λ.Cal(ϒdetermine_ext, ϒlink_url)},
						})
						ϒformat = λ.DictLiteral(map[string]λ.Object{
							"format_id":   ϒformat_id,
							"url":         λ.Calm(ϒl, "group", λ.StrLiteral("url")),
							"format_name": λ.Calm(ϒl, "group", λ.StrLiteral("name")),
						})
						ϒtitle = λ.Calm(ϒl, "group", λ.StrLiteral("title"))
						if λ.IsTrue(ϒtitle) {
							if λ.IsTrue(λ.Eq(λ.Calm(ϒmedia_kind, "lower"), λ.StrLiteral("video"))) {
								ϒm = λ.Cal(Ωre.ϒmatch, λ.StrLiteral("(?x)\n                            Video:\\s*(?P<vcodec>[a-zA-Z0-9/._-]+)\\s*&\\#10;\n                            (?P<width>[0-9]+)x(?P<height>[0-9]+)px&\\#10;\n                            (?P<vbr>[0-9]+)kbps&\\#10;\n                            Audio:\\s*(?P<abr>[0-9]+)kbps,\\s*(?P<audio_desc>[A-Za-z\\.0-9]+)&\\#10;\n                            Gr&ouml;&szlig;e:\\s*(?P<filesize_approx>[0-9.,]+\\s+[a-zA-Z]*B)"), ϒtitle)
								if λ.IsTrue(ϒm) {
									λ.Calm(ϒformat, "update", λ.DictLiteral(map[string]λ.Object{
										"format_note":     λ.Calm(ϒm, "group", λ.StrLiteral("audio_desc")),
										"vcodec":          λ.Calm(ϒm, "group", λ.StrLiteral("vcodec")),
										"width":           λ.Cal(λ.IntType, λ.Calm(ϒm, "group", λ.StrLiteral("width"))),
										"height":          λ.Cal(λ.IntType, λ.Calm(ϒm, "group", λ.StrLiteral("height"))),
										"abr":             λ.Cal(λ.IntType, λ.Calm(ϒm, "group", λ.StrLiteral("abr"))),
										"vbr":             λ.Cal(λ.IntType, λ.Calm(ϒm, "group", λ.StrLiteral("vbr"))),
										"filesize_approx": λ.Cal(ϒparse_filesize, λ.Calm(ϒm, "group", λ.StrLiteral("filesize_approx"))),
									}))
								}
							} else {
								ϒm = λ.Cal(Ωre.ϒmatch, λ.StrLiteral("(?P<format>.+?)-Format\\s*:\\s*(?P<abr>\\d+)kbps\\s*,\\s*(?P<note>.+)"), ϒtitle)
								if λ.IsTrue(ϒm) {
									λ.Calm(ϒformat, "update", λ.DictLiteral(map[string]λ.Object{
										"format_note": λ.Mod(λ.StrLiteral("%s, %s"), λ.NewTuple(
											λ.Calm(ϒm, "group", λ.StrLiteral("format")),
											λ.Calm(ϒm, "group", λ.StrLiteral("note")),
										)),
										"vcodec": λ.StrLiteral("none"),
										"abr":    λ.Cal(λ.IntType, λ.Calm(ϒm, "group", λ.StrLiteral("abr"))),
									}))
								}
							}
						}
						λ.Calm(ϒformats, "append", ϒformat)
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					return ϒformats
				})
			TagesschauIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						DOWNLOAD_REGEX λ.Object
						ϒdescription   λ.Object
						ϒdisplay_id    λ.Object
						ϒdownload_text λ.Object
						ϒentries       λ.Object
						ϒentry_title   λ.Object
						ϒformats       λ.Object
						ϒmedia_kind    λ.Object
						ϒmobj          λ.Object
						ϒnum           λ.Object
						ϒself          = λargs[0]
						ϒthumbnail     λ.Object
						ϒtitle         λ.Object
						ϒurl           = λargs[1]
						ϒvideo_id      λ.Object
						ϒwebpage       λ.Object
						ϒwebpage_type  λ.Object
						τmp0           λ.Object
						τmp1           λ.Object
						τmp2           λ.Object
						τmp3           λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒvideo_id = func() λ.Object {
						if λv := λ.Calm(ϒmobj, "group", λ.StrLiteral("id")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒmobj, "group", λ.StrLiteral("path"))
						}
					}()
					ϒdisplay_id = λ.Calm(ϒvideo_id, "lstrip", λ.StrLiteral("-"))
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒdisplay_id)
					ϒtitle = func() λ.Object {
						if λv := λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
							λ.StrLiteral("<span[^>]*class=\"headline\"[^>]*>(.+?)</span>"),
							ϒwebpage,
							λ.StrLiteral("title"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒself, "_og_search_title", ϒwebpage)
						}
					}()
					DOWNLOAD_REGEX = λ.StrLiteral("(?s)<p>Wir bieten dieses (?P<kind>Video|Audio) in folgenden Formaten zum Download an:</p>\\s*<div class=\"controls\">(?P<links>.*?)</div>\\s*<p>")
					ϒwebpage_type = λ.Call(λ.GetAttr(ϒself, "_og_search_property", nil), λ.NewArgs(
						λ.StrLiteral("type"),
						ϒwebpage,
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(λ.Eq(ϒwebpage_type, λ.StrLiteral("website"))) {
						ϒentries = λ.NewList()
						τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.EnumerateIteratorType, λ.Cal(Ωre.ϒfindall, λ.Mod(λ.StrLiteral("(?s)<p[^>]+class=\"infotext\"[^>]*>\\s*(?:<a[^>]+>)?\\s*<strong>(.+?)</strong>.*?</p>.*?%s"), DOWNLOAD_REGEX), ϒwebpage), λ.IntLiteral(1)))
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							τmp2 = τmp1
							ϒnum = λ.GetItem(τmp2, λ.IntLiteral(0))
							τmp3 = λ.GetItem(τmp2, λ.IntLiteral(1))
							ϒentry_title = λ.GetItem(τmp3, λ.IntLiteral(0))
							ϒmedia_kind = λ.GetItem(τmp3, λ.IntLiteral(1))
							ϒdownload_text = λ.GetItem(τmp3, λ.IntLiteral(2))
							λ.Calm(ϒentries, "append", λ.DictLiteral(map[string]λ.Object{
								"id": λ.Mod(λ.StrLiteral("%s-%d"), λ.NewTuple(
									ϒdisplay_id,
									ϒnum,
								)),
								"title":   λ.Mod(λ.StrLiteral("%s"), ϒentry_title),
								"formats": λ.Calm(ϒself, "_extract_formats", ϒdownload_text, ϒmedia_kind),
							}))
						}
						if λ.IsTrue(λ.Gt(λ.Cal(λ.BuiltinLen, ϒentries), λ.IntLiteral(1))) {
							return λ.Calm(ϒself, "playlist_result", ϒentries, ϒdisplay_id, ϒtitle)
						}
						ϒformats = λ.GetItem(λ.GetItem(ϒentries, λ.IntLiteral(0)), λ.StrLiteral("formats"))
					} else {
						ϒdownload_text = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							DOWNLOAD_REGEX,
							ϒwebpage,
							λ.StrLiteral("download links"),
						), λ.KWArgs{
							{Name: "group", Value: λ.StrLiteral("links")},
						})
						ϒmedia_kind = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							DOWNLOAD_REGEX,
							ϒwebpage,
							λ.StrLiteral("media kind"),
						), λ.KWArgs{
							{Name: "default", Value: λ.StrLiteral("Video")},
							{Name: "group", Value: λ.StrLiteral("kind")},
						})
						ϒformats = λ.Calm(ϒself, "_extract_formats", ϒdownload_text, ϒmedia_kind)
					}
					ϒthumbnail = λ.Calm(ϒself, "_og_search_thumbnail", ϒwebpage)
					ϒdescription = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("(?s)<p class=\"teasertext\">(.*?)</p>"),
						ϒwebpage,
						λ.StrLiteral("description"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒdisplay_id,
						"title":       ϒtitle,
						"thumbnail":   ϒthumbnail,
						"formats":     ϒformats,
						"description": ϒdescription,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":       TagesschauIE__VALID_URL,
				"_extract_formats": TagesschauIE__extract_formats,
				"_real_extract":    TagesschauIE__real_extract,
				"suitable":         TagesschauIE_suitable,
			})
		}())
	})
}

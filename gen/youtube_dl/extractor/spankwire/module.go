// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * spankwire/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/spankwire.py
 */

package spankwire

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor  λ.Object
	SpankwireIE    λ.Object
	ϒfloat_or_none λ.Object
	ϒint_or_none   λ.Object
	ϒmerge_dicts   λ.Object
	ϒstr_or_none   λ.Object
	ϒstr_to_int    λ.Object
	ϒurl_or_none   λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒmerge_dicts = Ωutils.ϒmerge_dicts
		ϒstr_or_none = Ωutils.ϒstr_or_none
		ϒstr_to_int = Ωutils.ϒstr_to_int
		ϒurl_or_none = Ωutils.ϒurl_or_none
		SpankwireIE = λ.Cal(λ.TypeType, λ.StrLiteral("SpankwireIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				SpankwireIE__VALID_URL    λ.Object
				SpankwireIE__real_extract λ.Object
			)
			SpankwireIE__VALID_URL = λ.StrLiteral("(?x)\n                    https?://\n                        (?:www\\.)?spankwire\\.com/\n                        (?:\n                            [^/]+/video|\n                            EmbedPlayer\\.aspx/?\\?.*?\\bArticleId=\n                        )\n                        (?P<id>\\d+)\n                    ")
			SpankwireIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcategories    λ.Object
						ϒextract_names λ.Object
						ϒformat_id     λ.Object
						ϒformat_url    λ.Object
						ϒformats       λ.Object
						ϒheight        λ.Object
						ϒinfo          λ.Object
						ϒm             λ.Object
						ϒm3u8_url      λ.Object
						ϒpreference    λ.Object
						ϒself          = λargs[0]
						ϒt             λ.Object
						ϒtags          λ.Object
						ϒtbr           λ.Object
						ϒthumbnail_url λ.Object
						ϒthumbnails    λ.Object
						ϒtitle         λ.Object
						ϒuploader      λ.Object
						ϒurl           = λargs[1]
						ϒvideo         λ.Object
						ϒvideo_id      λ.Object
						ϒvideo_url     λ.Object
						ϒvideos        λ.Object
						ϒview_count    λ.Object
						ϒwebpage       λ.Object
						τmp0           λ.Object
						τmp1           λ.Object
						τmp2           λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒvideo = λ.Calm(ϒself, "_download_json", λ.Mod(λ.StrLiteral("https://www.spankwire.com/api/video/%s.json"), ϒvideo_id), ϒvideo_id)
					ϒtitle = λ.GetItem(ϒvideo, λ.StrLiteral("title"))
					ϒformats = λ.NewList()
					ϒvideos = λ.Calm(ϒvideo, "get", λ.StrLiteral("videos"))
					if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒvideos, λ.DictType)) {
						τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒvideos, "items"))
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							τmp2 = τmp1
							ϒformat_id = λ.GetItem(τmp2, λ.IntLiteral(0))
							ϒformat_url = λ.GetItem(τmp2, λ.IntLiteral(1))
							ϒvideo_url = λ.Cal(ϒurl_or_none, ϒformat_url)
							if !λ.IsTrue(ϒformat_url) {
								continue
							}
							ϒheight = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
								λ.StrLiteral("(\\d+)[pP]"),
								ϒformat_id,
								λ.StrLiteral("height"),
							), λ.KWArgs{
								{Name: "default", Value: λ.None},
							}))
							ϒm = λ.Cal(Ωre.ϒsearch, λ.StrLiteral("/(?P<height>\\d+)[pP]_(?P<tbr>\\d+)[kK]"), ϒvideo_url)
							if λ.IsTrue(ϒm) {
								ϒtbr = λ.Cal(λ.IntType, λ.Calm(ϒm, "group", λ.StrLiteral("tbr")))
								ϒheight = func() λ.Object {
									if λv := ϒheight; λ.IsTrue(λv) {
										return λv
									} else {
										return λ.Cal(λ.IntType, λ.Calm(ϒm, "group", λ.StrLiteral("height")))
									}
								}()
							} else {
								ϒtbr = λ.None
							}
							λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
								"url": ϒvideo_url,
								"format_id": func() λ.Object {
									if λ.IsTrue(ϒheight) {
										return λ.Mod(λ.StrLiteral("%dp"), ϒheight)
									} else {
										return ϒformat_id
									}
								}(),
								"height": ϒheight,
								"tbr":    ϒtbr,
							}))
						}
					}
					ϒm3u8_url = λ.Cal(ϒurl_or_none, λ.Calm(ϒvideo, "get", λ.StrLiteral("HLS")))
					if λ.IsTrue(ϒm3u8_url) {
						λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
							ϒm3u8_url,
							ϒvideo_id,
							λ.StrLiteral("mp4"),
						), λ.KWArgs{
							{Name: "entry_protocol", Value: λ.StrLiteral("m3u8_native")},
							{Name: "m3u8_id", Value: λ.StrLiteral("hls")},
							{Name: "fatal", Value: λ.False},
						}))
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats, λ.NewTuple(
						λ.StrLiteral("height"),
						λ.StrLiteral("tbr"),
						λ.StrLiteral("width"),
						λ.StrLiteral("format_id"),
					))
					ϒview_count = λ.Cal(ϒstr_to_int, λ.Calm(ϒvideo, "get", λ.StrLiteral("viewed")))
					ϒthumbnails = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Call(λ.EnumerateIteratorType, λ.NewArgs(λ.NewTuple(
						λ.StrLiteral(""),
						λ.StrLiteral("2x"),
					)), λ.KWArgs{
						{Name: "start", Value: λ.IntLiteral(0)},
					}))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒpreference = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒt = λ.GetItem(τmp2, λ.IntLiteral(1))
						ϒthumbnail_url = λ.Cal(ϒurl_or_none, λ.Calm(ϒvideo, "get", λ.Mod(λ.StrLiteral("poster%s"), ϒt)))
						if !λ.IsTrue(ϒthumbnail_url) {
							continue
						}
						λ.Calm(ϒthumbnails, "append", λ.DictLiteral(map[string]λ.Object{
							"url":        ϒthumbnail_url,
							"preference": ϒpreference,
						}))
					}
					ϒextract_names = λ.NewFunction("extract_names",
						[]λ.Param{
							{Name: "key"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒentries      λ.Object
								ϒentries_list λ.Object
								ϒentry        λ.Object
								ϒkey          = λargs[0]
								ϒname         λ.Object
								τmp0          λ.Object
								τmp1          λ.Object
							)
							ϒentries_list = λ.Calm(ϒvideo, "get", ϒkey)
							if !λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒentries_list, λ.ListType)) {
								return λ.None
							}
							ϒentries = λ.NewList()
							τmp0 = λ.Cal(λ.BuiltinIter, ϒentries_list)
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒentry = τmp1
								ϒname = λ.Cal(ϒstr_or_none, λ.Calm(ϒentry, "get", λ.StrLiteral("name")))
								if λ.IsTrue(ϒname) {
									λ.Calm(ϒentries, "append", ϒname)
								}
							}
							return ϒentries
						})
					ϒcategories = λ.Cal(ϒextract_names, λ.StrLiteral("categories"))
					ϒtags = λ.Cal(ϒextract_names, λ.StrLiteral("tags"))
					ϒuploader = λ.None
					ϒinfo = λ.DictLiteral(map[λ.Object]λ.Object{})
					ϒwebpage = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
						λ.Mod(λ.StrLiteral("https://www.spankwire.com/_/video%s/"), ϒvideo_id),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					if λ.IsTrue(ϒwebpage) {
						ϒinfo = λ.Call(λ.GetAttr(ϒself, "_search_json_ld", nil), λ.NewArgs(
							ϒwebpage,
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "default", Value: λ.DictLiteral(map[λ.Object]λ.Object{})},
						})
						ϒthumbnail_url = λ.None
						if λ.Contains(ϒinfo, λ.StrLiteral("thumbnail")) {
							ϒthumbnail_url = λ.Cal(ϒurl_or_none, λ.GetItem(ϒinfo, λ.StrLiteral("thumbnail")))
							λ.DelItem(ϒinfo, λ.StrLiteral("thumbnail"))
						}
						if !λ.IsTrue(ϒthumbnail_url) {
							ϒthumbnail_url = λ.Calm(ϒself, "_og_search_thumbnail", ϒwebpage)
						}
						if λ.IsTrue(ϒthumbnail_url) {
							λ.Calm(ϒthumbnails, "append", λ.DictLiteral(map[string]λ.Object{
								"url":        ϒthumbnail_url,
								"preference": λ.IntLiteral(10),
							}))
						}
						ϒuploader = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
							λ.StrLiteral("(?s)by\\s*<a[^>]+\\bclass=[\"\\']uploaded__by[^>]*>(.+?)</a>"),
							ϒwebpage,
							λ.StrLiteral("uploader"),
						), λ.KWArgs{
							{Name: "fatal", Value: λ.False},
						})
						if !λ.IsTrue(ϒview_count) {
							ϒview_count = λ.Cal(ϒstr_to_int, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
								λ.StrLiteral("data-views=[\"\\']([\\d,.]+)"),
								ϒwebpage,
								λ.StrLiteral("view count"),
							), λ.KWArgs{
								{Name: "fatal", Value: λ.False},
							}))
						}
					}
					return λ.Cal(ϒmerge_dicts, λ.DictLiteral(map[string]λ.Object{
						"id":             ϒvideo_id,
						"title":          ϒtitle,
						"description":    λ.Calm(ϒvideo, "get", λ.StrLiteral("description")),
						"duration":       λ.Cal(ϒint_or_none, λ.Calm(ϒvideo, "get", λ.StrLiteral("duration"))),
						"thumbnails":     ϒthumbnails,
						"uploader":       ϒuploader,
						"uploader_id":    λ.Cal(ϒstr_or_none, λ.Calm(ϒvideo, "get", λ.StrLiteral("userId"))),
						"timestamp":      λ.Cal(ϒint_or_none, λ.Calm(ϒvideo, "get", λ.StrLiteral("time_approved_on"))),
						"average_rating": λ.Cal(ϒfloat_or_none, λ.Calm(ϒvideo, "get", λ.StrLiteral("rating"))),
						"view_count":     ϒview_count,
						"comment_count":  λ.Cal(ϒint_or_none, λ.Calm(ϒvideo, "get", λ.StrLiteral("comments"))),
						"age_limit":      λ.IntLiteral(18),
						"categories":     ϒcategories,
						"tags":           ϒtags,
						"formats":        ϒformats,
					}), ϒinfo)
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    SpankwireIE__VALID_URL,
				"_real_extract": SpankwireIE__real_extract,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * dumpert/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/dumpert.py
 */

package dumpert

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	DumpertIE     λ.Object
	InfoExtractor λ.Object
	ϒint_or_none  λ.Object
	ϒqualities    λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒqualities = Ωutils.ϒqualities
		DumpertIE = λ.Cal(λ.TypeType, λ.NewStr("DumpertIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				DumpertIE__VALID_URL    λ.Object
				DumpertIE__real_extract λ.Object
			)
			DumpertIE__VALID_URL = λ.NewStr("(?P<protocol>https?)://(?:(?:www|legacy)\\.)?dumpert\\.nl/(?:mediabase|embed|item)/(?P<id>[0-9]+[/_][0-9a-zA-Z]+)")
			DumpertIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒformats    λ.Object
						ϒitem       λ.Object
						ϒmedia      λ.Object
						ϒquality    λ.Object
						ϒs          λ.Object
						ϒself       = λargs[0]
						ϒstats      λ.Object
						ϒstill_id   λ.Object
						ϒstill_url  λ.Object
						ϒstills     λ.Object
						ϒt          λ.Object
						ϒthumbnails λ.Object
						ϒtitle      λ.Object
						ϒuri        λ.Object
						ϒurl        = λargs[1]
						ϒvariant    λ.Object
						ϒversion    λ.Object
						ϒvideo_id   λ.Object
						τmp0        λ.Object
						τmp1        λ.Object
						τmp2        λ.Object
						τmp3        λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl), "replace", nil), λ.NewStr("_"), λ.NewStr("/"))
					ϒitem = λ.GetItem(λ.GetItem(λ.Cal(λ.GetAttr(ϒself, "_download_json", nil), λ.Add(λ.NewStr("http://api-live.dumpert.nl/mobile_api/json/info/"), λ.Cal(λ.GetAttr(ϒvideo_id, "replace", nil), λ.NewStr("/"), λ.NewStr("_"))), ϒvideo_id), λ.NewStr("items")), λ.NewInt(0))
					ϒtitle = λ.GetItem(ϒitem, λ.NewStr("title"))
					ϒmedia = λ.Cal(λ.BuiltinNext, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒm   λ.Object
									τmp0 λ.Object
									τmp1 λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.GetItem(ϒitem, λ.NewStr("media")))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒm = τmp1
									if λ.IsTrue(λ.Eq(λ.Cal(λ.GetAttr(ϒm, "get", nil), λ.NewStr("mediatype")), λ.NewStr("VIDEO"))) {
										λgy.Yield(ϒm)
									}
								}
								return λ.None
							})
						})))
					ϒquality = λ.Cal(ϒqualities, λ.NewList(
						λ.NewStr("flv"),
						λ.NewStr("mobile"),
						λ.NewStr("tablet"),
						λ.NewStr("720p"),
					))
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒmedia, "get", nil), λ.NewStr("variants"), λ.NewList()))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒvariant = τmp1
						ϒuri = λ.Cal(λ.GetAttr(ϒvariant, "get", nil), λ.NewStr("uri"))
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒuri))) {
							continue
						}
						ϒversion = λ.Cal(λ.GetAttr(ϒvariant, "get", nil), λ.NewStr("version"))
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"):       ϒuri,
							λ.NewStr("format_id"): ϒversion,
							λ.NewStr("quality"):   λ.Cal(ϒquality, ϒversion),
						}))
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒthumbnails = λ.NewList()
					ϒstills = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("stills")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewDictWithTable(map[λ.Object]λ.Object{})
						}
					}()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
						λ.NewStr("thumb"),
						λ.NewStr("still"),
					))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒt = τmp1
						τmp2 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
							λ.NewStr(""),
							λ.NewStr("-medium"),
							λ.NewStr("-large"),
						))
						for {
							if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
								break
							}
							ϒs = τmp3
							ϒstill_id = λ.Add(ϒt, ϒs)
							ϒstill_url = λ.Cal(λ.GetAttr(ϒstills, "get", nil), ϒstill_id)
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒstill_url))) {
								continue
							}
							λ.Cal(λ.GetAttr(ϒthumbnails, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("id"):  ϒstill_id,
								λ.NewStr("url"): ϒstill_url,
							}))
						}
					}
					ϒstats = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("stats")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewDictWithTable(map[λ.Object]λ.Object{})
						}
					}()
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("title"):       ϒtitle,
						λ.NewStr("description"): λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("description")),
						λ.NewStr("thumbnails"):  ϒthumbnails,
						λ.NewStr("formats"):     ϒformats,
						λ.NewStr("duration"):    λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒmedia, "get", nil), λ.NewStr("duration"))),
						λ.NewStr("like_count"):  λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒstats, "get", nil), λ.NewStr("kudos_total"))),
						λ.NewStr("view_count"):  λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒstats, "get", nil), λ.NewStr("views_total"))),
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"):    DumpertIE__VALID_URL,
				λ.NewStr("_real_extract"): DumpertIE__real_extract,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * srgssr/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/srgssr.py
 */

package srgssr

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError                λ.Object
	InfoExtractor                 λ.Object
	SRGSSRIE                      λ.Object
	SRGSSRPlayIE                  λ.Object
	ϒcompat_urllib_parse_urlparse λ.Object
	ϒparse_iso8601                λ.Object
	ϒqualities                    λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_urllib_parse_urlparse = Ωcompat.ϒcompat_urllib_parse_urlparse
		ExtractorError = Ωutils.ExtractorError
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		ϒqualities = Ωutils.ϒqualities
		SRGSSRIE = λ.Cal(λ.TypeType, λ.NewStr("SRGSSRIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				SRGSSRIE__GEO_BYPASS        λ.Object
				SRGSSRIE__GEO_COUNTRIES     λ.Object
				SRGSSRIE__VALID_URL         λ.Object
				SRGSSRIE__get_tokenized_src λ.Object
				SRGSSRIE__real_extract      λ.Object
				SRGSSRIE_get_media_data     λ.Object
			)
			SRGSSRIE__VALID_URL = λ.NewStr("(?:https?://tp\\.srgssr\\.ch/p(?:/[^/]+)+\\?urn=urn|srgssr):(?P<bu>srf|rts|rsi|rtr|swi):(?:[^:]+:)?(?P<type>video|audio):(?P<id>[0-9a-f\\-]{36}|\\d+)")
			SRGSSRIE__GEO_BYPASS = λ.False
			SRGSSRIE__GEO_COUNTRIES = λ.NewList(λ.NewStr("CH"))
			SRGSSRIE__get_tokenized_src = λ.NewFunction("_get_tokenized_src",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
					{Name: "video_id"},
					{Name: "format_id"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒauth_params λ.Object
						ϒformat_id   = λargs[3]
						ϒself        = λargs[0]
						ϒsp          λ.Object
						ϒtoken       λ.Object
						ϒurl         = λargs[1]
						ϒvideo_id    = λargs[2]
						τmp0         λ.Object
					)
					ϒsp = λ.Cal(λ.GetAttr(λ.GetAttr(λ.Cal(ϒcompat_urllib_parse_urlparse, ϒurl), "path", nil), "split", nil), λ.NewStr("/"))
					ϒtoken = func() λ.Object {
						if λv := λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
							λ.Mod(λ.NewStr("http://tp.srgssr.ch/akahd/token?acl=/%s/%s/*"), λ.NewTuple(
								λ.GetItem(ϒsp, λ.NewInt(1)),
								λ.GetItem(ϒsp, λ.NewInt(2)),
							)),
							ϒvideo_id,
							λ.Mod(λ.NewStr("Downloading %s token"), ϒformat_id),
						), λ.KWArgs{
							{Name: "fatal", Value: λ.False},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewDictWithTable(map[λ.Object]λ.Object{})
						}
					}()
					ϒauth_params = λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒtoken, "get", nil), λ.NewStr("token"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("authparams"))
					if λ.IsTrue(ϒauth_params) {
						τmp0 = λ.IAdd(ϒurl, λ.Add(λ.NewStr("?"), ϒauth_params))
						ϒurl = τmp0
					}
					return ϒurl
				})
			SRGSSRIE_get_media_data = λ.NewFunction("get_media_data",
				[]λ.Param{
					{Name: "self"},
					{Name: "bu"},
					{Name: "media_type"},
					{Name: "media_id"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒbu         = λargs[1]
						ϒmedia_data λ.Object
						ϒmedia_id   = λargs[3]
						ϒmedia_type = λargs[2]
						ϒmessage    λ.Object
						ϒself       = λargs[0]
					)
					ϒmedia_data = λ.GetItem(λ.Cal(λ.GetAttr(ϒself, "_download_json", nil), λ.Mod(λ.NewStr("http://il.srgssr.ch/integrationlayer/1.0/ue/%s/%s/play/%s.json"), λ.NewTuple(
						ϒbu,
						ϒmedia_type,
						ϒmedia_id,
					)), ϒmedia_id), λ.Cal(λ.GetAttr(ϒmedia_type, "capitalize", nil)))
					if λ.IsTrue(func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒmedia_data, "get", nil), λ.NewStr("block")); !λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewBool(λ.Contains(λ.GetAttr(ϒself, "_ERRORS", nil), λ.GetItem(ϒmedia_data, λ.NewStr("block"))))
						}
					}()) {
						ϒmessage = λ.GetItem(λ.GetAttr(ϒself, "_ERRORS", nil), λ.GetItem(ϒmedia_data, λ.NewStr("block")))
						if λ.IsTrue(λ.Eq(λ.GetItem(ϒmedia_data, λ.NewStr("block")), λ.NewStr("GEOBLOCK"))) {
							λ.Call(λ.GetAttr(ϒself, "raise_geo_restricted", nil), nil, λ.KWArgs{
								{Name: "msg", Value: ϒmessage},
								{Name: "countries", Value: λ.GetAttr(ϒself, "_GEO_COUNTRIES", nil)},
							})
						}
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.NewStr("%s said: %s"), λ.NewTuple(
							λ.GetAttr(ϒself, "IE_NAME", nil),
							ϒmessage,
						))), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					return ϒmedia_data
				})
			SRGSSRIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒasset        λ.Object
						ϒasset_url    λ.Object
						ϒbu           λ.Object
						ϒcreated_date λ.Object
						ϒdescription  λ.Object
						ϒformat_id    λ.Object
						ϒformats      λ.Object
						ϒmedia_data   λ.Object
						ϒmedia_id     λ.Object
						ϒmedia_type   λ.Object
						ϒmetadata     λ.Object
						ϒpreference   λ.Object
						ϒprotocol     λ.Object
						ϒquality      λ.Object
						ϒself         = λargs[0]
						ϒsource       λ.Object
						ϒthumbnails   λ.Object
						ϒtimestamp    λ.Object
						ϒtitle        λ.Object
						ϒurl          = λargs[1]
						τmp0          λ.Object
						τmp1          λ.Object
						τmp2          λ.Object
						τmp3          λ.Object
					)
					τmp0 = λ.Cal(λ.GetAttr(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups", nil))
					ϒbu = λ.GetItem(τmp0, λ.NewInt(0))
					ϒmedia_type = λ.GetItem(τmp0, λ.NewInt(1))
					ϒmedia_id = λ.GetItem(τmp0, λ.NewInt(2))
					ϒmedia_data = λ.Cal(λ.GetAttr(ϒself, "get_media_data", nil), ϒbu, ϒmedia_type, ϒmedia_id)
					ϒmetadata = λ.GetItem(λ.GetItem(λ.GetItem(ϒmedia_data, λ.NewStr("AssetMetadatas")), λ.NewStr("AssetMetadata")), λ.NewInt(0))
					ϒtitle = λ.GetItem(ϒmetadata, λ.NewStr("title"))
					ϒdescription = λ.Cal(λ.GetAttr(ϒmetadata, "get", nil), λ.NewStr("description"))
					ϒcreated_date = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒmedia_data, "get", nil), λ.NewStr("createdDate")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒmetadata, "get", nil), λ.NewStr("createdDate"))
						}
					}()
					ϒtimestamp = λ.Cal(ϒparse_iso8601, ϒcreated_date)
					ϒthumbnails = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒimage λ.Object
									τmp0   λ.Object
									τmp1   λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒmedia_data, "get", nil), λ.NewStr("Image"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("ImageRepresentations"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("ImageRepresentation"), λ.NewList()))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒimage = τmp1
									λgy.Yield(λ.NewDictWithTable(map[λ.Object]λ.Object{
										λ.NewStr("id"):  λ.Cal(λ.GetAttr(ϒimage, "get", nil), λ.NewStr("id")),
										λ.NewStr("url"): λ.GetItem(ϒimage, λ.NewStr("url")),
									}))
								}
								return λ.None
							})
						})))
					ϒpreference = λ.Cal(ϒqualities, λ.NewList(
						λ.NewStr("LQ"),
						λ.NewStr("MQ"),
						λ.NewStr("SD"),
						λ.NewStr("HQ"),
						λ.NewStr("HD"),
					))
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Add(λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒmedia_data, "get", nil), λ.NewStr("Playlists"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("Playlist"), λ.NewList()), λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒmedia_data, "get", nil), λ.NewStr("Downloads"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("Download"), λ.NewList())))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒsource = τmp1
						ϒprotocol = λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("@protocol"))
						τmp2 = λ.Cal(λ.BuiltinIter, λ.GetItem(ϒsource, λ.NewStr("url")))
						for {
							if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
								break
							}
							ϒasset = τmp3
							ϒasset_url = λ.GetItem(ϒasset, λ.NewStr("text"))
							ϒquality = λ.GetItem(ϒasset, λ.NewStr("@quality"))
							ϒformat_id = λ.Mod(λ.NewStr("%s-%s"), λ.NewTuple(
								ϒprotocol,
								ϒquality,
							))
							if λ.IsTrue(func() λ.Object {
								if λv := λ.Cal(λ.GetAttr(ϒprotocol, "startswith", nil), λ.NewStr("HTTP-HDS")); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Cal(λ.GetAttr(ϒprotocol, "startswith", nil), λ.NewStr("HTTP-HLS"))
								}
							}()) {
								ϒasset_url = λ.Cal(λ.GetAttr(ϒself, "_get_tokenized_src", nil), ϒasset_url, ϒmedia_id, ϒformat_id)
								if λ.IsTrue(λ.Cal(λ.GetAttr(ϒprotocol, "startswith", nil), λ.NewStr("HTTP-HDS"))) {
									λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_f4m_formats", nil), λ.NewArgs(
										λ.Add(λ.Add(ϒasset_url, func() λ.Object {
											if λ.IsTrue(λ.NewBool(!λ.Contains(ϒasset_url, λ.NewStr("?")))) {
												return λ.NewStr("?")
											} else {
												return λ.NewStr("&")
											}
										}()), λ.NewStr("hdcore=3.4.0")),
										ϒmedia_id,
									), λ.KWArgs{
										{Name: "f4m_id", Value: ϒformat_id},
										{Name: "fatal", Value: λ.False},
									}))
								} else {
									if λ.IsTrue(λ.Cal(λ.GetAttr(ϒprotocol, "startswith", nil), λ.NewStr("HTTP-HLS"))) {
										λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
											ϒasset_url,
											ϒmedia_id,
											λ.NewStr("mp4"),
											λ.NewStr("m3u8_native"),
										), λ.KWArgs{
											{Name: "m3u8_id", Value: ϒformat_id},
											{Name: "fatal", Value: λ.False},
										}))
									}
								}
							} else {
								λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("format_id"):  ϒformat_id,
									λ.NewStr("url"):        ϒasset_url,
									λ.NewStr("preference"): λ.Cal(ϒpreference, ϒquality),
									λ.NewStr("ext"): func() λ.Object {
										if λ.IsTrue(λ.Eq(ϒprotocol, λ.NewStr("RTMP"))) {
											return λ.NewStr("flv")
										} else {
											return λ.None
										}
									}(),
								}))
							}
						}
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒmedia_id,
						λ.NewStr("title"):       ϒtitle,
						λ.NewStr("description"): ϒdescription,
						λ.NewStr("timestamp"):   ϒtimestamp,
						λ.NewStr("thumbnails"):  ϒthumbnails,
						λ.NewStr("formats"):     ϒformats,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_GEO_BYPASS"):        SRGSSRIE__GEO_BYPASS,
				λ.NewStr("_GEO_COUNTRIES"):     SRGSSRIE__GEO_COUNTRIES,
				λ.NewStr("_VALID_URL"):         SRGSSRIE__VALID_URL,
				λ.NewStr("_get_tokenized_src"): SRGSSRIE__get_tokenized_src,
				λ.NewStr("_real_extract"):      SRGSSRIE__real_extract,
				λ.NewStr("get_media_data"):     SRGSSRIE_get_media_data,
			})
		}())
		SRGSSRPlayIE = λ.Cal(λ.TypeType, λ.NewStr("SRGSSRPlayIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				SRGSSRPlayIE__VALID_URL    λ.Object
				SRGSSRPlayIE__real_extract λ.Object
			)
			SRGSSRPlayIE__VALID_URL = λ.NewStr("(?x)\n                    https?://\n                        (?:(?:www|play)\\.)?\n                        (?P<bu>srf|rts|rsi|rtr|swissinfo)\\.ch/play/(?:tv|radio)/\n                        (?:\n                            [^/]+/(?P<type>video|audio)/[^?]+|\n                            popup(?P<type_2>video|audio)player\n                        )\n                        \\?id=(?P<id>[0-9a-f\\-]{36}|\\d+)\n                    ")
			SRGSSRPlayIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒbu         λ.Object
						ϒmedia_id   λ.Object
						ϒmedia_type λ.Object
						ϒmobj       λ.Object
						ϒself       = λargs[0]
						ϒurl        = λargs[1]
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒbu = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("bu"))
					ϒmedia_type = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("type")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("type_2"))
						}
					}()
					ϒmedia_id = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("id"))
					return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), λ.Mod(λ.NewStr("srgssr:%s:%s:%s"), λ.NewTuple(
						λ.GetItem(ϒbu, λ.NewSlice(λ.None, λ.NewInt(3), λ.None)),
						ϒmedia_type,
						ϒmedia_id,
					)), λ.NewStr("SRGSSR"))
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"):    SRGSSRPlayIE__VALID_URL,
				λ.NewStr("_real_extract"): SRGSSRPlayIE__real_extract,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * srgssr/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/srgssr.py
 */

package srgssr

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError                λ.Object
	InfoExtractor                 λ.Object
	SRGSSRIE                      λ.Object
	SRGSSRPlayIE                  λ.Object
	ϒcompat_urllib_parse_urlparse λ.Object
	ϒparse_iso8601                λ.Object
	ϒqualities                    λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_urllib_parse_urlparse = Ωcompat.ϒcompat_urllib_parse_urlparse
		ExtractorError = Ωutils.ExtractorError
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		ϒqualities = Ωutils.ϒqualities
		SRGSSRIE = λ.Cal(λ.TypeType, λ.NewStr("SRGSSRIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				SRGSSRIE__GEO_BYPASS        λ.Object
				SRGSSRIE__GEO_COUNTRIES     λ.Object
				SRGSSRIE__VALID_URL         λ.Object
				SRGSSRIE__get_tokenized_src λ.Object
				SRGSSRIE_get_media_data     λ.Object
			)
			SRGSSRIE__VALID_URL = λ.NewStr("(?:https?://tp\\.srgssr\\.ch/p(?:/[^/]+)+\\?urn=urn|srgssr):(?P<bu>srf|rts|rsi|rtr|swi):(?:[^:]+:)?(?P<type>video|audio):(?P<id>[0-9a-f\\-]{36}|\\d+)")
			SRGSSRIE__GEO_BYPASS = λ.False
			SRGSSRIE__GEO_COUNTRIES = λ.NewList(λ.NewStr("CH"))
			SRGSSRIE__get_tokenized_src = λ.NewFunction("_get_tokenized_src",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
					{Name: "video_id"},
					{Name: "format_id"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒauth_params λ.Object
						ϒformat_id   = λargs[3]
						ϒself        = λargs[0]
						ϒsp          λ.Object
						ϒtoken       λ.Object
						ϒurl         = λargs[1]
						ϒvideo_id    = λargs[2]
						τmp0         λ.Object
					)
					ϒsp = λ.Cal(λ.GetAttr(λ.GetAttr(λ.Cal(ϒcompat_urllib_parse_urlparse, ϒurl), "path", nil), "split", nil), λ.NewStr("/"))
					ϒtoken = func() λ.Object {
						if λv := λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
							λ.Mod(λ.NewStr("http://tp.srgssr.ch/akahd/token?acl=/%s/%s/*"), λ.NewTuple(
								λ.GetItem(ϒsp, λ.NewInt(1)),
								λ.GetItem(ϒsp, λ.NewInt(2)),
							)),
							ϒvideo_id,
							λ.Mod(λ.NewStr("Downloading %s token"), ϒformat_id),
						), λ.KWArgs{
							{Name: "fatal", Value: λ.False},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewDictWithTable(map[λ.Object]λ.Object{})
						}
					}()
					ϒauth_params = λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒtoken, "get", nil), λ.NewStr("token"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("authparams"))
					if λ.IsTrue(ϒauth_params) {
						τmp0 = λ.IAdd(ϒurl, λ.Add(λ.NewStr("?"), ϒauth_params))
						ϒurl = τmp0
					}
					return ϒurl
				})
			SRGSSRIE_get_media_data = λ.NewFunction("get_media_data",
				[]λ.Param{
					{Name: "self"},
					{Name: "bu"},
					{Name: "media_type"},
					{Name: "media_id"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒbu         = λargs[1]
						ϒmedia_data λ.Object
						ϒmedia_id   = λargs[3]
						ϒmedia_type = λargs[2]
						ϒmessage    λ.Object
						ϒself       = λargs[0]
					)
					ϒmedia_data = λ.GetItem(λ.Cal(λ.GetAttr(ϒself, "_download_json", nil), λ.Mod(λ.NewStr("http://il.srgssr.ch/integrationlayer/1.0/ue/%s/%s/play/%s.json"), λ.NewTuple(
						ϒbu,
						ϒmedia_type,
						ϒmedia_id,
					)), ϒmedia_id), λ.Cal(λ.GetAttr(ϒmedia_type, "capitalize", nil)))
					if λ.IsTrue(func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒmedia_data, "get", nil), λ.NewStr("block")); !λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewBool(λ.Contains(λ.GetAttr(ϒself, "_ERRORS", nil), λ.GetItem(ϒmedia_data, λ.NewStr("block"))))
						}
					}()) {
						ϒmessage = λ.GetItem(λ.GetAttr(ϒself, "_ERRORS", nil), λ.GetItem(ϒmedia_data, λ.NewStr("block")))
						if λ.IsTrue(λ.Eq(λ.GetItem(ϒmedia_data, λ.NewStr("block")), λ.NewStr("GEOBLOCK"))) {
							λ.Call(λ.GetAttr(ϒself, "raise_geo_restricted", nil), nil, λ.KWArgs{
								{Name: "msg", Value: ϒmessage},
								{Name: "countries", Value: λ.GetAttr(ϒself, "_GEO_COUNTRIES", nil)},
							})
						}
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.NewStr("%s said: %s"), λ.NewTuple(
							λ.GetAttr(ϒself, "IE_NAME", nil),
							ϒmessage,
						))), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					return ϒmedia_data
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_GEO_BYPASS"):        SRGSSRIE__GEO_BYPASS,
				λ.NewStr("_GEO_COUNTRIES"):     SRGSSRIE__GEO_COUNTRIES,
				λ.NewStr("_VALID_URL"):         SRGSSRIE__VALID_URL,
				λ.NewStr("_get_tokenized_src"): SRGSSRIE__get_tokenized_src,
				λ.NewStr("get_media_data"):     SRGSSRIE_get_media_data,
			})
		}())
		SRGSSRPlayIE = λ.Cal(λ.TypeType, λ.NewStr("SRGSSRPlayIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				SRGSSRPlayIE__VALID_URL λ.Object
			)
			SRGSSRPlayIE__VALID_URL = λ.NewStr("https?://(?:(?:www|play)\\.)?(?P<bu>srf|rts|rsi|rtr|swissinfo)\\.ch/play/(?:tv|radio)/[^/]+/(?P<type>video|audio)/[^?]+\\?id=(?P<id>[0-9a-f\\-]{36}|\\d+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): SRGSSRPlayIE__VALID_URL,
			})
		}())
	})
}

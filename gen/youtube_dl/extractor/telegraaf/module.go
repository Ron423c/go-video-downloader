// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * telegraaf/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/telegraaf.py
 */

package telegraaf

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor  λ.Object
	TelegraafIE    λ.Object
	ϒdetermine_ext λ.Object
	ϒint_or_none   λ.Object
	ϒparse_iso8601 λ.Object
	ϒtry_get       λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		ϒtry_get = Ωutils.ϒtry_get
		TelegraafIE = λ.Cal(λ.TypeType, λ.NewStr("TelegraafIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				TelegraafIE__TEST         λ.Object
				TelegraafIE__VALID_URL    λ.Object
				TelegraafIE__real_extract λ.Object
			)
			TelegraafIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?telegraaf\\.nl/video/(?P<id>\\d+)")
			TelegraafIE__TEST = λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("url"): λ.NewStr("https://www.telegraaf.nl/video/734366489/historisch-scheepswrak-slaat-na-100-jaar-los"),
				λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("id"):          λ.NewStr("gaMItuoSeUg2"),
					λ.NewStr("ext"):         λ.NewStr("mp4"),
					λ.NewStr("title"):       λ.NewStr("Historisch scheepswrak slaat na 100 jaar los"),
					λ.NewStr("description"): λ.NewStr("md5:6f53b7c4f55596722ac24d6c0ec00cfb"),
					λ.NewStr("thumbnail"):   λ.NewStr("re:^https?://.*\\.jpg"),
					λ.NewStr("duration"):    λ.NewInt(55),
					λ.NewStr("timestamp"):   λ.NewInt(1572805527),
					λ.NewStr("upload_date"): λ.NewStr("20191103"),
				}),
				λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("skip_download"): λ.True,
				}),
			})
			TelegraafIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒarticle_id   λ.Object
						ϒext          λ.Object
						ϒformats      λ.Object
						ϒitem         λ.Object
						ϒlabel        λ.Object
						ϒlocation     λ.Object
						ϒlocations    λ.Object
						ϒmanifest_url λ.Object
						ϒself         = λargs[0]
						ϒsrc          λ.Object
						ϒtitle        λ.Object
						ϒurl          = λargs[1]
						ϒvideo_id     λ.Object
						τmp0          λ.Object
						τmp1          λ.Object
					)
					ϒarticle_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒvideo_id = λ.GetItem(λ.GetItem(λ.GetItem(λ.GetItem(λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.NewStr("https://www.telegraaf.nl/graphql"),
						ϒarticle_id,
					), λ.KWArgs{
						{Name: "query", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("query"): λ.Mod(λ.NewStr("{\n  article(uid: %s) {\n    videos {\n      videoId\n    }\n  }\n}"), ϒarticle_id),
						})},
					}), λ.NewStr("data")), λ.NewStr("article")), λ.NewStr("videos")), λ.NewInt(0)), λ.NewStr("videoId"))
					ϒitem = λ.GetItem(λ.GetItem(λ.Cal(λ.GetAttr(ϒself, "_download_json", nil), λ.Mod(λ.NewStr("https://content.tmgvideo.nl/playlist/item=%s/playlist.json"), ϒvideo_id), ϒvideo_id), λ.NewStr("items")), λ.NewInt(0))
					ϒtitle = λ.GetItem(ϒitem, λ.NewStr("title"))
					ϒformats = λ.NewList()
					ϒlocations = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("locations")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewDictWithTable(map[λ.Object]λ.Object{})
						}
					}()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒlocations, "get", nil), λ.NewStr("adaptive"), λ.NewList()))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒlocation = τmp1
						ϒmanifest_url = λ.Cal(λ.GetAttr(ϒlocation, "get", nil), λ.NewStr("src"))
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒmanifest_url))) {
							continue
						}
						ϒext = λ.Cal(ϒdetermine_ext, ϒmanifest_url)
						if λ.IsTrue(λ.Eq(ϒext, λ.NewStr("m3u8"))) {
							λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
								ϒmanifest_url,
								ϒvideo_id,
							), λ.KWArgs{
								{Name: "ext", Value: λ.NewStr("mp4")},
								{Name: "m3u8_id", Value: λ.NewStr("hls")},
								{Name: "fatal", Value: λ.False},
							}))
						} else {
							if λ.IsTrue(λ.Eq(ϒext, λ.NewStr("mpd"))) {
								λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_mpd_formats", nil), λ.NewArgs(
									ϒmanifest_url,
									ϒvideo_id,
								), λ.KWArgs{
									{Name: "mpd_id", Value: λ.NewStr("dash")},
									{Name: "fatal", Value: λ.False},
								}))
							} else {
								λ.Cal(λ.GetAttr(ϒself, "report_warning", nil), λ.Mod(λ.NewStr("Unknown adaptive format %s"), ϒext))
							}
						}
					}
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒlocations, "get", nil), λ.NewStr("progressive"), λ.NewList()))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒlocation = τmp1
						ϒsrc = λ.Cal(ϒtry_get, ϒlocation, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(λ.GetItem(ϒx, λ.NewStr("sources")), λ.NewInt(0)), λ.NewStr("src"))
							}))
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒsrc))) {
							continue
						}
						ϒlabel = λ.Cal(λ.GetAttr(ϒlocation, "get", nil), λ.NewStr("label"))
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"):    ϒsrc,
							λ.NewStr("width"):  λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒlocation, "get", nil), λ.NewStr("width"))),
							λ.NewStr("height"): λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒlocation, "get", nil), λ.NewStr("height"))),
							λ.NewStr("format_id"): λ.Add(λ.NewStr("http"), func() λ.Object {
								if λ.IsTrue(ϒlabel) {
									return λ.Mod(λ.NewStr("-%s"), ϒlabel)
								} else {
									return λ.NewStr("")
								}
							}()),
						}))
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("title"):       ϒtitle,
						λ.NewStr("description"): λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("description")),
						λ.NewStr("formats"):     ϒformats,
						λ.NewStr("duration"):    λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("duration"))),
						λ.NewStr("thumbnail"):   λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("poster")),
						λ.NewStr("timestamp"):   λ.Cal(ϒparse_iso8601, λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("datecreated")), λ.NewStr(" ")),
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TEST"):         TelegraafIE__TEST,
				λ.NewStr("_VALID_URL"):    TelegraafIE__VALID_URL,
				λ.NewStr("_real_extract"): TelegraafIE__real_extract,
			})
		}())
	})
}

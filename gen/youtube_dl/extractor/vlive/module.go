// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * vlive/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/vlive.py
 */

package vlive

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωnaver "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/naver"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError      λ.Object
	InfoExtractor       λ.Object
	NaverBaseIE         λ.Object
	VLiveChannelIE      λ.Object
	VLiveIE             λ.Object
	VLivePlaylistIE     λ.Object
	ϒcompat_str         λ.Object
	ϒmerge_dicts        λ.Object
	ϒremove_start       λ.Object
	ϒtry_get            λ.Object
	ϒurlencode_postdata λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		NaverBaseIE = Ωnaver.NaverBaseIE
		ϒcompat_str = Ωcompat.ϒcompat_str
		ExtractorError = Ωutils.ExtractorError
		ϒmerge_dicts = Ωutils.ϒmerge_dicts
		ϒremove_start = Ωutils.ϒremove_start
		ϒtry_get = Ωutils.ϒtry_get
		ϒurlencode_postdata = Ωutils.ϒurlencode_postdata
		VLiveIE = λ.Cal(λ.TypeType, λ.NewStr("VLiveIE"), λ.NewTuple(NaverBaseIE), func() λ.Dict {
			var (
				VLiveIE_IE_NAME            λ.Object
				VLiveIE__NETRC_MACHINE     λ.Object
				VLiveIE__VALID_URL         λ.Object
				VLiveIE__get_common_fields λ.Object
				VLiveIE__login             λ.Object
				VLiveIE__real_extract      λ.Object
				VLiveIE__real_initialize   λ.Object
				VLiveIE__replay            λ.Object
				VLiveIE_suitable           λ.Object
			)
			VLiveIE_IE_NAME = λ.NewStr("vlive")
			VLiveIE__VALID_URL = λ.NewStr("https?://(?:(?:www|m)\\.)?vlive\\.tv/video/(?P<id>[0-9]+)")
			VLiveIE__NETRC_MACHINE = λ.NewStr("vlive")
			VLiveIE_suitable = λ.NewFunction("suitable",
				[]λ.Param{
					{Name: "cls"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls = λargs[0]
						ϒurl = λargs[1]
					)
					return func() λ.Object {
						if λ.IsTrue(λ.Cal(λ.GetAttr(VLivePlaylistIE, "suitable", nil), ϒurl)) {
							return λ.False
						} else {
							return λ.Cal(λ.GetAttr(λ.Cal(λ.SuperType, VLiveIE, ϒcls), "suitable", nil), ϒurl)
						}
					}()
				})
			VLiveIE_suitable = λ.Cal(λ.ClassMethodType, VLiveIE_suitable)
			VLiveIE__real_initialize = λ.NewFunction("_real_initialize",
				[]λ.Param{
					{Name: "self"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒself = λargs[0]
					)
					λ.Cal(λ.GetAttr(ϒself, "_login", nil))
					return λ.None
				})
			VLiveIE__login = λ.NewFunction("_login",
				[]λ.Param{
					{Name: "self"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						LOGIN_URL     λ.Object
						ϒemail        λ.Object
						ϒis_logged_in λ.Object
						ϒpassword     λ.Object
						ϒself         = λargs[0]
						τmp0          λ.Object
					)
					τmp0 = λ.Cal(λ.GetAttr(ϒself, "_get_login_info", nil))
					ϒemail = λ.GetItem(τmp0, λ.NewInt(0))
					ϒpassword = λ.GetItem(τmp0, λ.NewInt(1))
					if λ.IsTrue(λ.NewBool(λ.Contains(λ.NewTuple(
						ϒemail,
						ϒpassword,
					), λ.None))) {
						return λ.None
					}
					ϒis_logged_in = λ.NewFunction("is_logged_in",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒlogin_info λ.Object
							)
							ϒlogin_info = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
								λ.NewStr("https://www.vlive.tv/auth/loginInfo"),
								λ.None,
							), λ.KWArgs{
								{Name: "note", Value: λ.NewStr("Downloading login info")},
								{Name: "headers", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("Referer"): λ.NewStr("https://www.vlive.tv/home"),
								})},
							})
							return func() λ.Object {
								if λv := λ.Cal(ϒtry_get, ϒlogin_info, λ.NewFunction("<lambda>",
									[]λ.Param{
										{Name: "x"},
									},
									0, false, false,
									func(λargs []λ.Object) λ.Object {
										var (
											ϒx = λargs[0]
										)
										return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("message")), λ.NewStr("login"))
									}), λ.BoolType); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.False
								}
							}()
						})
					LOGIN_URL = λ.NewStr("https://www.vlive.tv/auth/email/login")
					λ.Call(λ.GetAttr(ϒself, "_request_webpage", nil), λ.NewArgs(
						LOGIN_URL,
						λ.None,
					), λ.KWArgs{
						{Name: "note", Value: λ.NewStr("Downloading login cookies")},
					})
					λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
						LOGIN_URL,
						λ.None,
					), λ.KWArgs{
						{Name: "note", Value: λ.NewStr("Logging in")},
						{Name: "data", Value: λ.Cal(ϒurlencode_postdata, λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("email"): ϒemail,
							λ.NewStr("pwd"):   ϒpassword,
						}))},
						{Name: "headers", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("Referer"):      LOGIN_URL,
							λ.NewStr("Content-Type"): λ.NewStr("application/x-www-form-urlencoded"),
						})},
					})
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.Cal(ϒis_logged_in)))) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.NewStr("Unable to log in")), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					return λ.None
				})
			VLiveIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						VIDEO_PARAMS_FIELD λ.Object
						VIDEO_PARAMS_RE    λ.Object
						ϒkey               λ.Object
						ϒlong_video_id     λ.Object
						ϒparams            λ.Object
						ϒself              = λargs[0]
						ϒstatus            λ.Object
						ϒurl               = λargs[1]
						ϒvideo_id          λ.Object
						ϒwebpage           λ.Object
						τmp0               λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), λ.Mod(λ.NewStr("https://www.vlive.tv/video/%s"), ϒvideo_id), ϒvideo_id)
					VIDEO_PARAMS_RE = λ.NewStr("\\bvlive\\.video\\.init\\(([^)]+)")
					VIDEO_PARAMS_FIELD = λ.NewStr("video params")
					ϒparams = λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
						λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							VIDEO_PARAMS_RE,
							ϒwebpage,
							VIDEO_PARAMS_FIELD,
						), λ.KWArgs{
							{Name: "default", Value: λ.NewStr("")},
						}),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "transform_source", Value: λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "s"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒs = λargs[0]
								)
								return λ.Add(λ.Add(λ.NewStr("["), ϒs), λ.NewStr("]"))
							})},
						{Name: "fatal", Value: λ.False},
					})
					if λ.IsTrue(func() λ.Object {
						if λv := λ.NewBool(!λ.IsTrue(ϒparams)); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Lt(λ.Cal(λ.BuiltinLen, ϒparams), λ.NewInt(7))
						}
					}()) {
						ϒparams = λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), VIDEO_PARAMS_RE, ϒwebpage, VIDEO_PARAMS_FIELD)
						ϒparams = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
							nil,
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
									var (
										ϒp   λ.Object
										τmp0 λ.Object
										τmp1 λ.Object
									)
									τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.None, λ.NewStr("\\s*,\\s*"), ϒparams))
									for {
										if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
											break
										}
										ϒp = τmp1
										λgy.Yield(λ.Cal(λ.GetAttr(ϒp, "strip", nil), λ.NewStr("\"")))
									}
									return λ.None
								})
							})))
					}
					τmp0 = λ.NewTuple(
						λ.GetItem(ϒparams, λ.NewInt(2)),
						λ.GetItem(ϒparams, λ.NewInt(5)),
						λ.GetItem(ϒparams, λ.NewInt(6)),
					)
					ϒstatus = λ.GetItem(τmp0, λ.NewInt(0))
					ϒlong_video_id = λ.GetItem(τmp0, λ.NewInt(1))
					ϒkey = λ.GetItem(τmp0, λ.NewInt(2))
					ϒstatus = λ.Cal(ϒremove_start, ϒstatus, λ.NewStr("PRODUCT_"))
					if λ.IsTrue(λ.NewBool(λ.Contains(λ.NewTuple(
						λ.NewStr("LIVE_ON_AIR"),
						λ.NewStr("BIG_EVENT_ON_AIR"),
					), ϒstatus))) {
						return λ.Cal(λ.GetAttr(ϒself, "_live", nil), ϒvideo_id, ϒwebpage)
					} else {
						if λ.IsTrue(λ.NewBool(λ.Contains(λ.NewTuple(
							λ.NewStr("VOD_ON_AIR"),
							λ.NewStr("BIG_EVENT_INTRO"),
						), ϒstatus))) {
							return λ.Cal(λ.GetAttr(ϒself, "_replay", nil), ϒvideo_id, ϒwebpage, ϒlong_video_id, ϒkey)
						}
					}
					if λ.IsTrue(λ.Eq(ϒstatus, λ.NewStr("LIVE_END"))) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.NewStr("Uploading for replay. Please wait...")), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					} else {
						if λ.IsTrue(λ.Eq(ϒstatus, λ.NewStr("COMING_SOON"))) {
							panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.NewStr("Coming soon!")), λ.KWArgs{
								{Name: "expected", Value: λ.True},
							})))
						} else {
							if λ.IsTrue(λ.Eq(ϒstatus, λ.NewStr("CANCELED"))) {
								panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.NewStr("We are sorry, but the live broadcast has been canceled.")), λ.KWArgs{
									{Name: "expected", Value: λ.True},
								})))
							} else {
								if λ.IsTrue(λ.Eq(ϒstatus, λ.NewStr("ONLY_APP"))) {
									panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.NewStr("Unsupported video type")), λ.KWArgs{
										{Name: "expected", Value: λ.True},
									})))
								} else {
									panic(λ.Raise(λ.Cal(ExtractorError, λ.Mod(λ.NewStr("Unknown status %s"), ϒstatus))))
								}
							}
						}
					}
					return λ.None
				})
			VLiveIE__get_common_fields = λ.NewFunction("_get_common_fields",
				[]λ.Param{
					{Name: "self"},
					{Name: "webpage"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcreator   λ.Object
						ϒself      = λargs[0]
						ϒthumbnail λ.Object
						ϒtitle     λ.Object
						ϒwebpage   = λargs[1]
					)
					ϒtitle = λ.Cal(λ.GetAttr(ϒself, "_og_search_title", nil), ϒwebpage)
					ϒcreator = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
						λ.NewStr("<div[^>]+class=\"info_area\"[^>]*>\\s*(?:<em[^>]*>.*?</em\\s*>\\s*)?<a\\s+[^>]*>([^<]+)"),
						ϒwebpage,
						λ.NewStr("creator"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					ϒthumbnail = λ.Cal(λ.GetAttr(ϒself, "_og_search_thumbnail", nil), ϒwebpage)
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("title"):     ϒtitle,
						λ.NewStr("creator"):   ϒcreator,
						λ.NewStr("thumbnail"): ϒthumbnail,
					})
				})
			VLiveIE__replay = λ.NewFunction("_replay",
				[]λ.Param{
					{Name: "self"},
					{Name: "video_id"},
					{Name: "webpage"},
					{Name: "long_video_id"},
					{Name: "key"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒinit_page     λ.Object
						ϒkey           = λargs[4]
						ϒlong_video_id = λargs[3]
						ϒself          = λargs[0]
						ϒvideo_id      = λargs[1]
						ϒvideo_info    λ.Object
						ϒwebpage       = λargs[2]
						τmp0           λ.Object
					)
					if λ.IsTrue(λ.NewBool(λ.Contains(λ.NewTuple(
						ϒlong_video_id,
						ϒkey,
					), λ.NewStr("")))) {
						ϒinit_page = λ.Cal(λ.GetAttr(ϒself, "_download_init_page", nil), ϒvideo_id)
						ϒvideo_info = λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewTuple(
							λ.NewStr("(?s)oVideoStatus\\s*=\\s*({.+?})\\s*</script"),
							λ.NewStr("(?s)oVideoStatus\\s*=\\s*({.+})"),
						), ϒinit_page, λ.NewStr("video info")), ϒvideo_id)
						if λ.IsTrue(λ.Eq(λ.Cal(λ.GetAttr(ϒvideo_info, "get", nil), λ.NewStr("status")), λ.NewStr("NEED_CHANNEL_PLUS"))) {
							λ.Cal(λ.GetAttr(ϒself, "raise_login_required", nil), λ.NewStr("This video is only available for CH+ subscribers"))
						}
						τmp0 = λ.NewTuple(
							λ.GetItem(ϒvideo_info, λ.NewStr("vid")),
							λ.GetItem(ϒvideo_info, λ.NewStr("inkey")),
						)
						ϒlong_video_id = λ.GetItem(τmp0, λ.NewInt(0))
						ϒkey = λ.GetItem(τmp0, λ.NewInt(1))
					}
					return λ.Cal(ϒmerge_dicts, λ.Cal(λ.GetAttr(ϒself, "_get_common_fields", nil), ϒwebpage), λ.Cal(λ.GetAttr(ϒself, "_extract_video_info", nil), ϒvideo_id, ϒlong_video_id, ϒkey))
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):            VLiveIE_IE_NAME,
				λ.NewStr("_NETRC_MACHINE"):     VLiveIE__NETRC_MACHINE,
				λ.NewStr("_VALID_URL"):         VLiveIE__VALID_URL,
				λ.NewStr("_get_common_fields"): VLiveIE__get_common_fields,
				λ.NewStr("_login"):             VLiveIE__login,
				λ.NewStr("_real_extract"):      VLiveIE__real_extract,
				λ.NewStr("_real_initialize"):   VLiveIE__real_initialize,
				λ.NewStr("_replay"):            VLiveIE__replay,
				λ.NewStr("suitable"):           VLiveIE_suitable,
			})
		}())
		VLiveChannelIE = λ.Cal(λ.TypeType, λ.NewStr("VLiveChannelIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				VLiveChannelIE__VALID_URL λ.Object
			)
			VLiveChannelIE__VALID_URL = λ.NewStr("https?://channels\\.vlive\\.tv/(?P<id>[0-9A-Z]+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): VLiveChannelIE__VALID_URL,
			})
		}())
		VLivePlaylistIE = λ.Cal(λ.TypeType, λ.NewStr("VLivePlaylistIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				VLivePlaylistIE_IE_NAME             λ.Object
				VLivePlaylistIE__VALID_URL          λ.Object
				VLivePlaylistIE__VIDEO_URL_TEMPLATE λ.Object
				VLivePlaylistIE__build_video_result λ.Object
				VLivePlaylistIE__real_extract       λ.Object
			)
			VLivePlaylistIE_IE_NAME = λ.NewStr("vlive:playlist")
			VLivePlaylistIE__VALID_URL = λ.NewStr("https?://(?:(?:www|m)\\.)?vlive\\.tv/video/(?P<video_id>[0-9]+)/playlist/(?P<id>[0-9]+)")
			VLivePlaylistIE__VIDEO_URL_TEMPLATE = λ.NewStr("http://www.vlive.tv/video/%s")
			VLivePlaylistIE__build_video_result = λ.NewFunction("_build_video_result",
				[]λ.Param{
					{Name: "self"},
					{Name: "video_id"},
					{Name: "message"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒmessage  = λargs[2]
						ϒself     = λargs[0]
						ϒvideo_id = λargs[1]
					)
					λ.Cal(λ.GetAttr(ϒself, "to_screen", nil), ϒmessage)
					return λ.Call(λ.GetAttr(ϒself, "url_result", nil), λ.NewArgs(λ.Mod(λ.GetAttr(ϒself, "_VIDEO_URL_TEMPLATE", nil), ϒvideo_id)), λ.KWArgs{
						{Name: "ie", Value: λ.Cal(λ.GetAttr(VLiveIE, "ie_key", nil))},
						{Name: "video_id", Value: ϒvideo_id},
					})
				})
			VLivePlaylistIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒentries       λ.Object
						ϒitem_ids      λ.Object
						ϒmobj          λ.Object
						ϒplaylist_id   λ.Object
						ϒplaylist_name λ.Object
						ϒraw_item_ids  λ.Object
						ϒself          = λargs[0]
						ϒurl           = λargs[1]
						ϒvideo_id      λ.Object
						ϒwebpage       λ.Object
						τmp0           λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					τmp0 = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("video_id"), λ.NewStr("id"))
					ϒvideo_id = λ.GetItem(τmp0, λ.NewInt(0))
					ϒplaylist_id = λ.GetItem(τmp0, λ.NewInt(1))
					if λ.IsTrue(λ.Cal(λ.GetAttr(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "params", nil), "get", nil), λ.NewStr("noplaylist"))) {
						return λ.Cal(λ.GetAttr(ϒself, "_build_video_result", nil), ϒvideo_id, λ.Mod(λ.NewStr("Downloading just video %s because of --no-playlist"), ϒvideo_id))
					}
					λ.Cal(λ.GetAttr(ϒself, "to_screen", nil), λ.Mod(λ.NewStr("Downloading playlist %s - add --no-playlist to just download video"), ϒplaylist_id))
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), λ.Mod(λ.NewStr("http://www.vlive.tv/video/%s/playlist/%s"), λ.NewTuple(
						ϒvideo_id,
						ϒplaylist_id,
					)), ϒplaylist_id)
					ϒraw_item_ids = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("playlistVideoSeqs\\s*=\\s*(\\[[^]]+\\])"),
						ϒwebpage,
						λ.NewStr("playlist video seqs"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
						{Name: "fatal", Value: λ.False},
					})
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒraw_item_ids))) {
						return λ.Cal(λ.GetAttr(ϒself, "_build_video_result", nil), ϒvideo_id, λ.Mod(λ.NewStr("Downloading just video %s because no playlist was found"), ϒvideo_id))
					}
					ϒitem_ids = λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), ϒraw_item_ids, ϒplaylist_id)
					ϒentries = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒitem_id λ.Object
									τmp0     λ.Object
									τmp1     λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, ϒitem_ids)
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒitem_id = τmp1
									λgy.Yield(λ.Call(λ.GetAttr(ϒself, "url_result", nil), λ.NewArgs(λ.Mod(λ.GetAttr(ϒself, "_VIDEO_URL_TEMPLATE", nil), ϒitem_id)), λ.KWArgs{
										{Name: "ie", Value: λ.Cal(λ.GetAttr(VLiveIE, "ie_key", nil))},
										{Name: "video_id", Value: λ.Cal(ϒcompat_str, ϒitem_id)},
									}))
								}
								return λ.None
							})
						})))
					ϒplaylist_name = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
						λ.NewStr("<div[^>]+class=\"[^\"]*multicam_playlist[^>]*>\\s*<h3[^>]+>([^<]+)"),
						ϒwebpage,
						λ.NewStr("playlist title"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					return λ.Cal(λ.GetAttr(ϒself, "playlist_result", nil), ϒentries, ϒplaylist_id, ϒplaylist_name)
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):             VLivePlaylistIE_IE_NAME,
				λ.NewStr("_VALID_URL"):          VLivePlaylistIE__VALID_URL,
				λ.NewStr("_VIDEO_URL_TEMPLATE"): VLivePlaylistIE__VIDEO_URL_TEMPLATE,
				λ.NewStr("_build_video_result"): VLivePlaylistIE__build_video_result,
				λ.NewStr("_real_extract"):       VLivePlaylistIE__real_extract,
			})
		}())
	})
}

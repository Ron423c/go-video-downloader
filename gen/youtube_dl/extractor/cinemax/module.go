// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * cinemax/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/cinemax.py
 */

package cinemax

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωhbo "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/hbo"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	CinemaxIE λ.Object
	HBOBaseIE λ.Object
)

func init() {
	λ.InitModule(func() {
		HBOBaseIE = Ωhbo.HBOBaseIE
		CinemaxIE = λ.Cal(λ.TypeType, λ.NewStr("CinemaxIE"), λ.NewTuple(HBOBaseIE), func() λ.Dict {
			var (
				CinemaxIE__TESTS        λ.Object
				CinemaxIE__VALID_URL    λ.Object
				CinemaxIE__real_extract λ.Object
			)
			CinemaxIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?cinemax\\.com/(?P<path>[^/]+/video/[0-9a-z-]+-(?P<id>\\d+))")
			CinemaxIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.cinemax.com/warrior/video/s1-ep-1-recap-20126903"),
					λ.NewStr("md5"): λ.NewStr("82e0734bba8aa7ef526c9dd00cf35a05"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):    λ.NewStr("20126903"),
						λ.NewStr("ext"):   λ.NewStr("mp4"),
						λ.NewStr("title"): λ.NewStr("S1 Ep 1: Recap"),
					}),
					λ.NewStr("expected_warnings"): λ.NewList(λ.NewStr("Unknown MIME type application/mp4 in DASH manifest")),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://www.cinemax.com/warrior/video/s1-ep-1-recap-20126903.embed"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			CinemaxIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒinfo     λ.Object
						ϒpath     λ.Object
						ϒself     = λargs[0]
						ϒurl      = λargs[1]
						ϒvideo_id λ.Object
						τmp0      λ.Object
					)
					τmp0 = λ.Cal(λ.GetAttr(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups", nil))
					ϒpath = λ.GetItem(τmp0, λ.NewInt(0))
					ϒvideo_id = λ.GetItem(τmp0, λ.NewInt(1))
					ϒinfo = λ.Cal(λ.GetAttr(ϒself, "_extract_info", nil), λ.Mod(λ.NewStr("https://www.cinemax.com/%s.xml"), ϒpath), ϒvideo_id)
					λ.SetItem(ϒinfo, λ.NewStr("id"), ϒvideo_id)
					return ϒinfo
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        CinemaxIE__TESTS,
				λ.NewStr("_VALID_URL"):    CinemaxIE__VALID_URL,
				λ.NewStr("_real_extract"): CinemaxIE__real_extract,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * tvplay/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/tvplay.py
 */

package tvplay

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωparse "github.com/tenta-browser/go-video-downloader/gen/urllib/parse"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError    λ.Object
	InfoExtractor     λ.Object
	TVPlayHomeIE      λ.Object
	TVPlayIE          λ.Object
	ViafreeIE         λ.Object
	ϒcompat_str       λ.Object
	ϒdetermine_ext    λ.Object
	ϒint_or_none      λ.Object
	ϒparse_iso8601    λ.Object
	ϒqualities        λ.Object
	ϒsmuggle_url      λ.Object
	ϒtry_get          λ.Object
	ϒunsmuggle_url    λ.Object
	ϒupdate_url_query λ.Object
	ϒurl_or_none      λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		ϒqualities = Ωutils.ϒqualities
		ϒsmuggle_url = Ωutils.ϒsmuggle_url
		ϒtry_get = Ωutils.ϒtry_get
		ϒunsmuggle_url = Ωutils.ϒunsmuggle_url
		ϒupdate_url_query = Ωutils.ϒupdate_url_query
		ϒurl_or_none = Ωutils.ϒurl_or_none
		TVPlayIE = λ.Cal(λ.TypeType, λ.NewStr("TVPlayIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				TVPlayIE_IE_NAME       λ.Object
				TVPlayIE__VALID_URL    λ.Object
				TVPlayIE__real_extract λ.Object
			)
			TVPlayIE_IE_NAME = λ.NewStr("mtg")
			TVPlayIE__VALID_URL = λ.NewStr("(?x)\n                    (?:\n                        mtg:|\n                        https?://\n                            (?:www\\.)?\n                            (?:\n                                tvplay(?:\\.skaties)?\\.lv(?:/parraides)?|\n                                (?:tv3play|play\\.tv3)\\.lt(?:/programos)?|\n                                tv3play(?:\\.tv3)?\\.ee/sisu|\n                                (?:tv(?:3|6|8|10)play|viafree)\\.se/program|\n                                (?:(?:tv3play|viasat4play|tv6play|viafree)\\.no|(?:tv3play|viafree)\\.dk)/programmer|\n                                play\\.nova(?:tv)?\\.bg/programi\n                            )\n                            /(?:[^/]+/)+\n                        )\n                        (?P<id>\\d+)\n                    ")
			TVPlayIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒepisode_number λ.Object
						ϒext            λ.Object
						ϒfmt            λ.Object
						ϒformat_id      λ.Object
						ϒformats        λ.Object
						ϒgeo_country    λ.Object
						ϒlang           λ.Object
						ϒm              λ.Object
						ϒmsg            λ.Object
						ϒquality        λ.Object
						ϒsami_path      λ.Object
						ϒseason         λ.Object
						ϒseason_number  λ.Object
						ϒself           = λargs[0]
						ϒseries         λ.Object
						ϒsmuggled_data  λ.Object
						ϒstreams        λ.Object
						ϒsubtitles      λ.Object
						ϒtitle          λ.Object
						ϒurl            = λargs[1]
						ϒvideo          λ.Object
						ϒvideo_id       λ.Object
						ϒvideo_url      λ.Object
						τmp0            λ.Object
						τmp1            λ.Object
						τmp2            λ.Object
					)
					τmp0 = λ.Cal(ϒunsmuggle_url, ϒurl, λ.NewDictWithTable(map[λ.Object]λ.Object{}))
					ϒurl = λ.GetItem(τmp0, λ.NewInt(0))
					ϒsmuggled_data = λ.GetItem(τmp0, λ.NewInt(1))
					λ.Cal(λ.GetAttr(ϒself, "_initialize_geo_bypass", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("countries"): λ.Cal(λ.GetAttr(ϒsmuggled_data, "get", nil), λ.NewStr("geo_countries")),
					}))
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒgeo_country = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("https?://[^/]+\\.([a-z]{2})"),
						ϒurl,
						λ.NewStr("geo country"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(ϒgeo_country) {
						λ.Cal(λ.GetAttr(ϒself, "_initialize_geo_bypass", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("countries"): λ.NewList(λ.Cal(λ.GetAttr(ϒgeo_country, "upper", nil))),
						}))
					}
					ϒvideo = λ.Cal(λ.GetAttr(ϒself, "_download_json", nil), λ.Mod(λ.NewStr("http://playapi.mtgx.tv/v3/videos/%s"), ϒvideo_id), ϒvideo_id, λ.NewStr("Downloading video JSON"))
					ϒtitle = λ.GetItem(ϒvideo, λ.NewStr("title"))
					τmp0, τmp1 = func() (λexit λ.Object, λret λ.Object) {
						defer λ.CatchMulti(
							nil,
							&λ.Catcher{ExtractorError, func(λex λ.BaseException) {
								ϒe := λex
								if λ.IsTrue(func() λ.Object {
									if λv := λ.Cal(λ.BuiltinIsInstance, λ.GetAttr(ϒe, "cause", nil), λ.None); !λ.IsTrue(λv) {
										return λv
									} else {
										return λ.Eq(λ.GetAttr(λ.GetAttr(ϒe, "cause", nil), "code", nil), λ.NewInt(403))
									}
								}()) {
									ϒmsg = λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(λ.GetAttr(ϒe, "cause", nil), "read", nil)), "decode", nil), λ.NewStr("utf-8")), ϒvideo_id)
									panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.GetItem(ϒmsg, λ.NewStr("msg"))), λ.KWArgs{
										{Name: "expected", Value: λ.True},
									})))
								}
								panic(λ.Raise(λex))
							}},
						)
						ϒstreams = λ.Cal(λ.GetAttr(ϒself, "_download_json", nil), λ.Mod(λ.NewStr("http://playapi.mtgx.tv/v3/videos/stream/%s"), ϒvideo_id), ϒvideo_id, λ.NewStr("Downloading streams JSON"))
						return λ.BlockExitNormally, nil
					}()
					ϒquality = λ.Cal(ϒqualities, λ.NewList(
						λ.NewStr("hls"),
						λ.NewStr("medium"),
						λ.NewStr("high"),
					))
					ϒformats = λ.NewList()
					τmp1 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒstreams, "get", nil), λ.NewStr("streams"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "items", nil)))
					for {
						if τmp0 = λ.NextDefault(τmp1, λ.AfterLast); τmp0 == λ.AfterLast {
							break
						}
						τmp2 = τmp0
						ϒformat_id = λ.GetItem(τmp2, λ.NewInt(0))
						ϒvideo_url = λ.GetItem(τmp2, λ.NewInt(1))
						ϒvideo_url = λ.Cal(ϒurl_or_none, ϒvideo_url)
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒvideo_url))) {
							continue
						}
						ϒext = λ.Cal(ϒdetermine_ext, ϒvideo_url)
						if λ.IsTrue(λ.Eq(ϒext, λ.NewStr("f4m"))) {
							λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_f4m_formats", nil), λ.NewArgs(
								λ.Cal(ϒupdate_url_query, ϒvideo_url, λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("hdcore"): λ.NewStr("3.5.0"),
									λ.NewStr("plugin"): λ.NewStr("aasp-3.5.0.151.81"),
								})),
								ϒvideo_id,
							), λ.KWArgs{
								{Name: "f4m_id", Value: λ.NewStr("hds")},
								{Name: "fatal", Value: λ.False},
							}))
						} else {
							if λ.IsTrue(λ.Eq(ϒext, λ.NewStr("m3u8"))) {
								λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
									ϒvideo_url,
									ϒvideo_id,
									λ.NewStr("mp4"),
									λ.NewStr("m3u8_native"),
								), λ.KWArgs{
									{Name: "m3u8_id", Value: λ.NewStr("hls")},
									{Name: "fatal", Value: λ.False},
								}))
							} else {
								ϒfmt = λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("format_id"): ϒformat_id,
									λ.NewStr("quality"):   λ.Cal(ϒquality, ϒformat_id),
									λ.NewStr("ext"):       ϒext,
								})
								if λ.IsTrue(λ.Cal(λ.GetAttr(ϒvideo_url, "startswith", nil), λ.NewStr("rtmp"))) {
									if λ.IsTrue(λ.Cal(λ.GetAttr(ϒsmuggled_data, "get", nil), λ.NewStr("skip_rtmp"))) {
										continue
									}
									ϒm = λ.Cal(Ωre.ϒsearch, λ.NewStr("^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$"), ϒvideo_url)
									if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒm))) {
										continue
									}
									λ.Cal(λ.GetAttr(ϒfmt, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
										λ.NewStr("ext"):        λ.NewStr("flv"),
										λ.NewStr("url"):        λ.Cal(λ.GetAttr(ϒm, "group", nil), λ.NewStr("url")),
										λ.NewStr("app"):        λ.Cal(λ.GetAttr(ϒm, "group", nil), λ.NewStr("app")),
										λ.NewStr("play_path"):  λ.Cal(λ.GetAttr(ϒm, "group", nil), λ.NewStr("playpath")),
										λ.NewStr("preference"): λ.Neg(λ.NewInt(1)),
									}))
								} else {
									λ.Cal(λ.GetAttr(ϒfmt, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
										λ.NewStr("url"): ϒvideo_url,
									}))
								}
								λ.Cal(λ.GetAttr(ϒformats, "append", nil), ϒfmt)
							}
						}
					}
					if λ.IsTrue(func() λ.Object {
						if λv := λ.NewBool(!λ.IsTrue(ϒformats)); !λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("is_geo_blocked"))
						}
					}()) {
						λ.Cal(λ.GetAttr(ϒself, "raise_geo_restricted", nil), λ.NewStr("This content might not be available in your country due to copyright reasons"))
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒsubtitles = λ.NewDictWithTable(map[λ.Object]λ.Object{})
					ϒsami_path = λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("sami_path"))
					if λ.IsTrue(ϒsami_path) {
						ϒlang = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewStr("_([a-z]{2})\\.xml"),
							ϒsami_path,
							λ.NewStr("lang"),
						), λ.KWArgs{
							{Name: "default", Value: λ.GetItem(λ.Cal(λ.GetAttr(λ.GetAttr(λ.Cal(Ωparse.ϒurlparse, ϒurl), "netloc", nil), "rsplit", nil), λ.NewStr("."), λ.NewInt(1)), λ.Neg(λ.NewInt(1)))},
						})
						λ.SetItem(ϒsubtitles, ϒlang, λ.NewList(λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"): ϒsami_path,
						})))
					}
					ϒseries = λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("format_title"))
					ϒepisode_number = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("format_position"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("episode")))
					ϒseason = λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("_embedded"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("season"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("title"))
					ϒseason_number = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("format_position"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("season")))
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):             ϒvideo_id,
						λ.NewStr("title"):          ϒtitle,
						λ.NewStr("description"):    λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("description")),
						λ.NewStr("series"):         ϒseries,
						λ.NewStr("episode_number"): ϒepisode_number,
						λ.NewStr("season"):         ϒseason,
						λ.NewStr("season_number"):  ϒseason_number,
						λ.NewStr("duration"):       λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("duration"))),
						λ.NewStr("timestamp"):      λ.Cal(ϒparse_iso8601, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("created_at"))),
						λ.NewStr("view_count"): λ.Cal(ϒtry_get, ϒvideo, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("views")), λ.NewStr("total"))
							}), λ.IntType),
						λ.NewStr("age_limit"): λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("age_limit"), λ.NewInt(0))),
						λ.NewStr("formats"):   ϒformats,
						λ.NewStr("subtitles"): ϒsubtitles,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):       TVPlayIE_IE_NAME,
				λ.NewStr("_VALID_URL"):    TVPlayIE__VALID_URL,
				λ.NewStr("_real_extract"): TVPlayIE__real_extract,
			})
		}())
		ViafreeIE = λ.Cal(λ.TypeType, λ.NewStr("ViafreeIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ViafreeIE__VALID_URL λ.Object
				ViafreeIE_suitable   λ.Object
			)
			ViafreeIE__VALID_URL = λ.NewStr("(?x)\n                    https?://\n                        (?:www\\.)?\n                        viafree\\.\n                        (?:\n                            (?:dk|no)/programmer|\n                            se/program\n                        )\n                        /(?:[^/]+/)+(?P<id>[^/?#&]+)\n                    ")
			ViafreeIE_suitable = λ.NewFunction("suitable",
				[]λ.Param{
					{Name: "cls"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls = λargs[0]
						ϒurl = λargs[1]
					)
					return func() λ.Object {
						if λ.IsTrue(λ.Cal(λ.GetAttr(TVPlayIE, "suitable", nil), ϒurl)) {
							return λ.False
						} else {
							return λ.Cal(λ.GetAttr(λ.Cal(λ.SuperType, ViafreeIE, ϒcls), "suitable", nil), ϒurl)
						}
					}()
				})
			ViafreeIE_suitable = λ.Cal(λ.ClassMethodType, ViafreeIE_suitable)
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): ViafreeIE__VALID_URL,
				λ.NewStr("suitable"):   ViafreeIE_suitable,
			})
		}())
		TVPlayHomeIE = λ.Cal(λ.TypeType, λ.NewStr("TVPlayHomeIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				TVPlayHomeIE__TESTS        λ.Object
				TVPlayHomeIE__VALID_URL    λ.Object
				TVPlayHomeIE__real_extract λ.Object
			)
			TVPlayHomeIE__VALID_URL = λ.NewStr("https?://tvplay\\.(?:tv3\\.lt|skaties\\.lv|tv3\\.ee)/[^/]+/[^/?#&]+-(?P<id>\\d+)")
			TVPlayHomeIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://tvplay.tv3.lt/aferistai-n-7/aferistai-10047125/"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):            λ.NewStr("366367"),
						λ.NewStr("ext"):           λ.NewStr("mp4"),
						λ.NewStr("title"):         λ.NewStr("Aferistai"),
						λ.NewStr("description"):   λ.NewStr("Aferistai. Kalėdinė pasaka."),
						λ.NewStr("series"):        λ.NewStr("Aferistai [N-7]"),
						λ.NewStr("season"):        λ.NewStr("1 sezonas"),
						λ.NewStr("season_number"): λ.NewInt(1),
						λ.NewStr("duration"):      λ.NewInt(464),
						λ.NewStr("timestamp"):     λ.NewInt(1394209658),
						λ.NewStr("upload_date"):   λ.NewStr("20140307"),
						λ.NewStr("age_limit"):     λ.NewInt(18),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
					λ.NewStr("add_ie"): λ.NewList(λ.Cal(λ.GetAttr(TVPlayIE, "ie_key", nil))),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://tvplay.skaties.lv/vinas-melo-labak/vinas-melo-labak-10280317/"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://tvplay.tv3.ee/cool-d-ga-mehhikosse/cool-d-ga-mehhikosse-10044354/"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			TVPlayHomeIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdescription    λ.Object
						ϒduration       λ.Object
						ϒepisode        λ.Object
						ϒepisode_number λ.Object
						ϒformats        λ.Object
						ϒm3u8_url       λ.Object
						ϒseason         λ.Object
						ϒseason_number  λ.Object
						ϒself           = λargs[0]
						ϒthumbnail      λ.Object
						ϒtitle          λ.Object
						ϒurl            = λargs[1]
						ϒvideo_id       λ.Object
						ϒwebpage        λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					ϒvideo_id = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("data-asset-id\\s*=\\s*[\"\\'](\\d{5,7})\\b"),
						ϒwebpage,
						λ.NewStr("video id"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(ϒvideo_id) {
						return λ.Call(λ.GetAttr(ϒself, "url_result", nil), λ.NewArgs(λ.Mod(λ.NewStr("mtg:%s"), ϒvideo_id)), λ.KWArgs{
							{Name: "ie", Value: λ.Cal(λ.GetAttr(TVPlayIE, "ie_key", nil))},
							{Name: "video_id", Value: ϒvideo_id},
						})
					}
					ϒm3u8_url = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("data-file\\s*=\\s*([\"\\'])(?P<url>(?:(?!\\1).)+)\\1"),
						ϒwebpage,
						λ.NewStr("m3u8 url"),
					), λ.KWArgs{
						{Name: "group", Value: λ.NewStr("url")},
					})
					ϒformats = λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
						ϒm3u8_url,
						ϒvideo_id,
						λ.NewStr("mp4"),
					), λ.KWArgs{
						{Name: "entry_protocol", Value: λ.NewStr("m3u8_native")},
						{Name: "m3u8_id", Value: λ.NewStr("hls")},
					})
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒtitle = func() λ.Object {
						if λv := λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewStr("data-title\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1"),
							ϒwebpage,
							λ.NewStr("title"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
							{Name: "group", Value: λ.NewStr("value")},
						}); λ.IsTrue(λv) {
							return λv
						} else if λv := λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
							λ.NewStr("title"),
							ϒwebpage,
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒself, "_og_search_title", nil), ϒwebpage)
						}
					}()
					ϒdescription = func() λ.Object {
						if λv := λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
							λ.NewStr("description"),
							ϒwebpage,
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒself, "_og_search_description", nil), ϒwebpage)
						}
					}()
					ϒthumbnail = func() λ.Object {
						if λv := λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewStr("data-image\\s*=\\s*([\"\\'])(?P<url>(?:(?!\\1).)+)\\1"),
							ϒwebpage,
							λ.NewStr("thumbnail"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
							{Name: "group", Value: λ.NewStr("url")},
						}); λ.IsTrue(λv) {
							return λv
						} else if λv := λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
							λ.NewStr("thumbnail"),
							ϒwebpage,
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒself, "_og_search_thumbnail", nil), ϒwebpage)
						}
					}()
					ϒduration = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("data-duration\\s*=\\s*[\"\\'](\\d+)"),
						ϒwebpage,
						λ.NewStr("duration"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					}))
					ϒseason = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewTuple(
							λ.NewStr("data-series-title\\s*=\\s*([\"\\'])[^/]+/(?P<value>(?:(?!\\1).)+)\\1"),
							λ.NewStr("\\bseason\\s*:\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1"),
						),
						ϒwebpage,
						λ.NewStr("season"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
						{Name: "group", Value: λ.NewStr("value")},
					})
					ϒseason_number = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("(\\d+)(?:[.\\s]+sezona|\\s+HOOAEG)"),
						func() λ.Object {
							if λv := ϒseason; λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewStr("")
							}
						}(),
						λ.NewStr("season number"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					}))
					ϒepisode = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("([\"\\'])(?P<value>(?:(?!\\1).)+)\\1"),
						ϒwebpage,
						λ.NewStr("episode"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
						{Name: "group", Value: λ.NewStr("value")},
					})
					ϒepisode_number = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("(?:S[eē]rija|Osa)\\s+(\\d+)"),
						func() λ.Object {
							if λv := ϒepisode; λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewStr("")
							}
						}(),
						λ.NewStr("episode number"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					}))
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):             ϒvideo_id,
						λ.NewStr("title"):          ϒtitle,
						λ.NewStr("description"):    ϒdescription,
						λ.NewStr("thumbnail"):      ϒthumbnail,
						λ.NewStr("duration"):       ϒduration,
						λ.NewStr("season"):         ϒseason,
						λ.NewStr("season_number"):  ϒseason_number,
						λ.NewStr("episode"):        ϒepisode,
						λ.NewStr("episode_number"): ϒepisode_number,
						λ.NewStr("formats"):        ϒformats,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        TVPlayHomeIE__TESTS,
				λ.NewStr("_VALID_URL"):    TVPlayHomeIE__VALID_URL,
				λ.NewStr("_real_extract"): TVPlayHomeIE__real_extract,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * asiancrush/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/asiancrush.py
 */

package asiancrush

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωkaltura "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/kaltura"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	AsianCrushIE         λ.Object
	AsianCrushPlaylistIE λ.Object
	InfoExtractor        λ.Object
	KalturaIE            λ.Object
	ϒextract_attributes  λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		KalturaIE = Ωkaltura.KalturaIE
		ϒextract_attributes = Ωutils.ϒextract_attributes
		AsianCrushIE = λ.Cal(λ.TypeType, λ.StrLiteral("AsianCrushIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				AsianCrushIE__VALID_URL      λ.Object
				AsianCrushIE__VALID_URL_BASE λ.Object
				AsianCrushIE__real_extract   λ.Object
			)
			AsianCrushIE__VALID_URL_BASE = λ.StrLiteral("https?://(?:www\\.)?(?P<host>(?:(?:asiancrush|yuyutv|midnightpulp)\\.com|cocoro\\.tv))")
			AsianCrushIE__VALID_URL = λ.Mod(λ.StrLiteral("%s/video/(?:[^/]+/)?0+(?P<id>\\d+)v\\b"), AsianCrushIE__VALID_URL_BASE)
			AsianCrushIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdescription λ.Object
						ϒentry_id    λ.Object
						ϒhost        λ.Object
						ϒkaltura_id  λ.Object
						ϒmobj        λ.Object
						ϒpartner_id  λ.Object
						ϒplayer      λ.Object
						ϒself        = λargs[0]
						ϒtitle       λ.Object
						ϒurl         = λargs[1]
						ϒvars        λ.Object
						ϒvideo_id    λ.Object
						ϒwebpage     λ.Object
						τmp0         λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒhost = λ.Calm(ϒmobj, "group", λ.StrLiteral("host"))
					ϒvideo_id = λ.Calm(ϒmobj, "group", λ.StrLiteral("id"))
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒvideo_id)
					τmp0 = λ.Mul(λ.NewList(λ.None), λ.IntLiteral(3))
					ϒentry_id = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒpartner_id = λ.GetItem(τmp0, λ.IntLiteral(1))
					ϒtitle = λ.GetItem(τmp0, λ.IntLiteral(2))
					ϒvars = λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
						λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.StrLiteral("iEmbedVars\\s*=\\s*({.+?})"),
							ϒwebpage,
							λ.StrLiteral("embed vars"),
						), λ.KWArgs{
							{Name: "default", Value: λ.StrLiteral("{}")},
						}),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					if λ.IsTrue(ϒvars) {
						ϒentry_id = λ.Calm(ϒvars, "get", λ.StrLiteral("entry_id"))
						ϒpartner_id = λ.Calm(ϒvars, "get", λ.StrLiteral("partner_id"))
						ϒtitle = λ.Calm(ϒvars, "get", λ.StrLiteral("vid_label"))
					}
					if !λ.IsTrue(ϒentry_id) {
						ϒentry_id = λ.Calm(ϒself, "_search_regex", λ.StrLiteral("\\bentry_id[\"\\']\\s*:\\s*[\"\\'](\\d+)"), ϒwebpage, λ.StrLiteral("entry id"))
					}
					ϒplayer = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
						λ.Mod(λ.StrLiteral("https://api.%s/embeddedVideoPlayer"), ϒhost),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "query", Value: λ.DictLiteral(map[string]λ.Object{
							"id": ϒentry_id,
						})},
					})
					ϒkaltura_id = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("entry_id[\"\\']\\s*:\\s*([\"\\'])(?P<id>(?:(?!\\1).)+)\\1"),
						ϒplayer,
						λ.StrLiteral("kaltura id"),
					), λ.KWArgs{
						{Name: "group", Value: λ.StrLiteral("id")},
					})
					if !λ.IsTrue(ϒpartner_id) {
						ϒpartner_id = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.StrLiteral("/p(?:artner_id)?/(\\d+)"),
							ϒplayer,
							λ.StrLiteral("partner id"),
						), λ.KWArgs{
							{Name: "default", Value: λ.StrLiteral("513551")},
						})
					}
					ϒdescription = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("(?s)<div[^>]+\\bclass=[\"\\']description[\"\\'][^>]*>(.+?)</div>"),
						ϒwebpage,
						λ.StrLiteral("description"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					return λ.DictLiteral(map[string]λ.Object{
						"_type": λ.StrLiteral("url_transparent"),
						"url": λ.Mod(λ.StrLiteral("kaltura:%s:%s"), λ.NewTuple(
							ϒpartner_id,
							ϒkaltura_id,
						)),
						"ie_key":      λ.Calm(KalturaIE, "ie_key"),
						"id":          ϒvideo_id,
						"title":       ϒtitle,
						"description": ϒdescription,
					})
				})
			return λ.DictLiteral(map[string]λ.Object{
				"_VALID_URL":      AsianCrushIE__VALID_URL,
				"_VALID_URL_BASE": AsianCrushIE__VALID_URL_BASE,
				"_real_extract":   AsianCrushIE__real_extract,
			})
		}())
		AsianCrushPlaylistIE = λ.Cal(λ.TypeType, λ.StrLiteral("AsianCrushPlaylistIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				AsianCrushPlaylistIE__VALID_URL λ.Object
			)
			AsianCrushPlaylistIE__VALID_URL = λ.Mod(λ.StrLiteral("%s/series/0+(?P<id>\\d+)s\\b"), λ.GetAttr(AsianCrushIE, "_VALID_URL_BASE", nil))
			return λ.DictLiteral(map[string]λ.Object{
				"_VALID_URL": AsianCrushPlaylistIE__VALID_URL,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * cbs/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/cbs.py
 */

package cbs

import (
	Ωtheplatform "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/theplatform"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	CBSBaseIE         λ.Object
	CBSIE             λ.Object
	ExtractorError    λ.Object
	ThePlatformFeedIE λ.Object
	ϒfind_xpath_attr  λ.Object
	ϒint_or_none      λ.Object
	ϒupdate_url_query λ.Object
	ϒxpath_element    λ.Object
	ϒxpath_text       λ.Object
)

func init() {
	λ.InitModule(func() {
		ThePlatformFeedIE = Ωtheplatform.ThePlatformFeedIE
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒfind_xpath_attr = Ωutils.ϒfind_xpath_attr
		ϒxpath_element = Ωutils.ϒxpath_element
		ϒxpath_text = Ωutils.ϒxpath_text
		ϒupdate_url_query = Ωutils.ϒupdate_url_query
		CBSBaseIE = λ.Cal(λ.TypeType, λ.NewStr("CBSBaseIE"), λ.NewTuple(ThePlatformFeedIE), func() λ.Dict {
			var (
				CBSBaseIE__parse_smil_subtitles λ.Object
			)
			CBSBaseIE__parse_smil_subtitles = λ.NewFunction("_parse_smil_subtitles",
				[]λ.Param{
					{Name: "self"},
					{Name: "smil"},
					{Name: "namespace", Def: λ.None},
					{Name: "subtitles_lang", Def: λ.NewStr("en")},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒclosed_caption_e λ.Object
						ϒnamespace        = λargs[2]
						ϒself             = λargs[0]
						ϒsmil             = λargs[1]
						ϒsubtitles_lang   = λargs[3]
					)
					_ = ϒsubtitles_lang
					ϒclosed_caption_e = λ.Cal(ϒfind_xpath_attr, ϒsmil, λ.Cal(λ.GetAttr(ϒself, "_xpath_ns", nil), λ.NewStr(".//param"), ϒnamespace), λ.NewStr("name"), λ.NewStr("ClosedCaptionURL"))
					return func() λ.Object {
						if λ.IsTrue(func() λ.Object {
							if λv := λ.NewBool(ϒclosed_caption_e != λ.None); !λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(λ.GetAttr(ϒclosed_caption_e, "attrib", nil), "get", nil), λ.NewStr("value"))
							}
						}()) {
							return λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("en"): λ.NewList(λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("ext"): λ.NewStr("ttml"),
									λ.NewStr("url"): λ.GetItem(λ.GetAttr(ϒclosed_caption_e, "attrib", nil), λ.NewStr("value")),
								})),
							})
						} else {
							return λ.NewList()
						}
					}()
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_parse_smil_subtitles"): CBSBaseIE__parse_smil_subtitles,
			})
		}())
		CBSIE = λ.Cal(λ.TypeType, λ.NewStr("CBSIE"), λ.NewTuple(CBSBaseIE), func() λ.Dict {
			var (
				CBSIE__VALID_URL λ.Object
			)
			CBSIE__VALID_URL = λ.NewStr("(?:cbs:|https?://(?:www\\.)?(?:cbs\\.com/shows/[^/]+/video|colbertlateshow\\.com/(?:video|podcasts))/)(?P<id>[\\w-]+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): CBSIE__VALID_URL,
			})
		}())
	})
}

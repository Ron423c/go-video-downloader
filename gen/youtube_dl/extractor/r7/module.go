// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * r7/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/r7.py
 */

package r7

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor λ.Object
	R7ArticleIE   λ.Object
	R7IE          λ.Object
	ϒint_or_none  λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒint_or_none = Ωutils.ϒint_or_none
		R7IE = λ.Cal(λ.TypeType, λ.NewStr("R7IE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				R7IE__VALID_URL    λ.Object
				R7IE__real_extract λ.Object
			)
			R7IE__VALID_URL = λ.NewStr("(?x)\n                        https?://\n                        (?:\n                            (?:[a-zA-Z]+)\\.r7\\.com(?:/[^/]+)+/idmedia/|\n                            noticias\\.r7\\.com(?:/[^/]+)+/[^/]+-|\n                            player\\.r7\\.com/video/i/\n                        )\n                        (?P<id>[\\da-f]{24})\n                    ")
			R7IE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdescription   λ.Object
						ϒduration      λ.Object
						ϒf             λ.Object
						ϒf_copy        λ.Object
						ϒformats       λ.Object
						ϒlike_count    λ.Object
						ϒm3u8_formats  λ.Object
						ϒmedia_url     λ.Object
						ϒmedia_url_hls λ.Object
						ϒself          = λargs[0]
						ϒthumbnail     λ.Object
						ϒtitle         λ.Object
						ϒurl           = λargs[1]
						ϒvideo         λ.Object
						ϒvideo_id      λ.Object
						ϒview_count    λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒvideo = λ.Cal(λ.GetAttr(ϒself, "_download_json", nil), λ.Mod(λ.NewStr("http://player-api.r7.com/video/i/%s"), ϒvideo_id), ϒvideo_id)
					ϒtitle = λ.GetItem(ϒvideo, λ.NewStr("title"))
					ϒformats = λ.NewList()
					ϒmedia_url_hls = λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("media_url_hls"))
					if λ.IsTrue(ϒmedia_url_hls) {
						λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
							ϒmedia_url_hls,
							ϒvideo_id,
							λ.NewStr("mp4"),
						), λ.KWArgs{
							{Name: "entry_protocol", Value: λ.NewStr("m3u8_native")},
							{Name: "m3u8_id", Value: λ.NewStr("hls")},
							{Name: "fatal", Value: λ.False},
						}))
					}
					ϒmedia_url = λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("media_url"))
					if λ.IsTrue(ϒmedia_url) {
						ϒf = λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"):       ϒmedia_url,
							λ.NewStr("format_id"): λ.NewStr("http"),
						})
						ϒm3u8_formats = λ.Cal(λ.ListType, λ.Cal(λ.FilterIteratorType, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "f"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒf = λargs[0]
								)
								return λ.Ne(λ.Cal(λ.GetAttr(ϒf, "get", nil), λ.NewStr("vcodec")), λ.NewStr("none"))
							}), ϒformats))
						if λ.IsTrue(λ.Eq(λ.Cal(λ.BuiltinLen, ϒm3u8_formats), λ.NewInt(1))) {
							ϒf_copy = λ.Cal(λ.GetAttr(λ.GetItem(ϒm3u8_formats, λ.NewInt(0)), "copy", nil))
							λ.Cal(λ.GetAttr(ϒf_copy, "update", nil), ϒf)
							λ.SetItem(ϒf_copy, λ.NewStr("protocol"), λ.NewStr("http"))
							ϒf = ϒf_copy
						}
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), ϒf)
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒdescription = λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("description"))
					ϒthumbnail = λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("thumb"))
					ϒduration = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("media_duration")))
					ϒlike_count = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("likes")))
					ϒview_count = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("views")))
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("title"):       ϒtitle,
						λ.NewStr("description"): ϒdescription,
						λ.NewStr("thumbnail"):   ϒthumbnail,
						λ.NewStr("duration"):    ϒduration,
						λ.NewStr("like_count"):  ϒlike_count,
						λ.NewStr("view_count"):  ϒview_count,
						λ.NewStr("formats"):     ϒformats,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"):    R7IE__VALID_URL,
				λ.NewStr("_real_extract"): R7IE__real_extract,
			})
		}())
		R7ArticleIE = λ.Cal(λ.TypeType, λ.NewStr("R7ArticleIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				R7ArticleIE__TEST         λ.Object
				R7ArticleIE__VALID_URL    λ.Object
				R7ArticleIE__real_extract λ.Object
				R7ArticleIE_suitable      λ.Object
			)
			R7ArticleIE__VALID_URL = λ.NewStr("https?://(?:[a-zA-Z]+)\\.r7\\.com/(?:[^/]+/)+[^/?#&]+-(?P<id>\\d+)")
			R7ArticleIE__TEST = λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("url"):           λ.NewStr("http://tv.r7.com/record-play/balanco-geral/videos/policiais-humilham-suspeito-a-beira-da-morte-morre-com-dignidade-16102015"),
				λ.NewStr("only_matching"): λ.True,
			})
			R7ArticleIE_suitable = λ.NewFunction("suitable",
				[]λ.Param{
					{Name: "cls"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls = λargs[0]
						ϒurl = λargs[1]
					)
					return func() λ.Object {
						if λ.IsTrue(λ.Cal(λ.GetAttr(R7IE, "suitable", nil), ϒurl)) {
							return λ.False
						} else {
							return λ.Cal(λ.GetAttr(λ.Cal(λ.SuperType, R7ArticleIE, ϒcls), "suitable", nil), ϒurl)
						}
					}()
				})
			R7ArticleIE_suitable = λ.Cal(λ.ClassMethodType, R7ArticleIE_suitable)
			R7ArticleIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdisplay_id λ.Object
						ϒself       = λargs[0]
						ϒurl        = λargs[1]
						ϒvideo_id   λ.Object
						ϒwebpage    λ.Object
					)
					ϒdisplay_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒdisplay_id)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("<div[^>]+(?:id=[\"\\']player-|class=[\"\\']embed[\"\\'][^>]+id=[\"\\'])([\\da-f]{24})"), ϒwebpage, λ.NewStr("video id"))
					return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), λ.Mod(λ.NewStr("http://player.r7.com/video/i/%s"), ϒvideo_id), λ.Cal(λ.GetAttr(R7IE, "ie_key", nil)))
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TEST"):         R7ArticleIE__TEST,
				λ.NewStr("_VALID_URL"):    R7ArticleIE__VALID_URL,
				λ.NewStr("_real_extract"): R7ArticleIE__real_extract,
				λ.NewStr("suitable"):      R7ArticleIE_suitable,
			})
		}())
	})
}

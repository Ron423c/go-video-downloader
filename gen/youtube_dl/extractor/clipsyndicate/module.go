// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * clipsyndicate/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/clipsyndicate.py
 */

package clipsyndicate

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ClipsyndicateIE     λ.Object
	InfoExtractor       λ.Object
	ϒfind_xpath_attr    λ.Object
	ϒfix_xml_ampersands λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒfind_xpath_attr = Ωutils.ϒfind_xpath_attr
		ϒfix_xml_ampersands = Ωutils.ϒfix_xml_ampersands
		ClipsyndicateIE = λ.Cal(λ.TypeType, λ.NewStr("ClipsyndicateIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ClipsyndicateIE__TESTS        λ.Object
				ClipsyndicateIE__VALID_URL    λ.Object
				ClipsyndicateIE__real_extract λ.Object
			)
			ClipsyndicateIE__VALID_URL = λ.NewStr("https?://(?:chic|www)\\.clipsyndicate\\.com/video/play(list/\\d+)?/(?P<id>\\d+)")
			ClipsyndicateIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.clipsyndicate.com/video/play/4629301/brick_briscoe"),
					λ.NewStr("md5"): λ.NewStr("4d7d549451bad625e0ff3d7bd56d776c"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):        λ.NewStr("4629301"),
						λ.NewStr("ext"):       λ.NewStr("mp4"),
						λ.NewStr("title"):     λ.NewStr("Brick Briscoe"),
						λ.NewStr("duration"):  λ.NewInt(612),
						λ.NewStr("thumbnail"): λ.NewStr("re:^https?://.+\\.jpg"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://chic.clipsyndicate.com/video/play/5844117/shark_attack"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			ClipsyndicateIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒfind_param λ.Object
						ϒflvars     λ.Object
						ϒjs_player  λ.Object
						ϒpdoc       λ.Object
						ϒself       = λargs[0]
						ϒtrack_doc  λ.Object
						ϒurl        = λargs[1]
						ϒvideo_id   λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒjs_player = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), λ.Mod(λ.NewStr("http://eplayer.clipsyndicate.com/embed/player.js?va_id=%s"), ϒvideo_id), ϒvideo_id, λ.NewStr("Downlaoding player"))
					ϒflvars = λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("flvars: \"(.*?)\""), ϒjs_player, λ.NewStr("flvars"))
					ϒpdoc = λ.Call(λ.GetAttr(ϒself, "_download_xml", nil), λ.NewArgs(
						λ.Mod(λ.NewStr("http://eplayer.clipsyndicate.com/osmf/playlist?%s"), ϒflvars),
						ϒvideo_id,
						λ.NewStr("Downloading video info"),
					), λ.KWArgs{
						{Name: "transform_source", Value: ϒfix_xml_ampersands},
					})
					ϒtrack_doc = λ.Cal(λ.GetAttr(ϒpdoc, "find", nil), λ.NewStr("trackList/track"))
					ϒfind_param = λ.NewFunction("find_param",
						[]λ.Param{
							{Name: "name"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒname = λargs[0]
								ϒnode λ.Object
							)
							ϒnode = λ.Cal(ϒfind_xpath_attr, ϒtrack_doc, λ.NewStr(".//param"), λ.NewStr("name"), ϒname)
							if λ.IsTrue(λ.NewBool(ϒnode != λ.None)) {
								return λ.GetItem(λ.GetAttr(ϒnode, "attrib", nil), λ.NewStr("value"))
							}
							return λ.None
						})
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):        ϒvideo_id,
						λ.NewStr("title"):     λ.Cal(ϒfind_param, λ.NewStr("title")),
						λ.NewStr("url"):       λ.GetAttr(λ.Cal(λ.GetAttr(ϒtrack_doc, "find", nil), λ.NewStr("location")), "text", nil),
						λ.NewStr("thumbnail"): λ.Cal(ϒfind_param, λ.NewStr("thumbnail")),
						λ.NewStr("duration"):  λ.Cal(λ.IntType, λ.Cal(ϒfind_param, λ.NewStr("duration"))),
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        ClipsyndicateIE__TESTS,
				λ.NewStr("_VALID_URL"):    ClipsyndicateIE__VALID_URL,
				λ.NewStr("_real_extract"): ClipsyndicateIE__real_extract,
			})
		}())
	})
}

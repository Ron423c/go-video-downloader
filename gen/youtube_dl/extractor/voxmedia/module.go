// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * voxmedia/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/voxmedia.py
 */

package voxmedia

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωonce "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/once"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError               λ.Object
	InfoExtractor                λ.Object
	OnceIE                       λ.Object
	VoxMediaIE                   λ.Object
	VoxMediaVolumeIE             λ.Object
	ϒcompat_urllib_parse_unquote λ.Object
	ϒint_or_none                 λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		OnceIE = Ωonce.OnceIE
		ϒcompat_urllib_parse_unquote = Ωcompat.ϒcompat_urllib_parse_unquote
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		VoxMediaVolumeIE = λ.Cal(λ.TypeType, λ.NewStr("VoxMediaVolumeIE"), λ.NewTuple(OnceIE), func() λ.Dict {
			var (
				VoxMediaVolumeIE__VALID_URL    λ.Object
				VoxMediaVolumeIE__real_extract λ.Object
			)
			VoxMediaVolumeIE__VALID_URL = λ.NewStr("https?://volume\\.vox-cdn\\.com/embed/(?P<id>[0-9a-f]{9})")
			VoxMediaVolumeIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒasset               λ.Object
						ϒformat_id           λ.Object
						ϒformats             λ.Object
						ϒhls_url             λ.Object
						ϒinfo                λ.Object
						ϒmp4_url             λ.Object
						ϒprovider_video_id   λ.Object
						ϒprovider_video_type λ.Object
						ϒself                = λargs[0]
						ϒsetup               λ.Object
						ϒtbr                 λ.Object
						ϒurl                 = λargs[1]
						ϒvideo_data          λ.Object
						ϒvideo_id            λ.Object
						ϒwebpage             λ.Object
						τmp0                 λ.Object
						τmp1                 λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					ϒsetup = λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("setup\\s*=\\s*({.+});"), ϒwebpage, λ.NewStr("setup")), ϒvideo_id)
					ϒvideo_data = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒsetup, "get", nil), λ.NewStr("video")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewDictWithTable(map[λ.Object]λ.Object{})
						}
					}()
					ϒinfo = λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):    ϒvideo_id,
						λ.NewStr("title"): λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("title_short")),
						λ.NewStr("description"): func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("description_long")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("description_short"))
							}
						}(),
						λ.NewStr("thumbnail"): λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("brightcove_thumbnail")),
					})
					ϒasset = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒsetup, "get", nil), λ.NewStr("asset")); λ.IsTrue(λv) {
							return λv
						} else if λv := λ.Cal(λ.GetAttr(ϒsetup, "get", nil), λ.NewStr("params")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewDictWithTable(map[λ.Object]λ.Object{})
						}
					}()
					ϒformats = λ.NewList()
					ϒhls_url = λ.Cal(λ.GetAttr(ϒasset, "get", nil), λ.NewStr("hls_url"))
					if λ.IsTrue(ϒhls_url) {
						λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
							ϒhls_url,
							ϒvideo_id,
							λ.NewStr("mp4"),
							λ.NewStr("m3u8_native"),
						), λ.KWArgs{
							{Name: "m3u8_id", Value: λ.NewStr("hls")},
							{Name: "fatal", Value: λ.False},
						}))
					}
					ϒmp4_url = λ.Cal(λ.GetAttr(ϒasset, "get", nil), λ.NewStr("mp4_url"))
					if λ.IsTrue(ϒmp4_url) {
						ϒtbr = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewStr("-(\\d+)k\\."),
							ϒmp4_url,
							λ.NewStr("bitrate"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						})
						ϒformat_id = λ.NewStr("http")
						if λ.IsTrue(ϒtbr) {
							τmp0 = λ.IAdd(ϒformat_id, λ.Add(λ.NewStr("-"), ϒtbr))
							ϒformat_id = τmp0
						}
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("format_id"): ϒformat_id,
							λ.NewStr("url"):       ϒmp4_url,
							λ.NewStr("tbr"):       λ.Cal(ϒint_or_none, ϒtbr),
						}))
					}
					if λ.IsTrue(ϒformats) {
						λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
						λ.SetItem(ϒinfo, λ.NewStr("formats"), ϒformats)
						return ϒinfo
					}
					τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
						λ.NewStr("ooyala"),
						λ.NewStr("youtube"),
						λ.NewStr("brightcove"),
					))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒprovider_video_type = τmp1
						ϒprovider_video_id = λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.Mod(λ.NewStr("%s_id"), ϒprovider_video_type))
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒprovider_video_id))) {
							continue
						}
						if λ.IsTrue(λ.Eq(ϒprovider_video_type, λ.NewStr("brightcove"))) {
							λ.SetItem(ϒinfo, λ.NewStr("formats"), λ.Cal(λ.GetAttr(ϒself, "_extract_once_formats", nil), ϒprovider_video_id))
							λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), λ.GetItem(ϒinfo, λ.NewStr("formats")))
						} else {
							λ.Cal(λ.GetAttr(ϒinfo, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("_type"): λ.NewStr("url_transparent"),
								λ.NewStr("url"): func() λ.Object {
									if λ.IsTrue(λ.Eq(ϒprovider_video_type, λ.NewStr("youtube"))) {
										return ϒprovider_video_id
									} else {
										return λ.Mod(λ.NewStr("%s:%s"), λ.NewTuple(
											ϒprovider_video_type,
											ϒprovider_video_id,
										))
									}
								}(),
								λ.NewStr("ie_key"): λ.Cal(λ.GetAttr(ϒprovider_video_type, "capitalize", nil)),
							}))
						}
						return ϒinfo
					}
					panic(λ.Raise(λ.Cal(ExtractorError, λ.NewStr("Unable to find provider video id"))))
					return λ.None
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"):    VoxMediaVolumeIE__VALID_URL,
				λ.NewStr("_real_extract"): VoxMediaVolumeIE__real_extract,
			})
		}())
		VoxMediaIE = λ.Cal(λ.TypeType, λ.NewStr("VoxMediaIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				VoxMediaIE__TESTS        λ.Object
				VoxMediaIE__VALID_URL    λ.Object
				VoxMediaIE__real_extract λ.Object
			)
			VoxMediaIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?(?:(?:theverge|vox|sbnation|eater|polygon|curbed|racked|funnyordie)\\.com|recode\\.net)/(?:[^/]+/)*(?P<id>[^/?]+)")
			VoxMediaIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.theverge.com/2014/6/27/5849272/material-world-how-google-discovered-what-software-is-made-of"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("j4mLW6x17VM"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Material world: how Google discovered what software is made of"),
						λ.NewStr("description"): λ.NewStr("md5:dfc17e7715e3b542d66e33a109861382"),
						λ.NewStr("upload_date"): λ.NewStr("20190710"),
						λ.NewStr("uploader_id"): λ.NewStr("TheVerge"),
						λ.NewStr("uploader"):    λ.NewStr("The Verge"),
					}),
					λ.NewStr("add_ie"): λ.NewList(λ.NewStr("Youtube")),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.theverge.com/2014/10/21/7025853/google-nexus-6-hands-on-photos-video-android-phablet"),
					λ.NewStr("md5"): λ.NewStr("4c8f4a0937752b437c3ebc0ed24802b5"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("Gy8Md3Eky38"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("The Nexus 6: hands-on with Google's phablet"),
						λ.NewStr("description"): λ.NewStr("md5:d9f0216e5fb932dd2033d6db37ac3f1d"),
						λ.NewStr("uploader_id"): λ.NewStr("TheVerge"),
						λ.NewStr("upload_date"): λ.NewStr("20141021"),
						λ.NewStr("uploader"):    λ.NewStr("The Verge"),
					}),
					λ.NewStr("add_ie"): λ.NewList(λ.NewStr("Youtube")),
					λ.NewStr("skip"):   λ.NewStr("similar to the previous test"),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.vox.com/2016/3/31/11336640/mississippi-lgbt-religious-freedom-bill"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("YCjDnX-Xzhg"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Mississippi's laws are so bad that its anti-LGBTQ law isn't needed to allow discrimination"),
						λ.NewStr("description"): λ.NewStr("md5:fc1317922057de31cd74bce91eb1c66c"),
						λ.NewStr("uploader_id"): λ.NewStr("voxdotcom"),
						λ.NewStr("upload_date"): λ.NewStr("20150915"),
						λ.NewStr("uploader"):    λ.NewStr("Vox"),
					}),
					λ.NewStr("add_ie"): λ.NewList(λ.NewStr("Youtube")),
					λ.NewStr("skip"):   λ.NewStr("similar to the previous test"),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.vox.com/2016/3/24/11291692/robot-dance"),
					λ.NewStr("md5"): λ.NewStr("83b3080489fb103941e549352d3e0977"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("FcNHTJU1ufM"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("How \"the robot\" became the greatest novelty dance of all time"),
						λ.NewStr("description"): λ.NewStr("md5:b081c0d588b8b2085870cda55e6da176"),
						λ.NewStr("upload_date"): λ.NewStr("20160324"),
						λ.NewStr("uploader_id"): λ.NewStr("voxdotcom"),
						λ.NewStr("uploader"):    λ.NewStr("Vox"),
					}),
					λ.NewStr("add_ie"): λ.NewList(λ.NewStr("Youtube")),
					λ.NewStr("skip"):   λ.NewStr("Page no longer contain videos"),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.sbnation.com/college-football-recruiting/2015/2/3/7970291/national-signing-day-rationalizations-itll-be-ok-itll-be-ok"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("national-signing-day-rationalizations-itll-be-ok-itll-be-ok"),
						λ.NewStr("title"):       λ.NewStr("25 lies you will tell yourself on National Signing Day"),
						λ.NewStr("description"): λ.NewStr("It's the most self-delusional time of the year, and everyone's gonna tell the same lies together!"),
					}),
					λ.NewStr("playlist"): λ.NewList(
						λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("md5"): λ.NewStr("721fededf2ab74ae4176c8c8cbfe092e"),
							λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("id"):          λ.NewStr("p3cThlMjE61VDi_SD9JlIteSNPWVDBB9"),
								λ.NewStr("ext"):         λ.NewStr("mp4"),
								λ.NewStr("title"):       λ.NewStr("Buddy Hield vs Steph Curry (and the world)"),
								λ.NewStr("description"): λ.NewStr("Let’s dissect only the most important Final Four storylines."),
							}),
						}),
						λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("md5"): λ.NewStr("bf0c5cc115636af028be1bab79217ea9"),
							λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("id"):          λ.NewStr("BmbmVjMjE6esPHxdALGubTrouQ0jYLHj"),
								λ.NewStr("ext"):         λ.NewStr("mp4"),
								λ.NewStr("title"):       λ.NewStr("Chasing Cinderella 2016: Syracuse basketball"),
								λ.NewStr("description"): λ.NewStr("md5:e02d56b026d51aa32c010676765a690d"),
							}),
						}),
					),
					λ.NewStr("skip"): λ.NewStr("Page no longer contain videos"),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.recode.net/2014/6/17/11628066/post-post-pc-ceo-the-full-code-conference-video-of-microsofts-satya"),
					λ.NewStr("md5"): λ.NewStr("2dbc77b8b0bff1894c2fce16eded637d"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("1231c973d"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Post-Post-PC CEO: The Full Code Conference Video of Microsoft's Satya Nadella"),
						λ.NewStr("description"): λ.NewStr("The longtime veteran was chosen earlier this year as the software giant's third leader in its history."),
					}),
					λ.NewStr("add_ie"): λ.NewList(λ.NewStr("VoxMediaVolume")),
				}),
			)
			VoxMediaIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcreate_entry        λ.Object
						ϒdisplay_id          λ.Object
						ϒentries             λ.Object
						ϒentries_data        λ.Object
						ϒprovider_video_id   λ.Object
						ϒprovider_video_type λ.Object
						ϒself                = λargs[0]
						ϒurl                 = λargs[1]
						ϒvideo_data          λ.Object
						ϒvolume_uuid         λ.Object
						ϒwebpage             λ.Object
						τmp0                 λ.Object
						τmp1                 λ.Object
					)
					ϒdisplay_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(ϒcompat_urllib_parse_unquote, λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒdisplay_id))
					ϒcreate_entry = λ.NewFunction("create_entry",
						[]λ.Param{
							{Name: "provider_video_id"},
							{Name: "provider_video_type"},
							{Name: "title", Def: λ.None},
							{Name: "description", Def: λ.None},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒdescription         = λargs[3]
								ϒprovider_video_id   = λargs[0]
								ϒprovider_video_type = λargs[1]
								ϒtitle               = λargs[2]
								ϒvideo_url           λ.Object
							)
							ϒvideo_url = λ.Mod(λ.GetItem(λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("youtube"): λ.NewStr("%s"),
								λ.NewStr("ooyala"):  λ.NewStr("ooyala:%s"),
								λ.NewStr("volume"):  λ.NewStr("http://volume.vox-cdn.com/embed/%s"),
							}), ϒprovider_video_type), ϒprovider_video_id)
							return λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("_type"): λ.NewStr("url_transparent"),
								λ.NewStr("url"):   ϒvideo_url,
								λ.NewStr("title"): func() λ.Object {
									if λv := ϒtitle; λ.IsTrue(λv) {
										return λv
									} else {
										return λ.Cal(λ.GetAttr(ϒself, "_og_search_title", nil), ϒwebpage)
									}
								}(),
								λ.NewStr("description"): func() λ.Object {
									if λv := ϒdescription; λ.IsTrue(λv) {
										return λv
									} else {
										return λ.Cal(λ.GetAttr(ϒself, "_og_search_description", nil), ϒwebpage)
									}
								}(),
							})
						})
					ϒentries = λ.NewList()
					ϒentries_data = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewList(
							λ.NewStr("Chorus\\.VideoContext\\.addVideo\\((\\[{.+}\\])\\);"),
							λ.NewStr("var\\s+entry\\s*=\\s*({.+});"),
							λ.NewStr("SBN\\.VideoLinkset\\.entryGroup\\(\\s*(\\[.+\\])"),
						),
						ϒwebpage,
						λ.NewStr("video data"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(ϒentries_data) {
						ϒentries_data = λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), ϒentries_data, ϒdisplay_id)
						if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒentries_data, λ.DictType)) {
							ϒentries_data = λ.NewList(ϒentries_data)
						}
						τmp0 = λ.Cal(λ.BuiltinIter, ϒentries_data)
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒvideo_data = τmp1
							ϒprovider_video_id = λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("provider_video_id"))
							ϒprovider_video_type = λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("provider_video_type"))
							if λ.IsTrue(func() λ.Object {
								if λv := ϒprovider_video_id; !λ.IsTrue(λv) {
									return λv
								} else {
									return ϒprovider_video_type
								}
							}()) {
								λ.Cal(λ.GetAttr(ϒentries, "append", nil), λ.Cal(ϒcreate_entry, ϒprovider_video_id, ϒprovider_video_type, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("title")), λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("description"))))
							}
						}
					}
					ϒprovider_video_id = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("data-ooyala-id=\"([^\"]+)\""),
						ϒwebpage,
						λ.NewStr("ooyala id"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(ϒprovider_video_id) {
						λ.Cal(λ.GetAttr(ϒentries, "append", nil), λ.Cal(ϒcreate_entry, ϒprovider_video_id, λ.NewStr("ooyala")))
					}
					ϒvolume_uuid = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("data-volume-uuid=\"([^\"]+)\""),
						ϒwebpage,
						λ.NewStr("volume uuid"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(ϒvolume_uuid) {
						λ.Cal(λ.GetAttr(ϒentries, "append", nil), λ.Cal(ϒcreate_entry, ϒvolume_uuid, λ.NewStr("volume")))
					}
					if λ.IsTrue(λ.Eq(λ.Cal(λ.BuiltinLen, ϒentries), λ.NewInt(1))) {
						return λ.GetItem(ϒentries, λ.NewInt(0))
					} else {
						return λ.Cal(λ.GetAttr(ϒself, "playlist_result", nil), ϒentries, ϒdisplay_id, λ.Cal(λ.GetAttr(ϒself, "_og_search_title", nil), ϒwebpage), λ.Cal(λ.GetAttr(ϒself, "_og_search_description", nil), ϒwebpage))
					}
					return λ.None
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        VoxMediaIE__TESTS,
				λ.NewStr("_VALID_URL"):    VoxMediaIE__VALID_URL,
				λ.NewStr("_real_extract"): VoxMediaIE__real_extract,
			})
		}())
	})
}

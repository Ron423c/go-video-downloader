// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * mdr/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/mdr.py
 */

package mdr

import (
	Ωparse "github.com/tenta-browser/go-video-downloader/gen/urllib/parse"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor   λ.Object
	MDRIE           λ.Object
	ϒdetermine_ext  λ.Object
	ϒint_or_none    λ.Object
	ϒparse_duration λ.Object
	ϒparse_iso8601  λ.Object
	ϒxpath_text     λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		ϒxpath_text = Ωutils.ϒxpath_text
		MDRIE = λ.Cal(λ.TypeType, λ.NewStr("MDRIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				MDRIE__TESTS        λ.Object
				MDRIE__VALID_URL    λ.Object
				MDRIE__real_extract λ.Object
			)
			MDRIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?(?:mdr|kika)\\.de/(?:.*)/[a-z-]+-?(?P<id>\\d+)(?:_.+?)?\\.html")
			MDRIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://www.mdr.de/fakt/video189002.html"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.mdr.de/kultur/audio1312272_zc-15948bad_zs-86171fdd.html"),
					λ.NewStr("md5"): λ.NewStr("64c4ee50f0a791deb9479cd7bbe9d2fa"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):       λ.NewStr("1312272"),
						λ.NewStr("ext"):      λ.NewStr("mp3"),
						λ.NewStr("title"):    λ.NewStr("Feuilleton vom 30. Oktober 2015"),
						λ.NewStr("duration"): λ.NewInt(250),
						λ.NewStr("uploader"): λ.NewStr("MITTELDEUTSCHER RUNDFUNK"),
					}),
					λ.NewStr("skip"): λ.NewStr("404 not found"),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.kika.de/baumhaus/videos/video19636.html"),
					λ.NewStr("md5"): λ.NewStr("4930515e36b06c111213e80d1e4aad0e"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):       λ.NewStr("19636"),
						λ.NewStr("ext"):      λ.NewStr("mp4"),
						λ.NewStr("title"):    λ.NewStr("Baumhaus vom 30. Oktober 2015"),
						λ.NewStr("duration"): λ.NewInt(134),
						λ.NewStr("uploader"): λ.NewStr("KIKA"),
					}),
					λ.NewStr("skip"): λ.NewStr("404 not found"),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.kika.de/sendungen/einzelsendungen/weihnachtsprogramm/videos/video8182.html"),
					λ.NewStr("md5"): λ.NewStr("5fe9c4dd7d71e3b238f04b8fdd588357"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("8182"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Beutolomäus und der geheime Weihnachtswunsch"),
						λ.NewStr("description"): λ.NewStr("md5:b69d32d7b2c55cbe86945ab309d39bbd"),
						λ.NewStr("timestamp"):   λ.NewInt(1482541200),
						λ.NewStr("upload_date"): λ.NewStr("20161224"),
						λ.NewStr("duration"):    λ.NewInt(4628),
						λ.NewStr("uploader"):    λ.NewStr("KIKA"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.mdr.de/kultur/videos-und-audios/audio-radio/operation-mindfuck-robert-wilson100.html"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):       λ.NewStr("100"),
						λ.NewStr("ext"):      λ.NewStr("mp4"),
						λ.NewStr("title"):    λ.NewStr("Feature: Operation Mindfuck - Robert Anton Wilson"),
						λ.NewStr("duration"): λ.NewInt(3239),
						λ.NewStr("uploader"): λ.NewStr("MITTELDEUTSCHER RUNDFUNK"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://www.kika.de/baumhaus/sendungen/video19636_zc-fea7f8a0_zs-4bf89c60.html"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://www.kika.de/sendungen/einzelsendungen/weihnachtsprogramm/einzelsendung2534.html"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://www.mdr.de/mediathek/mdr-videos/a/video-1334.html"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			MDRIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒabr            λ.Object
						ϒasset          λ.Object
						ϒdata_url       λ.Object
						ϒdescription    λ.Object
						ϒdoc            λ.Object
						ϒduration       λ.Object
						ϒext            λ.Object
						ϒf              λ.Object
						ϒfilesize       λ.Object
						ϒformats        λ.Object
						ϒheight         λ.Object
						ϒmedia_type     λ.Object
						ϒprocessed_urls λ.Object
						ϒself           = λargs[0]
						ϒsource         λ.Object
						ϒtimestamp      λ.Object
						ϒtitle          λ.Object
						ϒuploader       λ.Object
						ϒurl            = λargs[1]
						ϒurl_el         λ.Object
						ϒurl_formats    λ.Object
						ϒvbr            λ.Object
						ϒvideo_id       λ.Object
						ϒvideo_url      λ.Object
						ϒwebpage        λ.Object
						ϒwidth          λ.Object
						τmp0            λ.Object
						τmp1            λ.Object
						τmp2            λ.Object
						τmp3            λ.Object
						τmp4            λ.Object
						τmp5            λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					ϒdata_url = λ.Cal(λ.GetAttr(λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("(?:dataURL|playerXml(?:[\"\\'])?)\\s*:\\s*([\"\\'])(?P<url>.+?-avCustom\\.xml)\\1"),
						ϒwebpage,
						λ.NewStr("data url"),
					), λ.KWArgs{
						{Name: "group", Value: λ.NewStr("url")},
					}), "replace", nil), λ.NewStr("\\/"), λ.NewStr("/"))
					ϒdoc = λ.Cal(λ.GetAttr(ϒself, "_download_xml", nil), λ.Cal(Ωparse.ϒurljoin, ϒurl, ϒdata_url), ϒvideo_id)
					ϒtitle = λ.Call(ϒxpath_text, λ.NewArgs(
						ϒdoc,
						λ.NewList(
							λ.NewStr("./title"),
							λ.NewStr("./broadcast/broadcastName"),
						),
						λ.NewStr("title"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.True},
					})
					ϒformats = λ.NewList()
					ϒprocessed_urls = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒdoc, "findall", nil), λ.NewStr("./assets/asset")))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒasset = τmp1
						τmp2 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
							λ.NewStr("progressiveDownload"),
							λ.NewStr("dynamicHttpStreamingRedirector"),
							λ.NewStr("adaptiveHttpStreamingRedirector"),
						))
						for {
							if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
								break
							}
							ϒsource = τmp3
							ϒurl_el = λ.Cal(λ.GetAttr(ϒasset, "find", nil), λ.Mod(λ.NewStr("./%sUrl"), ϒsource))
							if λ.IsTrue(λ.NewBool(ϒurl_el == λ.None)) {
								continue
							}
							ϒvideo_url = λ.GetAttr(ϒurl_el, "text", nil)
							if λ.IsTrue(λ.NewBool(λ.Contains(ϒprocessed_urls, ϒvideo_url))) {
								continue
							}
							λ.Cal(λ.GetAttr(ϒprocessed_urls, "append", nil), ϒvideo_url)
							ϒvbr = λ.Cal(ϒint_or_none, λ.Cal(ϒxpath_text, ϒasset, λ.NewStr("./bitrateVideo"), λ.NewStr("vbr")), λ.NewInt(1000))
							ϒabr = λ.Cal(ϒint_or_none, λ.Cal(ϒxpath_text, ϒasset, λ.NewStr("./bitrateAudio"), λ.NewStr("abr")), λ.NewInt(1000))
							ϒext = λ.Cal(ϒdetermine_ext, λ.GetAttr(ϒurl_el, "text", nil))
							if λ.IsTrue(λ.Eq(ϒext, λ.NewStr("m3u8"))) {
								ϒurl_formats = λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
									ϒvideo_url,
									ϒvideo_id,
									λ.NewStr("mp4"),
								), λ.KWArgs{
									{Name: "entry_protocol", Value: λ.NewStr("m3u8_native")},
									{Name: "preference", Value: λ.NewInt(0)},
									{Name: "m3u8_id", Value: λ.NewStr("HLS")},
									{Name: "fatal", Value: λ.False},
								})
							} else {
								if λ.IsTrue(λ.Eq(ϒext, λ.NewStr("f4m"))) {
									ϒurl_formats = λ.Call(λ.GetAttr(ϒself, "_extract_f4m_formats", nil), λ.NewArgs(
										λ.Add(ϒvideo_url, λ.NewStr("?hdcore=3.7.0&plugin=aasp-3.7.0.39.44")),
										ϒvideo_id,
									), λ.KWArgs{
										{Name: "preference", Value: λ.NewInt(0)},
										{Name: "f4m_id", Value: λ.NewStr("HDS")},
										{Name: "fatal", Value: λ.False},
									})
								} else {
									ϒmedia_type = λ.Call(ϒxpath_text, λ.NewArgs(
										ϒasset,
										λ.NewStr("./mediaType"),
										λ.NewStr("media type"),
									), λ.KWArgs{
										{Name: "default", Value: λ.NewStr("MP4")},
									})
									ϒvbr = λ.Cal(ϒint_or_none, λ.Cal(ϒxpath_text, ϒasset, λ.NewStr("./bitrateVideo"), λ.NewStr("vbr")), λ.NewInt(1000))
									ϒabr = λ.Cal(ϒint_or_none, λ.Cal(ϒxpath_text, ϒasset, λ.NewStr("./bitrateAudio"), λ.NewStr("abr")), λ.NewInt(1000))
									ϒfilesize = λ.Cal(ϒint_or_none, λ.Cal(ϒxpath_text, ϒasset, λ.NewStr("./fileSize"), λ.NewStr("file size")))
									ϒf = λ.NewDictWithTable(map[λ.Object]λ.Object{
										λ.NewStr("url"): ϒvideo_url,
										λ.NewStr("format_id"): λ.Mod(λ.NewStr("%s-%d"), λ.NewTuple(
											ϒmedia_type,
											func() λ.Object {
												if λv := ϒvbr; λ.IsTrue(λv) {
													return λv
												} else {
													return ϒabr
												}
											}(),
										)),
										λ.NewStr("filesize"):   ϒfilesize,
										λ.NewStr("abr"):        ϒabr,
										λ.NewStr("preference"): λ.NewInt(1),
									})
									if λ.IsTrue(ϒvbr) {
										ϒwidth = λ.Cal(ϒint_or_none, λ.Cal(ϒxpath_text, ϒasset, λ.NewStr("./frameWidth"), λ.NewStr("width")))
										ϒheight = λ.Cal(ϒint_or_none, λ.Cal(ϒxpath_text, ϒasset, λ.NewStr("./frameHeight"), λ.NewStr("height")))
										λ.Cal(λ.GetAttr(ϒf, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
											λ.NewStr("vbr"):    ϒvbr,
											λ.NewStr("width"):  ϒwidth,
											λ.NewStr("height"): ϒheight,
										}))
									}
									ϒurl_formats = λ.NewList(ϒf)
								}
							}
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒurl_formats))) {
								continue
							}
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒvbr))) {
								τmp4 = λ.Cal(λ.BuiltinIter, ϒurl_formats)
								for {
									if τmp5 = λ.NextDefault(τmp4, λ.AfterLast); τmp5 == λ.AfterLast {
										break
									}
									ϒf = τmp5
									ϒabr = func() λ.Object {
										if λv := λ.Cal(λ.GetAttr(ϒf, "get", nil), λ.NewStr("tbr")); λ.IsTrue(λv) {
											return λv
										} else {
											return ϒabr
										}
									}()
									if λ.IsTrue(λ.NewBool(λ.Contains(ϒf, λ.NewStr("tbr")))) {
										λ.DelItem(ϒf, λ.NewStr("tbr"))
									}
									λ.Cal(λ.GetAttr(ϒf, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
										λ.NewStr("abr"):    ϒabr,
										λ.NewStr("vcodec"): λ.NewStr("none"),
									}))
								}
							}
							λ.Cal(λ.GetAttr(ϒformats, "extend", nil), ϒurl_formats)
						}
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒdescription = λ.Cal(ϒxpath_text, ϒdoc, λ.NewStr("./broadcast/broadcastDescription"), λ.NewStr("description"))
					ϒtimestamp = λ.Cal(ϒparse_iso8601, λ.Call(ϒxpath_text, λ.NewArgs(
						ϒdoc,
						λ.NewList(
							λ.NewStr("./broadcast/broadcastDate"),
							λ.NewStr("./broadcast/broadcastStartDate"),
							λ.NewStr("./broadcast/broadcastEndDate"),
						),
						λ.NewStr("timestamp"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					}))
					ϒduration = λ.Cal(ϒparse_duration, λ.Cal(ϒxpath_text, ϒdoc, λ.NewStr("./duration"), λ.NewStr("duration")))
					ϒuploader = λ.Cal(ϒxpath_text, ϒdoc, λ.NewStr("./rights"), λ.NewStr("uploader"))
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("title"):       ϒtitle,
						λ.NewStr("description"): ϒdescription,
						λ.NewStr("timestamp"):   ϒtimestamp,
						λ.NewStr("duration"):    ϒduration,
						λ.NewStr("uploader"):    ϒuploader,
						λ.NewStr("formats"):     ϒformats,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        MDRIE__TESTS,
				λ.NewStr("_VALID_URL"):    MDRIE__VALID_URL,
				λ.NewStr("_real_extract"): MDRIE__real_extract,
			})
		}())
	})
}

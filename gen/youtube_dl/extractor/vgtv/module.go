// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * vgtv/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/vgtv.py
 */

package vgtv

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωxstream "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/xstream"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	BTArticleIE       λ.Object
	BTVestlendingenIE λ.Object
	ExtractorError    λ.Object
	InfoExtractor     λ.Object
	VGTVIE            λ.Object
	XstreamIE         λ.Object
	ϒfloat_or_none    λ.Object
	ϒtry_get          λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		XstreamIE = Ωxstream.XstreamIE
		ExtractorError = Ωutils.ExtractorError
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒtry_get = Ωutils.ϒtry_get
		VGTVIE = λ.Cal(λ.TypeType, λ.NewStr("VGTVIE"), λ.NewTuple(XstreamIE), func() λ.Dict {
			var (
				VGTVIE__APP_NAME_TO_VENDOR λ.Object
				VGTVIE__GEO_BYPASS         λ.Object
				VGTVIE__HOST_TO_APPNAME    λ.Object
				VGTVIE__TESTS              λ.Object
				VGTVIE__VALID_URL          λ.Object
				VGTVIE__real_extract       λ.Object
			)
			VGTVIE__GEO_BYPASS = λ.False
			VGTVIE__HOST_TO_APPNAME = λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("vgtv.no"):                λ.NewStr("vgtv"),
				λ.NewStr("bt.no/tv"):               λ.NewStr("bttv"),
				λ.NewStr("aftenbladet.no/tv"):      λ.NewStr("satv"),
				λ.NewStr("fvn.no/fvntv"):           λ.NewStr("fvntv"),
				λ.NewStr("aftenposten.no/webtv"):   λ.NewStr("aptv"),
				λ.NewStr("ap.vgtv.no/webtv"):       λ.NewStr("aptv"),
				λ.NewStr("tv.aftonbladet.se/abtv"): λ.NewStr("abtv"),
				λ.NewStr("www.aftonbladet.se/tv"):  λ.NewStr("abtv"),
			})
			VGTVIE__APP_NAME_TO_VENDOR = λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("vgtv"):  λ.NewStr("vgtv"),
				λ.NewStr("bttv"):  λ.NewStr("bt"),
				λ.NewStr("satv"):  λ.NewStr("sa"),
				λ.NewStr("fvntv"): λ.NewStr("fvn"),
				λ.NewStr("aptv"):  λ.NewStr("ap"),
				λ.NewStr("abtv"):  λ.NewStr("ab"),
			})
			VGTVIE__VALID_URL = λ.Mod(λ.NewStr("(?x)\n                    (?:https?://(?:www\\.)?\n                    (?P<host>\n                        %s\n                    )\n                    /?\n                    (?:\n                        (?:\\#!/)?(?:video|live)/|\n                        embed?.*id=|\n                        a(?:rticles)?/\n                    )|\n                    (?P<appname>\n                        %s\n                    ):)\n                    (?P<id>\\d+)\n                    "), λ.NewTuple(
				λ.Cal(λ.GetAttr(λ.NewStr("|"), "join", nil), λ.Cal(λ.GetAttr(VGTVIE__HOST_TO_APPNAME, "keys", nil))),
				λ.Cal(λ.GetAttr(λ.NewStr("|"), "join", nil), λ.Cal(λ.GetAttr(VGTVIE__APP_NAME_TO_VENDOR, "keys", nil))),
			))
			VGTVIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.vgtv.no/#!/video/84196/hevnen-er-soet-episode-10-abu"),
					λ.NewStr("md5"): λ.NewStr("b8be7a234cebb840c0d512c78013e02f"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("84196"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Hevnen er søt: Episode 10 - Abu"),
						λ.NewStr("description"): λ.NewStr("md5:e25e4badb5f544b04341e14abdc72234"),
						λ.NewStr("thumbnail"):   λ.NewStr("re:^https?://.*\\.jpg"),
						λ.NewStr("duration"):    λ.NewFloat(648.0),
						λ.NewStr("timestamp"):   λ.NewInt(1404626400),
						λ.NewStr("upload_date"): λ.NewStr("20140706"),
						λ.NewStr("view_count"):  λ.IntType,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.vgtv.no/#!/live/100764/opptak-vgtv-foelger-em-kvalifiseringen"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("100764"),
						λ.NewStr("ext"):         λ.NewStr("flv"),
						λ.NewStr("title"):       λ.NewStr("OPPTAK: VGTV følger EM-kvalifiseringen"),
						λ.NewStr("description"): λ.NewStr("md5:3772d9c0dc2dff92a886b60039a7d4d3"),
						λ.NewStr("thumbnail"):   λ.NewStr("re:^https?://.*\\.jpg"),
						λ.NewStr("duration"):    λ.NewFloat(9103.0),
						λ.NewStr("timestamp"):   λ.NewInt(1410113864),
						λ.NewStr("upload_date"): λ.NewStr("20140907"),
						λ.NewStr("view_count"):  λ.IntType,
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
					λ.NewStr("skip"): λ.NewStr("Video is no longer available"),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.vgtv.no/#!/live/113063/direkte-v75-fra-solvalla"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("113063"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("V75 fra Solvalla 30.05.15"),
						λ.NewStr("description"): λ.NewStr("md5:b3743425765355855f88e096acc93231"),
						λ.NewStr("thumbnail"):   λ.NewStr("re:^https?://.*\\.jpg"),
						λ.NewStr("duration"):    λ.NewInt(25966),
						λ.NewStr("timestamp"):   λ.NewInt(1432975582),
						λ.NewStr("upload_date"): λ.NewStr("20150530"),
						λ.NewStr("view_count"):  λ.IntType,
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.aftenposten.no/webtv/#!/video/21039/trailer-sweatshop-i-can-t-take-any-more"),
					λ.NewStr("md5"): λ.NewStr("fd828cd29774a729bf4d4425fe192972"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("21039"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("TRAILER: «SWEATSHOP» - I can´t take any more"),
						λ.NewStr("description"): λ.NewStr("md5:21891f2b0dd7ec2f78d84a50e54f8238"),
						λ.NewStr("duration"):    λ.NewInt(66),
						λ.NewStr("timestamp"):   λ.NewInt(1417002452),
						λ.NewStr("upload_date"): λ.NewStr("20141126"),
						λ.NewStr("view_count"):  λ.IntType,
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://www.bt.no/tv/#!/video/100250/norling-dette-er-forskjellen-paa-1-divisjon-og-eliteserien"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://ap.vgtv.no/webtv#!/video/111084/de-nye-bysyklene-lettere-bedre-gir-stoerre-hjul-og-feste-til-mobil"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://www.vgtv.no/#!/video/127205/inside-the-mind-of-favela-funk"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://tv.aftonbladet.se/abtv/articles/36015"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://www.aftonbladet.se/tv/a/36015"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("abtv:140026"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://www.vgtv.no/video/84196/hevnen-er-soet-episode-10-abu"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			VGTVIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒappname     λ.Object
						ϒdata        λ.Object
						ϒentry       λ.Object
						ϒf4m_formats λ.Object
						ϒformat_info λ.Object
						ϒformats     λ.Object
						ϒhdcore_sign λ.Object
						ϒhds_url     λ.Object
						ϒhls_url     λ.Object
						ϒhost        λ.Object
						ϒinfo        λ.Object
						ϒis_live     λ.Object
						ϒmobj        λ.Object
						ϒmp4_url     λ.Object
						ϒmp4_urls    λ.Object
						ϒproperties  λ.Object
						ϒself        = λargs[0]
						ϒstream_type λ.Object
						ϒstreams     λ.Object
						ϒtbr         λ.Object
						ϒurl         = λargs[1]
						ϒvendor      λ.Object
						ϒvideo_id    λ.Object
						τmp0         λ.Object
						τmp1         λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("id"))
					ϒhost = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("host"))
					ϒappname = func() λ.Object {
						if λ.IsTrue(ϒhost) {
							return λ.GetItem(λ.GetAttr(ϒself, "_HOST_TO_APPNAME", nil), ϒhost)
						} else {
							return λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("appname"))
						}
					}()
					ϒvendor = λ.GetItem(λ.GetAttr(ϒself, "_APP_NAME_TO_VENDOR", nil), ϒappname)
					ϒdata = λ.Cal(λ.GetAttr(ϒself, "_download_json", nil), λ.Mod(λ.NewStr("http://svp.vg.no/svp/api/v1/%s/assets/%s?appName=%s-website"), λ.NewTuple(
						ϒvendor,
						ϒvideo_id,
						ϒappname,
					)), ϒvideo_id, λ.NewStr("Downloading media JSON"))
					if λ.IsTrue(λ.Eq(λ.Cal(λ.GetAttr(ϒdata, "get", nil), λ.NewStr("status")), λ.NewStr("inactive"))) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.NewStr("Video %s is no longer available"), ϒvideo_id)), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒinfo = λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("formats"): λ.NewList(),
					})
					if λ.IsTrue(λ.Eq(λ.Cal(λ.BuiltinLen, ϒvideo_id), λ.NewInt(5))) {
						if λ.IsTrue(λ.Eq(ϒappname, λ.NewStr("bttv"))) {
							ϒinfo = λ.Cal(λ.GetAttr(ϒself, "_extract_video_info", nil), λ.NewStr("btno"), ϒvideo_id)
						}
					}
					ϒstreams = λ.GetItem(ϒdata, λ.NewStr("streamUrls"))
					ϒstream_type = λ.Cal(λ.GetAttr(ϒdata, "get", nil), λ.NewStr("streamType"))
					ϒis_live = λ.Eq(ϒstream_type, λ.NewStr("live"))
					ϒformats = λ.NewList()
					ϒhls_url = λ.Cal(λ.GetAttr(ϒstreams, "get", nil), λ.NewStr("hls"))
					if λ.IsTrue(ϒhls_url) {
						λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
							ϒhls_url,
							ϒvideo_id,
							λ.NewStr("mp4"),
						), λ.KWArgs{
							{Name: "entry_protocol", Value: func() λ.Object {
								if λ.IsTrue(ϒis_live) {
									return λ.NewStr("m3u8")
								} else {
									return λ.NewStr("m3u8_native")
								}
							}()},
							{Name: "m3u8_id", Value: λ.NewStr("hls")},
							{Name: "fatal", Value: λ.False},
						}))
					}
					ϒhds_url = λ.Cal(λ.GetAttr(ϒstreams, "get", nil), λ.NewStr("hds"))
					if λ.IsTrue(ϒhds_url) {
						ϒhdcore_sign = λ.NewStr("hdcore=3.7.0")
						ϒf4m_formats = λ.Call(λ.GetAttr(ϒself, "_extract_f4m_formats", nil), λ.NewArgs(
							λ.Add(ϒhds_url, λ.Mod(λ.NewStr("?%s"), ϒhdcore_sign)),
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "f4m_id", Value: λ.NewStr("hds")},
							{Name: "fatal", Value: λ.False},
						})
						if λ.IsTrue(ϒf4m_formats) {
							τmp0 = λ.Cal(λ.BuiltinIter, ϒf4m_formats)
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒentry = τmp1
								λ.Cal(λ.GetAttr(ϒentry, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("extra_param_to_segment_url"): ϒhdcore_sign,
								}))
								λ.Cal(λ.GetAttr(ϒformats, "append", nil), ϒentry)
							}
						}
					}
					ϒmp4_urls = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒstreams, "get", nil), λ.NewStr("pseudostreaming")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewList()
						}
					}()
					ϒmp4_url = λ.Cal(λ.GetAttr(ϒstreams, "get", nil), λ.NewStr("mp4"))
					if λ.IsTrue(ϒmp4_url) {
						λ.Cal(λ.GetAttr(ϒmp4_urls, "append", nil), ϒmp4_url)
					}
					τmp0 = λ.Cal(λ.BuiltinIter, ϒmp4_urls)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒmp4_url = τmp1
						ϒformat_info = λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"): ϒmp4_url,
						})
						ϒmobj = λ.Cal(Ωre.ϒsearch, λ.NewStr("(\\d+)_(\\d+)_(\\d+)"), ϒmp4_url)
						if λ.IsTrue(ϒmobj) {
							ϒtbr = λ.Cal(λ.IntType, λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewInt(3)))
							λ.Cal(λ.GetAttr(ϒformat_info, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("width"):     λ.Cal(λ.IntType, λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewInt(1))),
								λ.NewStr("height"):    λ.Cal(λ.IntType, λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewInt(2))),
								λ.NewStr("tbr"):       ϒtbr,
								λ.NewStr("format_id"): λ.Mod(λ.NewStr("mp4-%s"), ϒtbr),
							}))
						}
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), ϒformat_info)
					}
					λ.Cal(λ.GetAttr(λ.GetItem(ϒinfo, λ.NewStr("formats")), "extend", nil), ϒformats)
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.GetItem(ϒinfo, λ.NewStr("formats"))))) {
						ϒproperties = λ.Cal(ϒtry_get, ϒdata, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("streamConfiguration")), λ.NewStr("properties"))
							}), λ.ListType)
						if λ.IsTrue(func() λ.Object {
							if λv := ϒproperties; !λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(λ.Contains(ϒproperties, λ.NewStr("geoblocked")))
							}
						}()) {
							panic(λ.Raise(λ.Call(λ.GetAttr(ϒself, "raise_geo_restricted", nil), nil, λ.KWArgs{
								{Name: "countries", Value: λ.NewList(λ.Cal(λ.GetAttr(λ.GetItem(λ.Cal(λ.GetAttr(λ.GetItem(λ.Cal(λ.GetAttr(ϒhost, "rpartition", nil), λ.NewStr(".")), λ.Neg(λ.NewInt(1))), "partition", nil), λ.NewStr("/")), λ.NewInt(0)), "upper", nil)))},
							})))
						}
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), λ.GetItem(ϒinfo, λ.NewStr("formats")))
					λ.Cal(λ.GetAttr(ϒinfo, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"): ϒvideo_id,
						λ.NewStr("title"): func() λ.Object {
							if λ.IsTrue(ϒis_live) {
								return λ.Cal(λ.GetAttr(ϒself, "_live_title", nil), λ.GetItem(ϒdata, λ.NewStr("title")))
							} else {
								return λ.GetItem(ϒdata, λ.NewStr("title"))
							}
						}(),
						λ.NewStr("description"): λ.GetItem(ϒdata, λ.NewStr("description")),
						λ.NewStr("thumbnail"):   λ.Add(λ.GetItem(λ.GetItem(ϒdata, λ.NewStr("images")), λ.NewStr("main")), λ.NewStr("?t[]=900x506q80")),
						λ.NewStr("timestamp"):   λ.GetItem(ϒdata, λ.NewStr("published")),
						λ.NewStr("duration"):    λ.Cal(ϒfloat_or_none, λ.GetItem(ϒdata, λ.NewStr("duration")), λ.NewInt(1000)),
						λ.NewStr("view_count"):  λ.GetItem(ϒdata, λ.NewStr("displays")),
						λ.NewStr("is_live"):     ϒis_live,
					}))
					return ϒinfo
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_APP_NAME_TO_VENDOR"): VGTVIE__APP_NAME_TO_VENDOR,
				λ.NewStr("_GEO_BYPASS"):         VGTVIE__GEO_BYPASS,
				λ.NewStr("_HOST_TO_APPNAME"):    VGTVIE__HOST_TO_APPNAME,
				λ.NewStr("_TESTS"):              VGTVIE__TESTS,
				λ.NewStr("_VALID_URL"):          VGTVIE__VALID_URL,
				λ.NewStr("_real_extract"):       VGTVIE__real_extract,
			})
		}())
		BTArticleIE = λ.Cal(λ.TypeType, λ.NewStr("BTArticleIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				BTArticleIE__VALID_URL λ.Object
			)
			BTArticleIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?bt\\.no/(?:[^/]+/)+(?P<id>[^/]+)-\\d+\\.html")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): BTArticleIE__VALID_URL,
			})
		}())
		BTVestlendingenIE = λ.Cal(λ.TypeType, λ.NewStr("BTVestlendingenIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				BTVestlendingenIE__VALID_URL λ.Object
			)
			BTVestlendingenIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?bt\\.no/spesial/vestlendingen/#!/(?P<id>\\d+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): BTVestlendingenIE__VALID_URL,
			})
		}())
	})
}

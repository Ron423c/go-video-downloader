// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * raywenderlich/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/raywenderlich.py
 */

package raywenderlich

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωvimeo "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/vimeo"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError        λ.Object
	InfoExtractor         λ.Object
	RayWenderlichCourseIE λ.Object
	RayWenderlichIE       λ.Object
	VimeoIE               λ.Object
	ϒcompat_str           λ.Object
	ϒint_or_none          λ.Object
	ϒmerge_dicts          λ.Object
	ϒtry_get              λ.Object
	ϒunescapeHTML         λ.Object
	ϒunified_timestamp    λ.Object
	ϒurljoin              λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		VimeoIE = Ωvimeo.VimeoIE
		ϒcompat_str = Ωcompat.ϒcompat_str
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒmerge_dicts = Ωutils.ϒmerge_dicts
		ϒtry_get = Ωutils.ϒtry_get
		ϒunescapeHTML = Ωutils.ϒunescapeHTML
		ϒunified_timestamp = Ωutils.ϒunified_timestamp
		ϒurljoin = Ωutils.ϒurljoin
		RayWenderlichIE = λ.Cal(λ.TypeType, λ.NewStr("RayWenderlichIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				RayWenderlichIE__TESTS            λ.Object
				RayWenderlichIE__VALID_URL        λ.Object
				RayWenderlichIE__extract_video_id λ.Object
				RayWenderlichIE__real_extract     λ.Object
			)
			RayWenderlichIE__VALID_URL = λ.NewStr("(?x)\n                    https?://\n                        (?:\n                            videos\\.raywenderlich\\.com/courses|\n                            (?:www\\.)?raywenderlich\\.com\n                        )/\n                        (?P<course_id>[^/]+)/lessons/(?P<id>\\d+)\n                    ")
			RayWenderlichIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.raywenderlich.com/3530-testing-in-ios/lessons/1"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("248377018"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Introduction"),
						λ.NewStr("description"): λ.NewStr("md5:804d031b3efa9fcb49777d512d74f722"),
						λ.NewStr("timestamp"):   λ.NewInt(1513906277),
						λ.NewStr("upload_date"): λ.NewStr("20171222"),
						λ.NewStr("duration"):    λ.NewInt(133),
						λ.NewStr("uploader"):    λ.NewStr("Ray Wenderlich"),
						λ.NewStr("uploader_id"): λ.NewStr("user3304672"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("noplaylist"):    λ.True,
						λ.NewStr("skip_download"): λ.True,
					}),
					λ.NewStr("add_ie"):            λ.NewList(λ.Cal(λ.GetAttr(VimeoIE, "ie_key", nil))),
					λ.NewStr("expected_warnings"): λ.NewList(λ.NewStr("HTTP Error 403: Forbidden")),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://videos.raywenderlich.com/courses/105-testing-in-ios/lessons/1"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			RayWenderlichIE__extract_video_id = λ.NewFunction("_extract_video_id",
				[]λ.Param{
					{Name: "data"},
					{Name: "lesson_id"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcontent   λ.Object
						ϒcontents  λ.Object
						ϒdata      = λargs[0]
						ϒgroup     λ.Object
						ϒgroups    λ.Object
						ϒlesson_id = λargs[1]
						ϒordinal   λ.Object
						ϒvideo_id  λ.Object
						τmp0       λ.Object
						τmp1       λ.Object
						τmp2       λ.Object
						τmp3       λ.Object
					)
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒdata))) {
						return λ.None
					}
					ϒgroups = func() λ.Object {
						if λv := λ.Cal(ϒtry_get, ϒdata, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(ϒx, λ.NewStr("groups"))
							}), λ.ListType); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewList()
						}
					}()
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒgroups))) {
						return λ.None
					}
					τmp0 = λ.Cal(λ.BuiltinIter, ϒgroups)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒgroup = τmp1
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒgroup, λ.DictType)))) {
							continue
						}
						ϒcontents = func() λ.Object {
							if λv := λ.Cal(ϒtry_get, ϒdata, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(ϒx, λ.NewStr("contents"))
								}), λ.ListType); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewList()
							}
						}()
						τmp2 = λ.Cal(λ.BuiltinIter, ϒcontents)
						for {
							if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
								break
							}
							ϒcontent = τmp3
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒcontent, λ.DictType)))) {
								continue
							}
							ϒordinal = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒcontent, "get", nil), λ.NewStr("ordinal")))
							if λ.IsTrue(λ.Ne(ϒordinal, ϒlesson_id)) {
								continue
							}
							ϒvideo_id = λ.Cal(λ.GetAttr(ϒcontent, "get", nil), λ.NewStr("identifier"))
							if λ.IsTrue(ϒvideo_id) {
								return λ.Cal(ϒcompat_str, ϒvideo_id)
							}
						}
					}
					return λ.None
				})
			RayWenderlichIE__extract_video_id = λ.Cal(λ.StaticMethodType, RayWenderlichIE__extract_video_id)
			RayWenderlichIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcourse_id  λ.Object
						ϒcsrf_token λ.Object
						ϒdata       λ.Object
						ϒdisplay_id λ.Object
						ϒheaders    λ.Object
						ϒinfo       λ.Object
						ϒlesson_id  λ.Object
						ϒmobj       λ.Object
						ϒself       = λargs[0]
						ϒthumbnail  λ.Object
						ϒurl        = λargs[1]
						ϒvideo      λ.Object
						ϒvideo_id   λ.Object
						ϒvimeo_id   λ.Object
						ϒwebpage    λ.Object
						τmp0        λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					τmp0 = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("course_id"), λ.NewStr("id"))
					ϒcourse_id = λ.GetItem(τmp0, λ.NewInt(0))
					ϒlesson_id = λ.GetItem(τmp0, λ.NewInt(1))
					ϒdisplay_id = λ.Mod(λ.NewStr("%s/%s"), λ.NewTuple(
						ϒcourse_id,
						ϒlesson_id,
					))
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒdisplay_id)
					ϒthumbnail = func() λ.Object {
						if λv := λ.Call(λ.GetAttr(ϒself, "_og_search_thumbnail", nil), λ.NewArgs(ϒwebpage), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewStr("twitter:image"), ϒwebpage, λ.NewStr("thumbnail"))
						}
					}()
					if λ.IsTrue(λ.NewBool(λ.Contains(ϒwebpage, λ.NewStr(">Subscribe to unlock")))) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.NewStr("This content is only available for subscribers")), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒinfo = λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("thumbnail"): ϒthumbnail,
					})
					ϒvimeo_id = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("data-vimeo-id=[\"\\'](\\d+)"),
						ϒwebpage,
						λ.NewStr("vimeo id"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒvimeo_id))) {
						ϒdata = λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
							λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
								λ.NewStr("data-collection=([\"\\'])(?P<data>{.+?})\\1"),
								ϒwebpage,
								λ.NewStr("data collection"),
							), λ.KWArgs{
								{Name: "default", Value: λ.NewStr("{}")},
								{Name: "group", Value: λ.NewStr("data")},
							}),
							ϒdisplay_id,
						), λ.KWArgs{
							{Name: "transform_source", Value: ϒunescapeHTML},
							{Name: "fatal", Value: λ.False},
						})
						ϒvideo_id = func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒself, "_extract_video_id", nil), ϒdata, ϒlesson_id); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("/videos/(\\d+)/"), ϒthumbnail, λ.NewStr("video id"))
							}
						}()
						ϒheaders = λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("Referer"):          ϒurl,
							λ.NewStr("X-Requested-With"): λ.NewStr("XMLHttpRequest"),
						})
						ϒcsrf_token = λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
							λ.NewStr("csrf-token"),
							ϒwebpage,
							λ.NewStr("csrf token"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						})
						if λ.IsTrue(ϒcsrf_token) {
							λ.SetItem(ϒheaders, λ.NewStr("X-CSRF-Token"), ϒcsrf_token)
						}
						ϒvideo = λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
							λ.Mod(λ.NewStr("https://videos.raywenderlich.com/api/v1/videos/%s.json"), ϒvideo_id),
							ϒdisplay_id,
						), λ.KWArgs{
							{Name: "headers", Value: ϒheaders},
						}), λ.NewStr("video"))
						ϒvimeo_id = λ.GetItem(λ.GetItem(λ.GetItem(ϒvideo, λ.NewStr("clips")), λ.NewInt(0)), λ.NewStr("provider_id"))
						λ.Cal(λ.GetAttr(ϒinfo, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("_type"): λ.NewStr("url_transparent"),
							λ.NewStr("title"): λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("name")),
							λ.NewStr("description"): func() λ.Object {
								if λv := λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("description")); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("meta_description"))
								}
							}(),
							λ.NewStr("duration"):  λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("duration"))),
							λ.NewStr("timestamp"): λ.Cal(ϒunified_timestamp, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("created_at"))),
						}))
					}
					return λ.Cal(ϒmerge_dicts, ϒinfo, λ.Call(λ.GetAttr(ϒself, "url_result", nil), λ.NewArgs(λ.Cal(λ.GetAttr(VimeoIE, "_smuggle_referrer", nil), λ.Mod(λ.NewStr("https://player.vimeo.com/video/%s"), ϒvimeo_id), ϒurl)), λ.KWArgs{
						{Name: "ie", Value: λ.Cal(λ.GetAttr(VimeoIE, "ie_key", nil))},
						{Name: "video_id", Value: ϒvimeo_id},
					}))
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):            RayWenderlichIE__TESTS,
				λ.NewStr("_VALID_URL"):        RayWenderlichIE__VALID_URL,
				λ.NewStr("_extract_video_id"): RayWenderlichIE__extract_video_id,
				λ.NewStr("_real_extract"):     RayWenderlichIE__real_extract,
			})
		}())
		RayWenderlichCourseIE = λ.Cal(λ.TypeType, λ.NewStr("RayWenderlichCourseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				RayWenderlichCourseIE__VALID_URL λ.Object
				RayWenderlichCourseIE_suitable   λ.Object
			)
			RayWenderlichCourseIE__VALID_URL = λ.NewStr("(?x)\n                    https?://\n                        (?:\n                            videos\\.raywenderlich\\.com/courses|\n                            (?:www\\.)?raywenderlich\\.com\n                        )/\n                        (?P<id>[^/]+)\n                    ")
			RayWenderlichCourseIE_suitable = λ.NewFunction("suitable",
				[]λ.Param{
					{Name: "cls"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls = λargs[0]
						ϒurl = λargs[1]
					)
					return func() λ.Object {
						if λ.IsTrue(λ.Cal(λ.GetAttr(RayWenderlichIE, "suitable", nil), ϒurl)) {
							return λ.False
						} else {
							return λ.Cal(λ.GetAttr(λ.Cal(λ.SuperType, RayWenderlichCourseIE, ϒcls), "suitable", nil), ϒurl)
						}
					}()
				})
			RayWenderlichCourseIE_suitable = λ.Cal(λ.ClassMethodType, RayWenderlichCourseIE_suitable)
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): RayWenderlichCourseIE__VALID_URL,
				λ.NewStr("suitable"):   RayWenderlichCourseIE_suitable,
			})
		}())
	})
}

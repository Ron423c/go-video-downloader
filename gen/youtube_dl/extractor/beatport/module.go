// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * beatport/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/beatport.py
 */

package beatport

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	BeatportIE    λ.Object
	InfoExtractor λ.Object
	ϒcompat_str   λ.Object
	ϒint_or_none  λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒint_or_none = Ωutils.ϒint_or_none
		BeatportIE = λ.Cal(λ.TypeType, λ.NewStr("BeatportIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				BeatportIE__VALID_URL    λ.Object
				BeatportIE__real_extract λ.Object
			)
			BeatportIE__VALID_URL = λ.NewStr("https?://(?:www\\.|pro\\.)?beatport\\.com/track/(?P<display_id>[^/]+)/(?P<id>[0-9]+)")
			BeatportIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdisplay_id λ.Object
						ϒext        λ.Object
						ϒfmt        λ.Object
						ϒformats    λ.Object
						ϒimage      λ.Object
						ϒimage_url  λ.Object
						ϒimages     λ.Object
						ϒinfo       λ.Object
						ϒmobj       λ.Object
						ϒname       λ.Object
						ϒplayables  λ.Object
						ϒself       = λargs[0]
						ϒtitle      λ.Object
						ϒtrack      λ.Object
						ϒtrack_id   λ.Object
						ϒurl        = λargs[1]
						ϒwebpage    λ.Object
						τmp0        λ.Object
						τmp1        λ.Object
						τmp2        λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒtrack_id = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("id"))
					ϒdisplay_id = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("display_id"))
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒdisplay_id)
					ϒplayables = λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("window\\.Playables\\s*=\\s*({.+?});"),
						ϒwebpage,
						λ.NewStr("playables info"),
					), λ.KWArgs{
						{Name: "flags", Value: Ωre.DOTALL},
					}), ϒtrack_id)
					ϒtrack = λ.Cal(λ.BuiltinNext, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒt   λ.Object
									τmp0 λ.Object
									τmp1 λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.GetItem(ϒplayables, λ.NewStr("tracks")))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒt = τmp1
									if λ.IsTrue(λ.Eq(λ.GetItem(ϒt, λ.NewStr("id")), λ.Cal(λ.IntType, ϒtrack_id))) {
										λgy.Yield(ϒt)
									}
								}
								return λ.None
							})
						})))
					ϒtitle = λ.Add(λ.Add(λ.Cal(λ.GetAttr(λ.NewStr(", "), "join", nil), λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒa   λ.Object
									τmp0 λ.Object
									τmp1 λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.GetItem(ϒtrack, λ.NewStr("artists")))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒa = τmp1
									λgy.Yield(λ.GetItem(ϒa, λ.NewStr("name")))
								}
								return λ.None
							})
						}))), λ.NewStr(" - ")), λ.GetItem(ϒtrack, λ.NewStr("name")))
					if λ.IsTrue(λ.GetItem(ϒtrack, λ.NewStr("mix"))) {
						τmp0 = λ.IAdd(ϒtitle, λ.Add(λ.Add(λ.NewStr(" ("), λ.GetItem(ϒtrack, λ.NewStr("mix"))), λ.NewStr(")")))
						ϒtitle = τmp0
					}
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(λ.GetItem(ϒtrack, λ.NewStr("preview")), "items", nil)))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒext = λ.GetItem(τmp2, λ.NewInt(0))
						ϒinfo = λ.GetItem(τmp2, λ.NewInt(1))
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.GetItem(ϒinfo, λ.NewStr("url"))))) {
							continue
						}
						ϒfmt = λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"):       λ.GetItem(ϒinfo, λ.NewStr("url")),
							λ.NewStr("ext"):       ϒext,
							λ.NewStr("format_id"): ϒext,
							λ.NewStr("vcodec"):    λ.NewStr("none"),
						})
						if λ.IsTrue(λ.Eq(ϒext, λ.NewStr("mp3"))) {
							λ.SetItem(ϒfmt, λ.NewStr("preference"), λ.NewInt(0))
							λ.SetItem(ϒfmt, λ.NewStr("acodec"), λ.NewStr("mp3"))
							λ.SetItem(ϒfmt, λ.NewStr("abr"), λ.NewInt(96))
							λ.SetItem(ϒfmt, λ.NewStr("asr"), λ.NewInt(44100))
						} else {
							if λ.IsTrue(λ.Eq(ϒext, λ.NewStr("mp4"))) {
								λ.SetItem(ϒfmt, λ.NewStr("preference"), λ.NewInt(1))
								λ.SetItem(ϒfmt, λ.NewStr("acodec"), λ.NewStr("aac"))
								λ.SetItem(ϒfmt, λ.NewStr("abr"), λ.NewInt(96))
								λ.SetItem(ϒfmt, λ.NewStr("asr"), λ.NewInt(44100))
							}
						}
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), ϒfmt)
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒimages = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(λ.GetItem(ϒtrack, λ.NewStr("images")), "items", nil)))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒname = λ.GetItem(τmp2, λ.NewInt(0))
						ϒinfo = λ.GetItem(τmp2, λ.NewInt(1))
						ϒimage_url = λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("url"))
						if λ.IsTrue(func() λ.Object {
							if λv := λ.Eq(ϒname, λ.NewStr("dynamic")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(!λ.IsTrue(ϒimage_url))
							}
						}()) {
							continue
						}
						ϒimage = λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("id"):     ϒname,
							λ.NewStr("url"):    ϒimage_url,
							λ.NewStr("height"): λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("height"))),
							λ.NewStr("width"):  λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("width"))),
						})
						λ.Cal(λ.GetAttr(ϒimages, "append", nil), ϒimage)
					}
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"): func() λ.Object {
							if λv := λ.Cal(ϒcompat_str, λ.Cal(λ.GetAttr(ϒtrack, "get", nil), λ.NewStr("id"))); λ.IsTrue(λv) {
								return λv
							} else {
								return ϒtrack_id
							}
						}(),
						λ.NewStr("display_id"): func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒtrack, "get", nil), λ.NewStr("slug")); λ.IsTrue(λv) {
								return λv
							} else {
								return ϒdisplay_id
							}
						}(),
						λ.NewStr("title"):      ϒtitle,
						λ.NewStr("formats"):    ϒformats,
						λ.NewStr("thumbnails"): ϒimages,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"):    BeatportIE__VALID_URL,
				λ.NewStr("_real_extract"): BeatportIE__real_extract,
			})
		}())
	})
}

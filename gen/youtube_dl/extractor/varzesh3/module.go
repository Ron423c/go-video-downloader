// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * varzesh3/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/varzesh3.py
 */

package varzesh3

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor                 λ.Object
	Varzesh3IE                    λ.Object
	ϒclean_html                   λ.Object
	ϒcompat_parse_qs              λ.Object
	ϒcompat_urllib_parse_urlparse λ.Object
	ϒremove_start                 λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_urllib_parse_urlparse = Ωcompat.ϒcompat_urllib_parse_urlparse
		ϒcompat_parse_qs = Ωcompat.ϒcompat_parse_qs
		ϒclean_html = Ωutils.ϒclean_html
		ϒremove_start = Ωutils.ϒremove_start
		Varzesh3IE = λ.Cal(λ.TypeType, λ.NewStr("Varzesh3IE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				Varzesh3IE__VALID_URL    λ.Object
				Varzesh3IE__real_extract λ.Object
			)
			Varzesh3IE__VALID_URL = λ.NewStr("https?://(?:www\\.)?video\\.varzesh3\\.com/(?:[^/]+/)+(?P<id>[^/]+)/?")
			Varzesh3IE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdescription   λ.Object
						ϒdisplay_id    λ.Object
						ϒfb_sharer_url λ.Object
						ϒself          = λargs[0]
						ϒsharer_params λ.Object
						ϒthumbnail     λ.Object
						ϒtitle         λ.Object
						ϒurl           = λargs[1]
						ϒvideo_id      λ.Object
						ϒvideo_url     λ.Object
						ϒwebpage       λ.Object
					)
					ϒdisplay_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒdisplay_id)
					ϒvideo_url = λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("<source[^>]+src=\"([^\"]+)\""), ϒwebpage, λ.NewStr("video url"))
					ϒtitle = λ.Cal(ϒremove_start, λ.Cal(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewStr("<title>([^<]+)</title>"), ϒwebpage, λ.NewStr("title")), λ.NewStr("ویدیو ورزش 3 | "))
					ϒdescription = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
						λ.NewStr("(?s)<div class=\"matn\">(.+?)</div>"),
						ϒwebpage,
						λ.NewStr("description"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(λ.NewBool(ϒdescription == λ.None)) {
						ϒdescription = λ.Cal(ϒclean_html, λ.Cal(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewStr("description"), ϒwebpage))
					}
					ϒthumbnail = λ.Call(λ.GetAttr(ϒself, "_og_search_thumbnail", nil), λ.NewArgs(ϒwebpage), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(λ.NewBool(ϒthumbnail == λ.None)) {
						ϒfb_sharer_url = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewStr("<a[^>]+href=\"(https?://www\\.facebook\\.com/sharer/sharer\\.php?[^\"]+)\""),
							ϒwebpage,
							λ.NewStr("facebook sharer URL"),
						), λ.KWArgs{
							{Name: "fatal", Value: λ.False},
						})
						ϒsharer_params = λ.Cal(ϒcompat_parse_qs, λ.GetAttr(λ.Cal(ϒcompat_urllib_parse_urlparse, ϒfb_sharer_url), "query", nil))
						ϒthumbnail = λ.GetItem(λ.Cal(λ.GetAttr(ϒsharer_params, "get", nil), λ.NewStr("p[images][0]"), λ.NewList(λ.None)), λ.NewInt(0))
					}
					ϒvideo_id = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("<link[^>]+rel='(?:canonical|shortlink)'[^>]+href='/\\?p=([^']+)'"),
						ϒwebpage,
						ϒdisplay_id,
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(λ.NewBool(ϒvideo_id == λ.None)) {
						ϒvideo_id = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewStr("var\\s+VideoId\\s*=\\s*(\\d+);"),
							ϒwebpage,
							λ.NewStr("video id"),
						), λ.KWArgs{
							{Name: "default", Value: ϒdisplay_id},
						})
					}
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("url"):         ϒvideo_url,
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("title"):       ϒtitle,
						λ.NewStr("description"): ϒdescription,
						λ.NewStr("thumbnail"):   ϒthumbnail,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"):    Varzesh3IE__VALID_URL,
				λ.NewStr("_real_extract"): Varzesh3IE__real_extract,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * metacafe/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/metacafe.py
 */

package metacafe

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError                 λ.Object
	InfoExtractor                  λ.Object
	MetacafeIE                     λ.Object
	ϒcompat_parse_qs               λ.Object
	ϒcompat_urllib_parse_unquote   λ.Object
	ϒcompat_urllib_parse_urlencode λ.Object
	ϒdetermine_ext                 λ.Object
	ϒget_element_by_attribute      λ.Object
	ϒint_or_none                   λ.Object
	ϒmimetype2ext                  λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_parse_qs = Ωcompat.ϒcompat_parse_qs
		ϒcompat_urllib_parse_unquote = Ωcompat.ϒcompat_urllib_parse_unquote
		ϒcompat_urllib_parse_urlencode = Ωcompat.ϒcompat_urllib_parse_urlencode
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒget_element_by_attribute = Ωutils.ϒget_element_by_attribute
		ϒmimetype2ext = Ωutils.ϒmimetype2ext
		MetacafeIE = λ.Cal(λ.TypeType, λ.NewStr("MetacafeIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				MetacafeIE_IE_NAME       λ.Object
				MetacafeIE__TESTS        λ.Object
				MetacafeIE__VALID_URL    λ.Object
				MetacafeIE__real_extract λ.Object
			)
			MetacafeIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?metacafe\\.com/watch/(?P<video_id>[^/]+)/(?P<display_id>[^/?#]+)")
			MetacafeIE_IE_NAME = λ.NewStr("metacafe")
			MetacafeIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("add_ie"): λ.NewList(λ.NewStr("Youtube")),
					λ.NewStr("url"):    λ.NewStr("http://metacafe.com/watch/yt-_aUehQsCQtM/the_electric_company_short_i_pbs_kids_go/"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("_aUehQsCQtM"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("upload_date"): λ.NewStr("20090102"),
						λ.NewStr("title"):       λ.NewStr("The Electric Company | \"Short I\" | PBS KIDS GO!"),
						λ.NewStr("description"): λ.NewStr("md5:2439a8ef6d5a70e380c22f5ad323e5a8"),
						λ.NewStr("uploader"):    λ.NewStr("PBS"),
						λ.NewStr("uploader_id"): λ.NewStr("PBS"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.metacafe.com/watch/11121940/news_stuff_you_wont_do_with_your_playstation_4/"),
					λ.NewStr("md5"): λ.NewStr("6e0bca200eaad2552e6915ed6fd4d9ad"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("11121940"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("News: Stuff You Won't Do with Your PlayStation 4"),
						λ.NewStr("uploader"):    λ.NewStr("ign"),
						λ.NewStr("description"): λ.NewStr("Sony released a massive FAQ on the PlayStation Blog detailing the PS4's capabilities and limitations."),
					}),
					λ.NewStr("skip"): λ.NewStr("Page is temporarily unavailable."),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.metacafe.com/watch/2155630/adult_art_by_david_hart_156/"),
					λ.NewStr("md5"): λ.NewStr("b06082c5079bbdcde677a6291fbdf376"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("2155630"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Adult Art By David Hart 156"),
						λ.NewStr("uploader"):    λ.NewStr("63346"),
						λ.NewStr("description"): λ.NewStr("md5:9afac8fc885252201ad14563694040fc"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.metacafe.com/watch/an-dVVXnuY7Jh77J/the_andromeda_strain_1971_stop_the_bomb_part_3/"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("an-dVVXnuY7Jh77J"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("The Andromeda Strain (1971): Stop the Bomb Part 3"),
						λ.NewStr("uploader"):    λ.NewStr("AnyClip"),
						λ.NewStr("description"): λ.NewStr("md5:cbef0460d31e3807f6feb4e7a5952e5b"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.metacafe.com/watch/5186653/bbc_internal_christmas_tape_79_uncensored_outtakes_etc/"),
					λ.NewStr("md5"): λ.NewStr("98dde7c1a35d02178e8ab7560fe8bd09"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("5186653"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("BBC INTERNAL Christmas Tape '79 - UNCENSORED Outtakes, Etc."),
						λ.NewStr("uploader"):    λ.NewStr("Dwayne Pipe"),
						λ.NewStr("description"): λ.NewStr("md5:950bf4c581e2c059911fa3ffbe377e4b"),
						λ.NewStr("age_limit"):   λ.NewInt(18),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.metacafe.com/watch/cb-8VD4r_Zws8VP/open_this_is_face_the_nation_february_9/"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("8VD4r_Zws8VP"),
						λ.NewStr("ext"):         λ.NewStr("flv"),
						λ.NewStr("title"):       λ.NewStr("Open: This is Face the Nation, February 9"),
						λ.NewStr("description"): λ.NewStr("md5:8a9ceec26d1f7ed6eab610834cc1a476"),
						λ.NewStr("duration"):    λ.NewInt(96),
						λ.NewStr("uploader"):    λ.NewStr("CBSI-NEW"),
						λ.NewStr("upload_date"): λ.NewStr("20140209"),
						λ.NewStr("timestamp"):   λ.NewInt(1391959800),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.metacafe.com/watch/mv-Wy7ZU/my_week_with_marilyn_do_you_love_me/"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("mv-Wy7ZU"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("My Week with Marilyn - Do You Love Me?"),
						λ.NewStr("description"): λ.NewStr("From the movie My Week with Marilyn - Colin (Eddie Redmayne) professes his love to Marilyn (Michelle Williams) and gets her to promise to return to set and finish the movie."),
						λ.NewStr("uploader"):    λ.NewStr("movie_trailers"),
						λ.NewStr("duration"):    λ.NewInt(176),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.NewStr("requires rtmpdump"),
					}),
				}),
			)
			MetacafeIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒage_limit      λ.Object
						ϒbase_url       λ.Object
						ϒbr             λ.Object
						ϒconfig_doc     λ.Object
						ϒconfig_url     λ.Object
						ϒdescription    λ.Object
						ϒdisplay_id     λ.Object
						ϒduration       λ.Object
						ϒerror          λ.Object
						ϒext            λ.Object
						ϒext_id         λ.Object
						ϒflashvars      λ.Object
						ϒformats        λ.Object
						ϒgdaKey         λ.Object
						ϒheaders        λ.Object
						ϒm_external     λ.Object
						ϒmediaURL       λ.Object
						ϒmobj           λ.Object
						ϒplay_path      λ.Object
						ϒplayer_url     λ.Object
						ϒprefix         λ.Object
						ϒself           = λargs[0]
						ϒsmil_doc       λ.Object
						ϒsmil_url       λ.Object
						ϒsource         λ.Object
						ϒsource_url     λ.Object
						ϒthumbnail      λ.Object
						ϒurl            = λargs[1]
						ϒvardict        λ.Object
						ϒvideo_ext      λ.Object
						ϒvideo_id       λ.Object
						ϒvideo_title    λ.Object
						ϒvideo_uploader λ.Object
						ϒvideo_url      λ.Object
						ϒvn             λ.Object
						ϒwebpage        λ.Object
						τmp0            λ.Object
						τmp1            λ.Object
					)
					τmp0 = λ.Cal(λ.GetAttr(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups", nil))
					ϒvideo_id = λ.GetItem(τmp0, λ.NewInt(0))
					ϒdisplay_id = λ.GetItem(τmp0, λ.NewInt(1))
					ϒm_external = λ.Cal(Ωre.ϒmatch, λ.NewStr("^(\\w{2})-(.*)$"), ϒvideo_id)
					if λ.IsTrue(λ.NewBool(ϒm_external != λ.None)) {
						τmp0 = λ.Cal(λ.GetAttr(ϒm_external, "groups", nil))
						ϒprefix = λ.GetItem(τmp0, λ.NewInt(0))
						ϒext_id = λ.GetItem(τmp0, λ.NewInt(1))
						if λ.IsTrue(λ.Eq(ϒprefix, λ.NewStr("yt"))) {
							return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), λ.Mod(λ.NewStr("http://www.youtube.com/watch?v=%s"), ϒext_id), λ.NewStr("Youtube"))
						}
						if λ.IsTrue(λ.Eq(ϒprefix, λ.NewStr("cb"))) {
							return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), λ.Mod(λ.NewStr("theplatform:%s"), ϒext_id), λ.NewStr("ThePlatform"))
						}
					}
					ϒheaders = λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("Cookie"): λ.Mod(λ.NewStr("user=%s; "), λ.Cal(ϒcompat_urllib_parse_urlencode, λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("ffilter"): λ.False,
						}))),
					})
					if λ.IsTrue(λ.Cal(λ.GetAttr(ϒvideo_id, "startswith", nil), λ.NewStr("an-"))) {
						τmp0 = λ.IAdd(λ.GetItem(ϒheaders, λ.NewStr("Cookie")), λ.NewStr("flashVersion=0; "))
						λ.SetItem(ϒheaders, λ.NewStr("Cookie"), τmp0)
					}
					ϒwebpage = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
						ϒurl,
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "headers", Value: ϒheaders},
					})
					ϒerror = λ.Cal(ϒget_element_by_attribute, λ.NewStr("class"), λ.NewStr("notfound-page-title"), ϒwebpage)
					if λ.IsTrue(ϒerror) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(ϒerror), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒvideo_title = func() λ.Object {
						if λv := λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
							λ.NewList(
								λ.NewStr("og:title"),
								λ.NewStr("twitter:title"),
							),
							ϒwebpage,
							λ.NewStr("title"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("<h1>(.*?)</h1>"), ϒwebpage, λ.NewStr("title"))
						}
					}()
					λ.Cal(λ.GetAttr(ϒself, "report_extraction", nil), ϒvideo_id)
					ϒvideo_url = λ.None
					ϒmobj = λ.Cal(Ωre.ϒsearch, λ.NewStr("(?m)&(?:media|video)URL=([^&]+)"), ϒwebpage)
					if λ.IsTrue(λ.NewBool(ϒmobj != λ.None)) {
						ϒmediaURL = λ.Cal(ϒcompat_urllib_parse_unquote, λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewInt(1)))
						ϒvideo_ext = λ.Cal(ϒdetermine_ext, ϒmediaURL)
						ϒmobj = λ.Cal(Ωre.ϒsearch, λ.NewStr("(?m)&gdaKey=(.*?)&"), ϒwebpage)
						if λ.IsTrue(λ.NewBool(ϒmobj == λ.None)) {
							ϒvideo_url = ϒmediaURL
						} else {
							ϒgdaKey = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewInt(1))
							ϒvideo_url = λ.Mod(λ.NewStr("%s?__gda__=%s"), λ.NewTuple(
								ϒmediaURL,
								ϒgdaKey,
							))
						}
					}
					if λ.IsTrue(λ.NewBool(ϒvideo_url == λ.None)) {
						ϒmobj = λ.Cal(Ωre.ϒsearch, λ.NewStr("<video src=\"([^\"]+)\""), ϒwebpage)
						if λ.IsTrue(ϒmobj) {
							ϒvideo_url = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewInt(1))
							ϒvideo_ext = λ.NewStr("mp4")
						}
					}
					if λ.IsTrue(λ.NewBool(ϒvideo_url == λ.None)) {
						ϒflashvars = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewStr(" name=\"flashvars\" value=\"(.*?)\""),
							ϒwebpage,
							λ.NewStr("flashvars"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						})
						if λ.IsTrue(ϒflashvars) {
							ϒvardict = λ.Cal(ϒcompat_parse_qs, ϒflashvars)
							if λ.IsTrue(λ.NewBool(!λ.Contains(ϒvardict, λ.NewStr("mediaData")))) {
								panic(λ.Raise(λ.Cal(ExtractorError, λ.NewStr("Unable to extract media URL"))))
							}
							ϒmobj = λ.Cal(Ωre.ϒsearch, λ.NewStr("\"mediaURL\":\"(?P<mediaURL>http.*?)\",(.*?)\"key\":\"(?P<key>.*?)\""), λ.GetItem(λ.GetItem(ϒvardict, λ.NewStr("mediaData")), λ.NewInt(0)))
							if λ.IsTrue(λ.NewBool(ϒmobj == λ.None)) {
								panic(λ.Raise(λ.Cal(ExtractorError, λ.NewStr("Unable to extract media URL"))))
							}
							ϒmediaURL = λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("mediaURL")), "replace", nil), λ.NewStr("\\/"), λ.NewStr("/"))
							ϒvideo_url = λ.Mod(λ.NewStr("%s?__gda__=%s"), λ.NewTuple(
								ϒmediaURL,
								λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("key")),
							))
							ϒvideo_ext = λ.Cal(ϒdetermine_ext, ϒvideo_url)
						}
					}
					if λ.IsTrue(λ.NewBool(ϒvideo_url == λ.None)) {
						ϒplayer_url = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewStr("swfobject\\.embedSWF\\('([^']+)'"),
							ϒwebpage,
							λ.NewStr("config URL"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						})
						if λ.IsTrue(ϒplayer_url) {
							ϒconfig_url = λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("config=(.+)$"), ϒplayer_url, λ.NewStr("config URL"))
							ϒconfig_doc = λ.Call(λ.GetAttr(ϒself, "_download_xml", nil), λ.NewArgs(
								ϒconfig_url,
								ϒvideo_id,
							), λ.KWArgs{
								{Name: "note", Value: λ.NewStr("Downloading video config")},
							})
							ϒsmil_url = λ.GetItem(λ.GetAttr(λ.Cal(λ.GetAttr(ϒconfig_doc, "find", nil), λ.NewStr(".//properties")), "attrib", nil), λ.NewStr("smil_file"))
							ϒsmil_doc = λ.Call(λ.GetAttr(ϒself, "_download_xml", nil), λ.NewArgs(
								ϒsmil_url,
								ϒvideo_id,
							), λ.KWArgs{
								{Name: "note", Value: λ.NewStr("Downloading SMIL document")},
							})
							ϒbase_url = λ.GetItem(λ.GetAttr(λ.Cal(λ.GetAttr(ϒsmil_doc, "find", nil), λ.NewStr("./head/meta")), "attrib", nil), λ.NewStr("base"))
							ϒvideo_url = λ.NewList()
							τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒsmil_doc, "findall", nil), λ.NewStr(".//video")))
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒvn = τmp1
								ϒbr = λ.Cal(λ.IntType, λ.GetItem(λ.GetAttr(ϒvn, "attrib", nil), λ.NewStr("system-bitrate")))
								ϒplay_path = λ.GetItem(λ.GetAttr(ϒvn, "attrib", nil), λ.NewStr("src"))
								λ.Cal(λ.GetAttr(ϒvideo_url, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("format_id"):  λ.Mod(λ.NewStr("smil-%d"), ϒbr),
									λ.NewStr("url"):        ϒbase_url,
									λ.NewStr("play_path"):  ϒplay_path,
									λ.NewStr("page_url"):   ϒurl,
									λ.NewStr("player_url"): ϒplayer_url,
									λ.NewStr("ext"):        λ.GetItem(λ.Cal(λ.GetAttr(ϒplay_path, "partition", nil), λ.NewStr(":")), λ.NewInt(0)),
								}))
							}
						}
					}
					if λ.IsTrue(λ.NewBool(ϒvideo_url == λ.None)) {
						ϒflashvars = λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
							λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
								λ.NewStr("flashvars\\s*=\\s*({.*});"),
								ϒwebpage,
								λ.NewStr("flashvars"),
							), λ.KWArgs{
								{Name: "default", Value: λ.None},
							}),
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "fatal", Value: λ.False},
						})
						if λ.IsTrue(ϒflashvars) {
							ϒvideo_url = λ.NewList()
							τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒflashvars, "get", nil), λ.NewStr("sources")))
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒsource = τmp1
								ϒsource_url = λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("src"))
								if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒsource_url))) {
									continue
								}
								ϒext = func() λ.Object {
									if λv := λ.Cal(ϒmimetype2ext, λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("type"))); λ.IsTrue(λv) {
										return λv
									} else {
										return λ.Cal(ϒdetermine_ext, ϒsource_url)
									}
								}()
								if λ.IsTrue(λ.Eq(ϒext, λ.NewStr("m3u8"))) {
									λ.Cal(λ.GetAttr(ϒvideo_url, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
										ϒsource_url,
										ϒvideo_id,
										λ.NewStr("mp4"),
										λ.NewStr("m3u8_native"),
									), λ.KWArgs{
										{Name: "m3u8_id", Value: λ.NewStr("hls")},
										{Name: "fatal", Value: λ.False},
									}))
								} else {
									λ.Cal(λ.GetAttr(ϒvideo_url, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
										λ.NewStr("url"): ϒsource_url,
										λ.NewStr("ext"): ϒext,
									}))
								}
							}
						}
					}
					if λ.IsTrue(λ.NewBool(ϒvideo_url == λ.None)) {
						panic(λ.Raise(λ.Cal(ExtractorError, λ.NewStr("Unsupported video type"))))
					}
					ϒdescription = λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
						λ.NewList(
							λ.NewStr("og:description"),
							λ.NewStr("twitter:description"),
							λ.NewStr("description"),
						),
						ϒwebpage,
						λ.NewStr("title"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					ϒthumbnail = λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
						λ.NewList(
							λ.NewStr("og:image"),
							λ.NewStr("twitter:image"),
						),
						ϒwebpage,
						λ.NewStr("title"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					ϒvideo_uploader = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
						λ.NewStr("submitter=(.*?);|googletag\\.pubads\\(\\)\\.setTargeting\\(\"(?:channel|submiter)\",\"([^\"]+)\"\\);"),
						ϒwebpage,
						λ.NewStr("uploader nickname"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					ϒduration = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
						λ.NewStr("video:duration"),
						ϒwebpage,
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					}))
					ϒage_limit = func() λ.Object {
						if λ.IsTrue(λ.Cal(Ωre.ϒsearch, λ.NewStr("(?:\"contentRating\":|\"rating\",)\"restricted\""), ϒwebpage)) {
							return λ.NewInt(18)
						} else {
							return λ.NewInt(0)
						}
					}()
					if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒvideo_url, λ.ListType)) {
						ϒformats = ϒvideo_url
					} else {
						ϒformats = λ.NewList(λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"): ϒvideo_url,
							λ.NewStr("ext"): ϒvideo_ext,
						}))
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("display_id"):  ϒdisplay_id,
						λ.NewStr("description"): ϒdescription,
						λ.NewStr("uploader"):    ϒvideo_uploader,
						λ.NewStr("title"):       ϒvideo_title,
						λ.NewStr("thumbnail"):   ϒthumbnail,
						λ.NewStr("age_limit"):   ϒage_limit,
						λ.NewStr("formats"):     ϒformats,
						λ.NewStr("duration"):    ϒduration,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):       MetacafeIE_IE_NAME,
				λ.NewStr("_TESTS"):        MetacafeIE__TESTS,
				λ.NewStr("_VALID_URL"):    MetacafeIE__VALID_URL,
				λ.NewStr("_real_extract"): MetacafeIE__real_extract,
			})
		}())
	})
}

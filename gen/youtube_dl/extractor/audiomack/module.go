// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * audiomack/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/audiomack.py
 */

package audiomack

import (
	Ωtime "github.com/tenta-browser/go-video-downloader/gen/time"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωsoundcloud "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/soundcloud"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	AudiomackAlbumIE λ.Object
	AudiomackIE      λ.Object
	ExtractorError   λ.Object
	InfoExtractor    λ.Object
	SoundcloudIE     λ.Object
	ϒcompat_str      λ.Object
	ϒurl_basename    λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		SoundcloudIE = Ωsoundcloud.SoundcloudIE
		ϒcompat_str = Ωcompat.ϒcompat_str
		ExtractorError = Ωutils.ExtractorError
		ϒurl_basename = Ωutils.ϒurl_basename
		AudiomackIE = λ.Cal(λ.TypeType, λ.NewStr("AudiomackIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				AudiomackIE_IE_NAME       λ.Object
				AudiomackIE__VALID_URL    λ.Object
				AudiomackIE__real_extract λ.Object
			)
			AudiomackIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?audiomack\\.com/song/(?P<id>[\\w/-]+)")
			AudiomackIE_IE_NAME = λ.NewStr("audiomack")
			AudiomackIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒalbum_url_tag λ.Object
						ϒapi_response  λ.Object
						ϒself          = λargs[0]
						ϒurl           = λargs[1]
					)
					ϒalbum_url_tag = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒapi_response = λ.Cal(λ.GetAttr(ϒself, "_download_json", nil), λ.Mod(λ.NewStr("http://www.audiomack.com/api/music/url/song/%s?extended=1&_=%d"), λ.NewTuple(
						ϒalbum_url_tag,
						λ.Cal(Ωtime.ϒtime),
					)), ϒalbum_url_tag)
					if λ.IsTrue(func() λ.Object {
						if λv := λ.NewBool(!λ.Contains(ϒapi_response, λ.NewStr("url"))); λ.IsTrue(λv) {
							return λv
						} else if λv := λ.NewBool(!λ.IsTrue(λ.GetItem(ϒapi_response, λ.NewStr("url")))); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewBool(λ.Contains(ϒapi_response, λ.NewStr("error")))
						}
					}()) {
						panic(λ.Raise(λ.Cal(ExtractorError, λ.Mod(λ.NewStr("Invalid url %s"), ϒurl))))
					}
					if λ.IsTrue(λ.Cal(λ.GetAttr(SoundcloudIE, "suitable", nil), λ.GetItem(ϒapi_response, λ.NewStr("url")))) {
						return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), λ.GetItem(ϒapi_response, λ.NewStr("url")), λ.Cal(λ.GetAttr(SoundcloudIE, "ie_key", nil)))
					}
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):       λ.Cal(ϒcompat_str, λ.Cal(λ.GetAttr(ϒapi_response, "get", nil), λ.NewStr("id"), ϒalbum_url_tag)),
						λ.NewStr("uploader"): λ.Cal(λ.GetAttr(ϒapi_response, "get", nil), λ.NewStr("artist")),
						λ.NewStr("title"):    λ.Cal(λ.GetAttr(ϒapi_response, "get", nil), λ.NewStr("title")),
						λ.NewStr("url"):      λ.GetItem(ϒapi_response, λ.NewStr("url")),
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):       AudiomackIE_IE_NAME,
				λ.NewStr("_VALID_URL"):    AudiomackIE__VALID_URL,
				λ.NewStr("_real_extract"): AudiomackIE__real_extract,
			})
		}())
		AudiomackAlbumIE = λ.Cal(λ.TypeType, λ.NewStr("AudiomackAlbumIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				AudiomackAlbumIE__VALID_URL λ.Object
			)
			AudiomackAlbumIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?audiomack\\.com/album/(?P<id>[\\w/-]+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): AudiomackAlbumIE__VALID_URL,
			})
		}())
	})
}

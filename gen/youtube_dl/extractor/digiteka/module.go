// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * digiteka/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/digiteka.py
 */

package digiteka

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	DigitekaIE    λ.Object
	InfoExtractor λ.Object
	ϒint_or_none  λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒint_or_none = Ωutils.ϒint_or_none
		DigitekaIE = λ.Cal(λ.TypeType, λ.StrLiteral("DigitekaIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				DigitekaIE__VALID_URL    λ.Object
				DigitekaIE__real_extract λ.Object
			)
			DigitekaIE__VALID_URL = λ.StrLiteral("(?x)\n        https?://(?:www\\.)?(?:digiteka\\.net|ultimedia\\.com)/\n        (?:\n            deliver/\n            (?P<embed_type>\n                generic|\n                musique\n            )\n            (?:/[^/]+)*/\n            (?:\n                src|\n                article\n            )|\n            default/index/video\n            (?P<site_type>\n                generic|\n                music\n            )\n            /id\n        )/(?P<id>[\\d+a-z]+)")
			DigitekaIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdeliver_info λ.Object
						ϒduration     λ.Object
						ϒformats      λ.Object
						ϒjwconf       λ.Object
						ϒmobj         λ.Object
						ϒself         = λargs[0]
						ϒsource       λ.Object
						ϒthumbnail    λ.Object
						ϒtimestamp    λ.Object
						ϒtitle        λ.Object
						ϒuploader_id  λ.Object
						ϒurl          = λargs[1]
						ϒvideo_id     λ.Object
						ϒvideo_type   λ.Object
						ϒyt_id        λ.Object
						τmp0          λ.Object
						τmp1          λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒvideo_id = λ.Calm(ϒmobj, "group", λ.StrLiteral("id"))
					ϒvideo_type = func() λ.Object {
						if λv := λ.Calm(ϒmobj, "group", λ.StrLiteral("embed_type")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒmobj, "group", λ.StrLiteral("site_type"))
						}
					}()
					if λ.IsTrue(λ.Eq(ϒvideo_type, λ.StrLiteral("music"))) {
						ϒvideo_type = λ.StrLiteral("musique")
					}
					ϒdeliver_info = λ.Calm(ϒself, "_download_json", λ.Mod(λ.StrLiteral("http://www.ultimedia.com/deliver/video?video=%s&topic=%s"), λ.NewTuple(
						ϒvideo_id,
						ϒvideo_type,
					)), ϒvideo_id)
					ϒyt_id = λ.Calm(ϒdeliver_info, "get", λ.StrLiteral("yt_id"))
					if λ.IsTrue(ϒyt_id) {
						return λ.Calm(ϒself, "url_result", ϒyt_id, λ.StrLiteral("Youtube"))
					}
					ϒjwconf = λ.GetItem(ϒdeliver_info, λ.StrLiteral("jwconf"))
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.GetItem(λ.GetItem(λ.GetItem(ϒjwconf, λ.StrLiteral("playlist")), λ.IntLiteral(0)), λ.StrLiteral("sources")))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒsource = τmp1
						λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
							"url":       λ.GetItem(ϒsource, λ.StrLiteral("file")),
							"format_id": λ.Calm(ϒsource, "get", λ.StrLiteral("label")),
						}))
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					ϒtitle = λ.GetItem(ϒdeliver_info, λ.StrLiteral("title"))
					ϒthumbnail = λ.Calm(ϒjwconf, "get", λ.StrLiteral("image"))
					ϒduration = λ.Cal(ϒint_or_none, λ.Calm(ϒdeliver_info, "get", λ.StrLiteral("duration")))
					ϒtimestamp = λ.Cal(ϒint_or_none, λ.Calm(ϒdeliver_info, "get", λ.StrLiteral("release_time")))
					ϒuploader_id = λ.Calm(ϒdeliver_info, "get", λ.StrLiteral("owner_id"))
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒvideo_id,
						"title":       ϒtitle,
						"thumbnail":   ϒthumbnail,
						"duration":    ϒduration,
						"timestamp":   ϒtimestamp,
						"uploader_id": ϒuploader_id,
						"formats":     ϒformats,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    DigitekaIE__VALID_URL,
				"_real_extract": DigitekaIE__real_extract,
			})
		}())
	})
}

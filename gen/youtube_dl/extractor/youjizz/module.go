// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * youjizz/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/youjizz.py
 */

package youjizz

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor   λ.Object
	YouJizzIE       λ.Object
	ϒdetermine_ext  λ.Object
	ϒint_or_none    λ.Object
	ϒparse_duration λ.Object
	ϒurl_or_none    λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒurl_or_none = Ωutils.ϒurl_or_none
		YouJizzIE = λ.Cal(λ.TypeType, λ.StrLiteral("YouJizzIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				YouJizzIE__VALID_URL    λ.Object
				YouJizzIE__real_extract λ.Object
			)
			YouJizzIE__VALID_URL = λ.StrLiteral("https?://(?:\\w+\\.)?youjizz\\.com/videos/(?:[^/#?]*-(?P<id>\\d+)\\.html|embed/(?P<embed_id>\\d+))")
			YouJizzIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒduration   λ.Object
						ϒencoding   λ.Object
						ϒencodings  λ.Object
						ϒformat_id  λ.Object
						ϒformat_url λ.Object
						ϒformats    λ.Object
						ϒheight     λ.Object
						ϒinfo_dict  λ.Object
						ϒmobj       λ.Object
						ϒself       = λargs[0]
						ϒtitle      λ.Object
						ϒuploader   λ.Object
						ϒurl        = λargs[1]
						ϒvideo_id   λ.Object
						ϒwebpage    λ.Object
						τmp0        λ.Object
						τmp1        λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒvideo_id = func() λ.Object {
						if λv := λ.Calm(ϒmobj, "group", λ.StrLiteral("id")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒmobj, "group", λ.StrLiteral("embed_id"))
						}
					}()
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒvideo_id)
					ϒtitle = λ.Calm(ϒself, "_html_search_regex", λ.StrLiteral("<title>(.+?)</title>"), ϒwebpage, λ.StrLiteral("title"))
					ϒformats = λ.NewList()
					ϒencodings = λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
						λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.StrLiteral("[Ee]ncodings\\s*=\\s*(\\[.+?\\]);\\n"),
							ϒwebpage,
							λ.StrLiteral("encodings"),
						), λ.KWArgs{
							{Name: "default", Value: λ.StrLiteral("[]")},
						}),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					τmp0 = λ.Cal(λ.BuiltinIter, ϒencodings)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒencoding = τmp1
						if !λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒencoding, λ.DictType)) {
							continue
						}
						ϒformat_url = λ.Cal(ϒurl_or_none, λ.Calm(ϒencoding, "get", λ.StrLiteral("filename")))
						if !λ.IsTrue(ϒformat_url) {
							continue
						}
						if λ.IsTrue(λ.Eq(λ.Cal(ϒdetermine_ext, ϒformat_url), λ.StrLiteral("m3u8"))) {
							λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
								ϒformat_url,
								ϒvideo_id,
								λ.StrLiteral("mp4"),
							), λ.KWArgs{
								{Name: "entry_protocol", Value: λ.StrLiteral("m3u8_native")},
								{Name: "m3u8_id", Value: λ.StrLiteral("hls")},
								{Name: "fatal", Value: λ.False},
							}))
						} else {
							ϒformat_id = func() λ.Object {
								if λv := λ.Calm(ϒencoding, "get", λ.StrLiteral("name")); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Calm(ϒencoding, "get", λ.StrLiteral("quality"))
								}
							}()
							ϒheight = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
								λ.StrLiteral("^(\\d+)[pP]"),
								ϒformat_id,
								λ.StrLiteral("height"),
							), λ.KWArgs{
								{Name: "default", Value: λ.None},
							}))
							λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
								"url":       ϒformat_url,
								"format_id": ϒformat_id,
								"height":    ϒheight,
							}))
						}
					}
					if λ.IsTrue(ϒformats) {
						ϒinfo_dict = λ.DictLiteral(map[string]λ.Object{
							"formats": ϒformats,
						})
					} else {
						ϒwebpage = λ.Calm(ϒwebpage, "replace", λ.StrLiteral("\"controls"), λ.StrLiteral("\" controls"))
						ϒinfo_dict = λ.GetItem(λ.Calm(ϒself, "_parse_html5_media_entries", ϒurl, ϒwebpage, ϒvideo_id), λ.IntLiteral(0))
					}
					ϒduration = λ.Cal(ϒparse_duration, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("<strong>Runtime:</strong>([^<]+)"),
						ϒwebpage,
						λ.StrLiteral("duration"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					}))
					ϒuploader = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("<strong>Uploaded By:.*?<a[^>]*>([^<]+)"),
						ϒwebpage,
						λ.StrLiteral("uploader"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					λ.Calm(ϒinfo_dict, "update", λ.DictLiteral(map[string]λ.Object{
						"id":        ϒvideo_id,
						"title":     ϒtitle,
						"age_limit": λ.Calm(ϒself, "_rta_search", ϒwebpage),
						"duration":  ϒduration,
						"uploader":  ϒuploader,
					}))
					return ϒinfo_dict
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    YouJizzIE__VALID_URL,
				"_real_extract": YouJizzIE__real_extract,
			})
		}())
	})
}

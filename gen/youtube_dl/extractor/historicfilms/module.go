// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * historicfilms/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/historicfilms.py
 */

package historicfilms

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	HistoricFilmsIE λ.Object
	InfoExtractor   λ.Object
	ϒparse_duration λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒparse_duration = Ωutils.ϒparse_duration
		HistoricFilmsIE = λ.Cal(λ.TypeType, λ.StrLiteral("HistoricFilmsIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				HistoricFilmsIE__VALID_URL    λ.Object
				HistoricFilmsIE__real_extract λ.Object
			)
			HistoricFilmsIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?historicfilms\\.com/(?:tapes/|play)(?P<id>\\d+)")
			HistoricFilmsIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdescription λ.Object
						ϒduration    λ.Object
						ϒself        = λargs[0]
						ϒtape_id     λ.Object
						ϒthumbnail   λ.Object
						ϒtitle       λ.Object
						ϒurl         = λargs[1]
						ϒvideo_id    λ.Object
						ϒvideo_url   λ.Object
						ϒwebpage     λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒvideo_id)
					ϒtape_id = λ.Calm(ϒself, "_search_regex", λ.NewList(
						λ.StrLiteral("class=\"tapeId\"[^>]*>([^<]+)<"),
						λ.StrLiteral("tapeId\\s*:\\s*\"([^\"]+)\""),
					), ϒwebpage, λ.StrLiteral("tape id"))
					ϒtitle = λ.Calm(ϒself, "_og_search_title", ϒwebpage)
					ϒdescription = λ.Calm(ϒself, "_og_search_description", ϒwebpage)
					ϒthumbnail = func() λ.Object {
						if λv := λ.Calm(ϒself, "_html_search_meta", λ.StrLiteral("thumbnailUrl"), ϒwebpage, λ.StrLiteral("thumbnails")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒself, "_og_search_thumbnail", ϒwebpage)
						}
					}()
					ϒduration = λ.Cal(ϒparse_duration, λ.Calm(ϒself, "_html_search_meta", λ.StrLiteral("duration"), ϒwebpage, λ.StrLiteral("duration")))
					ϒvideo_url = λ.Mod(λ.StrLiteral("http://www.historicfilms.com/video/%s_%s_web.mov"), λ.NewTuple(
						ϒtape_id,
						ϒvideo_id,
					))
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒvideo_id,
						"url":         ϒvideo_url,
						"title":       ϒtitle,
						"description": ϒdescription,
						"thumbnail":   ϒthumbnail,
						"duration":    ϒduration,
					})
				})
			return λ.DictLiteral(map[string]λ.Object{
				"_VALID_URL":    HistoricFilmsIE__VALID_URL,
				"_real_extract": HistoricFilmsIE__real_extract,
			})
		}())
	})
}

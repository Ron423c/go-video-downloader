// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * historicfilms/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/historicfilms.py
 */

package historicfilms

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	HistoricFilmsIE λ.Object
	InfoExtractor   λ.Object
	ϒparse_duration λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒparse_duration = Ωutils.ϒparse_duration
		HistoricFilmsIE = λ.Cal(λ.TypeType, λ.NewStr("HistoricFilmsIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				HistoricFilmsIE__TEST         λ.Object
				HistoricFilmsIE__VALID_URL    λ.Object
				HistoricFilmsIE__real_extract λ.Object
			)
			HistoricFilmsIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?historicfilms\\.com/(?:tapes/|play)(?P<id>\\d+)")
			HistoricFilmsIE__TEST = λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("url"): λ.NewStr("http://www.historicfilms.com/tapes/4728"),
				λ.NewStr("md5"): λ.NewStr("d4a437aec45d8d796a38a215db064e9a"),
				λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("id"):          λ.NewStr("4728"),
					λ.NewStr("ext"):         λ.NewStr("mov"),
					λ.NewStr("title"):       λ.NewStr("Historic Films: GP-7"),
					λ.NewStr("description"): λ.NewStr("md5:1a86a0f3ac54024e419aba97210d959a"),
					λ.NewStr("thumbnail"):   λ.NewStr("re:^https?://.*\\.jpg$"),
					λ.NewStr("duration"):    λ.NewInt(2096),
				}),
			})
			HistoricFilmsIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdescription λ.Object
						ϒduration    λ.Object
						ϒself        = λargs[0]
						ϒtape_id     λ.Object
						ϒthumbnail   λ.Object
						ϒtitle       λ.Object
						ϒurl         = λargs[1]
						ϒvideo_id    λ.Object
						ϒvideo_url   λ.Object
						ϒwebpage     λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					ϒtape_id = λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewList(
						λ.NewStr("class=\"tapeId\"[^>]*>([^<]+)<"),
						λ.NewStr("tapeId\\s*:\\s*\"([^\"]+)\""),
					), ϒwebpage, λ.NewStr("tape id"))
					ϒtitle = λ.Cal(λ.GetAttr(ϒself, "_og_search_title", nil), ϒwebpage)
					ϒdescription = λ.Cal(λ.GetAttr(ϒself, "_og_search_description", nil), ϒwebpage)
					ϒthumbnail = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewStr("thumbnailUrl"), ϒwebpage, λ.NewStr("thumbnails")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒself, "_og_search_thumbnail", nil), ϒwebpage)
						}
					}()
					ϒduration = λ.Cal(ϒparse_duration, λ.Cal(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewStr("duration"), ϒwebpage, λ.NewStr("duration")))
					ϒvideo_url = λ.Mod(λ.NewStr("http://www.historicfilms.com/video/%s_%s_web.mov"), λ.NewTuple(
						ϒtape_id,
						ϒvideo_id,
					))
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("url"):         ϒvideo_url,
						λ.NewStr("title"):       ϒtitle,
						λ.NewStr("description"): ϒdescription,
						λ.NewStr("thumbnail"):   ϒthumbnail,
						λ.NewStr("duration"):    ϒduration,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TEST"):         HistoricFilmsIE__TEST,
				λ.NewStr("_VALID_URL"):    HistoricFilmsIE__VALID_URL,
				λ.NewStr("_real_extract"): HistoricFilmsIE__real_extract,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * fczenit/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/fczenit.py
 */

package fczenit

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	FczenitIE      λ.Object
	InfoExtractor  λ.Object
	ϒfloat_or_none λ.Object
	ϒint_or_none   λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		FczenitIE = λ.Cal(λ.TypeType, λ.StrLiteral("FczenitIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				FczenitIE__VALID_URL    λ.Object
				FczenitIE__real_extract λ.Object
			)
			FczenitIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?fc-zenit\\.ru/video/(?P<id>[0-9]+)")
			FczenitIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒformats  λ.Object
						ϒmsi_data λ.Object
						ϒmsi_id   λ.Object
						ϒself     = λargs[0]
						ϒtags     λ.Object
						ϒtitle    λ.Object
						ϒurl      = λargs[1]
						ϒvideo_id λ.Object
						ϒwebpage  λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒvideo_id)
					ϒmsi_id = λ.Calm(ϒself, "_search_regex", λ.StrLiteral("(?s)config\\s*=\\s*{.+?video_id\\s*:\\s*'([^']+)'"), ϒwebpage, λ.StrLiteral("msi id"))
					ϒmsi_data = λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.StrLiteral("http://player.fc-zenit.ru/msi/video"),
						ϒmsi_id,
					), λ.KWArgs{
						{Name: "query", Value: λ.DictLiteral(map[string]λ.Object{
							"video": ϒmsi_id,
						})},
					}), λ.StrLiteral("data"))
					ϒtitle = λ.GetItem(ϒmsi_data, λ.StrLiteral("name"))
					ϒformats = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒq   λ.Object
									τmp0 λ.Object
									τmp1 λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.GetItem(ϒmsi_data, λ.StrLiteral("qualities")))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒq = τmp1
									if λ.IsTrue(λ.Calm(ϒq, "get", λ.StrLiteral("url"))) {
										λgy.Yield(λ.DictLiteral(map[string]λ.Object{
											"format_id": λ.Calm(ϒq, "get", λ.StrLiteral("label")),
											"url":       λ.GetItem(ϒq, λ.StrLiteral("url")),
											"height":    λ.Cal(ϒint_or_none, λ.Calm(ϒq, "get", λ.StrLiteral("label"))),
										}))
									}
								}
								return λ.None
							})
						})))
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					ϒtags = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒtag λ.Object
									τmp0 λ.Object
									τmp1 λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒmsi_data, "get", λ.StrLiteral("tags"), λ.NewList()))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒtag = τmp1
									if λ.IsTrue(λ.Calm(ϒtag, "get", λ.StrLiteral("label"))) {
										λgy.Yield(λ.GetItem(ϒtag, λ.StrLiteral("label")))
									}
								}
								return λ.None
							})
						})))
					return λ.DictLiteral(map[string]λ.Object{
						"id":        ϒvideo_id,
						"title":     ϒtitle,
						"thumbnail": λ.Calm(ϒmsi_data, "get", λ.StrLiteral("preview")),
						"formats":   ϒformats,
						"duration":  λ.Cal(ϒfloat_or_none, λ.Calm(ϒmsi_data, "get", λ.StrLiteral("duration"))),
						"timestamp": λ.Cal(ϒint_or_none, λ.Calm(ϒmsi_data, "get", λ.StrLiteral("date"))),
						"tags":      ϒtags,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    FczenitIE__VALID_URL,
				"_real_extract": FczenitIE__real_extract,
			})
		}())
	})
}

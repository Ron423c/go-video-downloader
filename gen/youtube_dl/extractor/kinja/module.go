// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * kinja/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/kinja.py
 */

package kinja

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor                λ.Object
	KinjaEmbedIE                 λ.Object
	ϒcompat_str                  λ.Object
	ϒcompat_urllib_parse_unquote λ.Object
	ϒint_or_none                 λ.Object
	ϒparse_iso8601               λ.Object
	ϒstrip_or_none               λ.Object
	ϒtry_get                     λ.Object
	ϒunescapeHTML                λ.Object
	ϒurljoin                     λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒcompat_urllib_parse_unquote = Ωcompat.ϒcompat_urllib_parse_unquote
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		ϒstrip_or_none = Ωutils.ϒstrip_or_none
		ϒtry_get = Ωutils.ϒtry_get
		ϒunescapeHTML = Ωutils.ϒunescapeHTML
		ϒurljoin = Ωutils.ϒurljoin
		KinjaEmbedIE = λ.Cal(λ.TypeType, λ.NewStr("KinjaEmbedIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				KinjaEmbedIE__COMMON_REGEX        λ.Object
				KinjaEmbedIE__DOMAIN_REGEX        λ.Object
				KinjaEmbedIE__JWPLATFORM_PROVIDER λ.Object
				KinjaEmbedIE__PROVIDER_MAP        λ.Object
				KinjaEmbedIE__VALID_URL           λ.Object
				KinjaEmbedIE__real_extract        λ.Object
			)
			KinjaEmbedIE__DOMAIN_REGEX = λ.NewStr("(?:[^.]+\\.)?\n        (?:\n            avclub|\n            clickhole|\n            deadspin|\n            gizmodo|\n            jalopnik|\n            jezebel|\n            kinja|\n            kotaku|\n            lifehacker|\n            splinternews|\n            the(?:inventory|onion|root|takeout)\n        )\\.com")
			KinjaEmbedIE__COMMON_REGEX = λ.NewStr("/\n        (?:\n            ajax/inset|\n            embed/video\n        )/iframe\\?.*?\\bid=")
			KinjaEmbedIE__VALID_URL = λ.Mod(λ.NewStr("(?x)https?://%s%s\n        (?P<type>\n            fb|\n            imgur|\n            instagram|\n            jwp(?:layer)?-video|\n            kinjavideo|\n            mcp|\n            megaphone|\n            ooyala|\n            soundcloud(?:-playlist)?|\n            tumblr-post|\n            twitch-stream|\n            twitter|\n            ustream-channel|\n            vimeo|\n            vine|\n            youtube-(?:list|video)\n        )-(?P<id>[^&]+)"), λ.NewTuple(
				KinjaEmbedIE__DOMAIN_REGEX,
				KinjaEmbedIE__COMMON_REGEX,
			))
			KinjaEmbedIE__JWPLATFORM_PROVIDER = λ.NewTuple(
				λ.NewStr("cdn.jwplayer.com/v2/media/"),
				λ.NewStr("JWPlatform"),
			)
			KinjaEmbedIE__PROVIDER_MAP = λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("fb"): λ.NewTuple(
					λ.NewStr("facebook.com/video.php?v="),
					λ.NewStr("Facebook"),
				),
				λ.NewStr("imgur"): λ.NewTuple(
					λ.NewStr("imgur.com/"),
					λ.NewStr("Imgur"),
				),
				λ.NewStr("instagram"): λ.NewTuple(
					λ.NewStr("instagram.com/p/"),
					λ.NewStr("Instagram"),
				),
				λ.NewStr("jwplayer-video"): KinjaEmbedIE__JWPLATFORM_PROVIDER,
				λ.NewStr("jwp-video"):      KinjaEmbedIE__JWPLATFORM_PROVIDER,
				λ.NewStr("megaphone"): λ.NewTuple(
					λ.NewStr("player.megaphone.fm/"),
					λ.NewStr("Generic"),
				),
				λ.NewStr("ooyala"): λ.NewTuple(
					λ.NewStr("player.ooyala.com/player.js?embedCode="),
					λ.NewStr("Ooyala"),
				),
				λ.NewStr("soundcloud"): λ.NewTuple(
					λ.NewStr("api.soundcloud.com/tracks/"),
					λ.NewStr("Soundcloud"),
				),
				λ.NewStr("soundcloud-playlist"): λ.NewTuple(
					λ.NewStr("api.soundcloud.com/playlists/"),
					λ.NewStr("SoundcloudPlaylist"),
				),
				λ.NewStr("tumblr-post"): λ.NewTuple(
					λ.NewStr("%s.tumblr.com/post/%s"),
					λ.NewStr("Tumblr"),
				),
				λ.NewStr("twitch-stream"): λ.NewTuple(
					λ.NewStr("twitch.tv/"),
					λ.NewStr("TwitchStream"),
				),
				λ.NewStr("twitter"): λ.NewTuple(
					λ.NewStr("twitter.com/i/cards/tfw/v1/"),
					λ.NewStr("TwitterCard"),
				),
				λ.NewStr("ustream-channel"): λ.NewTuple(
					λ.NewStr("ustream.tv/embed/"),
					λ.NewStr("Ustream"),
				),
				λ.NewStr("vimeo"): λ.NewTuple(
					λ.NewStr("vimeo.com/"),
					λ.NewStr("Vimeo"),
				),
				λ.NewStr("vine"): λ.NewTuple(
					λ.NewStr("vine.co/v/"),
					λ.NewStr("Vine"),
				),
				λ.NewStr("youtube-list"): λ.NewTuple(
					λ.NewStr("youtube.com/embed/%s?list=%s"),
					λ.NewStr("YoutubePlaylist"),
				),
				λ.NewStr("youtube-video"): λ.NewTuple(
					λ.NewStr("youtube.com/embed/"),
					λ.NewStr("Youtube"),
				),
			})
			KinjaEmbedIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒblog                   λ.Object
						ϒdata                   λ.Object
						ϒfallback_rendition_url λ.Object
						ϒfmg                    λ.Object
						ϒformats                λ.Object
						ϒiptc                   λ.Object
						ϒk                      λ.Object
						ϒm3u8_url               λ.Object
						ϒplaylist_id            λ.Object
						ϒposter                 λ.Object
						ϒposter_id              λ.Object
						ϒprovider               λ.Object
						ϒrendition_url          λ.Object
						ϒresult_url             λ.Object
						ϒself                   = λargs[0]
						ϒthumbnail              λ.Object
						ϒtitle                  λ.Object
						ϒtvss_domain            λ.Object
						ϒurl                    = λargs[1]
						ϒvideo_data             λ.Object
						ϒvideo_id               λ.Object
						ϒvideo_type             λ.Object
						τmp0                    λ.Object
						τmp1                    λ.Object
					)
					τmp0 = λ.Cal(λ.GetAttr(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups", nil))
					ϒvideo_type = λ.GetItem(τmp0, λ.NewInt(0))
					ϒvideo_id = λ.GetItem(τmp0, λ.NewInt(1))
					ϒprovider = λ.Cal(λ.GetAttr(λ.GetAttr(ϒself, "_PROVIDER_MAP", nil), "get", nil), ϒvideo_type)
					if λ.IsTrue(ϒprovider) {
						ϒvideo_id = λ.Cal(ϒcompat_urllib_parse_unquote, ϒvideo_id)
						if λ.IsTrue(λ.Eq(ϒvideo_type, λ.NewStr("tumblr-post"))) {
							τmp0 = λ.Cal(λ.GetAttr(ϒvideo_id, "split", nil), λ.NewStr("-"), λ.NewInt(1))
							ϒvideo_id = λ.GetItem(τmp0, λ.NewInt(0))
							ϒblog = λ.GetItem(τmp0, λ.NewInt(1))
							ϒresult_url = λ.Mod(λ.GetItem(ϒprovider, λ.NewInt(0)), λ.NewTuple(
								ϒblog,
								ϒvideo_id,
							))
						} else {
							if λ.IsTrue(λ.Eq(ϒvideo_type, λ.NewStr("youtube-list"))) {
								τmp0 = λ.Cal(λ.GetAttr(ϒvideo_id, "split", nil), λ.NewStr("/"))
								ϒvideo_id = λ.GetItem(τmp0, λ.NewInt(0))
								ϒplaylist_id = λ.GetItem(τmp0, λ.NewInt(1))
								ϒresult_url = λ.Mod(λ.GetItem(ϒprovider, λ.NewInt(0)), λ.NewTuple(
									ϒvideo_id,
									ϒplaylist_id,
								))
							} else {
								if λ.IsTrue(λ.Eq(ϒvideo_type, λ.NewStr("ooyala"))) {
									ϒvideo_id = λ.GetItem(λ.Cal(λ.GetAttr(ϒvideo_id, "split", nil), λ.NewStr("/")), λ.NewInt(0))
								}
								ϒresult_url = λ.Add(λ.GetItem(ϒprovider, λ.NewInt(0)), ϒvideo_id)
							}
						}
						return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), λ.Add(λ.NewStr("http://"), ϒresult_url), λ.GetItem(ϒprovider, λ.NewInt(1)))
					}
					if λ.IsTrue(λ.Eq(ϒvideo_type, λ.NewStr("kinjavideo"))) {
						ϒdata = λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
							λ.NewStr("https://kinja.com/api/core/video/views/videoById"),
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "query", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("videoId"): ϒvideo_id,
							})},
						}), λ.NewStr("data"))
						ϒtitle = λ.GetItem(ϒdata, λ.NewStr("title"))
						ϒformats = λ.NewList()
						τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
							λ.NewStr("signedPlaylist"),
							λ.NewStr("streaming"),
						))
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒk = τmp1
							ϒm3u8_url = λ.Cal(λ.GetAttr(ϒdata, "get", nil), λ.Add(ϒk, λ.NewStr("Url")))
							if λ.IsTrue(ϒm3u8_url) {
								λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
									ϒm3u8_url,
									ϒvideo_id,
									λ.NewStr("mp4"),
									λ.NewStr("m3u8_native"),
								), λ.KWArgs{
									{Name: "m3u8_id", Value: λ.NewStr("hls")},
									{Name: "fatal", Value: λ.False},
								}))
							}
						}
						λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
						ϒthumbnail = λ.None
						ϒposter = func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒdata, "get", nil), λ.NewStr("poster")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewDictWithTable(map[λ.Object]λ.Object{})
							}
						}()
						ϒposter_id = λ.Cal(λ.GetAttr(ϒposter, "get", nil), λ.NewStr("id"))
						if λ.IsTrue(ϒposter_id) {
							ϒthumbnail = λ.Mod(λ.NewStr("https://i.kinja-img.com/gawker-media/image/upload/%s.%s"), λ.NewTuple(
								ϒposter_id,
								func() λ.Object {
									if λv := λ.Cal(λ.GetAttr(ϒposter, "get", nil), λ.NewStr("format")); λ.IsTrue(λv) {
										return λv
									} else {
										return λ.NewStr("jpg")
									}
								}(),
							))
						}
						return λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("id"):          ϒvideo_id,
							λ.NewStr("title"):       ϒtitle,
							λ.NewStr("description"): λ.Cal(ϒstrip_or_none, λ.Cal(λ.GetAttr(ϒdata, "get", nil), λ.NewStr("description"))),
							λ.NewStr("formats"):     ϒformats,
							λ.NewStr("tags"):        λ.Cal(λ.GetAttr(ϒdata, "get", nil), λ.NewStr("tags")),
							λ.NewStr("timestamp"): λ.Cal(ϒint_or_none, λ.Cal(ϒtry_get, ϒdata, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("postInfo")), λ.NewStr("publishTimeMillis"))
								})), λ.NewInt(1000)),
							λ.NewStr("thumbnail"): ϒthumbnail,
							λ.NewStr("uploader"):  λ.Cal(λ.GetAttr(ϒdata, "get", nil), λ.NewStr("network")),
						})
					} else {
						ϒvideo_data = λ.GetItem(λ.Cal(λ.GetAttr(ϒself, "_download_json", nil), λ.Add(λ.NewStr("https://api.vmh.univision.com/metadata/v1/content/"), ϒvideo_id), ϒvideo_id), λ.NewStr("videoMetadata"))
						ϒiptc = λ.GetItem(ϒvideo_data, λ.NewStr("photoVideoMetadataIPTC"))
						ϒtitle = λ.GetItem(λ.GetItem(ϒiptc, λ.NewStr("title")), λ.NewStr("en"))
						ϒfmg = func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("photoVideoMetadata_fmg")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewDictWithTable(map[λ.Object]λ.Object{})
							}
						}()
						ϒtvss_domain = func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒfmg, "get", nil), λ.NewStr("tvssDomain")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewStr("https://auth.univision.com")
							}
						}()
						ϒdata = λ.GetItem(λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
							λ.Add(ϒtvss_domain, λ.NewStr("/api/v3/video-auth/url-signature-tokens")),
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "query", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("mcpids"): ϒvideo_id,
							})},
						}), λ.NewStr("data")), λ.NewInt(0))
						ϒformats = λ.NewList()
						ϒrendition_url = λ.Cal(λ.GetAttr(ϒdata, "get", nil), λ.NewStr("renditionUrl"))
						if λ.IsTrue(ϒrendition_url) {
							ϒformats = λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
								ϒrendition_url,
								ϒvideo_id,
								λ.NewStr("mp4"),
								λ.NewStr("m3u8_native"),
							), λ.KWArgs{
								{Name: "m3u8_id", Value: λ.NewStr("hls")},
								{Name: "fatal", Value: λ.False},
							})
						}
						ϒfallback_rendition_url = λ.Cal(λ.GetAttr(ϒdata, "get", nil), λ.NewStr("fallbackRenditionUrl"))
						if λ.IsTrue(ϒfallback_rendition_url) {
							λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("format_id"): λ.NewStr("fallback"),
								λ.NewStr("tbr"): λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
									λ.NewStr("_(\\d+)\\.mp4"),
									ϒfallback_rendition_url,
									λ.NewStr("bitrate"),
								), λ.KWArgs{
									{Name: "default", Value: λ.None},
								})),
								λ.NewStr("url"): ϒfallback_rendition_url,
							}))
						}
						λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
						return λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("id"):    ϒvideo_id,
							λ.NewStr("title"): ϒtitle,
							λ.NewStr("thumbnail"): λ.Cal(ϒtry_get, ϒiptc, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("cloudinaryLink")), λ.NewStr("link"))
								}), ϒcompat_str),
							λ.NewStr("uploader"): λ.Cal(λ.GetAttr(ϒfmg, "get", nil), λ.NewStr("network")),
							λ.NewStr("duration"): λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒiptc, "get", nil), λ.NewStr("fileDuration"))),
							λ.NewStr("formats"):  ϒformats,
							λ.NewStr("description"): λ.Cal(ϒtry_get, ϒiptc, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("description")), λ.NewStr("en"))
								}), ϒcompat_str),
							λ.NewStr("timestamp"): λ.Cal(ϒparse_iso8601, λ.Cal(λ.GetAttr(ϒiptc, "get", nil), λ.NewStr("dateReleased"))),
						})
					}
					return λ.None
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_COMMON_REGEX"):        KinjaEmbedIE__COMMON_REGEX,
				λ.NewStr("_DOMAIN_REGEX"):        KinjaEmbedIE__DOMAIN_REGEX,
				λ.NewStr("_JWPLATFORM_PROVIDER"): KinjaEmbedIE__JWPLATFORM_PROVIDER,
				λ.NewStr("_PROVIDER_MAP"):        KinjaEmbedIE__PROVIDER_MAP,
				λ.NewStr("_VALID_URL"):           KinjaEmbedIE__VALID_URL,
				λ.NewStr("_real_extract"):        KinjaEmbedIE__real_extract,
			})
		}())
	})
}

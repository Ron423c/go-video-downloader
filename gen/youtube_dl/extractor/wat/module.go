// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * wat/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/wat.py
 */

package wat

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError   λ.Object
	HEADRequest      λ.Object
	InfoExtractor    λ.Object
	WatIE            λ.Object
	ϒcompat_str      λ.Object
	ϒint_or_none     λ.Object
	ϒunified_strdate λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ExtractorError = Ωutils.ExtractorError
		ϒunified_strdate = Ωutils.ϒunified_strdate
		HEADRequest = Ωutils.HEADRequest
		ϒint_or_none = Ωutils.ϒint_or_none
		WatIE = λ.Cal(λ.TypeType, λ.NewStr("WatIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				WatIE_IE_NAME       λ.Object
				WatIE__FORMATS      λ.Object
				WatIE__TESTS        λ.Object
				WatIE__VALID_URL    λ.Object
				WatIE__real_extract λ.Object
			)
			WatIE__VALID_URL = λ.NewStr("(?:wat:|https?://(?:www\\.)?wat\\.tv/video/.*-)(?P<id>[0-9a-z]+)")
			WatIE_IE_NAME = λ.NewStr("wat.tv")
			WatIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.wat.tv/video/soupe-figues-l-orange-aux-epices-6z1uz_2hvf7_.html"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("11713067"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Soupe de figues à l'orange et aux épices"),
						λ.NewStr("description"): λ.NewStr("Retrouvez l'émission \"Petits plats en équilibre\", diffusée le 18 août 2014."),
						λ.NewStr("upload_date"): λ.NewStr("20140819"),
						λ.NewStr("duration"):    λ.NewInt(120),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
					λ.NewStr("expected_warnings"): λ.NewList(λ.NewStr("HTTP Error 404")),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.wat.tv/video/gregory-lemarchal-voix-ange-6z1v7_6ygkj_.html"),
					λ.NewStr("md5"): λ.NewStr("b16574df2c3cd1a36ca0098f2a791925"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("11713075"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Grégory Lemarchal, une voix d'ange depuis 10 ans (1/3)"),
						λ.NewStr("upload_date"): λ.NewStr("20140816"),
					}),
					λ.NewStr("expected_warnings"): λ.NewList(λ.NewStr("Ce contenu n'est pas disponible pour l'instant.")),
				}),
			)
			WatIE__FORMATS = λ.NewTuple(
				λ.NewTuple(
					λ.NewInt(200),
					λ.NewInt(416),
					λ.NewInt(234),
				),
				λ.NewTuple(
					λ.NewInt(400),
					λ.NewInt(480),
					λ.NewInt(270),
				),
				λ.NewTuple(
					λ.NewInt(600),
					λ.NewInt(640),
					λ.NewInt(360),
				),
				λ.NewTuple(
					λ.NewInt(1200),
					λ.NewInt(640),
					λ.NewInt(360),
				),
				λ.NewTuple(
					λ.NewInt(1800),
					λ.NewInt(960),
					λ.NewInt(540),
				),
				λ.NewTuple(
					λ.NewInt(2500),
					λ.NewInt(1280),
					λ.NewInt(720),
				),
			)
			WatIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒabr                  λ.Object
						ϒalt_urls             λ.Object
						ϒchapters             λ.Object
						ϒdate_diffusion       λ.Object
						ϒduration             λ.Object
						ϒentries              λ.Object
						ϒerror_desc           λ.Object
						ϒextract_url          λ.Object
						ϒfiles                λ.Object
						ϒfirst_chapter        λ.Object
						ϒfmt_url              λ.Object
						ϒformat_id            λ.Object
						ϒformats              λ.Object
						ϒheight               λ.Object
						ϒm3u8_alt_url         λ.Object
						ϒm3u8_url             λ.Object
						ϒmanifest_urls        λ.Object
						ϒmpd_alt_url          λ.Object
						ϒmpd_url              λ.Object
						ϒremove_bitrate_limit λ.Object
						ϒself                 = λargs[0]
						ϒtbr                  λ.Object
						ϒtitle                λ.Object
						ϒupload_date          λ.Object
						ϒurl                  = λargs[1]
						ϒvbr                  λ.Object
						ϒvideo_data           λ.Object
						ϒvideo_id             λ.Object
						ϒvideo_id_for_chapter λ.Object
						ϒvideo_info           λ.Object
						ϒwidth                λ.Object
						τmp0                  λ.Object
						τmp1                  λ.Object
						τmp2                  λ.Object
						τmp3                  λ.Object
						τmp4                  λ.Object
					)
					_ = ϒextract_url
					_ = τmp0
					_ = τmp1
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒvideo_id = func() λ.Object {
						if λ.IsTrue(func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒvideo_id, "isdigit", nil)); !λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Gt(λ.Cal(λ.BuiltinLen, ϒvideo_id), λ.NewInt(6))
							}
						}()) {
							return ϒvideo_id
						} else {
							return λ.Cal(ϒcompat_str, λ.Cal(λ.IntType, ϒvideo_id, λ.NewInt(36)))
						}
					}()
					ϒvideo_data = λ.Cal(λ.GetAttr(ϒself, "_download_json", nil), λ.Add(λ.NewStr("http://www.wat.tv/interface/contentv4s/"), ϒvideo_id), ϒvideo_id)
					ϒvideo_info = λ.GetItem(ϒvideo_data, λ.NewStr("media"))
					ϒerror_desc = λ.Cal(λ.GetAttr(ϒvideo_info, "get", nil), λ.NewStr("error_desc"))
					if λ.IsTrue(ϒerror_desc) {
						λ.Cal(λ.GetAttr(ϒself, "report_warning", nil), λ.Mod(λ.NewStr("%s returned error: %s"), λ.NewTuple(
							λ.GetAttr(ϒself, "IE_NAME", nil),
							ϒerror_desc,
						)))
					}
					ϒchapters = λ.GetItem(ϒvideo_info, λ.NewStr("chapters"))
					if λ.IsTrue(ϒchapters) {
						ϒfirst_chapter = λ.GetItem(ϒchapters, λ.NewInt(0))
						ϒvideo_id_for_chapter = λ.NewFunction("video_id_for_chapter",
							[]λ.Param{
								{Name: "chapter"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒchapter = λargs[0]
								)
								return λ.GetItem(λ.Cal(λ.GetAttr(λ.GetItem(ϒchapter, λ.NewStr("tc_start")), "split", nil), λ.NewStr("-")), λ.NewInt(0))
							})
						if λ.IsTrue(λ.Ne(λ.Cal(ϒvideo_id_for_chapter, ϒfirst_chapter), ϒvideo_id)) {
							λ.Cal(λ.GetAttr(ϒself, "to_screen", nil), λ.NewStr("Multipart video detected"))
							ϒentries = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
								nil,
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
										var (
											ϒchapter λ.Object
											τmp0     λ.Object
											τmp1     λ.Object
										)
										τmp0 = λ.Cal(λ.BuiltinIter, ϒchapters)
										for {
											if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
												break
											}
											ϒchapter = τmp1
											λgy.Yield(λ.Cal(λ.GetAttr(ϒself, "url_result", nil), λ.Mod(λ.NewStr("wat:%s"), λ.Cal(ϒvideo_id_for_chapter, ϒchapter))))
										}
										return λ.None
									})
								})))
							return λ.Cal(λ.GetAttr(ϒself, "playlist_result", nil), ϒentries, ϒvideo_id, λ.GetItem(ϒvideo_info, λ.NewStr("title")))
						}
					} else {
						ϒfirst_chapter = ϒvideo_info
					}
					ϒtitle = λ.GetItem(ϒfirst_chapter, λ.NewStr("title"))
					ϒextract_url = λ.NewFunction("extract_url",
						[]λ.Param{
							{Name: "path_template"},
							{Name: "url_type"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒhead          λ.Object
								ϒpath_template = λargs[0]
								ϒred_url       λ.Object
								ϒreq_url       λ.Object
								ϒurl_type      = λargs[1]
							)
							ϒreq_url = λ.Mod(λ.NewStr("http://www.wat.tv/get/%s"), λ.Mod(ϒpath_template, ϒvideo_id))
							ϒhead = λ.Call(λ.GetAttr(ϒself, "_request_webpage", nil), λ.NewArgs(
								λ.Cal(HEADRequest, ϒreq_url),
								ϒvideo_id,
								λ.Mod(λ.NewStr("Extracting %s url"), ϒurl_type),
							), λ.KWArgs{
								{Name: "fatal", Value: λ.False},
							})
							if λ.IsTrue(ϒhead) {
								ϒred_url = λ.Cal(λ.GetAttr(ϒhead, "geturl", nil))
								if λ.IsTrue(λ.Ne(ϒreq_url, ϒred_url)) {
									return ϒred_url
								}
							}
							return λ.None
						})
					ϒremove_bitrate_limit = λ.NewFunction("remove_bitrate_limit",
						[]λ.Param{
							{Name: "manifest_url"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒmanifest_url = λargs[0]
							)
							return λ.Cal(Ωre.ϒsub, λ.NewStr("(?:max|min)_bitrate=\\d+&?"), λ.NewStr(""), ϒmanifest_url)
						})
					ϒformats = λ.NewList()
					τmp0, τmp1 = func() (λexit λ.Object, λret λ.Object) {
						defer λ.CatchMulti(
							nil,
							&λ.Catcher{ExtractorError, func(λex λ.BaseException) {
								ϒabr = λ.NewInt(64)
								τmp2 = λ.Cal(λ.BuiltinIter, λ.GetAttr(ϒself, "_FORMATS", nil))
								for {
									if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
										break
									}
									τmp4 = τmp3
									ϒvbr = λ.GetItem(τmp4, λ.NewInt(0))
									ϒwidth = λ.GetItem(τmp4, λ.NewInt(1))
									ϒheight = λ.GetItem(τmp4, λ.NewInt(2))
									ϒtbr = λ.Add(ϒvbr, ϒabr)
									ϒformat_id = λ.Mod(λ.NewStr("http-%s"), ϒtbr)
									ϒfmt_url = λ.Mod(λ.NewStr("http://dnl.adv.tf1.fr/2/USP-0x0/%s/%s/%s/ssm/%s-%s-64k.mp4"), λ.NewTuple(
										λ.GetItem(ϒvideo_id, λ.NewSlice(λ.Neg(λ.NewInt(4)), λ.Neg(λ.NewInt(2)), λ.None)),
										λ.GetItem(ϒvideo_id, λ.NewSlice(λ.Neg(λ.NewInt(2)), λ.None, λ.None)),
										ϒvideo_id,
										ϒvideo_id,
										ϒvbr,
									))
									if λ.IsTrue(λ.Cal(λ.GetAttr(ϒself, "_is_valid_url", nil), ϒfmt_url, ϒvideo_id, ϒformat_id)) {
										λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
											λ.NewStr("format_id"): ϒformat_id,
											λ.NewStr("url"):       ϒfmt_url,
											λ.NewStr("vbr"):       ϒvbr,
											λ.NewStr("abr"):       ϒabr,
											λ.NewStr("width"):     ϒwidth,
											λ.NewStr("height"):    ϒheight,
										}))
									}
								}
							}},
						)
						ϒalt_urls = λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "manifest_url"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒmanifest_url = λargs[0]
								)
								return λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
									nil,
									0, false, false,
									func(λargs []λ.Object) λ.Object {
										return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
											var (
												ϒrepl λ.Object
												τmp0  λ.Object
												τmp1  λ.Object
											)
											τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
												λ.NewStr(""),
												λ.NewStr("ssm"),
											))
											for {
												if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
													break
												}
												ϒrepl = τmp1
												λgy.Yield(λ.Cal(Ωre.ϒsub, λ.NewStr("(?:wdv|ssm)?\\.ism/"), λ.Add(ϒrepl, λ.NewStr(".ism/")), ϒmanifest_url))
											}
											return λ.None
										})
									})))
							})
						ϒmanifest_urls = λ.Cal(λ.GetAttr(ϒself, "_download_json", nil), λ.Add(λ.NewStr("http://www.wat.tv/get/webhtml/"), ϒvideo_id), ϒvideo_id)
						ϒm3u8_url = λ.Cal(λ.GetAttr(ϒmanifest_urls, "get", nil), λ.NewStr("hls"))
						if λ.IsTrue(ϒm3u8_url) {
							ϒm3u8_url = λ.Cal(ϒremove_bitrate_limit, ϒm3u8_url)
							τmp2 = λ.Cal(λ.BuiltinIter, λ.Cal(ϒalt_urls, ϒm3u8_url))
							for {
								if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
									break
								}
								ϒm3u8_alt_url = τmp3
								λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
									ϒm3u8_alt_url,
									ϒvideo_id,
									λ.NewStr("mp4"),
									λ.NewStr("m3u8_native"),
								), λ.KWArgs{
									{Name: "m3u8_id", Value: λ.NewStr("hls")},
									{Name: "fatal", Value: λ.False},
								}))
								λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_f4m_formats", nil), λ.NewArgs(
									λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒm3u8_alt_url, "replace", nil), λ.NewStr("ios"), λ.NewStr("web")), "replace", nil), λ.NewStr(".m3u8"), λ.NewStr(".f4m")),
									ϒvideo_id,
								), λ.KWArgs{
									{Name: "f4m_id", Value: λ.NewStr("hds")},
									{Name: "fatal", Value: λ.False},
								}))
							}
						}
						ϒmpd_url = λ.Cal(λ.GetAttr(ϒmanifest_urls, "get", nil), λ.NewStr("mpd"))
						if λ.IsTrue(ϒmpd_url) {
							ϒmpd_url = λ.Cal(ϒremove_bitrate_limit, ϒmpd_url)
							τmp2 = λ.Cal(λ.BuiltinIter, λ.Cal(ϒalt_urls, ϒmpd_url))
							for {
								if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
									break
								}
								ϒmpd_alt_url = τmp3
								λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_mpd_formats", nil), λ.NewArgs(
									ϒmpd_alt_url,
									ϒvideo_id,
								), λ.KWArgs{
									{Name: "mpd_id", Value: λ.NewStr("dash")},
									{Name: "fatal", Value: λ.False},
								}))
							}
						}
						λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
						return λ.BlockExitNormally, nil
					}()
					ϒdate_diffusion = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒfirst_chapter, "get", nil), λ.NewStr("date_diffusion")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("configv4"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("estatS4"))
						}
					}()
					ϒupload_date = func() λ.Object {
						if λ.IsTrue(ϒdate_diffusion) {
							return λ.Cal(ϒunified_strdate, ϒdate_diffusion)
						} else {
							return λ.None
						}
					}()
					ϒduration = λ.None
					ϒfiles = λ.GetItem(ϒvideo_info, λ.NewStr("files"))
					if λ.IsTrue(ϒfiles) {
						ϒduration = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(λ.GetItem(ϒfiles, λ.NewInt(0)), "get", nil), λ.NewStr("duration")))
					}
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("title"):       ϒtitle,
						λ.NewStr("thumbnail"):   λ.Cal(λ.GetAttr(ϒfirst_chapter, "get", nil), λ.NewStr("preview")),
						λ.NewStr("description"): λ.Cal(λ.GetAttr(ϒfirst_chapter, "get", nil), λ.NewStr("description")),
						λ.NewStr("view_count"):  λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo_info, "get", nil), λ.NewStr("views"))),
						λ.NewStr("upload_date"): ϒupload_date,
						λ.NewStr("duration"):    ϒduration,
						λ.NewStr("formats"):     ϒformats,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):       WatIE_IE_NAME,
				λ.NewStr("_FORMATS"):      WatIE__FORMATS,
				λ.NewStr("_TESTS"):        WatIE__TESTS,
				λ.NewStr("_VALID_URL"):    WatIE__VALID_URL,
				λ.NewStr("_real_extract"): WatIE__real_extract,
			})
		}())
	})
}

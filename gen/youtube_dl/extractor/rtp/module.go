// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * rtp/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/rtp.py
 */

package rtp

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor  λ.Object
	RTPIE          λ.Object
	ϒdetermine_ext λ.Object
	ϒjs_to_json    λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ϒjs_to_json = Ωutils.ϒjs_to_json
		RTPIE = λ.Cal(λ.TypeType, λ.NewStr("RTPIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				RTPIE__VALID_URL    λ.Object
				RTPIE__real_extract λ.Object
			)
			RTPIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?rtp\\.pt/play/p(?P<program_id>[0-9]+)/(?P<id>[^/?#]+)/?")
			RTPIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒconfig   λ.Object
						ϒext      λ.Object
						ϒf        λ.Object
						ϒfile_key λ.Object
						ϒfile_url λ.Object
						ϒformats  λ.Object
						ϒself     = λargs[0]
						ϒtitle    λ.Object
						ϒurl      = λargs[1]
						ϒvideo_id λ.Object
						ϒwebpage  λ.Object
						τmp0      λ.Object
						τmp1      λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					ϒtitle = λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
						λ.NewStr("twitter:title"),
						ϒwebpage,
					), λ.KWArgs{
						{Name: "display_name", Value: λ.NewStr("title")},
						{Name: "fatal", Value: λ.True},
					})
					ϒconfig = λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("(?s)RTPPlayer\\(({.+?})\\);"), ϒwebpage, λ.NewStr("player config")), ϒvideo_id, ϒjs_to_json)
					ϒfile_url = λ.GetItem(ϒconfig, λ.NewStr("file"))
					ϒext = λ.Cal(ϒdetermine_ext, ϒfile_url)
					if λ.IsTrue(λ.Eq(ϒext, λ.NewStr("m3u8"))) {
						ϒfile_key = λ.Cal(λ.GetAttr(ϒconfig, "get", nil), λ.NewStr("fileKey"))
						ϒformats = λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
							ϒfile_url,
							ϒvideo_id,
							λ.NewStr("mp4"),
							λ.NewStr("m3u8_native"),
						), λ.KWArgs{
							{Name: "m3u8_id", Value: λ.NewStr("hls")},
							{Name: "fatal", Value: ϒfile_key},
						})
						if λ.IsTrue(ϒfile_key) {
							λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("url"):        λ.Add(λ.NewStr("https://cdn-ondemand.rtp.pt"), ϒfile_key),
								λ.NewStr("preference"): λ.NewInt(1),
							}))
						}
						λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					} else {
						ϒformats = λ.NewList(λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"): ϒfile_url,
							λ.NewStr("ext"): ϒext,
						}))
					}
					if λ.IsTrue(λ.Eq(λ.Cal(λ.GetAttr(ϒconfig, "get", nil), λ.NewStr("mediaType")), λ.NewStr("audio"))) {
						τmp0 = λ.Cal(λ.BuiltinIter, ϒformats)
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒf = τmp1
							λ.SetItem(ϒf, λ.NewStr("vcodec"), λ.NewStr("none"))
						}
					}
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):      ϒvideo_id,
						λ.NewStr("title"):   ϒtitle,
						λ.NewStr("formats"): ϒformats,
						λ.NewStr("description"): λ.Cal(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewList(
							λ.NewStr("description"),
							λ.NewStr("twitter:description"),
						), ϒwebpage),
						λ.NewStr("thumbnail"): func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒconfig, "get", nil), λ.NewStr("poster")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(ϒself, "_og_search_thumbnail", nil), ϒwebpage)
							}
						}(),
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"):    RTPIE__VALID_URL,
				λ.NewStr("_real_extract"): RTPIE__real_extract,
			})
		}())
	})
}

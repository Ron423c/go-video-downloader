// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * xnxx/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/xnxx.py
 */

package xnxx

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor  λ.Object
	NO_DEFAULT     λ.Object
	XNXXIE         λ.Object
	ϒdetermine_ext λ.Object
	ϒint_or_none   λ.Object
	ϒstr_to_int    λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ϒint_or_none = Ωutils.ϒint_or_none
		NO_DEFAULT = Ωutils.NO_DEFAULT
		ϒstr_to_int = Ωutils.ϒstr_to_int
		XNXXIE = λ.Cal(λ.TypeType, λ.NewStr("XNXXIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				XNXXIE__VALID_URL    λ.Object
				XNXXIE__real_extract λ.Object
			)
			XNXXIE__VALID_URL = λ.NewStr("https?://(?:video|www)\\.xnxx\\.com/video-?(?P<id>[0-9a-z]+)/")
			XNXXIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒduration   λ.Object
						ϒformat_id  λ.Object
						ϒformat_url λ.Object
						ϒformats    λ.Object
						ϒget        λ.Object
						ϒmobj       λ.Object
						ϒself       = λargs[0]
						ϒthumbnail  λ.Object
						ϒtitle      λ.Object
						ϒurl        = λargs[1]
						ϒvideo_id   λ.Object
						ϒview_count λ.Object
						ϒwebpage    λ.Object
						τmp0        λ.Object
						τmp1        λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					ϒget = λ.NewFunction("get",
						[]λ.Param{
							{Name: "meta"},
							{Name: "default", Def: NO_DEFAULT},
							{Name: "fatal", Def: λ.True},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒdefault = λargs[1]
								ϒfatal   = λargs[2]
								ϒmeta    = λargs[0]
							)
							return λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
								λ.Mod(λ.NewStr("set%s\\s*\\(\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1"), ϒmeta),
								ϒwebpage,
								ϒmeta,
							), λ.KWArgs{
								{Name: "default", Value: ϒdefault},
								{Name: "fatal", Value: ϒfatal},
								{Name: "group", Value: λ.NewStr("value")},
							})
						})
					ϒtitle = func() λ.Object {
						if λv := λ.Call(λ.GetAttr(ϒself, "_og_search_title", nil), λ.NewArgs(ϒwebpage), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(ϒget, λ.NewStr("VideoTitle"))
						}
					}()
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfinditer, λ.NewStr("setVideo(?:Url(?P<id>Low|High)|HLS)\\s*\\(\\s*(?P<q>[\"\\'])(?P<url>(?:https?:)?//.+?)(?P=q)"), ϒwebpage))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒmobj = τmp1
						ϒformat_url = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("url"))
						if λ.IsTrue(λ.Eq(λ.Cal(ϒdetermine_ext, ϒformat_url), λ.NewStr("m3u8"))) {
							λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
								ϒformat_url,
								ϒvideo_id,
								λ.NewStr("mp4"),
							), λ.KWArgs{
								{Name: "entry_protocol", Value: λ.NewStr("m3u8_native")},
								{Name: "preference", Value: λ.NewInt(1)},
								{Name: "m3u8_id", Value: λ.NewStr("hls")},
								{Name: "fatal", Value: λ.False},
							}))
						} else {
							ϒformat_id = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("id"))
							if λ.IsTrue(ϒformat_id) {
								ϒformat_id = λ.Cal(λ.GetAttr(ϒformat_id, "lower", nil))
							}
							λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("url"):       ϒformat_url,
								λ.NewStr("format_id"): ϒformat_id,
								λ.NewStr("quality"): func() λ.Object {
									if λ.IsTrue(λ.Eq(ϒformat_id, λ.NewStr("low"))) {
										return λ.Neg(λ.NewInt(1))
									} else {
										return λ.NewInt(0)
									}
								}(),
							}))
						}
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒthumbnail = func() λ.Object {
						if λv := λ.Call(λ.GetAttr(ϒself, "_og_search_thumbnail", nil), λ.NewArgs(ϒwebpage), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}); λ.IsTrue(λv) {
							return λv
						} else if λv := λ.Call(ϒget, λ.NewArgs(λ.NewStr("ThumbUrl")), λ.KWArgs{
							{Name: "fatal", Value: λ.False},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Call(ϒget, λ.NewArgs(λ.NewStr("ThumbUrl169")), λ.KWArgs{
								{Name: "fatal", Value: λ.False},
							})
						}
					}()
					ϒduration = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒself, "_og_search_property", nil), λ.NewStr("duration"), ϒwebpage))
					ϒview_count = λ.Cal(ϒstr_to_int, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("id=[\"\\']nb-views-number[^>]+>([\\d,.]+)"),
						ϒwebpage,
						λ.NewStr("view count"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					}))
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):         ϒvideo_id,
						λ.NewStr("title"):      ϒtitle,
						λ.NewStr("thumbnail"):  ϒthumbnail,
						λ.NewStr("duration"):   ϒduration,
						λ.NewStr("view_count"): ϒview_count,
						λ.NewStr("age_limit"):  λ.NewInt(18),
						λ.NewStr("formats"):    ϒformats,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"):    XNXXIE__VALID_URL,
				λ.NewStr("_real_extract"): XNXXIE__real_extract,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * chirbit/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/chirbit.py
 */

package chirbit

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ChirbitIE         λ.Object
	ChirbitProfileIE  λ.Object
	InfoExtractor     λ.Object
	ϒcompat_b64decode λ.Object
	ϒparse_duration   λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_b64decode = Ωcompat.ϒcompat_b64decode
		ϒparse_duration = Ωutils.ϒparse_duration
		ChirbitIE = λ.Cal(λ.TypeType, λ.StrLiteral("ChirbitIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ChirbitIE_IE_NAME       λ.Object
				ChirbitIE__VALID_URL    λ.Object
				ChirbitIE__real_extract λ.Object
			)
			ChirbitIE_IE_NAME = λ.StrLiteral("chirbit")
			ChirbitIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?chirb\\.it/(?:(?:wp|pl)/|fb_chirbit_player\\.swf\\?key=)?(?P<id>[\\da-zA-Z]+)")
			ChirbitIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒaudio_id    λ.Object
						ϒaudio_url   λ.Object
						ϒdata_fd     λ.Object
						ϒdescription λ.Object
						ϒduration    λ.Object
						ϒself        = λargs[0]
						ϒtitle       λ.Object
						ϒuploader    λ.Object
						ϒurl         = λargs[1]
						ϒwebpage     λ.Object
					)
					ϒaudio_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", λ.Mod(λ.StrLiteral("http://chirb.it/%s"), ϒaudio_id), ϒaudio_id)
					ϒdata_fd = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("data-fd=([\"\\'])(?P<url>(?:(?!\\1).)+)\\1"),
						ϒwebpage,
						λ.StrLiteral("data fd"),
					), λ.KWArgs{
						{Name: "group", Value: λ.StrLiteral("url")},
					})
					ϒaudio_url = λ.Calm(λ.Cal(ϒcompat_b64decode, λ.GetItem(ϒdata_fd, λ.NewSlice(λ.None, λ.None, λ.Neg(λ.IntLiteral(1))))), "decode", λ.StrLiteral("utf-8"))
					ϒtitle = λ.Calm(ϒself, "_search_regex", λ.StrLiteral("class=[\"\\']chirbit-title[\"\\'][^>]*>([^<]+)"), ϒwebpage, λ.StrLiteral("title"))
					ϒdescription = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("<h3>Description</h3>\\s*<pre[^>]*>([^<]+)</pre>"),
						ϒwebpage,
						λ.StrLiteral("description"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					ϒduration = λ.Cal(ϒparse_duration, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("class=[\"\\']c-length[\"\\'][^>]*>([^<]+)"),
						ϒwebpage,
						λ.StrLiteral("duration"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					}))
					ϒuploader = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("id=[\"\\']chirbit-username[\"\\'][^>]*>([^<]+)"),
						ϒwebpage,
						λ.StrLiteral("uploader"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒaudio_id,
						"url":         ϒaudio_url,
						"title":       ϒtitle,
						"description": ϒdescription,
						"duration":    ϒduration,
						"uploader":    ϒuploader,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"IE_NAME":       ChirbitIE_IE_NAME,
				"_VALID_URL":    ChirbitIE__VALID_URL,
				"_real_extract": ChirbitIE__real_extract,
			})
		}())
		ChirbitProfileIE = λ.Cal(λ.TypeType, λ.StrLiteral("ChirbitProfileIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ChirbitProfileIE__VALID_URL λ.Object
			)
			ChirbitProfileIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?chirbit\\.com/(?:rss/)?(?P<id>[^/]+)")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": ChirbitProfileIE__VALID_URL,
			})
		}())
	})
}

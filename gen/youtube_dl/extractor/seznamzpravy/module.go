// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * seznamzpravy/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/seznamzpravy.py
 */

package seznamzpravy

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor                 λ.Object
	SeznamZpravyArticleIE         λ.Object
	SeznamZpravyIE                λ.Object
	ϒ_raw_id                      λ.Object
	ϒcompat_parse_qs              λ.Object
	ϒcompat_str                   λ.Object
	ϒcompat_urllib_parse_urlparse λ.Object
	ϒint_or_none                  λ.Object
	ϒparse_codecs                 λ.Object
	ϒtry_get                      λ.Object
	ϒurljoin                      λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_parse_qs = Ωcompat.ϒcompat_parse_qs
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒcompat_urllib_parse_urlparse = Ωcompat.ϒcompat_urllib_parse_urlparse
		ϒurljoin = Ωutils.ϒurljoin
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_codecs = Ωutils.ϒparse_codecs
		ϒtry_get = Ωutils.ϒtry_get
		ϒ_raw_id = λ.NewFunction("_raw_id",
			[]λ.Param{
				{Name: "src_url"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒsrc_url = λargs[0]
				)
				return λ.GetItem(λ.Cal(λ.GetAttr(λ.GetAttr(λ.Cal(ϒcompat_urllib_parse_urlparse, ϒsrc_url), "path", nil), "split", nil), λ.NewStr("/")), λ.Neg(λ.NewInt(1)))
			})
		SeznamZpravyIE = λ.Cal(λ.TypeType, λ.NewStr("SeznamZpravyIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				SeznamZpravyIE__VALID_URL           λ.Object
				SeznamZpravyIE__extract_sdn_formats λ.Object
				SeznamZpravyIE__real_extract        λ.Object
			)
			SeznamZpravyIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?seznamzpravy\\.cz/iframe/player\\?.*\\bsrc=")
			SeznamZpravyIE__extract_sdn_formats = λ.NewFunction("_extract_sdn_formats",
				[]λ.Param{
					{Name: "self"},
					{Name: "sdn_url"},
					{Name: "video_id"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdash_rel_url λ.Object
						ϒf            λ.Object
						ϒformat_data  λ.Object
						ϒformat_id    λ.Object
						ϒformats      λ.Object
						ϒget_url      λ.Object
						ϒheight       λ.Object
						ϒhls_rel_url  λ.Object
						ϒmp4_formats  λ.Object
						ϒpls          λ.Object
						ϒrelative_url λ.Object
						ϒsdn_data     λ.Object
						ϒsdn_url      = λargs[1]
						ϒself         = λargs[0]
						ϒvideo_id     = λargs[2]
						ϒwidth        λ.Object
						τmp0          λ.Object
						τmp1          λ.Object
						τmp2          λ.Object
						τmp3          λ.Object
						τmp4          λ.Object
					)
					_ = τmp2
					_ = τmp3
					ϒsdn_data = λ.Cal(λ.GetAttr(ϒself, "_download_json", nil), ϒsdn_url, ϒvideo_id)
					if λ.IsTrue(λ.Cal(λ.GetAttr(ϒsdn_data, "get", nil), λ.NewStr("Location"))) {
						ϒsdn_url = λ.GetItem(ϒsdn_data, λ.NewStr("Location"))
						ϒsdn_data = λ.Cal(λ.GetAttr(ϒself, "_download_json", nil), ϒsdn_url, ϒvideo_id)
					}
					ϒformats = λ.NewList()
					ϒmp4_formats = func() λ.Object {
						if λv := λ.Cal(ϒtry_get, ϒsdn_data, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("data")), λ.NewStr("mp4"))
							}), λ.DictType); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewDictWithTable(map[λ.Object]λ.Object{})
						}
					}()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒmp4_formats, "items", nil)))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒformat_id = λ.GetItem(τmp2, λ.NewInt(0))
						ϒformat_data = λ.GetItem(τmp2, λ.NewInt(1))
						ϒrelative_url = λ.Cal(λ.GetAttr(ϒformat_data, "get", nil), λ.NewStr("url"))
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒrelative_url))) {
							continue
						}
						τmp2, τmp3 = func() (λexit λ.Object, λret λ.Object) {
							defer λ.CatchMulti(
								nil,
								&λ.Catcher{λ.NewTuple(
									λ.TypeErrorType,
									λ.ValueErrorType,
								), func(λex λ.BaseException) {
									τmp4 = λ.NewTuple(
										λ.None,
										λ.None,
									)
									ϒwidth = λ.GetItem(τmp4, λ.NewInt(0))
									ϒheight = λ.GetItem(τmp4, λ.NewInt(1))
								}},
							)
							τmp4 = λ.Cal(λ.GetAttr(ϒformat_data, "get", nil), λ.NewStr("resolution"))
							ϒwidth = λ.GetItem(τmp4, λ.NewInt(0))
							ϒheight = λ.GetItem(τmp4, λ.NewInt(1))
							return λ.BlockExitNormally, nil
						}()
						ϒf = λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"):       λ.Cal(ϒurljoin, ϒsdn_url, ϒrelative_url),
							λ.NewStr("format_id"): λ.Mod(λ.NewStr("http-%s"), ϒformat_id),
							λ.NewStr("tbr"): λ.Call(ϒint_or_none, λ.NewArgs(λ.Cal(λ.GetAttr(ϒformat_data, "get", nil), λ.NewStr("bandwidth"))), λ.KWArgs{
								{Name: "scale", Value: λ.NewInt(1000)},
							}),
							λ.NewStr("width"):  λ.Cal(ϒint_or_none, ϒwidth),
							λ.NewStr("height"): λ.Cal(ϒint_or_none, ϒheight),
						})
						λ.Cal(λ.GetAttr(ϒf, "update", nil), λ.Cal(ϒparse_codecs, λ.Cal(λ.GetAttr(ϒformat_data, "get", nil), λ.NewStr("codec"))))
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), ϒf)
					}
					ϒpls = λ.Cal(λ.GetAttr(ϒsdn_data, "get", nil), λ.NewStr("pls"), λ.NewDictWithTable(map[λ.Object]λ.Object{}))
					ϒget_url = λ.NewFunction("get_url",
						[]λ.Param{
							{Name: "format_id"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒformat_id = λargs[0]
							)
							return λ.Cal(ϒtry_get, ϒpls, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(ϒx, ϒformat_id), λ.NewStr("url"))
								}), ϒcompat_str)
						})
					ϒdash_rel_url = λ.Cal(ϒget_url, λ.NewStr("dash"))
					if λ.IsTrue(ϒdash_rel_url) {
						λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_mpd_formats", nil), λ.NewArgs(
							λ.Cal(ϒurljoin, ϒsdn_url, ϒdash_rel_url),
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "mpd_id", Value: λ.NewStr("dash")},
							{Name: "fatal", Value: λ.False},
						}))
					}
					ϒhls_rel_url = λ.Cal(ϒget_url, λ.NewStr("hls"))
					if λ.IsTrue(ϒhls_rel_url) {
						λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
							λ.Cal(ϒurljoin, ϒsdn_url, ϒhls_rel_url),
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "ext", Value: λ.NewStr("mp4")},
							{Name: "m3u8_id", Value: λ.NewStr("hls")},
							{Name: "fatal", Value: λ.False},
						}))
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					return ϒformats
				})
			SeznamZpravyIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒduration  λ.Object
						ϒformats   λ.Object
						ϒparams    λ.Object
						ϒself      = λargs[0]
						ϒseries    λ.Object
						ϒsrc       λ.Object
						ϒthumbnail λ.Object
						ϒtitle     λ.Object
						ϒurl       = λargs[1]
						ϒvideo_id  λ.Object
					)
					ϒparams = λ.Cal(ϒcompat_parse_qs, λ.GetAttr(λ.Cal(ϒcompat_urllib_parse_urlparse, ϒurl), "query", nil))
					ϒsrc = λ.GetItem(λ.GetItem(ϒparams, λ.NewStr("src")), λ.NewInt(0))
					ϒtitle = λ.GetItem(λ.GetItem(ϒparams, λ.NewStr("title")), λ.NewInt(0))
					ϒvideo_id = λ.GetItem(λ.Cal(λ.GetAttr(ϒparams, "get", nil), λ.NewStr("contentId"), λ.NewList(λ.Cal(ϒ_raw_id, ϒsrc))), λ.NewInt(0))
					ϒformats = λ.Cal(λ.GetAttr(ϒself, "_extract_sdn_formats", nil), λ.Add(ϒsrc, λ.NewStr("spl2,2,VOD")), ϒvideo_id)
					ϒduration = λ.Cal(ϒint_or_none, λ.GetItem(λ.Cal(λ.GetAttr(ϒparams, "get", nil), λ.NewStr("duration"), λ.NewList(λ.None)), λ.NewInt(0)))
					ϒseries = λ.GetItem(λ.Cal(λ.GetAttr(ϒparams, "get", nil), λ.NewStr("series"), λ.NewList(λ.None)), λ.NewInt(0))
					ϒthumbnail = λ.GetItem(λ.Cal(λ.GetAttr(ϒparams, "get", nil), λ.NewStr("poster"), λ.NewList(λ.None)), λ.NewInt(0))
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):        ϒvideo_id,
						λ.NewStr("title"):     ϒtitle,
						λ.NewStr("thumbnail"): ϒthumbnail,
						λ.NewStr("duration"):  ϒduration,
						λ.NewStr("series"):    ϒseries,
						λ.NewStr("formats"):   ϒformats,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"):           SeznamZpravyIE__VALID_URL,
				λ.NewStr("_extract_sdn_formats"): SeznamZpravyIE__extract_sdn_formats,
				λ.NewStr("_real_extract"):        SeznamZpravyIE__real_extract,
			})
		}())
		SeznamZpravyArticleIE = λ.Cal(λ.TypeType, λ.NewStr("SeznamZpravyArticleIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				SeznamZpravyArticleIE__VALID_URL λ.Object
			)
			SeznamZpravyArticleIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?(?:seznam\\.cz/zpravy|seznamzpravy\\.cz)/clanek/(?:[^/?#&]+)-(?P<id>\\d+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): SeznamZpravyArticleIE__VALID_URL,
			})
		}())
	})
}

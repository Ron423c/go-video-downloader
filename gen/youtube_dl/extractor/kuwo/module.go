// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * kuwo/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/kuwo.py
 */

package kuwo

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError     λ.Object
	InfoExtractor      λ.Object
	KuwoAlbumIE        λ.Object
	KuwoBaseIE         λ.Object
	KuwoCategoryIE     λ.Object
	KuwoChartIE        λ.Object
	KuwoIE             λ.Object
	KuwoMvIE           λ.Object
	KuwoSingerIE       λ.Object
	ϒclean_html        λ.Object
	ϒget_element_by_id λ.Object
	ϒremove_start      λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒget_element_by_id = Ωutils.ϒget_element_by_id
		ϒclean_html = Ωutils.ϒclean_html
		ExtractorError = Ωutils.ExtractorError
		ϒremove_start = Ωutils.ϒremove_start
		KuwoBaseIE = λ.Cal(λ.TypeType, λ.NewStr("KuwoBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				KuwoBaseIE__FORMATS     λ.Object
				KuwoBaseIE__get_formats λ.Object
			)
			KuwoBaseIE__FORMATS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("format"):     λ.NewStr("ape"),
					λ.NewStr("ext"):        λ.NewStr("ape"),
					λ.NewStr("preference"): λ.NewInt(100),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("format"):     λ.NewStr("mp3-320"),
					λ.NewStr("ext"):        λ.NewStr("mp3"),
					λ.NewStr("br"):         λ.NewStr("320kmp3"),
					λ.NewStr("abr"):        λ.NewInt(320),
					λ.NewStr("preference"): λ.NewInt(80),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("format"):     λ.NewStr("mp3-192"),
					λ.NewStr("ext"):        λ.NewStr("mp3"),
					λ.NewStr("br"):         λ.NewStr("192kmp3"),
					λ.NewStr("abr"):        λ.NewInt(192),
					λ.NewStr("preference"): λ.NewInt(70),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("format"):     λ.NewStr("mp3-128"),
					λ.NewStr("ext"):        λ.NewStr("mp3"),
					λ.NewStr("br"):         λ.NewStr("128kmp3"),
					λ.NewStr("abr"):        λ.NewInt(128),
					λ.NewStr("preference"): λ.NewInt(60),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("format"):     λ.NewStr("wma"),
					λ.NewStr("ext"):        λ.NewStr("wma"),
					λ.NewStr("preference"): λ.NewInt(20),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("format"):     λ.NewStr("aac"),
					λ.NewStr("ext"):        λ.NewStr("aac"),
					λ.NewStr("abr"):        λ.NewInt(48),
					λ.NewStr("preference"): λ.NewInt(10),
				}),
			)
			KuwoBaseIE__get_formats = λ.NewFunction("_get_formats",
				[]λ.Param{
					{Name: "self"},
					{Name: "song_id"},
					{Name: "tolerate_ip_deny", Def: λ.False},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒfile_format      λ.Object
						ϒformats          λ.Object
						ϒquery            λ.Object
						ϒself             = λargs[0]
						ϒsong_id          = λargs[1]
						ϒsong_url         λ.Object
						ϒtolerate_ip_deny = λargs[2]
						τmp0              λ.Object
						τmp1              λ.Object
					)
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.GetAttr(ϒself, "_FORMATS", nil))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒfile_format = τmp1
						ϒquery = λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("format"):   λ.GetItem(ϒfile_format, λ.NewStr("ext")),
							λ.NewStr("br"):       λ.Cal(λ.GetAttr(ϒfile_format, "get", nil), λ.NewStr("br"), λ.NewStr("")),
							λ.NewStr("rid"):      λ.Mod(λ.NewStr("MUSIC_%s"), ϒsong_id),
							λ.NewStr("type"):     λ.NewStr("convert_url"),
							λ.NewStr("response"): λ.NewStr("url"),
						})
						ϒsong_url = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
							λ.NewStr("http://antiserver.kuwo.cn/anti.s"),
							ϒsong_id,
						), λ.KWArgs{
							{Name: "note", Value: λ.Mod(λ.NewStr("Download %s url info"), λ.GetItem(ϒfile_format, λ.NewStr("format")))},
							{Name: "query", Value: ϒquery},
							{Name: "headers", Value: λ.Cal(λ.GetAttr(ϒself, "geo_verification_headers", nil))},
						})
						if λ.IsTrue(func() λ.Object {
							if λv := λ.Eq(ϒsong_url, λ.NewStr("IPDeny")); !λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(!λ.IsTrue(ϒtolerate_ip_deny))
							}
						}()) {
							panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.NewStr("This song is blocked in this region")), λ.KWArgs{
								{Name: "expected", Value: λ.True},
							})))
						}
						if λ.IsTrue(func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒsong_url, "startswith", nil), λ.NewStr("http://")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(ϒsong_url, "startswith", nil), λ.NewStr("https://"))
							}
						}()) {
							λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("url"):        ϒsong_url,
								λ.NewStr("format_id"):  λ.GetItem(ϒfile_format, λ.NewStr("format")),
								λ.NewStr("format"):     λ.GetItem(ϒfile_format, λ.NewStr("format")),
								λ.NewStr("preference"): λ.GetItem(ϒfile_format, λ.NewStr("preference")),
								λ.NewStr("abr"):        λ.Cal(λ.GetAttr(ϒfile_format, "get", nil), λ.NewStr("abr")),
							}))
						}
					}
					return ϒformats
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_FORMATS"):     KuwoBaseIE__FORMATS,
				λ.NewStr("_get_formats"): KuwoBaseIE__get_formats,
			})
		}())
		KuwoIE = λ.Cal(λ.TypeType, λ.NewStr("KuwoIE"), λ.NewTuple(KuwoBaseIE), func() λ.Dict {
			var (
				KuwoIE__VALID_URL λ.Object
			)
			KuwoIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?kuwo\\.cn/yinyue/(?P<id>\\d+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): KuwoIE__VALID_URL,
			})
		}())
		KuwoAlbumIE = λ.Cal(λ.TypeType, λ.NewStr("KuwoAlbumIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				KuwoAlbumIE__VALID_URL λ.Object
			)
			KuwoAlbumIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?kuwo\\.cn/album/(?P<id>\\d+?)/")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): KuwoAlbumIE__VALID_URL,
			})
		}())
		KuwoChartIE = λ.Cal(λ.TypeType, λ.NewStr("KuwoChartIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				KuwoChartIE__VALID_URL λ.Object
			)
			KuwoChartIE__VALID_URL = λ.NewStr("https?://yinyue\\.kuwo\\.cn/billboard_(?P<id>[^.]+).htm")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): KuwoChartIE__VALID_URL,
			})
		}())
		KuwoSingerIE = λ.Cal(λ.TypeType, λ.NewStr("KuwoSingerIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				KuwoSingerIE__VALID_URL λ.Object
			)
			KuwoSingerIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?kuwo\\.cn/mingxing/(?P<id>[^/]+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): KuwoSingerIE__VALID_URL,
			})
		}())
		KuwoCategoryIE = λ.Cal(λ.TypeType, λ.NewStr("KuwoCategoryIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				KuwoCategoryIE__VALID_URL λ.Object
			)
			KuwoCategoryIE__VALID_URL = λ.NewStr("https?://yinyue\\.kuwo\\.cn/yy/cinfo_(?P<id>\\d+?).htm")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): KuwoCategoryIE__VALID_URL,
			})
		}())
		KuwoMvIE = λ.Cal(λ.TypeType, λ.NewStr("KuwoMvIE"), λ.NewTuple(KuwoBaseIE), func() λ.Dict {
			var (
				KuwoMvIE_IE_NAME       λ.Object
				KuwoMvIE__FORMATS      λ.Object
				KuwoMvIE__TEST         λ.Object
				KuwoMvIE__VALID_URL    λ.Object
				KuwoMvIE__real_extract λ.Object
			)
			KuwoMvIE_IE_NAME = λ.NewStr("kuwo:mv")
			KuwoMvIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?kuwo\\.cn/mv/(?P<id>\\d+?)/")
			KuwoMvIE__TEST = λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("url"): λ.NewStr("http://www.kuwo.cn/mv/6480076/"),
				λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("id"):      λ.NewStr("6480076"),
					λ.NewStr("ext"):     λ.NewStr("mp4"),
					λ.NewStr("title"):   λ.NewStr("My HouseMV"),
					λ.NewStr("creator"): λ.NewStr("2PM"),
				}),
				λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("format"): λ.NewStr("mv"),
				}),
			})
			KuwoMvIE__FORMATS = λ.Add(λ.GetAttr(KuwoBaseIE, "_FORMATS", nil), λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("format"):     λ.NewStr("mkv"),
					λ.NewStr("ext"):        λ.NewStr("mkv"),
					λ.NewStr("preference"): λ.NewInt(250),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("format"):     λ.NewStr("mp4"),
					λ.NewStr("ext"):        λ.NewStr("mp4"),
					λ.NewStr("preference"): λ.NewInt(200),
				}),
			))
			KuwoMvIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒformats     λ.Object
						ϒmobj        λ.Object
						ϒmv_url      λ.Object
						ϒself        = λargs[0]
						ϒsinger_name λ.Object
						ϒsong_id     λ.Object
						ϒsong_name   λ.Object
						ϒurl         = λargs[1]
						ϒwebpage     λ.Object
					)
					ϒsong_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
						ϒurl,
						ϒsong_id,
					), λ.KWArgs{
						{Name: "note", Value: λ.Mod(λ.NewStr("Download mv detail info: %s"), ϒsong_id)},
						{Name: "errnote", Value: λ.Mod(λ.NewStr("Unable to get mv detail info: %s"), ϒsong_id)},
					})
					ϒmobj = λ.Cal(Ωre.ϒsearch, λ.NewStr("<h1[^>]+title=\"(?P<song>[^\"]+)\">[^<]+<span[^>]+title=\"(?P<singer>[^\"]+)\""), ϒwebpage)
					if λ.IsTrue(ϒmobj) {
						ϒsong_name = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("song"))
						ϒsinger_name = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("singer"))
					} else {
						panic(λ.Raise(λ.Cal(ExtractorError, λ.NewStr("Unable to find song or singer names"))))
					}
					ϒformats = λ.Call(λ.GetAttr(ϒself, "_get_formats", nil), λ.NewArgs(ϒsong_id), λ.KWArgs{
						{Name: "tolerate_ip_deny", Value: λ.True},
					})
					ϒmv_url = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
						λ.Mod(λ.NewStr("http://www.kuwo.cn/yy/st/mvurl?rid=MUSIC_%s"), ϒsong_id),
						ϒsong_id,
					), λ.KWArgs{
						{Name: "note", Value: λ.Mod(λ.NewStr("Download %s MV URL"), ϒsong_id)},
					})
					λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("url"):       ϒmv_url,
						λ.NewStr("format_id"): λ.NewStr("mv"),
					}))
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):      ϒsong_id,
						λ.NewStr("title"):   ϒsong_name,
						λ.NewStr("creator"): ϒsinger_name,
						λ.NewStr("formats"): ϒformats,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):       KuwoMvIE_IE_NAME,
				λ.NewStr("_FORMATS"):      KuwoMvIE__FORMATS,
				λ.NewStr("_TEST"):         KuwoMvIE__TEST,
				λ.NewStr("_VALID_URL"):    KuwoMvIE__VALID_URL,
				λ.NewStr("_real_extract"): KuwoMvIE__real_extract,
			})
		}())
	})
}

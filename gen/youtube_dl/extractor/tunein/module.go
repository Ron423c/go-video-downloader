// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * tunein/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/tunein.py
 */

package tunein

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωparse "github.com/tenta-browser/go-video-downloader/gen/urllib/parse"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError    λ.Object
	InfoExtractor     λ.Object
	TuneInBaseIE      λ.Object
	TuneInClipIE      λ.Object
	TuneInProgramIE   λ.Object
	TuneInShortenerIE λ.Object
	TuneInStationIE   λ.Object
	TuneInTopicIE     λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ExtractorError = Ωutils.ExtractorError
		TuneInBaseIE = λ.Cal(λ.TypeType, λ.NewStr("TuneInBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				TuneInBaseIE__API_BASE_URL λ.Object
				TuneInBaseIE__real_extract λ.Object
			)
			TuneInBaseIE__API_BASE_URL = λ.NewStr("http://tunein.com/tuner/tune/")
			TuneInBaseIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcontent_id   λ.Object
						ϒcontent_info λ.Object
						ϒformat_note  λ.Object
						ϒformats      λ.Object
						ϒis_live      λ.Object
						ϒlocation     λ.Object
						ϒreliability  λ.Object
						ϒself         = λargs[0]
						ϒstream       λ.Object
						ϒstreams      λ.Object
						ϒstreams_url  λ.Object
						ϒthumbnail    λ.Object
						ϒtitle        λ.Object
						ϒurl          = λargs[1]
						τmp0          λ.Object
						τmp1          λ.Object
					)
					ϒcontent_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒcontent_info = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Add(λ.GetAttr(ϒself, "_API_BASE_URL", nil), λ.Mod(λ.GetAttr(ϒself, "_API_URL_QUERY", nil), ϒcontent_id)),
						ϒcontent_id,
					), λ.KWArgs{
						{Name: "note", Value: λ.NewStr("Downloading JSON metadata")},
					})
					ϒtitle = λ.GetItem(ϒcontent_info, λ.NewStr("Title"))
					ϒthumbnail = λ.Cal(λ.GetAttr(ϒcontent_info, "get", nil), λ.NewStr("Logo"))
					ϒlocation = λ.Cal(λ.GetAttr(ϒcontent_info, "get", nil), λ.NewStr("Location"))
					ϒstreams_url = λ.Cal(λ.GetAttr(ϒcontent_info, "get", nil), λ.NewStr("StreamUrl"))
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒstreams_url))) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.NewStr("No downloadable streams found")), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.Cal(λ.GetAttr(ϒstreams_url, "startswith", nil), λ.NewStr("http://"))))) {
						ϒstreams_url = λ.Cal(Ωparse.ϒurljoin, ϒurl, ϒstreams_url)
					}
					ϒstreams = λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						ϒstreams_url,
						ϒcontent_id,
					), λ.KWArgs{
						{Name: "note", Value: λ.NewStr("Downloading stream data")},
						{Name: "transform_source", Value: λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "s"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒs = λargs[0]
								)
								return λ.Cal(Ωre.ϒsub, λ.NewStr("^\\s*\\((.*)\\);\\s*$"), λ.NewStr("\\1"), ϒs)
							})},
					}), λ.NewStr("Streams"))
					ϒis_live = λ.None
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, ϒstreams)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒstream = τmp1
						if λ.IsTrue(λ.Eq(λ.Cal(λ.GetAttr(ϒstream, "get", nil), λ.NewStr("Type")), λ.NewStr("Live"))) {
							ϒis_live = λ.True
						}
						ϒreliability = λ.Cal(λ.GetAttr(ϒstream, "get", nil), λ.NewStr("Reliability"))
						ϒformat_note = func() λ.Object {
							if λ.IsTrue(λ.NewBool(ϒreliability != λ.None)) {
								return λ.Mod(λ.NewStr("Reliability: %d%%"), ϒreliability)
							} else {
								return λ.None
							}
						}()
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("preference"): func() λ.Object {
								if λ.IsTrue(func() λ.Object {
									if λv := λ.NewBool(ϒreliability == λ.None); λ.IsTrue(λv) {
										return λv
									} else {
										return λ.Gt(ϒreliability, λ.NewInt(90))
									}
								}()) {
									return λ.NewInt(0)
								} else {
									return λ.NewInt(1)
								}
							}(),
							λ.NewStr("abr"):               λ.Cal(λ.GetAttr(ϒstream, "get", nil), λ.NewStr("Bandwidth")),
							λ.NewStr("ext"):               λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒstream, "get", nil), λ.NewStr("MediaType")), "lower", nil)),
							λ.NewStr("acodec"):            λ.Cal(λ.GetAttr(ϒstream, "get", nil), λ.NewStr("MediaType")),
							λ.NewStr("vcodec"):            λ.NewStr("none"),
							λ.NewStr("url"):               λ.Cal(λ.GetAttr(ϒstream, "get", nil), λ.NewStr("Url")),
							λ.NewStr("source_preference"): ϒreliability,
							λ.NewStr("format_note"):       ϒformat_note,
						}))
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"): ϒcontent_id,
						λ.NewStr("title"): func() λ.Object {
							if λ.IsTrue(ϒis_live) {
								return λ.Cal(λ.GetAttr(ϒself, "_live_title", nil), ϒtitle)
							} else {
								return ϒtitle
							}
						}(),
						λ.NewStr("formats"):   ϒformats,
						λ.NewStr("thumbnail"): ϒthumbnail,
						λ.NewStr("location"):  ϒlocation,
						λ.NewStr("is_live"):   ϒis_live,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_API_BASE_URL"): TuneInBaseIE__API_BASE_URL,
				λ.NewStr("_real_extract"): TuneInBaseIE__real_extract,
			})
		}())
		TuneInClipIE = λ.Cal(λ.TypeType, λ.NewStr("TuneInClipIE"), λ.NewTuple(TuneInBaseIE), func() λ.Dict {
			var (
				TuneInClipIE_IE_NAME        λ.Object
				TuneInClipIE__API_URL_QUERY λ.Object
				TuneInClipIE__TESTS         λ.Object
				TuneInClipIE__VALID_URL     λ.Object
			)
			TuneInClipIE_IE_NAME = λ.NewStr("tunein:clip")
			TuneInClipIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?tunein\\.com/station/.*?audioClipId\\=(?P<id>\\d+)")
			TuneInClipIE__API_URL_QUERY = λ.NewStr("?tuneType=AudioClip&audioclipId=%s")
			TuneInClipIE__TESTS = λ.NewList(λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("url"): λ.NewStr("http://tunein.com/station/?stationId=246119&audioClipId=816"),
				λ.NewStr("md5"): λ.NewStr("99f00d772db70efc804385c6b47f4e77"),
				λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("id"):    λ.NewStr("816"),
					λ.NewStr("title"): λ.NewStr("32m"),
					λ.NewStr("ext"):   λ.NewStr("mp3"),
				}),
			}))
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):        TuneInClipIE_IE_NAME,
				λ.NewStr("_API_URL_QUERY"): TuneInClipIE__API_URL_QUERY,
				λ.NewStr("_TESTS"):         TuneInClipIE__TESTS,
				λ.NewStr("_VALID_URL"):     TuneInClipIE__VALID_URL,
			})
		}())
		TuneInStationIE = λ.Cal(λ.TypeType, λ.NewStr("TuneInStationIE"), λ.NewTuple(TuneInBaseIE), func() λ.Dict {
			var (
				TuneInStationIE_IE_NAME        λ.Object
				TuneInStationIE__API_URL_QUERY λ.Object
				TuneInStationIE__TESTS         λ.Object
				TuneInStationIE__VALID_URL     λ.Object
				TuneInStationIE_suitable       λ.Object
			)
			TuneInStationIE_IE_NAME = λ.NewStr("tunein:station")
			TuneInStationIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?tunein\\.com/(?:radio/.*?-s|station/.*?StationId=|embed/player/s)(?P<id>\\d+)")
			TuneInStationIE__API_URL_QUERY = λ.NewStr("?tuneType=Station&stationId=%s")
			TuneInStationIE_suitable = λ.NewFunction("suitable",
				[]λ.Param{
					{Name: "cls"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls = λargs[0]
						ϒurl = λargs[1]
					)
					return func() λ.Object {
						if λ.IsTrue(λ.Cal(λ.GetAttr(TuneInClipIE, "suitable", nil), ϒurl)) {
							return λ.False
						} else {
							return λ.Cal(λ.GetAttr(λ.Cal(λ.SuperType, TuneInStationIE, ϒcls), "suitable", nil), ϒurl)
						}
					}()
				})
			TuneInStationIE_suitable = λ.Cal(λ.ClassMethodType, TuneInStationIE_suitable)
			TuneInStationIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://tunein.com/radio/Jazz24-885-s34682/"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):       λ.NewStr("34682"),
						λ.NewStr("title"):    λ.NewStr("Jazz 24 on 88.5 Jazz24 - KPLU-HD2"),
						λ.NewStr("ext"):      λ.NewStr("mp3"),
						λ.NewStr("location"): λ.NewStr("Tacoma, WA"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://tunein.com/embed/player/s6404/"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):        TuneInStationIE_IE_NAME,
				λ.NewStr("_API_URL_QUERY"): TuneInStationIE__API_URL_QUERY,
				λ.NewStr("_TESTS"):         TuneInStationIE__TESTS,
				λ.NewStr("_VALID_URL"):     TuneInStationIE__VALID_URL,
				λ.NewStr("suitable"):       TuneInStationIE_suitable,
			})
		}())
		TuneInProgramIE = λ.Cal(λ.TypeType, λ.NewStr("TuneInProgramIE"), λ.NewTuple(TuneInBaseIE), func() λ.Dict {
			var (
				TuneInProgramIE_IE_NAME        λ.Object
				TuneInProgramIE__API_URL_QUERY λ.Object
				TuneInProgramIE__TESTS         λ.Object
				TuneInProgramIE__VALID_URL     λ.Object
			)
			TuneInProgramIE_IE_NAME = λ.NewStr("tunein:program")
			TuneInProgramIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?tunein\\.com/(?:radio/.*?-p|program/.*?ProgramId=|embed/player/p)(?P<id>\\d+)")
			TuneInProgramIE__API_URL_QUERY = λ.NewStr("?tuneType=Program&programId=%s")
			TuneInProgramIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://tunein.com/radio/Jazz-24-p2506/"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):       λ.NewStr("2506"),
						λ.NewStr("title"):    λ.NewStr("Jazz 24 on 91.3 WUKY-HD3"),
						λ.NewStr("ext"):      λ.NewStr("mp3"),
						λ.NewStr("location"): λ.NewStr("Lexington, KY"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://tunein.com/embed/player/p191660/"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):        TuneInProgramIE_IE_NAME,
				λ.NewStr("_API_URL_QUERY"): TuneInProgramIE__API_URL_QUERY,
				λ.NewStr("_TESTS"):         TuneInProgramIE__TESTS,
				λ.NewStr("_VALID_URL"):     TuneInProgramIE__VALID_URL,
			})
		}())
		TuneInTopicIE = λ.Cal(λ.TypeType, λ.NewStr("TuneInTopicIE"), λ.NewTuple(TuneInBaseIE), func() λ.Dict {
			var (
				TuneInTopicIE__VALID_URL λ.Object
			)
			TuneInTopicIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?tunein\\.com/(?:topic/.*?TopicId=|embed/player/t)(?P<id>\\d+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): TuneInTopicIE__VALID_URL,
			})
		}())
		TuneInShortenerIE = λ.Cal(λ.TypeType, λ.NewStr("TuneInShortenerIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				TuneInShortenerIE_IE_NAME       λ.Object
				TuneInShortenerIE__TEST         λ.Object
				TuneInShortenerIE__VALID_URL    λ.Object
				TuneInShortenerIE__real_extract λ.Object
			)
			TuneInShortenerIE_IE_NAME = λ.NewStr("tunein:shortener")
			TuneInShortenerIE__VALID_URL = λ.NewStr("https?://tun\\.in/(?P<id>[A-Za-z0-9]+)")
			TuneInShortenerIE__TEST = λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("url"): λ.NewStr("http://tun.in/ser7s"),
				λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("id"):       λ.NewStr("34682"),
					λ.NewStr("title"):    λ.NewStr("Jazz 24 on 88.5 Jazz24 - KPLU-HD2"),
					λ.NewStr("ext"):      λ.NewStr("mp3"),
					λ.NewStr("location"): λ.NewStr("Tacoma, WA"),
				}),
				λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("skip_download"): λ.True,
				}),
			})
			TuneInShortenerIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒredirect_id λ.Object
						ϒself        = λargs[0]
						ϒurl         = λargs[1]
						ϒurlh        λ.Object
					)
					ϒredirect_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒurlh = λ.Call(λ.GetAttr(ϒself, "_request_webpage", nil), λ.NewArgs(
						ϒurl,
						ϒredirect_id,
					), λ.KWArgs{
						{Name: "note", Value: λ.NewStr("Downloading redirect page")},
					})
					ϒurl = λ.Cal(λ.GetAttr(ϒurlh, "geturl", nil))
					λ.Cal(λ.GetAttr(ϒself, "to_screen", nil), λ.Mod(λ.NewStr("Following redirect: %s"), ϒurl))
					return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), ϒurl)
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):       TuneInShortenerIE_IE_NAME,
				λ.NewStr("_TEST"):         TuneInShortenerIE__TEST,
				λ.NewStr("_VALID_URL"):    TuneInShortenerIE__VALID_URL,
				λ.NewStr("_real_extract"): TuneInShortenerIE__real_extract,
			})
		}())
	})
}

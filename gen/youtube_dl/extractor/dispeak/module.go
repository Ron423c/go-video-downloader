// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * dispeak/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/dispeak.py
 */

package dispeak

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	DigitallySpeakingIE λ.Object
	InfoExtractor       λ.Object
	ϒint_or_none        λ.Object
	ϒparse_duration     λ.Object
	ϒremove_end         λ.Object
	ϒxpath_element      λ.Object
	ϒxpath_text         λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒremove_end = Ωutils.ϒremove_end
		ϒxpath_element = Ωutils.ϒxpath_element
		ϒxpath_text = Ωutils.ϒxpath_text
		DigitallySpeakingIE = λ.Cal(λ.TypeType, λ.NewStr("DigitallySpeakingIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				DigitallySpeakingIE__TESTS        λ.Object
				DigitallySpeakingIE__VALID_URL    λ.Object
				DigitallySpeakingIE__parse_flv    λ.Object
				DigitallySpeakingIE__parse_mp4    λ.Object
				DigitallySpeakingIE__real_extract λ.Object
			)
			DigitallySpeakingIE__VALID_URL = λ.NewStr("https?://(?:s?evt\\.dispeak|events\\.digitallyspeaking)\\.com/(?:[^/]+/)+xml/(?P<id>[^.]+)\\.xml")
			DigitallySpeakingIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://evt.dispeak.com/ubm/gdc/sf16/xml/840376_BQRC.xml"),
					λ.NewStr("md5"): λ.NewStr("a8efb6c31ed06ca8739294960b2dbabd"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):    λ.NewStr("840376_BQRC"),
						λ.NewStr("ext"):   λ.NewStr("mp4"),
						λ.NewStr("title"): λ.NewStr("Tenacious Design and The Interface of 'Destiny'"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://events.digitallyspeaking.com/gdc/sf11/xml/12396_1299111843500GMPX.xml"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://sevt.dispeak.com/ubm/gdc/eur10/xml/11256_1282118587281VNIT.xml"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			DigitallySpeakingIE__parse_mp4 = λ.NewFunction("_parse_mp4",
				[]λ.Param{
					{Name: "self"},
					{Name: "metadata"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒa_format      λ.Object
						ϒformats       λ.Object
						ϒhttp_host     λ.Object
						ϒmetadata      = λargs[1]
						ϒmobj          λ.Object
						ϒmp4_video     λ.Object
						ϒself          = λargs[0]
						ϒstream_name   λ.Object
						ϒurl           λ.Object
						ϒvbr           λ.Object
						ϒvideo_formats λ.Object
						ϒvideo_path    λ.Object
						ϒvideo_root    λ.Object
						τmp0           λ.Object
						τmp1           λ.Object
					)
					_ = ϒself
					ϒvideo_formats = λ.NewList()
					ϒvideo_root = λ.None
					ϒmp4_video = λ.Call(ϒxpath_text, λ.NewArgs(
						ϒmetadata,
						λ.NewStr("./mp4video"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(λ.NewBool(ϒmp4_video != λ.None)) {
						ϒmobj = λ.Cal(Ωre.ϒmatch, λ.NewStr("(?P<root>https?://.*?/).*"), ϒmp4_video)
						ϒvideo_root = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("root"))
					}
					if λ.IsTrue(λ.NewBool(ϒvideo_root == λ.None)) {
						ϒhttp_host = λ.Call(ϒxpath_text, λ.NewArgs(
							ϒmetadata,
							λ.NewStr("httpHost"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						})
						if λ.IsTrue(ϒhttp_host) {
							ϒvideo_root = λ.Mod(λ.NewStr("http://%s/"), ϒhttp_host)
						}
					}
					if λ.IsTrue(λ.NewBool(ϒvideo_root == λ.None)) {
						ϒvideo_root = λ.NewStr("http://s3-2u.digitallyspeaking.com/")
					}
					ϒformats = λ.Cal(λ.GetAttr(ϒmetadata, "findall", nil), λ.NewStr("./MBRVideos/MBRVideo"))
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒformats))) {
						return λ.None
					}
					τmp0 = λ.Cal(λ.BuiltinIter, ϒformats)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒa_format = τmp1
						ϒstream_name = λ.Call(ϒxpath_text, λ.NewArgs(
							ϒa_format,
							λ.NewStr("streamName"),
						), λ.KWArgs{
							{Name: "fatal", Value: λ.True},
						})
						ϒvideo_path = λ.Cal(λ.GetAttr(λ.Cal(Ωre.ϒmatch, λ.NewStr("mp4\\:(?P<path>.*)"), ϒstream_name), "group", nil), λ.NewStr("path"))
						ϒurl = λ.Add(ϒvideo_root, ϒvideo_path)
						ϒvbr = λ.Cal(ϒxpath_text, ϒa_format, λ.NewStr("bitrate"))
						λ.Cal(λ.GetAttr(ϒvideo_formats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"): ϒurl,
							λ.NewStr("vbr"): λ.Cal(ϒint_or_none, ϒvbr),
						}))
					}
					return ϒvideo_formats
				})
			DigitallySpeakingIE__parse_flv = λ.NewFunction("_parse_flv",
				[]λ.Param{
					{Name: "self"},
					{Name: "metadata"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒakamai_url         λ.Object
						ϒaudio              λ.Object
						ϒaudios             λ.Object
						ϒformats            λ.Object
						ϒmetadata           = λargs[1]
						ϒself               = λargs[0]
						ϒslide_video_path   λ.Object
						ϒspeaker_video_path λ.Object
						τmp0                λ.Object
						τmp1                λ.Object
					)
					_ = ϒself
					ϒformats = λ.NewList()
					ϒakamai_url = λ.Call(ϒxpath_text, λ.NewArgs(
						ϒmetadata,
						λ.NewStr("./akamaiHost"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.True},
					})
					ϒaudios = λ.Cal(λ.GetAttr(ϒmetadata, "findall", nil), λ.NewStr("./audios/audio"))
					τmp0 = λ.Cal(λ.BuiltinIter, ϒaudios)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒaudio = τmp1
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"):       λ.Mod(λ.NewStr("rtmp://%s/ondemand?ovpfv=1.1"), ϒakamai_url),
							λ.NewStr("play_path"): λ.Cal(ϒremove_end, λ.Cal(λ.GetAttr(ϒaudio, "get", nil), λ.NewStr("url")), λ.NewStr(".flv")),
							λ.NewStr("ext"):       λ.NewStr("flv"),
							λ.NewStr("vcodec"):    λ.NewStr("none"),
							λ.NewStr("format_id"): λ.Cal(λ.GetAttr(ϒaudio, "get", nil), λ.NewStr("code")),
						}))
					}
					ϒslide_video_path = λ.Call(ϒxpath_text, λ.NewArgs(
						ϒmetadata,
						λ.NewStr("./slideVideo"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.True},
					})
					λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("url"):         λ.Mod(λ.NewStr("rtmp://%s/ondemand?ovpfv=1.1"), ϒakamai_url),
						λ.NewStr("play_path"):   λ.Cal(ϒremove_end, ϒslide_video_path, λ.NewStr(".flv")),
						λ.NewStr("ext"):         λ.NewStr("flv"),
						λ.NewStr("format_note"): λ.NewStr("slide deck video"),
						λ.NewStr("quality"):     λ.Neg(λ.NewInt(2)),
						λ.NewStr("preference"):  λ.Neg(λ.NewInt(2)),
						λ.NewStr("format_id"):   λ.NewStr("slides"),
					}))
					ϒspeaker_video_path = λ.Call(ϒxpath_text, λ.NewArgs(
						ϒmetadata,
						λ.NewStr("./speakerVideo"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.True},
					})
					λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("url"):         λ.Mod(λ.NewStr("rtmp://%s/ondemand?ovpfv=1.1"), ϒakamai_url),
						λ.NewStr("play_path"):   λ.Cal(ϒremove_end, ϒspeaker_video_path, λ.NewStr(".flv")),
						λ.NewStr("ext"):         λ.NewStr("flv"),
						λ.NewStr("format_note"): λ.NewStr("speaker video"),
						λ.NewStr("quality"):     λ.Neg(λ.NewInt(1)),
						λ.NewStr("preference"):  λ.Neg(λ.NewInt(1)),
						λ.NewStr("format_id"):   λ.NewStr("speaker"),
					}))
					return ϒformats
				})
			DigitallySpeakingIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒmetadata        λ.Object
						ϒself            = λargs[0]
						ϒurl             = λargs[1]
						ϒvideo_formats   λ.Object
						ϒvideo_id        λ.Object
						ϒxml_description λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒxml_description = λ.Cal(λ.GetAttr(ϒself, "_download_xml", nil), ϒurl, ϒvideo_id)
					ϒmetadata = λ.Cal(ϒxpath_element, ϒxml_description, λ.NewStr("metadata"))
					ϒvideo_formats = λ.Cal(λ.GetAttr(ϒself, "_parse_mp4", nil), ϒmetadata)
					if λ.IsTrue(λ.NewBool(ϒvideo_formats == λ.None)) {
						ϒvideo_formats = λ.Cal(λ.GetAttr(ϒself, "_parse_flv", nil), ϒmetadata)
					}
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):      ϒvideo_id,
						λ.NewStr("formats"): ϒvideo_formats,
						λ.NewStr("title"): λ.Call(ϒxpath_text, λ.NewArgs(
							ϒmetadata,
							λ.NewStr("title"),
						), λ.KWArgs{
							{Name: "fatal", Value: λ.True},
						}),
						λ.NewStr("duration"): λ.Cal(ϒparse_duration, λ.Cal(ϒxpath_text, ϒmetadata, λ.NewStr("endTime"))),
						λ.NewStr("creator"):  λ.Cal(ϒxpath_text, ϒmetadata, λ.NewStr("speaker")),
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        DigitallySpeakingIE__TESTS,
				λ.NewStr("_VALID_URL"):    DigitallySpeakingIE__VALID_URL,
				λ.NewStr("_parse_flv"):    DigitallySpeakingIE__parse_flv,
				λ.NewStr("_parse_mp4"):    DigitallySpeakingIE__parse_mp4,
				λ.NewStr("_real_extract"): DigitallySpeakingIE__real_extract,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * funk/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/funk.py
 */

package funk

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωnexx "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/nexx"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	FunkIE        λ.Object
	InfoExtractor λ.Object
	NexxIE        λ.Object
	ϒint_or_none  λ.Object
	ϒstr_or_none  λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		NexxIE = Ωnexx.NexxIE
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒstr_or_none = Ωutils.ϒstr_or_none
		FunkIE = λ.Cal(λ.TypeType, λ.StrLiteral("FunkIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				FunkIE__VALID_URL    λ.Object
				FunkIE__real_extract λ.Object
			)
			FunkIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?funk\\.net/(?:channel|playlist)/[^/]+/(?P<display_id>[0-9a-z-]+)-(?P<id>\\d+)")
			FunkIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdisplay_id λ.Object
						ϒnexx_id    λ.Object
						ϒself       = λargs[0]
						ϒurl        = λargs[1]
						ϒvideo      λ.Object
						τmp0        λ.Object
					)
					τmp0 = λ.Calm(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups")
					ϒdisplay_id = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒnexx_id = λ.GetItem(τmp0, λ.IntLiteral(1))
					ϒvideo = λ.Calm(ϒself, "_download_json", λ.Add(λ.StrLiteral("https://www.funk.net/api/v4.0/videos/"), ϒnexx_id), ϒnexx_id)
					return λ.DictLiteral(map[string]λ.Object{
						"_type":       λ.StrLiteral("url_transparent"),
						"url":         λ.Add(λ.StrLiteral("nexx:741:"), ϒnexx_id),
						"ie_key":      λ.Calm(NexxIE, "ie_key"),
						"id":          ϒnexx_id,
						"title":       λ.Calm(ϒvideo, "get", λ.StrLiteral("title")),
						"description": λ.Calm(ϒvideo, "get", λ.StrLiteral("description")),
						"duration":    λ.Cal(ϒint_or_none, λ.Calm(ϒvideo, "get", λ.StrLiteral("duration"))),
						"channel_id":  λ.Cal(ϒstr_or_none, λ.Calm(ϒvideo, "get", λ.StrLiteral("channelId"))),
						"display_id":  ϒdisplay_id,
						"tags":        λ.Calm(ϒvideo, "get", λ.StrLiteral("tags")),
						"thumbnail":   λ.Calm(ϒvideo, "get", λ.StrLiteral("imageUrlLandscape")),
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    FunkIE__VALID_URL,
				"_real_extract": FunkIE__real_extract,
			})
		}())
	})
}

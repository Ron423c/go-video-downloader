// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * xtube/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/xtube.py
 */

package xtube

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor      λ.Object
	XTubeIE            λ.Object
	XTubeUserIE        λ.Object
	ϒint_or_none       λ.Object
	ϒjs_to_json        λ.Object
	ϒorderedSet        λ.Object
	ϒparse_duration    λ.Object
	ϒsanitized_Request λ.Object
	ϒstr_to_int        λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒjs_to_json = Ωutils.ϒjs_to_json
		ϒorderedSet = Ωutils.ϒorderedSet
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒsanitized_Request = Ωutils.ϒsanitized_Request
		ϒstr_to_int = Ωutils.ϒstr_to_int
		XTubeIE = λ.Cal(λ.TypeType, λ.NewStr("XTubeIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				XTubeIE__TESTS        λ.Object
				XTubeIE__VALID_URL    λ.Object
				XTubeIE__real_extract λ.Object
			)
			XTubeIE__VALID_URL = λ.NewStr("(?x)\n                        (?:\n                            xtube:|\n                            https?://(?:www\\.)?xtube\\.com/(?:watch\\.php\\?.*\\bv=|video-watch/(?:embedded/)?(?P<display_id>[^/]+)-)\n                        )\n                        (?P<id>[^/?&#]+)\n                    ")
			XTubeIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.xtube.com/watch.php?v=kVTUy_G222_"),
					λ.NewStr("md5"): λ.NewStr("092fbdd3cbe292c920ef6fc6a8a9cdab"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):            λ.NewStr("kVTUy_G222_"),
						λ.NewStr("ext"):           λ.NewStr("mp4"),
						λ.NewStr("title"):         λ.NewStr("strange erotica"),
						λ.NewStr("description"):   λ.NewStr("contains:an ET kind of thing"),
						λ.NewStr("uploader"):      λ.NewStr("greenshowers"),
						λ.NewStr("duration"):      λ.NewInt(450),
						λ.NewStr("view_count"):    λ.IntType,
						λ.NewStr("comment_count"): λ.IntType,
						λ.NewStr("age_limit"):     λ.NewInt(18),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.xtube.com/video-watch/A-Super-Run-Part-1-YT-9299752"),
					λ.NewStr("md5"): λ.NewStr("a406963eb349dd43692ec54631efd88b"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):            λ.NewStr("9299752"),
						λ.NewStr("display_id"):    λ.NewStr("A-Super-Run-Part-1-YT"),
						λ.NewStr("ext"):           λ.NewStr("flv"),
						λ.NewStr("title"):         λ.NewStr("A Super Run - Part 1 (YT)"),
						λ.NewStr("description"):   λ.NewStr("md5:ca0d47afff4a9b2942e4b41aa970fd93"),
						λ.NewStr("uploader"):      λ.NewStr("tshirtguy59"),
						λ.NewStr("duration"):      λ.NewInt(579),
						λ.NewStr("view_count"):    λ.IntType,
						λ.NewStr("comment_count"): λ.IntType,
						λ.NewStr("age_limit"):     λ.NewInt(18),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://www.xtube.com/video-watch/strange-erotica-625837"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("xtube:625837"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("xtube:kVTUy_G222_"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://www.xtube.com/video-watch/embedded/milf-tara-and-teen-shared-and-cum-covered-extreme-bukkake-32203482?embedsize=big"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			XTubeIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcomment_count λ.Object
						ϒdescription   λ.Object
						ϒdisplay_id    λ.Object
						ϒduration      λ.Object
						ϒformat_id     λ.Object
						ϒformat_url    λ.Object
						ϒformats       λ.Object
						ϒmobj          λ.Object
						ϒself          = λargs[0]
						ϒsources       λ.Object
						ϒtitle         λ.Object
						ϒuploader      λ.Object
						ϒurl           = λargs[1]
						ϒurl_pattern   λ.Object
						ϒvideo_id      λ.Object
						ϒview_count    λ.Object
						ϒwebpage       λ.Object
						τmp0           λ.Object
						τmp1           λ.Object
						τmp2           λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("id"))
					ϒdisplay_id = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("display_id"))
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒdisplay_id))) {
						ϒdisplay_id = ϒvideo_id
					}
					if λ.IsTrue(func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒvideo_id, "isdigit", nil)); !λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Lt(λ.Cal(λ.BuiltinLen, ϒvideo_id), λ.NewInt(11))
						}
					}()) {
						ϒurl_pattern = λ.NewStr("http://www.xtube.com/video-watch/-%s")
					} else {
						ϒurl_pattern = λ.NewStr("http://www.xtube.com/watch.php?v=%s")
					}
					ϒwebpage = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
						λ.Mod(ϒurl_pattern, ϒvideo_id),
						ϒdisplay_id,
					), λ.KWArgs{
						{Name: "headers", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("Cookie"): λ.NewStr("age_verified=1; cookiesAccepted=1"),
						})},
					})
					ϒsources = λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
						λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewStr("([\"\\'])?sources\\1?\\s*:\\s*(?P<sources>{.+?}),"),
							ϒwebpage,
							λ.NewStr("sources"),
						), λ.KWArgs{
							{Name: "group", Value: λ.NewStr("sources")},
						}),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "transform_source", Value: ϒjs_to_json},
					})
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒsources, "items", nil)))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒformat_id = λ.GetItem(τmp2, λ.NewInt(0))
						ϒformat_url = λ.GetItem(τmp2, λ.NewInt(1))
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"):       ϒformat_url,
							λ.NewStr("format_id"): ϒformat_id,
							λ.NewStr("height"):    λ.Cal(ϒint_or_none, ϒformat_id),
						}))
					}
					λ.Cal(λ.GetAttr(ϒself, "_remove_duplicate_formats", nil), ϒformats)
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒtitle = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewTuple(
							λ.NewStr("<h1>\\s*(?P<title>[^<]+?)\\s*</h1>"),
							λ.NewStr("videoTitle\\s*:\\s*([\"\\'])(?P<title>.+?)\\1"),
						),
						ϒwebpage,
						λ.NewStr("title"),
					), λ.KWArgs{
						{Name: "group", Value: λ.NewStr("title")},
					})
					ϒdescription = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("</h1>\\s*<p>([^<]+)"),
						ϒwebpage,
						λ.NewStr("description"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					ϒuploader = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewTuple(
							λ.NewStr("<input[^>]+name=\"contentOwnerId\"[^>]+value=\"([^\"]+)\""),
							λ.NewStr("<span[^>]+class=\"nickname\"[^>]*>([^<]+)"),
						),
						ϒwebpage,
						λ.NewStr("uploader"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					ϒduration = λ.Cal(ϒparse_duration, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("<dt>Runtime:?</dt>\\s*<dd>([^<]+)</dd>"),
						ϒwebpage,
						λ.NewStr("duration"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					}))
					ϒview_count = λ.Cal(ϒstr_to_int, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("<dt>Views:?</dt>\\s*<dd>([\\d,\\.]+)</dd>"),
						ϒwebpage,
						λ.NewStr("view count"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					}))
					ϒcomment_count = λ.Cal(ϒstr_to_int, λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
						λ.NewStr(">Comments? \\(([\\d,\\.]+)\\)<"),
						ϒwebpage,
						λ.NewStr("comment count"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					}))
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):            ϒvideo_id,
						λ.NewStr("display_id"):    ϒdisplay_id,
						λ.NewStr("title"):         ϒtitle,
						λ.NewStr("description"):   ϒdescription,
						λ.NewStr("uploader"):      ϒuploader,
						λ.NewStr("duration"):      ϒduration,
						λ.NewStr("view_count"):    ϒview_count,
						λ.NewStr("comment_count"): ϒcomment_count,
						λ.NewStr("age_limit"):     λ.NewInt(18),
						λ.NewStr("formats"):       ϒformats,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        XTubeIE__TESTS,
				λ.NewStr("_VALID_URL"):    XTubeIE__VALID_URL,
				λ.NewStr("_real_extract"): XTubeIE__real_extract,
			})
		}())
		XTubeUserIE = λ.Cal(λ.TypeType, λ.NewStr("XTubeUserIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				XTubeUserIE__VALID_URL λ.Object
			)
			XTubeUserIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?xtube\\.com/profile/(?P<id>[^/]+-\\d+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): XTubeUserIE__VALID_URL,
			})
		}())
	})
}

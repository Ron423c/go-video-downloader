// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * wsj/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/wsj.py
 */

package wsj

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor    λ.Object
	WSJArticleIE     λ.Object
	WSJIE            λ.Object
	ϒfloat_or_none   λ.Object
	ϒint_or_none     λ.Object
	ϒunified_strdate λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒunified_strdate = Ωutils.ϒunified_strdate
		WSJIE = λ.Cal(λ.TypeType, λ.NewStr("WSJIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				WSJIE__VALID_URL    λ.Object
				WSJIE__real_extract λ.Object
			)
			WSJIE__VALID_URL = λ.NewStr("(?x)\n                        (?:\n                            https?://video-api\\.wsj\\.com/api-video/player/iframe\\.html\\?.*?\\bguid=|\n                            https?://(?:www\\.)?(?:wsj|barrons)\\.com/video/(?:[^/]+/)+|\n                            wsj:\n                        )\n                        (?P<id>[a-fA-F0-9-]{36})\n                    ")
			WSJIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒf4m_url  λ.Object
						ϒformats  λ.Object
						ϒinfo     λ.Object
						ϒm3u8_url λ.Object
						ϒmp4_url  λ.Object
						ϒself     = λargs[0]
						ϒtbr      λ.Object
						ϒtitle    λ.Object
						ϒurl      = λargs[1]
						ϒv        λ.Object
						ϒvideo_id λ.Object
						τmp0      λ.Object
						τmp1      λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒinfo = λ.GetItem(λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.NewStr("http://video-api.wsj.com/api-video/find_all_videos.asp"),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "query", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("type"):  λ.NewStr("guid"),
							λ.NewStr("count"): λ.NewInt(1),
							λ.NewStr("query"): ϒvideo_id,
							λ.NewStr("fields"): λ.Cal(λ.GetAttr(λ.NewStr(","), "join", nil), λ.NewTuple(
								λ.NewStr("type"),
								λ.NewStr("hls"),
								λ.NewStr("videoMP4List"),
								λ.NewStr("thumbnailList"),
								λ.NewStr("author"),
								λ.NewStr("description"),
								λ.NewStr("name"),
								λ.NewStr("duration"),
								λ.NewStr("videoURL"),
								λ.NewStr("titletag"),
								λ.NewStr("formattedCreationDate"),
								λ.NewStr("keywords"),
								λ.NewStr("editor"),
							)),
						})},
					}), λ.NewStr("items")), λ.NewInt(0))
					ϒtitle = λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("name"), λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("titletag")))
					ϒformats = λ.NewList()
					ϒf4m_url = λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("videoURL"))
					if λ.IsTrue(ϒf4m_url) {
						λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_f4m_formats", nil), λ.NewArgs(
							ϒf4m_url,
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "f4m_id", Value: λ.NewStr("hds")},
							{Name: "fatal", Value: λ.False},
						}))
					}
					ϒm3u8_url = λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("hls"))
					if λ.IsTrue(ϒm3u8_url) {
						λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
							λ.GetItem(ϒinfo, λ.NewStr("hls")),
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "ext", Value: λ.NewStr("mp4")},
							{Name: "entry_protocol", Value: λ.NewStr("m3u8_native")},
							{Name: "m3u8_id", Value: λ.NewStr("hls")},
							{Name: "fatal", Value: λ.False},
						}))
					}
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("videoMP4List"), λ.NewList()))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒv = τmp1
						ϒmp4_url = λ.Cal(λ.GetAttr(ϒv, "get", nil), λ.NewStr("url"))
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒmp4_url))) {
							continue
						}
						ϒtbr = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒv, "get", nil), λ.NewStr("bitrate")))
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"): ϒmp4_url,
							λ.NewStr("format_id"): λ.Add(λ.NewStr("http"), func() λ.Object {
								if λ.IsTrue(ϒtbr) {
									return λ.Mod(λ.NewStr("-%d"), ϒtbr)
								} else {
									return λ.NewStr("")
								}
							}()),
							λ.NewStr("tbr"):    ϒtbr,
							λ.NewStr("width"):  λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒv, "get", nil), λ.NewStr("width"))),
							λ.NewStr("height"): λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒv, "get", nil), λ.NewStr("height"))),
							λ.NewStr("fps"):    λ.Cal(ϒfloat_or_none, λ.Cal(λ.GetAttr(ϒv, "get", nil), λ.NewStr("fps"))),
						}))
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("formats"):     ϒformats,
						λ.NewStr("thumbnails"):  λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("thumbnailList")),
						λ.NewStr("creator"):     λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("author")),
						λ.NewStr("uploader_id"): λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("editor")),
						λ.NewStr("duration"):    λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("duration"))),
						λ.NewStr("upload_date"): λ.Call(ϒunified_strdate, λ.NewArgs(λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("formattedCreationDate"))), λ.KWArgs{
							{Name: "day_first", Value: λ.False},
						}),
						λ.NewStr("title"):      ϒtitle,
						λ.NewStr("categories"): λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("keywords")),
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"):    WSJIE__VALID_URL,
				λ.NewStr("_real_extract"): WSJIE__real_extract,
			})
		}())
		WSJArticleIE = λ.Cal(λ.TypeType, λ.NewStr("WSJArticleIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				WSJArticleIE__VALID_URL    λ.Object
				WSJArticleIE__real_extract λ.Object
			)
			WSJArticleIE__VALID_URL = λ.NewStr("(?i)https?://(?:www\\.)?wsj\\.com/articles/(?P<id>[^/?#&]+)")
			WSJArticleIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒarticle_id λ.Object
						ϒself       = λargs[0]
						ϒurl        = λargs[1]
						ϒvideo_id   λ.Object
						ϒwebpage    λ.Object
					)
					ϒarticle_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒarticle_id)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("data-src=[\"\\']([a-fA-F0-9-]{36})"), ϒwebpage, λ.NewStr("video id"))
					return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), λ.Mod(λ.NewStr("wsj:%s"), ϒvideo_id), λ.Cal(λ.GetAttr(WSJIE, "ie_key", nil)), ϒvideo_id)
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"):    WSJArticleIE__VALID_URL,
				λ.NewStr("_real_extract"): WSJArticleIE__real_extract,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * contv/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/contv.py
 */

package contv

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	CONtvIE        λ.Object
	InfoExtractor  λ.Object
	ϒfloat_or_none λ.Object
	ϒint_or_none   λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒint_or_none = Ωutils.ϒint_or_none
		CONtvIE = λ.Cal(λ.TypeType, λ.StrLiteral("CONtvIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				CONtvIE__VALID_URL    λ.Object
				CONtvIE__real_extract λ.Object
			)
			CONtvIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?contv\\.com/details-movie/(?P<id>[^/]+)")
			CONtvIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcaption_url   λ.Object
						ϒcaptions      λ.Object
						ϒd             λ.Object
						ϒdescription   λ.Object
						ϒdetails       λ.Object
						ϒentries       λ.Object
						ϒepisode       λ.Object
						ϒepisode_id    λ.Object
						ϒformats       λ.Object
						ϒimage         λ.Object
						ϒimage_url     λ.Object
						ϒm_details     λ.Object
						ϒmedia_hls_url λ.Object
						ϒmedia_mp4_url λ.Object
						ϒp             λ.Object
						ϒseason        λ.Object
						ϒseasons       λ.Object
						ϒself          = λargs[0]
						ϒsubtitles     λ.Object
						ϒthumbnails    λ.Object
						ϒtitle         λ.Object
						ϒurl           = λargs[1]
						ϒvideo_id      λ.Object
						τmp0           λ.Object
						τmp1           λ.Object
						τmp2           λ.Object
						τmp3           λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒdetails = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Add(λ.StrLiteral("http://metax.contv.live.junctiontv.net/metax/2.5/details/"), ϒvideo_id),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "query", Value: λ.DictLiteral(map[string]string{
							"device": "web",
						})},
					})
					if λ.IsTrue(λ.Eq(λ.Calm(ϒdetails, "get", λ.StrLiteral("type")), λ.StrLiteral("episodic"))) {
						ϒseasons = λ.Calm(ϒself, "_download_json", λ.Add(λ.StrLiteral("http://metax.contv.live.junctiontv.net/metax/2.5/seriesfeed/json/"), ϒvideo_id), ϒvideo_id)
						ϒentries = λ.NewList()
						τmp0 = λ.Cal(λ.BuiltinIter, ϒseasons)
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒseason = τmp1
							τmp2 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒseason, "get", λ.StrLiteral("episodes"), λ.NewList()))
							for {
								if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
									break
								}
								ϒepisode = τmp3
								ϒepisode_id = λ.Calm(ϒepisode, "get", λ.StrLiteral("id"))
								if !λ.IsTrue(ϒepisode_id) {
									continue
								}
								λ.Calm(ϒentries, "append", λ.Calm(ϒself, "url_result", λ.Add(λ.StrLiteral("https://www.contv.com/details-movie/"), ϒepisode_id), λ.Calm(CONtvIE, "ie_key"), ϒepisode_id))
							}
						}
						return λ.Calm(ϒself, "playlist_result", ϒentries, ϒvideo_id, λ.Calm(ϒdetails, "get", λ.StrLiteral("title")))
					}
					ϒm_details = λ.GetItem(ϒdetails, λ.StrLiteral("details"))
					ϒtitle = λ.GetItem(ϒdetails, λ.StrLiteral("title"))
					ϒformats = λ.NewList()
					ϒmedia_hls_url = λ.Calm(ϒm_details, "get", λ.StrLiteral("media_hls_url"))
					if λ.IsTrue(ϒmedia_hls_url) {
						λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
							ϒmedia_hls_url,
							ϒvideo_id,
							λ.StrLiteral("mp4"),
						), λ.KWArgs{
							{Name: "m3u8_id", Value: λ.StrLiteral("hls")},
							{Name: "fatal", Value: λ.False},
						}))
					}
					ϒmedia_mp4_url = λ.Calm(ϒm_details, "get", λ.StrLiteral("media_mp4_url"))
					if λ.IsTrue(ϒmedia_mp4_url) {
						λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
							"format_id": λ.StrLiteral("http"),
							"url":       ϒmedia_mp4_url,
						}))
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					ϒsubtitles = λ.DictLiteral(map[λ.Object]λ.Object{})
					ϒcaptions = func() λ.Object {
						if λv := λ.Calm(ϒm_details, "get", λ.StrLiteral("captions")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.DictLiteral(map[λ.Object]λ.Object{})
						}
					}()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒcaptions, "values"))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒcaption_url = τmp1
						λ.Calm(λ.Calm(ϒsubtitles, "setdefault", λ.StrLiteral("en"), λ.NewList()), "append", λ.DictLiteral(map[string]λ.Object{
							"url": ϒcaption_url,
						}))
					}
					ϒthumbnails = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒm_details, "get", λ.StrLiteral("images"), λ.NewList()))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒimage = τmp1
						ϒimage_url = λ.Calm(ϒimage, "get", λ.StrLiteral("url"))
						if !λ.IsTrue(ϒimage_url) {
							continue
						}
						λ.Calm(ϒthumbnails, "append", λ.DictLiteral(map[string]λ.Object{
							"url":    ϒimage_url,
							"width":  λ.Cal(ϒint_or_none, λ.Calm(ϒimage, "get", λ.StrLiteral("width"))),
							"height": λ.Cal(ϒint_or_none, λ.Calm(ϒimage, "get", λ.StrLiteral("height"))),
						}))
					}
					ϒdescription = λ.None
					τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
						λ.StrLiteral("large_"),
						λ.StrLiteral("medium_"),
						λ.StrLiteral("small_"),
						λ.StrLiteral(""),
					))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒp = τmp1
						ϒd = λ.Calm(ϒm_details, "get", λ.Add(ϒp, λ.StrLiteral("description")))
						if λ.IsTrue(ϒd) {
							ϒdescription = ϒd
							break
						}
					}
					return λ.DictLiteral(map[string]λ.Object{
						"id":             ϒvideo_id,
						"title":          ϒtitle,
						"formats":        ϒformats,
						"thumbnails":     ϒthumbnails,
						"description":    ϒdescription,
						"timestamp":      λ.Cal(ϒfloat_or_none, λ.Calm(ϒdetails, "get", λ.StrLiteral("metax_added_on")), λ.IntLiteral(1000)),
						"subtitles":      ϒsubtitles,
						"duration":       λ.Cal(ϒfloat_or_none, λ.Calm(ϒm_details, "get", λ.StrLiteral("duration")), λ.IntLiteral(1000)),
						"view_count":     λ.Cal(ϒint_or_none, λ.Calm(ϒdetails, "get", λ.StrLiteral("num_watched"))),
						"like_count":     λ.Cal(ϒint_or_none, λ.Calm(ϒdetails, "get", λ.StrLiteral("num_fav"))),
						"categories":     λ.Calm(ϒdetails, "get", λ.StrLiteral("category")),
						"tags":           λ.Calm(ϒdetails, "get", λ.StrLiteral("tags")),
						"season_number":  λ.Cal(ϒint_or_none, λ.Calm(ϒdetails, "get", λ.StrLiteral("season"))),
						"episode_number": λ.Cal(ϒint_or_none, λ.Calm(ϒdetails, "get", λ.StrLiteral("episode"))),
						"release_year":   λ.Cal(ϒint_or_none, λ.Calm(ϒdetails, "get", λ.StrLiteral("pub_year"))),
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    CONtvIE__VALID_URL,
				"_real_extract": CONtvIE__real_extract,
			})
		}())
	})
}

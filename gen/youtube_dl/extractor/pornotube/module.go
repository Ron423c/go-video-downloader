// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * pornotube/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/pornotube.py
 */

package pornotube

import (
	Ωjson "github.com/tenta-browser/go-video-downloader/gen/json"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor λ.Object
	PornotubeIE   λ.Object
	ϒint_or_none  λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒint_or_none = Ωutils.ϒint_or_none
		PornotubeIE = λ.Cal(λ.TypeType, λ.StrLiteral("PornotubeIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				PornotubeIE__VALID_URL    λ.Object
				PornotubeIE__real_extract λ.Object
			)
			PornotubeIE__VALID_URL = λ.StrLiteral("https?://(?:\\w+\\.)?pornotube\\.com/(?:[^?#]*?)/video/(?P<id>[0-9]+)")
			PornotubeIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						FIELDS                λ.Object
						ϒcategories           λ.Object
						ϒduration             λ.Object
						ϒend                  λ.Object
						ϒinfo                 λ.Object
						ϒmovie_id             λ.Object
						ϒprimary_image_number λ.Object
						ϒself                 = λargs[0]
						ϒstart                λ.Object
						ϒthumbnail            λ.Object
						ϒtimestamp            λ.Object
						ϒtitle                λ.Object
						ϒtoken                λ.Object
						ϒuploader             λ.Object
						ϒurl                  = λargs[1]
						ϒvideo_id             λ.Object
						ϒvideo_url            λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒtoken = λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.StrLiteral("https://api.aebn.net/auth/v2/origins/authenticate"),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "note", Value: λ.StrLiteral("Downloading token")},
						{Name: "data", Value: λ.Calm(λ.Cal(Ωjson.ϒdumps, λ.DictLiteral(map[string]string{
							"credentials": "Clip Application",
						})), "encode", λ.StrLiteral("utf-8"))},
						{Name: "headers", Value: λ.DictLiteral(map[string]string{
							"Content-Type": "application/json",
							"Origin":       "http://www.pornotube.com",
						})},
					}), λ.StrLiteral("tokenKey"))
					ϒvideo_url = λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Mod(λ.StrLiteral("https://api.aebn.net/delivery/v1/clips/%s/MP4"), ϒvideo_id),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "note", Value: λ.StrLiteral("Downloading delivery information")},
						{Name: "headers", Value: λ.DictLiteral(map[string]λ.Object{
							"Authorization": ϒtoken,
						})},
					}), λ.StrLiteral("mediaUrl"))
					FIELDS = λ.NewTuple(
						λ.StrLiteral("title"),
						λ.StrLiteral("description"),
						λ.StrLiteral("startSecond"),
						λ.StrLiteral("endSecond"),
						λ.StrLiteral("publishDate"),
						λ.StrLiteral("studios{name}"),
						λ.StrLiteral("categories{name}"),
						λ.StrLiteral("movieId"),
						λ.StrLiteral("primaryImageNumber"),
					)
					ϒinfo = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Mod(λ.StrLiteral("https://api.aebn.net/content/v2/clips/%s?fields=%s"), λ.NewTuple(
							ϒvideo_id,
							λ.Calm(λ.StrLiteral(","), "join", FIELDS),
						)),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "note", Value: λ.StrLiteral("Downloading metadata")},
						{Name: "headers", Value: λ.DictLiteral(map[string]λ.Object{
							"Authorization": ϒtoken,
						})},
					})
					if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒinfo, λ.ListType)) {
						ϒinfo = λ.GetItem(ϒinfo, λ.IntLiteral(0))
					}
					ϒtitle = λ.GetItem(ϒinfo, λ.StrLiteral("title"))
					ϒtimestamp = λ.Call(ϒint_or_none, λ.NewArgs(λ.Calm(ϒinfo, "get", λ.StrLiteral("publishDate"))), λ.KWArgs{
						{Name: "scale", Value: λ.IntLiteral(1000)},
					})
					ϒuploader = λ.Calm(λ.GetItem(λ.Calm(ϒinfo, "get", λ.StrLiteral("studios"), λ.NewList(λ.DictLiteral(map[λ.Object]λ.Object{}))), λ.IntLiteral(0)), "get", λ.StrLiteral("name"))
					ϒmovie_id = λ.Calm(ϒinfo, "get", λ.StrLiteral("movieId"))
					ϒprimary_image_number = λ.Calm(ϒinfo, "get", λ.StrLiteral("primaryImageNumber"))
					ϒthumbnail = λ.None
					if λ.IsTrue(func() λ.Object {
						if λv := ϒmovie_id; !λ.IsTrue(λv) {
							return λv
						} else {
							return ϒprimary_image_number
						}
					}()) {
						ϒthumbnail = λ.Mod(λ.StrLiteral("http://pic.aebn.net/dis/t/%s/%s_%08d.jpg"), λ.NewTuple(
							ϒmovie_id,
							ϒmovie_id,
							ϒprimary_image_number,
						))
					}
					ϒstart = λ.Cal(ϒint_or_none, λ.Calm(ϒinfo, "get", λ.StrLiteral("startSecond")))
					ϒend = λ.Cal(ϒint_or_none, λ.Calm(ϒinfo, "get", λ.StrLiteral("endSecond")))
					ϒduration = func() λ.Object {
						if λ.IsTrue(func() λ.Object {
							if λv := ϒstart; !λ.IsTrue(λv) {
								return λv
							} else {
								return ϒend
							}
						}()) {
							return λ.Sub(ϒend, ϒstart)
						} else {
							return λ.None
						}
					}()
					ϒcategories = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒc   λ.Object
									τmp0 λ.Object
									τmp1 λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒinfo, "get", λ.StrLiteral("categories"), λ.NewList()))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒc = τmp1
									if λ.IsTrue(λ.Calm(ϒc, "get", λ.StrLiteral("name"))) {
										λgy.Yield(λ.GetItem(ϒc, λ.StrLiteral("name")))
									}
								}
								return λ.None
							})
						})))
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒvideo_id,
						"url":         ϒvideo_url,
						"title":       ϒtitle,
						"description": λ.Calm(ϒinfo, "get", λ.StrLiteral("description")),
						"duration":    ϒduration,
						"timestamp":   ϒtimestamp,
						"uploader":    ϒuploader,
						"thumbnail":   ϒthumbnail,
						"categories":  ϒcategories,
						"age_limit":   λ.IntLiteral(18),
					})
				})
			return λ.DictLiteral(map[string]λ.Object{
				"_VALID_URL":    PornotubeIE__VALID_URL,
				"_real_extract": PornotubeIE__real_extract,
			})
		}())
	})
}

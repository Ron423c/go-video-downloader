// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * voicerepublic/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/voicerepublic.py
 */

package voicerepublic

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError  λ.Object
	InfoExtractor   λ.Object
	VoiceRepublicIE λ.Object
	ϒcompat_str     λ.Object
	ϒdetermine_ext  λ.Object
	ϒint_or_none    λ.Object
	ϒurljoin        λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ExtractorError = Ωutils.ExtractorError
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒurljoin = Ωutils.ϒurljoin
		VoiceRepublicIE = λ.Cal(λ.TypeType, λ.StrLiteral("VoiceRepublicIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				VoiceRepublicIE__VALID_URL    λ.Object
				VoiceRepublicIE__real_extract λ.Object
			)
			VoiceRepublicIE__VALID_URL = λ.StrLiteral("https?://voicerepublic\\.com/(?:talks|embed)/(?P<id>[0-9a-z-]+)")
			VoiceRepublicIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdisplay_id λ.Object
						ϒformats    λ.Object
						ϒself       = λargs[0]
						ϒtalk       λ.Object
						ϒtitle      λ.Object
						ϒurl        = λargs[1]
						ϒwebpage    λ.Object
					)
					ϒdisplay_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒdisplay_id)
					if λ.Contains(ϒwebpage, λ.StrLiteral(">Queued for processing, please stand by...<")) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.StrLiteral("Audio is still queued for processing")), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒtalk = λ.GetItem(λ.Calm(ϒself, "_parse_json", λ.Calm(ϒself, "_search_regex", λ.StrLiteral("initialSnapshot\\s*=\\s*({.+?});"), ϒwebpage, λ.StrLiteral("talk")), ϒdisplay_id), λ.StrLiteral("talk"))
					ϒtitle = λ.GetItem(ϒtalk, λ.StrLiteral("title"))
					ϒformats = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒformat_id λ.Object
									ϒtalk_url  λ.Object
									τmp0       λ.Object
									τmp1       λ.Object
									τmp2       λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(λ.GetItem(ϒtalk, λ.StrLiteral("media_links")), "items"))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									τmp2 = τmp1
									ϒformat_id = λ.GetItem(τmp2, λ.IntLiteral(0))
									ϒtalk_url = λ.GetItem(τmp2, λ.IntLiteral(1))
									λgy.Yield(λ.DictLiteral(map[string]λ.Object{
										"url":       λ.Cal(ϒurljoin, ϒurl, ϒtalk_url),
										"format_id": ϒformat_id,
										"ext": func() λ.Object {
											if λv := λ.Cal(ϒdetermine_ext, ϒtalk_url); λ.IsTrue(λv) {
												return λv
											} else {
												return ϒformat_id
											}
										}(),
										"vcodec": λ.StrLiteral("none"),
									}))
								}
								return λ.None
							})
						})))
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					return λ.DictLiteral(map[string]λ.Object{
						"id": λ.Cal(ϒcompat_str, func() λ.Object {
							if λv := λ.Calm(ϒtalk, "get", λ.StrLiteral("id")); λ.IsTrue(λv) {
								return λv
							} else {
								return ϒdisplay_id
							}
						}()),
						"display_id":  ϒdisplay_id,
						"title":       ϒtitle,
						"description": λ.Calm(ϒtalk, "get", λ.StrLiteral("teaser")),
						"thumbnail":   λ.Calm(ϒtalk, "get", λ.StrLiteral("image_url")),
						"duration":    λ.Cal(ϒint_or_none, λ.Calm(ϒtalk, "get", λ.StrLiteral("archived_duration"))),
						"view_count":  λ.Cal(ϒint_or_none, λ.Calm(ϒtalk, "get", λ.StrLiteral("play_count"))),
						"formats":     ϒformats,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    VoiceRepublicIE__VALID_URL,
				"_real_extract": VoiceRepublicIE__real_extract,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * streamango/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/streamango.py
 */

package streamango

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError λ.Object
	InfoExtractor  λ.Object
	StreamangoIE   λ.Object
	ϒcompat_chr    λ.Object
	ϒdetermine_ext λ.Object
	ϒint_or_none   λ.Object
	ϒjs_to_json    λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_chr = Ωcompat.ϒcompat_chr
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒjs_to_json = Ωutils.ϒjs_to_json
		StreamangoIE = λ.Cal(λ.TypeType, λ.NewStr("StreamangoIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				StreamangoIE__TESTS        λ.Object
				StreamangoIE__VALID_URL    λ.Object
				StreamangoIE__real_extract λ.Object
			)
			StreamangoIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?(?:streamango\\.com|fruithosts\\.net|streamcherry\\.com)/(?:f|embed)/(?P<id>[^/?#&]+)")
			StreamangoIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://streamango.com/f/clapasobsptpkdfe/20170315_150006_mp4"),
					λ.NewStr("md5"): λ.NewStr("e992787515a182f55e38fc97588d802a"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):    λ.NewStr("clapasobsptpkdfe"),
						λ.NewStr("ext"):   λ.NewStr("mp4"),
						λ.NewStr("title"): λ.NewStr("20170315_150006.mp4"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://streamango.com/embed/foqebrpftarclpob/asdf_asd_2_mp4"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):    λ.NewStr("foqebrpftarclpob"),
						λ.NewStr("ext"):   λ.NewStr("mp4"),
						λ.NewStr("title"): λ.NewStr("foqebrpftarclpob"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
					λ.NewStr("skip"): λ.NewStr("gone"),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://streamango.com/embed/clapasobsptpkdfe/20170315_150006_mp4"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://fruithosts.net/f/mreodparcdcmspsm/w1f1_r4lph_2018_brrs_720p_latino_mp4"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://streamcherry.com/f/clapasobsptpkdfe/"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			StreamangoIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdecrypt_src λ.Object
						ϒerror       λ.Object
						ϒext         λ.Object
						ϒformat_     λ.Object
						ϒformats     λ.Object
						ϒmobj        λ.Object
						ϒself        = λargs[0]
						ϒsrc         λ.Object
						ϒtitle       λ.Object
						ϒurl         = λargs[1]
						ϒvideo       λ.Object
						ϒvideo_id    λ.Object
						ϒwebpage     λ.Object
						τmp0         λ.Object
						τmp1         λ.Object
					)
					ϒdecrypt_src = λ.NewFunction("decrypt_src",
						[]λ.Param{
							{Name: "encoded"},
							{Name: "val"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ALPHABET   λ.Object
								ϒchar_code λ.Object
								ϒdecoded   λ.Object
								ϒencoded   = λargs[0]
								ϒi         λ.Object
								ϒj         λ.Object
								ϒsm        λ.Object
								ϒstr_len   λ.Object
								ϒval       = λargs[1]
								τmp0       λ.Object
								τmp1       λ.Object
								τmp2       λ.Object
							)
							ALPHABET = λ.NewStr("=/+9876543210zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA")
							ϒencoded = λ.Cal(Ωre.ϒsub, λ.NewStr("[^A-Za-z0-9+/=]"), λ.NewStr(""), ϒencoded)
							ϒdecoded = λ.NewStr("")
							ϒsm = λ.Mul(λ.NewList(λ.None), λ.NewInt(4))
							ϒi = λ.NewInt(0)
							ϒstr_len = λ.Cal(λ.BuiltinLen, ϒencoded)
							for λ.IsTrue(λ.Lt(ϒi, ϒstr_len)) {
								τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.RangeType, λ.NewInt(4)))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒj = τmp1
									λ.SetItem(ϒsm, λ.Mod(ϒj, λ.NewInt(4)), λ.Cal(λ.GetAttr(ALPHABET, "index", nil), λ.GetItem(ϒencoded, ϒi)))
									τmp2 = λ.IAdd(ϒi, λ.NewInt(1))
									ϒi = τmp2
								}
								ϒchar_code = λ.Xor(λ.Or(λ.LShift(λ.GetItem(ϒsm, λ.NewInt(0)), λ.NewInt(2)), λ.RShift(λ.GetItem(ϒsm, λ.NewInt(1)), λ.NewInt(4))), ϒval)
								τmp0 = λ.IAdd(ϒdecoded, λ.Cal(ϒcompat_chr, ϒchar_code))
								ϒdecoded = τmp0
								if λ.IsTrue(λ.Ne(λ.GetItem(ϒsm, λ.NewInt(2)), λ.NewInt(64))) {
									ϒchar_code = λ.Or(λ.LShift(λ.And(λ.GetItem(ϒsm, λ.NewInt(1)), λ.NewInt(15)), λ.NewInt(4)), λ.RShift(λ.GetItem(ϒsm, λ.NewInt(2)), λ.NewInt(2)))
									τmp0 = λ.IAdd(ϒdecoded, λ.Cal(ϒcompat_chr, ϒchar_code))
									ϒdecoded = τmp0
								}
								if λ.IsTrue(λ.Ne(λ.GetItem(ϒsm, λ.NewInt(3)), λ.NewInt(64))) {
									ϒchar_code = λ.Or(λ.LShift(λ.And(λ.GetItem(ϒsm, λ.NewInt(2)), λ.NewInt(3)), λ.NewInt(6)), λ.GetItem(ϒsm, λ.NewInt(3)))
									τmp0 = λ.IAdd(ϒdecoded, λ.Cal(ϒcompat_chr, ϒchar_code))
									ϒdecoded = τmp0
								}
							}
							return ϒdecoded
						})
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					ϒtitle = λ.Call(λ.GetAttr(ϒself, "_og_search_title", nil), λ.NewArgs(ϒwebpage), λ.KWArgs{
						{Name: "default", Value: ϒvideo_id},
					})
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfindall, λ.NewStr("({[^}]*\\bsrc\\s*:\\s*[^}]*})"), ϒwebpage))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒformat_ = τmp1
						ϒmobj = λ.Cal(Ωre.ϒsearch, λ.NewStr("(src\\s*:\\s*[^(]+\\(([^)]*)\\)[\\s,]*)"), ϒformat_)
						if λ.IsTrue(λ.NewBool(ϒmobj == λ.None)) {
							continue
						}
						ϒformat_ = λ.Cal(λ.GetAttr(ϒformat_, "replace", nil), λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewInt(0)), λ.NewStr(""))
						ϒvideo = func() λ.Object {
							if λv := λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
								ϒformat_,
								ϒvideo_id,
							), λ.KWArgs{
								{Name: "transform_source", Value: ϒjs_to_json},
								{Name: "fatal", Value: λ.False},
							}); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewDictWithTable(map[λ.Object]λ.Object{})
							}
						}()
						ϒmobj = λ.Cal(Ωre.ϒsearch, λ.NewStr("([\\'\"])(?P<src>(?:(?!\\1).)+)\\1\\s*,\\s*(?P<val>\\d+)"), λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewInt(1)))
						if λ.IsTrue(λ.NewBool(ϒmobj == λ.None)) {
							continue
						}
						ϒsrc = λ.Cal(ϒdecrypt_src, λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("src")), λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("val"))))
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒsrc))) {
							continue
						}
						ϒext = λ.Call(ϒdetermine_ext, λ.NewArgs(ϒsrc), λ.KWArgs{
							{Name: "default_ext", Value: λ.None},
						})
						if λ.IsTrue(func() λ.Object {
							if λv := λ.Eq(λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("type")), λ.NewStr("application/dash+xml")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Eq(ϒext, λ.NewStr("mpd"))
							}
						}()) {
							λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_mpd_formats", nil), λ.NewArgs(
								ϒsrc,
								ϒvideo_id,
							), λ.KWArgs{
								{Name: "mpd_id", Value: λ.NewStr("dash")},
								{Name: "fatal", Value: λ.False},
							}))
						} else {
							λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("url"): ϒsrc,
								λ.NewStr("ext"): func() λ.Object {
									if λv := ϒext; λ.IsTrue(λv) {
										return λv
									} else {
										return λ.NewStr("mp4")
									}
								}(),
								λ.NewStr("width"):  λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("width"))),
								λ.NewStr("height"): λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("height"))),
								λ.NewStr("tbr"):    λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("bitrate"))),
							}))
						}
					}
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒformats))) {
						ϒerror = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewStr("<p[^>]+\\bclass=[\"\\']lead[^>]+>(.+?)</p>"),
							ϒwebpage,
							λ.NewStr("error"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						})
						if λ.IsTrue(func() λ.Object {
							if λv := λ.NewBool(!λ.IsTrue(ϒerror)); !λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(λ.Contains(ϒwebpage, λ.NewStr(">Sorry")))
							}
						}()) {
							ϒerror = λ.Mod(λ.NewStr("Video %s is not available"), ϒvideo_id)
						}
						if λ.IsTrue(ϒerror) {
							panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(ϒerror), λ.KWArgs{
								{Name: "expected", Value: λ.True},
							})))
						}
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):      ϒvideo_id,
						λ.NewStr("url"):     ϒurl,
						λ.NewStr("title"):   ϒtitle,
						λ.NewStr("formats"): ϒformats,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        StreamangoIE__TESTS,
				λ.NewStr("_VALID_URL"):    StreamangoIE__VALID_URL,
				λ.NewStr("_real_extract"): StreamangoIE__real_extract,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.
// +build !restricted

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * youtube/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/youtube.py
 */

package youtube

import (
	Ωitertools "github.com/tenta-browser/go-video-downloader/gen/itertools"
	Ωjson "github.com/tenta-browser/go-video-downloader/gen/json"
	Ωpath "github.com/tenta-browser/go-video-downloader/gen/os/path"
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωtime "github.com/tenta-browser/go-video-downloader/gen/time"
	Ωparse "github.com/tenta-browser/go-video-downloader/gen/urllib/parse"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωjsinterp "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/jsinterp"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError                    λ.Object
	InfoExtractor                     λ.Object
	JSInterpreter                     λ.Object
	SearchInfoExtractor               λ.Object
	YoutubeBaseInfoExtractor          λ.Object
	YoutubeChannelIE                  λ.Object
	YoutubeEntryListBaseInfoExtractor λ.Object
	YoutubeFavouritesIE               λ.Object
	YoutubeFeedsInfoExtractor         λ.Object
	YoutubeHistoryIE                  λ.Object
	YoutubeIE                         λ.Object
	YoutubeLiveIE                     λ.Object
	YoutubePlaylistBaseInfoExtractor  λ.Object
	YoutubePlaylistIE                 λ.Object
	YoutubePlaylistsBaseInfoExtractor λ.Object
	YoutubePlaylistsIE                λ.Object
	YoutubeRecommendedIE              λ.Object
	YoutubeSearchBaseInfoExtractor    λ.Object
	YoutubeSearchIE                   λ.Object
	YoutubeSearchURLIE                λ.Object
	YoutubeShowIE                     λ.Object
	YoutubeSubscriptionsIE            λ.Object
	YoutubeTruncatedIDIE              λ.Object
	YoutubeTruncatedURLIE             λ.Object
	YoutubeUserIE                     λ.Object
	YoutubeWatchLaterIE               λ.Object
	ϒbool_or_none                     λ.Object
	ϒclean_html                       λ.Object
	ϒcompat_HTTPError                 λ.Object
	ϒcompat_chr                       λ.Object
	ϒcompat_kwargs                    λ.Object
	ϒcompat_parse_qs                  λ.Object
	ϒcompat_str                       λ.Object
	ϒcompat_urllib_parse_unquote      λ.Object
	ϒcompat_urllib_parse_unquote_plus λ.Object
	ϒcompat_urllib_parse_urlencode    λ.Object
	ϒcompat_urllib_parse_urlparse     λ.Object
	ϒdict_get                         λ.Object
	ϒerror_to_compat_str              λ.Object
	ϒextract_attributes               λ.Object
	ϒfloat_or_none                    λ.Object
	ϒget_element_by_attribute         λ.Object
	ϒget_element_by_id                λ.Object
	ϒint_or_none                      λ.Object
	ϒmimetype2ext                     λ.Object
	ϒorderedSet                       λ.Object
	ϒparse_codecs                     λ.Object
	ϒparse_duration                   λ.Object
	ϒremove_quotes                    λ.Object
	ϒremove_start                     λ.Object
	ϒsmuggle_url                      λ.Object
	ϒstr_or_none                      λ.Object
	ϒstr_to_int                       λ.Object
	ϒtry_get                          λ.Object
	ϒunescapeHTML                     λ.Object
	ϒunified_strdate                  λ.Object
	ϒunsmuggle_url                    λ.Object
	ϒuppercase_escape                 λ.Object
	ϒurl_or_none                      λ.Object
	ϒurlencode_postdata               λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		SearchInfoExtractor = Ωcommon.SearchInfoExtractor
		JSInterpreter = Ωjsinterp.JSInterpreter
		ϒcompat_chr = Ωcompat.ϒcompat_chr
		ϒcompat_HTTPError = Ωcompat.ϒcompat_HTTPError
		ϒcompat_kwargs = Ωcompat.ϒcompat_kwargs
		ϒcompat_parse_qs = Ωcompat.ϒcompat_parse_qs
		ϒcompat_urllib_parse_unquote = Ωcompat.ϒcompat_urllib_parse_unquote
		ϒcompat_urllib_parse_unquote_plus = Ωcompat.ϒcompat_urllib_parse_unquote_plus
		ϒcompat_urllib_parse_urlencode = Ωcompat.ϒcompat_urllib_parse_urlencode
		ϒcompat_urllib_parse_urlparse = Ωcompat.ϒcompat_urllib_parse_urlparse
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒbool_or_none = Ωutils.ϒbool_or_none
		ϒclean_html = Ωutils.ϒclean_html
		ϒdict_get = Ωutils.ϒdict_get
		ϒerror_to_compat_str = Ωutils.ϒerror_to_compat_str
		ϒextract_attributes = Ωutils.ϒextract_attributes
		ExtractorError = Ωutils.ExtractorError
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒget_element_by_attribute = Ωutils.ϒget_element_by_attribute
		ϒget_element_by_id = Ωutils.ϒget_element_by_id
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒmimetype2ext = Ωutils.ϒmimetype2ext
		ϒorderedSet = Ωutils.ϒorderedSet
		ϒparse_codecs = Ωutils.ϒparse_codecs
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒremove_quotes = Ωutils.ϒremove_quotes
		ϒremove_start = Ωutils.ϒremove_start
		ϒsmuggle_url = Ωutils.ϒsmuggle_url
		ϒstr_or_none = Ωutils.ϒstr_or_none
		ϒstr_to_int = Ωutils.ϒstr_to_int
		ϒtry_get = Ωutils.ϒtry_get
		ϒunescapeHTML = Ωutils.ϒunescapeHTML
		ϒunified_strdate = Ωutils.ϒunified_strdate
		ϒunsmuggle_url = Ωutils.ϒunsmuggle_url
		ϒuppercase_escape = Ωutils.ϒuppercase_escape
		ϒurl_or_none = Ωutils.ϒurl_or_none
		ϒurlencode_postdata = Ωutils.ϒurlencode_postdata
		YoutubeBaseInfoExtractor = λ.Cal(λ.TypeType, λ.NewStr("YoutubeBaseInfoExtractor"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				YoutubeBaseInfoExtractor__LOGIN_REQUIRED          λ.Object
				YoutubeBaseInfoExtractor__NETRC_MACHINE           λ.Object
				YoutubeBaseInfoExtractor__PLAYLIST_ID_RE          λ.Object
				YoutubeBaseInfoExtractor__download_webpage_handle λ.Object
				YoutubeBaseInfoExtractor__login                   λ.Object
				YoutubeBaseInfoExtractor__real_initialize         λ.Object
				YoutubeBaseInfoExtractor__set_language            λ.Object
			)
			λ.NewStr("Provide base functions for Youtube extractors")
			YoutubeBaseInfoExtractor__NETRC_MACHINE = λ.NewStr("youtube")
			YoutubeBaseInfoExtractor__LOGIN_REQUIRED = λ.False
			YoutubeBaseInfoExtractor__PLAYLIST_ID_RE = λ.NewStr("(?:PL|LL|EC|UU|FL|RD|UL|TL|OLAK5uy_)[0-9A-Za-z-_]{10,}")
			YoutubeBaseInfoExtractor__set_language = λ.NewFunction("_set_language",
				[]λ.Param{
					{Name: "self"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒself = λargs[0]
					)
					λ.Call(λ.GetAttr(ϒself, "_set_cookie", nil), λ.NewArgs(
						λ.NewStr(".youtube.com"),
						λ.NewStr("PREF"),
						λ.NewStr("f1=50000000&hl=en"),
					), λ.KWArgs{
						{Name: "expire_time", Value: λ.Add(λ.Cal(Ωtime.ϒtime), λ.Mul(λ.Mul(λ.Mul(λ.NewInt(2), λ.NewInt(30)), λ.NewInt(24)), λ.NewInt(3600)))},
					})
					return λ.None
				})
			YoutubeBaseInfoExtractor__login = λ.NewFunction("_login",
				[]λ.Param{
					{Name: "self"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						CHALLENGES            λ.Object
						ϒchallenge            λ.Object
						ϒchallenge_req        λ.Object
						ϒchallenge_results    λ.Object
						ϒchallenge_str        λ.Object
						ϒcheck_cookie_results λ.Object
						ϒcheck_cookie_url     λ.Object
						ϒlogin_challenge      λ.Object
						ϒlogin_form           λ.Object
						ϒlogin_msg            λ.Object
						ϒlogin_page           λ.Object
						ϒlogin_res            λ.Object
						ϒlookup_req           λ.Object
						ϒlookup_results       λ.Object
						ϒpassword             λ.Object
						ϒreq                  λ.Object
						ϒres                  λ.Object
						ϒself                 = λargs[0]
						ϒstatus               λ.Object
						ϒtfa_code             λ.Object
						ϒtfa_msg              λ.Object
						ϒtfa_req              λ.Object
						ϒtfa_res              λ.Object
						ϒtfa_results          λ.Object
						ϒtl                   λ.Object
						ϒuser_hash            λ.Object
						ϒusername             λ.Object
						ϒwarn                 λ.Object
						τmp0                  λ.Object
					)
					λ.NewStr("\n        Attempt to log in to YouTube.\n        True is returned if successful or skipped.\n        False is returned if login failed.\n\n        If _LOGIN_REQUIRED is set and no authentication was provided, an error is raised.\n        ")
					τmp0 = λ.Cal(λ.GetAttr(ϒself, "_get_login_info", nil))
					ϒusername = λ.GetItem(τmp0, λ.NewInt(0))
					ϒpassword = λ.GetItem(τmp0, λ.NewInt(1))
					if λ.IsTrue(λ.NewBool(ϒusername == λ.None)) {
						if λ.IsTrue(func() λ.Object {
							if λv := λ.GetAttr(ϒself, "_LOGIN_REQUIRED", nil); !λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(λ.Cal(λ.GetAttr(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "params", nil), "get", nil), λ.NewStr("cookiefile")) == λ.None)
							}
						}()) {
							panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.NewStr("No login info available, needed for using %s."), λ.GetAttr(ϒself, "IE_NAME", nil))), λ.KWArgs{
								{Name: "expected", Value: λ.True},
							})))
						}
						return λ.True
					}
					ϒlogin_page = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
						λ.GetAttr(ϒself, "_LOGIN_URL", nil),
						λ.None,
					), λ.KWArgs{
						{Name: "note", Value: λ.NewStr("Downloading login page")},
						{Name: "errnote", Value: λ.NewStr("unable to fetch login page")},
						{Name: "fatal", Value: λ.False},
					})
					if λ.IsTrue(λ.NewBool(ϒlogin_page == λ.False)) {
						return λ.None
					}
					ϒlogin_form = λ.Cal(λ.GetAttr(ϒself, "_hidden_inputs", nil), ϒlogin_page)
					ϒreq = λ.NewFunction("req",
						[]λ.Param{
							{Name: "url"},
							{Name: "f_req"},
							{Name: "note"},
							{Name: "errnote"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒdata    λ.Object
								ϒerrnote = λargs[3]
								ϒf_req   = λargs[1]
								ϒnote    = λargs[2]
								ϒurl     = λargs[0]
							)
							ϒdata = λ.Cal(λ.GetAttr(ϒlogin_form, "copy", nil))
							λ.Cal(λ.GetAttr(ϒdata, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("pstMsg"):          λ.NewInt(1),
								λ.NewStr("checkConnection"): λ.NewStr("youtube"),
								λ.NewStr("checkedDomains"):  λ.NewStr("youtube"),
								λ.NewStr("hl"):              λ.NewStr("en"),
								λ.NewStr("deviceinfo"):      λ.NewStr("[null,null,null,[],null,\"US\",null,null,[],\"GlifWebSignIn\",null,[null,null,[]]]"),
								λ.NewStr("f.req"):           λ.Cal(Ωjson.ϒdumps, ϒf_req),
								λ.NewStr("flowName"):        λ.NewStr("GlifWebSignIn"),
								λ.NewStr("flowEntry"):       λ.NewStr("ServiceLogin"),
								λ.NewStr("bgRequest"):       λ.NewStr("[\"identifier\",\"\"]"),
							}))
							return λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
								ϒurl,
								λ.None,
							), λ.KWArgs{
								{Name: "note", Value: ϒnote},
								{Name: "errnote", Value: ϒerrnote},
								{Name: "transform_source", Value: λ.NewFunction("<lambda>",
									[]λ.Param{
										{Name: "s"},
									},
									0, false, false,
									func(λargs []λ.Object) λ.Object {
										var (
											ϒs = λargs[0]
										)
										return λ.Cal(Ωre.ϒsub, λ.NewStr("^[^[]*"), λ.NewStr(""), ϒs)
									})},
								{Name: "fatal", Value: λ.False},
								{Name: "data", Value: λ.Cal(ϒurlencode_postdata, ϒdata)},
								{Name: "headers", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("Content-Type"):         λ.NewStr("application/x-www-form-urlencoded;charset=utf-8"),
									λ.NewStr("Google-Accounts-XSRF"): λ.NewInt(1),
								})},
							})
						})
					ϒwarn = λ.NewFunction("warn",
						[]λ.Param{
							{Name: "message"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒmessage = λargs[0]
							)
							λ.Cal(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "report_warning", nil), ϒmessage)
							return λ.None
						})
					ϒlookup_req = λ.NewList(
						ϒusername,
						λ.None,
						λ.NewList(),
						λ.None,
						λ.NewStr("US"),
						λ.None,
						λ.None,
						λ.NewInt(2),
						λ.False,
						λ.True,
						λ.NewList(
							λ.None,
							λ.None,
							λ.NewList(
								λ.NewInt(2),
								λ.NewInt(1),
								λ.None,
								λ.NewInt(1),
								λ.NewStr("https://accounts.google.com/ServiceLogin?passive=true&continue=https%3A%2F%2Fwww.youtube.com%2Fsignin%3Fnext%3D%252F%26action_handle_signin%3Dtrue%26hl%3Den%26app%3Ddesktop%26feature%3Dsign_in_button&hl=en&service=youtube&uilel=3&requestPath=%2FServiceLogin&Page=PasswordSeparationSignIn"),
								λ.None,
								λ.NewList(),
								λ.NewInt(4),
							),
							λ.NewInt(1),
							λ.NewList(
								λ.None,
								λ.None,
								λ.NewList(),
							),
							λ.None,
							λ.None,
							λ.None,
							λ.True,
						),
						ϒusername,
					)
					ϒlookup_results = λ.Cal(ϒreq, λ.GetAttr(ϒself, "_LOOKUP_URL", nil), ϒlookup_req, λ.NewStr("Looking up account info"), λ.NewStr("Unable to look up account info"))
					if λ.IsTrue(λ.NewBool(ϒlookup_results == λ.False)) {
						return λ.False
					}
					ϒuser_hash = λ.Cal(ϒtry_get, ϒlookup_results, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(λ.GetItem(ϒx, λ.NewInt(0)), λ.NewInt(2))
						}), ϒcompat_str)
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒuser_hash))) {
						λ.Cal(ϒwarn, λ.NewStr("Unable to extract user hash"))
						return λ.False
					}
					ϒchallenge_req = λ.NewList(
						ϒuser_hash,
						λ.None,
						λ.NewInt(1),
						λ.None,
						λ.NewList(
							λ.NewInt(1),
							λ.None,
							λ.None,
							λ.None,
							λ.NewList(
								ϒpassword,
								λ.None,
								λ.True,
							),
						),
						λ.NewList(
							λ.None,
							λ.None,
							λ.NewList(
								λ.NewInt(2),
								λ.NewInt(1),
								λ.None,
								λ.NewInt(1),
								λ.NewStr("https://accounts.google.com/ServiceLogin?passive=true&continue=https%3A%2F%2Fwww.youtube.com%2Fsignin%3Fnext%3D%252F%26action_handle_signin%3Dtrue%26hl%3Den%26app%3Ddesktop%26feature%3Dsign_in_button&hl=en&service=youtube&uilel=3&requestPath=%2FServiceLogin&Page=PasswordSeparationSignIn"),
								λ.None,
								λ.NewList(),
								λ.NewInt(4),
							),
							λ.NewInt(1),
							λ.NewList(
								λ.None,
								λ.None,
								λ.NewList(),
							),
							λ.None,
							λ.None,
							λ.None,
							λ.True,
						),
					)
					ϒchallenge_results = λ.Cal(ϒreq, λ.GetAttr(ϒself, "_CHALLENGE_URL", nil), ϒchallenge_req, λ.NewStr("Logging in"), λ.NewStr("Unable to log in"))
					if λ.IsTrue(λ.NewBool(ϒchallenge_results == λ.False)) {
						return λ.None
					}
					ϒlogin_res = λ.Cal(ϒtry_get, ϒchallenge_results, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(λ.GetItem(ϒx, λ.NewInt(0)), λ.NewInt(5))
						}), λ.ListType)
					if λ.IsTrue(ϒlogin_res) {
						ϒlogin_msg = λ.Cal(ϒtry_get, ϒlogin_res, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(ϒx, λ.NewInt(5))
							}), ϒcompat_str)
						λ.Cal(ϒwarn, func() λ.Object {
							if λ.IsTrue(λ.Eq(ϒlogin_msg, λ.NewStr("INCORRECT_ANSWER_ENTERED"))) {
								return λ.Mod(λ.NewStr("Unable to login: %s"), λ.NewStr("Invalid password"))
							} else {
								return ϒlogin_msg
							}
						}())
						return λ.False
					}
					ϒres = λ.Cal(ϒtry_get, ϒchallenge_results, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(λ.GetItem(ϒx, λ.NewInt(0)), λ.Neg(λ.NewInt(1)))
						}), λ.ListType)
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒres))) {
						λ.Cal(ϒwarn, λ.NewStr("Unable to extract result entry"))
						return λ.False
					}
					ϒlogin_challenge = λ.Cal(ϒtry_get, ϒres, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(λ.GetItem(ϒx, λ.NewInt(0)), λ.NewInt(0))
						}), λ.ListType)
					if λ.IsTrue(ϒlogin_challenge) {
						ϒchallenge_str = λ.Cal(ϒtry_get, ϒlogin_challenge, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(ϒx, λ.NewInt(2))
							}), ϒcompat_str)
						if λ.IsTrue(λ.Eq(ϒchallenge_str, λ.NewStr("TWO_STEP_VERIFICATION"))) {
							ϒstatus = λ.Cal(ϒtry_get, ϒlogin_challenge, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(ϒx, λ.NewInt(5))
								}), ϒcompat_str)
							if λ.IsTrue(λ.Eq(ϒstatus, λ.NewStr("QUOTA_EXCEEDED"))) {
								λ.Cal(ϒwarn, λ.NewStr("Exceeded the limit of TFA codes, try later"))
								return λ.False
							}
							ϒtl = λ.Cal(ϒtry_get, ϒchallenge_results, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(ϒx, λ.NewInt(1)), λ.NewInt(2))
								}), ϒcompat_str)
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒtl))) {
								λ.Cal(ϒwarn, λ.NewStr("Unable to extract TL"))
								return λ.False
							}
							ϒtfa_code = λ.Cal(λ.GetAttr(ϒself, "_get_tfa_info", nil), λ.NewStr("2-step verification code"))
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒtfa_code))) {
								λ.Cal(ϒwarn, λ.NewStr("Two-factor authentication required. Provide it either interactively or with --twofactor <code>(Note that only TOTP (Google Authenticator App) codes work at this time.)"))
								return λ.False
							}
							ϒtfa_code = λ.Cal(ϒremove_start, ϒtfa_code, λ.NewStr("G-"))
							ϒtfa_req = λ.NewList(
								ϒuser_hash,
								λ.None,
								λ.NewInt(2),
								λ.None,
								λ.NewList(
									λ.NewInt(9),
									λ.None,
									λ.None,
									λ.None,
									λ.None,
									λ.None,
									λ.None,
									λ.None,
									λ.NewList(
										λ.None,
										ϒtfa_code,
										λ.True,
										λ.NewInt(2),
									),
								),
							)
							ϒtfa_results = λ.Cal(ϒreq, λ.Cal(λ.GetAttr(λ.GetAttr(ϒself, "_TFA_URL", nil), "format", nil), ϒtl), ϒtfa_req, λ.NewStr("Submitting TFA code"), λ.NewStr("Unable to submit TFA code"))
							if λ.IsTrue(λ.NewBool(ϒtfa_results == λ.False)) {
								return λ.False
							}
							ϒtfa_res = λ.Cal(ϒtry_get, ϒtfa_results, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(ϒx, λ.NewInt(0)), λ.NewInt(5))
								}), λ.ListType)
							if λ.IsTrue(ϒtfa_res) {
								ϒtfa_msg = λ.Cal(ϒtry_get, ϒtfa_res, λ.NewFunction("<lambda>",
									[]λ.Param{
										{Name: "x"},
									},
									0, false, false,
									func(λargs []λ.Object) λ.Object {
										var (
											ϒx = λargs[0]
										)
										return λ.GetItem(ϒx, λ.NewInt(5))
									}), ϒcompat_str)
								λ.Cal(ϒwarn, func() λ.Object {
									if λ.IsTrue(λ.Eq(ϒtfa_msg, λ.NewStr("INCORRECT_ANSWER_ENTERED"))) {
										return λ.Mod(λ.NewStr("Unable to finish TFA: %s"), λ.NewStr("Invalid TFA code"))
									} else {
										return ϒtfa_msg
									}
								}())
								return λ.False
							}
							ϒcheck_cookie_url = λ.Cal(ϒtry_get, ϒtfa_results, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(λ.GetItem(ϒx, λ.NewInt(0)), λ.Neg(λ.NewInt(1))), λ.NewInt(2))
								}), ϒcompat_str)
						} else {
							CHALLENGES = λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("LOGIN_CHALLENGE"):   λ.NewStr("This device isn't recognized. For your security, Google wants to make sure it's really you."),
								λ.NewStr("USERNAME_RECOVERY"): λ.NewStr("Please provide additional information to aid in the recovery process."),
								λ.NewStr("REAUTH"):            λ.NewStr("There is something unusual about your activity. For your security, Google wants to make sure it's really you."),
							})
							ϒchallenge = λ.Cal(λ.GetAttr(CHALLENGES, "get", nil), ϒchallenge_str, λ.Mod(λ.NewStr("%s returned error %s."), λ.NewTuple(
								λ.GetAttr(ϒself, "IE_NAME", nil),
								ϒchallenge_str,
							)))
							λ.Cal(ϒwarn, λ.Mod(λ.NewStr("%s\nGo to https://accounts.google.com/, login and solve a challenge."), ϒchallenge))
							return λ.False
						}
					} else {
						ϒcheck_cookie_url = λ.Cal(ϒtry_get, ϒres, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(ϒx, λ.NewInt(2))
							}), ϒcompat_str)
					}
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒcheck_cookie_url))) {
						λ.Cal(ϒwarn, λ.NewStr("Unable to extract CheckCookie URL"))
						return λ.False
					}
					ϒcheck_cookie_results = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
						ϒcheck_cookie_url,
						λ.None,
						λ.NewStr("Checking cookie"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					if λ.IsTrue(λ.NewBool(ϒcheck_cookie_results == λ.False)) {
						return λ.False
					}
					if λ.IsTrue(λ.NewBool(!λ.Contains(ϒcheck_cookie_results, λ.NewStr("https://myaccount.google.com/")))) {
						λ.Cal(ϒwarn, λ.NewStr("Unable to log in"))
						return λ.False
					}
					return λ.True
				})
			YoutubeBaseInfoExtractor__download_webpage_handle = λ.NewFunction("_download_webpage_handle",
				[]λ.Param{
					{Name: "self"},
				},
				0, true, true,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒargs   = λargs[1]
						ϒkwargs = λargs[2]
						ϒquery  λ.Object
						ϒself   = λargs[0]
					)
					ϒquery = λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒkwargs, "get", nil), λ.NewStr("query"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "copy", nil))
					λ.SetItem(ϒquery, λ.NewStr("disable_polymer"), λ.NewStr("true"))
					λ.SetItem(ϒkwargs, λ.NewStr("query"), ϒquery)
					return λ.Call(λ.GetAttr(λ.Cal(λ.SuperType, YoutubeBaseInfoExtractor, ϒself), "_download_webpage_handle", nil), λ.NewArgs(λ.Unpack(λ.AsStarred(ϒargs))...), λ.KWArgs{
						{Name: "", Value: λ.Cal(ϒcompat_kwargs, ϒkwargs)},
					})
				})
			YoutubeBaseInfoExtractor__real_initialize = λ.NewFunction("_real_initialize",
				[]λ.Param{
					{Name: "self"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒself = λargs[0]
					)
					if λ.IsTrue(λ.NewBool(λ.GetAttr(ϒself, "_downloader", nil) == λ.None)) {
						return λ.None
					}
					λ.Cal(λ.GetAttr(ϒself, "_set_language", nil))
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.Cal(λ.GetAttr(ϒself, "_login", nil))))) {
						return λ.None
					}
					return λ.None
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_LOGIN_REQUIRED"):          YoutubeBaseInfoExtractor__LOGIN_REQUIRED,
				λ.NewStr("_NETRC_MACHINE"):           YoutubeBaseInfoExtractor__NETRC_MACHINE,
				λ.NewStr("_PLAYLIST_ID_RE"):          YoutubeBaseInfoExtractor__PLAYLIST_ID_RE,
				λ.NewStr("_download_webpage_handle"): YoutubeBaseInfoExtractor__download_webpage_handle,
				λ.NewStr("_login"):                   YoutubeBaseInfoExtractor__login,
				λ.NewStr("_real_initialize"):         YoutubeBaseInfoExtractor__real_initialize,
				λ.NewStr("_set_language"):            YoutubeBaseInfoExtractor__set_language,
			})
		}())
		YoutubeEntryListBaseInfoExtractor = λ.Cal(λ.TypeType, λ.NewStr("YoutubeEntryListBaseInfoExtractor"), λ.NewTuple(YoutubeBaseInfoExtractor), func() λ.Dict {
			var (
				YoutubeEntryListBaseInfoExtractor__entries λ.Object
			)
			YoutubeEntryListBaseInfoExtractor__entries = λ.NewFunction("_entries",
				[]λ.Param{
					{Name: "self"},
					{Name: "page"},
					{Name: "playlist_id"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
						var (
							ϒcontent_html     λ.Object
							ϒcount            λ.Object
							ϒentry            λ.Object
							ϒmobj             λ.Object
							ϒmore             λ.Object
							ϒmore_widget_html λ.Object
							ϒpage             = λargs[1]
							ϒpage_num         λ.Object
							ϒplaylist_id      = λargs[2]
							ϒretries          λ.Object
							ϒself             = λargs[0]
							τmp0              λ.Object
							τmp1              λ.Object
							τmp2              λ.Object
							τmp3              λ.Object
							τmp4              λ.Object
						)
						_ = τmp3
						τmp0 = ϒpage
						ϒmore_widget_html = τmp0
						ϒcontent_html = τmp0
						τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωitertools.ϒcount, λ.NewInt(1)))
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒpage_num = τmp1
							τmp2 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒself, "_process_page", nil), ϒcontent_html))
							for {
								if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
									break
								}
								ϒentry = τmp3
								λgy.Yield(ϒentry)
							}
							ϒmobj = λ.Cal(Ωre.ϒsearch, λ.NewStr("data-uix-load-more-href=\"/?(?P<more>[^\"]+)\""), ϒmore_widget_html)
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒmobj))) {
								break
							}
							ϒcount = λ.NewInt(0)
							ϒretries = λ.NewInt(3)
							for λ.IsTrue(λ.Le(ϒcount, ϒretries)) {
								τmp2, τmp3 = func() (λexit λ.Object, λret λ.Object) {
									defer λ.CatchMulti(
										nil,
										&λ.Catcher{ExtractorError, func(λex λ.BaseException) {
											var ϒe λ.Object = λex
											if λ.IsTrue(func() λ.Object {
												if λv := λ.Cal(λ.BuiltinIsInstance, λ.GetAttr(ϒe, "cause", nil), ϒcompat_HTTPError); !λ.IsTrue(λv) {
													return λv
												} else {
													return λ.NewBool(λ.Contains(λ.NewTuple(
														λ.NewInt(500),
														λ.NewInt(503),
													), λ.GetAttr(λ.GetAttr(ϒe, "cause", nil), "code", nil)))
												}
											}()) {
												τmp4 = λ.IAdd(ϒcount, λ.NewInt(1))
												ϒcount = τmp4
												if λ.IsTrue(λ.Le(ϒcount, ϒretries)) {
													λexit = λ.BlockExitContinue
													return
												}
											}
											panic(λ.Raise(λex))
										}},
									)
									ϒmore = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
										λ.Mod(λ.NewStr("https://youtube.com/%s"), λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("more"))),
										ϒplaylist_id,
										λ.Mod(λ.NewStr("Downloading page #%s%s"), λ.NewTuple(
											ϒpage_num,
											func() λ.Object {
												if λ.IsTrue(ϒcount) {
													return λ.Mod(λ.NewStr(" (retry #%d)"), ϒcount)
												} else {
													return λ.NewStr("")
												}
											}(),
										)),
									), λ.KWArgs{
										{Name: "transform_source", Value: ϒuppercase_escape},
									})
									λexit = λ.BlockExitBreak
									return
									return λ.BlockExitNormally, nil
								}()
								if τmp2 == λ.BlockExitBreak {
									break
								}
								if τmp2 == λ.BlockExitContinue {
									continue
								}
							}
							ϒcontent_html = λ.GetItem(ϒmore, λ.NewStr("content_html"))
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.Cal(λ.GetAttr(ϒcontent_html, "strip", nil))))) {
								break
							}
							ϒmore_widget_html = λ.GetItem(ϒmore, λ.NewStr("load_more_widget_html"))
						}
						return λ.None
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_entries"): YoutubeEntryListBaseInfoExtractor__entries,
			})
		}())
		YoutubePlaylistBaseInfoExtractor = λ.Cal(λ.TypeType, λ.NewStr("YoutubePlaylistBaseInfoExtractor"), λ.NewTuple(YoutubeEntryListBaseInfoExtractor), func() λ.Dict {

			return λ.NewDictWithTable(map[λ.Object]λ.Object{})
		}())
		YoutubePlaylistsBaseInfoExtractor = λ.Cal(λ.TypeType, λ.NewStr("YoutubePlaylistsBaseInfoExtractor"), λ.NewTuple(YoutubeEntryListBaseInfoExtractor), func() λ.Dict {

			return λ.NewDictWithTable(map[λ.Object]λ.Object{})
		}())
		YoutubeIE = λ.Cal(λ.TypeType, λ.NewStr("YoutubeIE"), λ.NewTuple(YoutubeBaseInfoExtractor), func() λ.Dict {
			var (
				YoutubeIE_IE_NAME                            λ.Object
				YoutubeIE__GEO_BYPASS                        λ.Object
				YoutubeIE__NEXT_URL_RE                       λ.Object
				YoutubeIE__TESTS                             λ.Object
				YoutubeIE__VALID_URL                         λ.Object
				YoutubeIE___init__                           λ.Object
				YoutubeIE__decrypt_signature                 λ.Object
				YoutubeIE__extract_chapters                  λ.Object
				YoutubeIE__extract_signature_function        λ.Object
				YoutubeIE__extract_url                       λ.Object
				YoutubeIE__extract_urls                      λ.Object
				YoutubeIE__formats                           λ.Object
				YoutubeIE__get_ytplayer_config               λ.Object
				YoutubeIE__parse_sig_js                      λ.Object
				YoutubeIE__real_extract                      λ.Object
				YoutubeIE__signature_cache_id                λ.Object
				YoutubeIE_extract_id                         λ.Object
				YoutubeIE_report_video_info_webpage_download λ.Object
			)
			YoutubeIE__VALID_URL = λ.Mod(λ.NewStr("(?x)^\n                     (\n                         (?:https?://|//)                                    # http(s):// or protocol-independent URL\n                         (?:(?:(?:(?:\\w+\\.)?[yY][oO][uU][tT][uU][bB][eE](?:-nocookie)?\\.com/|\n                            (?:www\\.)?deturl\\.com/www\\.youtube\\.com/|\n                            (?:www\\.)?pwnyoutube\\.com/|\n                            (?:www\\.)?hooktube\\.com/|\n                            (?:www\\.)?yourepeat\\.com/|\n                            tube\\.majestyc\\.net/|\n                            # Invidious instances taken from https://github.com/omarroth/invidious/wiki/Invidious-Instances\n                            (?:(?:www|dev)\\.)?invidio\\.us/|\n                            (?:(?:www|no)\\.)?invidiou\\.sh/|\n                            (?:(?:www|fi|de)\\.)?invidious\\.snopyta\\.org/|\n                            (?:www\\.)?invidious\\.kabi\\.tk/|\n                            (?:www\\.)?invidious\\.enkirton\\.net/|\n                            (?:www\\.)?invidious\\.13ad\\.de/|\n                            (?:www\\.)?invidious\\.mastodon\\.host/|\n                            (?:www\\.)?invidious\\.nixnet\\.xyz/|\n                            (?:www\\.)?tube\\.poal\\.co/|\n                            (?:www\\.)?vid\\.wxzm\\.sx/|\n                            (?:www\\.)?yt\\.elukerio\\.org/|\n                            (?:www\\.)?kgg2m7yk5aybusll\\.onion/|\n                            (?:www\\.)?qklhadlycap4cnod\\.onion/|\n                            (?:www\\.)?axqzx4s6s54s32yentfqojs3x5i7faxza6xo3ehd4bzzsg2ii4fv2iid\\.onion/|\n                            (?:www\\.)?c7hqkpkpemu6e7emz5b4vyz7idjgdvgaaa3dyimmeojqbgpea3xqjoid\\.onion/|\n                            (?:www\\.)?fz253lmuao3strwbfbmx46yu7acac2jz27iwtorgmbqlkurlclmancad\\.onion/|\n                            (?:www\\.)?invidious\\.l4qlywnpwqsluw65ts7md3khrivpirse744un3x7mlskqauz5pyuzgqd\\.onion/|\n                            youtube\\.googleapis\\.com/)                        # the various hostnames, with wildcard subdomains\n                         (?:.*?\\#/)?                                          # handle anchor (#/) redirect urls\n                         (?:                                                  # the various things that can precede the ID:\n                             (?:(?:v|embed|e)/(?!videoseries))                # v/ or embed/ or e/\n                             |(?:                                             # or the v= param in all its forms\n                                 (?:(?:watch|movie)(?:_popup)?(?:\\.php)?/?)?  # preceding watch(_popup|.php) or nothing (like /?v=xxxx)\n                                 (?:\\?|\\#!?)                                  # the params delimiter ? or # or #!\n                                 (?:.*?[&;])??                                # any other preceding param (like /?s=tuff&v=xxxx or ?s=tuff&amp;v=V36LpHqtcDY)\n                                 v=\n                             )\n                         ))\n                         |(?:\n                            youtu\\.be|                                        # just youtu.be/xxxx\n                            vid\\.plus|                                        # or vid.plus/xxxx\n                            zwearz\\.com/watch|                                # or zwearz.com/watch/xxxx\n                         )/\n                         |(?:www\\.)?cleanvideosearch\\.com/media/action/yt/watch\\?videoId=\n                         )\n                     )?                                                       # all until now is optional -> you can pass the naked ID\n                     ([0-9A-Za-z_-]{11})                                      # here is it! the YouTube video ID\n                     (?!.*?\\blist=\n                        (?:\n                            %(playlist_id)s|                                  # combined list/video URLs are handled by the playlist IE\n                            WL                                                # WL are handled by the watch later IE\n                        )\n                     )\n                     #(?(1).+)?                                                # if we found the ID, everything can follow\n                     "), λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("playlist_id"): λ.GetAttr(YoutubeBaseInfoExtractor, "_PLAYLIST_ID_RE", nil),
			}))
			YoutubeIE__NEXT_URL_RE = λ.NewStr("[\\?&]next_url=([^&]+)")
			YoutubeIE__formats = λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("5"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):    λ.NewStr("flv"),
					λ.NewStr("width"):  λ.NewInt(400),
					λ.NewStr("height"): λ.NewInt(240),
					λ.NewStr("acodec"): λ.NewStr("mp3"),
					λ.NewStr("abr"):    λ.NewInt(64),
					λ.NewStr("vcodec"): λ.NewStr("h263"),
				}),
				λ.NewStr("6"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):    λ.NewStr("flv"),
					λ.NewStr("width"):  λ.NewInt(450),
					λ.NewStr("height"): λ.NewInt(270),
					λ.NewStr("acodec"): λ.NewStr("mp3"),
					λ.NewStr("abr"):    λ.NewInt(64),
					λ.NewStr("vcodec"): λ.NewStr("h263"),
				}),
				λ.NewStr("13"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):    λ.NewStr("3gp"),
					λ.NewStr("acodec"): λ.NewStr("aac"),
					λ.NewStr("vcodec"): λ.NewStr("mp4v"),
				}),
				λ.NewStr("17"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):    λ.NewStr("3gp"),
					λ.NewStr("width"):  λ.NewInt(176),
					λ.NewStr("height"): λ.NewInt(144),
					λ.NewStr("acodec"): λ.NewStr("aac"),
					λ.NewStr("abr"):    λ.NewInt(24),
					λ.NewStr("vcodec"): λ.NewStr("mp4v"),
				}),
				λ.NewStr("18"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):    λ.NewStr("mp4"),
					λ.NewStr("width"):  λ.NewInt(640),
					λ.NewStr("height"): λ.NewInt(360),
					λ.NewStr("acodec"): λ.NewStr("aac"),
					λ.NewStr("abr"):    λ.NewInt(96),
					λ.NewStr("vcodec"): λ.NewStr("h264"),
				}),
				λ.NewStr("22"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):    λ.NewStr("mp4"),
					λ.NewStr("width"):  λ.NewInt(1280),
					λ.NewStr("height"): λ.NewInt(720),
					λ.NewStr("acodec"): λ.NewStr("aac"),
					λ.NewStr("abr"):    λ.NewInt(192),
					λ.NewStr("vcodec"): λ.NewStr("h264"),
				}),
				λ.NewStr("34"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):    λ.NewStr("flv"),
					λ.NewStr("width"):  λ.NewInt(640),
					λ.NewStr("height"): λ.NewInt(360),
					λ.NewStr("acodec"): λ.NewStr("aac"),
					λ.NewStr("abr"):    λ.NewInt(128),
					λ.NewStr("vcodec"): λ.NewStr("h264"),
				}),
				λ.NewStr("35"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):    λ.NewStr("flv"),
					λ.NewStr("width"):  λ.NewInt(854),
					λ.NewStr("height"): λ.NewInt(480),
					λ.NewStr("acodec"): λ.NewStr("aac"),
					λ.NewStr("abr"):    λ.NewInt(128),
					λ.NewStr("vcodec"): λ.NewStr("h264"),
				}),
				λ.NewStr("36"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):    λ.NewStr("3gp"),
					λ.NewStr("width"):  λ.NewInt(320),
					λ.NewStr("acodec"): λ.NewStr("aac"),
					λ.NewStr("vcodec"): λ.NewStr("mp4v"),
				}),
				λ.NewStr("37"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):    λ.NewStr("mp4"),
					λ.NewStr("width"):  λ.NewInt(1920),
					λ.NewStr("height"): λ.NewInt(1080),
					λ.NewStr("acodec"): λ.NewStr("aac"),
					λ.NewStr("abr"):    λ.NewInt(192),
					λ.NewStr("vcodec"): λ.NewStr("h264"),
				}),
				λ.NewStr("38"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):    λ.NewStr("mp4"),
					λ.NewStr("width"):  λ.NewInt(4096),
					λ.NewStr("height"): λ.NewInt(3072),
					λ.NewStr("acodec"): λ.NewStr("aac"),
					λ.NewStr("abr"):    λ.NewInt(192),
					λ.NewStr("vcodec"): λ.NewStr("h264"),
				}),
				λ.NewStr("43"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):    λ.NewStr("webm"),
					λ.NewStr("width"):  λ.NewInt(640),
					λ.NewStr("height"): λ.NewInt(360),
					λ.NewStr("acodec"): λ.NewStr("vorbis"),
					λ.NewStr("abr"):    λ.NewInt(128),
					λ.NewStr("vcodec"): λ.NewStr("vp8"),
				}),
				λ.NewStr("44"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):    λ.NewStr("webm"),
					λ.NewStr("width"):  λ.NewInt(854),
					λ.NewStr("height"): λ.NewInt(480),
					λ.NewStr("acodec"): λ.NewStr("vorbis"),
					λ.NewStr("abr"):    λ.NewInt(128),
					λ.NewStr("vcodec"): λ.NewStr("vp8"),
				}),
				λ.NewStr("45"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):    λ.NewStr("webm"),
					λ.NewStr("width"):  λ.NewInt(1280),
					λ.NewStr("height"): λ.NewInt(720),
					λ.NewStr("acodec"): λ.NewStr("vorbis"),
					λ.NewStr("abr"):    λ.NewInt(192),
					λ.NewStr("vcodec"): λ.NewStr("vp8"),
				}),
				λ.NewStr("46"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):    λ.NewStr("webm"),
					λ.NewStr("width"):  λ.NewInt(1920),
					λ.NewStr("height"): λ.NewInt(1080),
					λ.NewStr("acodec"): λ.NewStr("vorbis"),
					λ.NewStr("abr"):    λ.NewInt(192),
					λ.NewStr("vcodec"): λ.NewStr("vp8"),
				}),
				λ.NewStr("59"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):    λ.NewStr("mp4"),
					λ.NewStr("width"):  λ.NewInt(854),
					λ.NewStr("height"): λ.NewInt(480),
					λ.NewStr("acodec"): λ.NewStr("aac"),
					λ.NewStr("abr"):    λ.NewInt(128),
					λ.NewStr("vcodec"): λ.NewStr("h264"),
				}),
				λ.NewStr("78"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):    λ.NewStr("mp4"),
					λ.NewStr("width"):  λ.NewInt(854),
					λ.NewStr("height"): λ.NewInt(480),
					λ.NewStr("acodec"): λ.NewStr("aac"),
					λ.NewStr("abr"):    λ.NewInt(128),
					λ.NewStr("vcodec"): λ.NewStr("h264"),
				}),
				λ.NewStr("82"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("mp4"),
					λ.NewStr("height"):      λ.NewInt(360),
					λ.NewStr("format_note"): λ.NewStr("3D"),
					λ.NewStr("acodec"):      λ.NewStr("aac"),
					λ.NewStr("abr"):         λ.NewInt(128),
					λ.NewStr("vcodec"):      λ.NewStr("h264"),
					λ.NewStr("preference"):  λ.Neg(λ.NewInt(20)),
				}),
				λ.NewStr("83"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("mp4"),
					λ.NewStr("height"):      λ.NewInt(480),
					λ.NewStr("format_note"): λ.NewStr("3D"),
					λ.NewStr("acodec"):      λ.NewStr("aac"),
					λ.NewStr("abr"):         λ.NewInt(128),
					λ.NewStr("vcodec"):      λ.NewStr("h264"),
					λ.NewStr("preference"):  λ.Neg(λ.NewInt(20)),
				}),
				λ.NewStr("84"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("mp4"),
					λ.NewStr("height"):      λ.NewInt(720),
					λ.NewStr("format_note"): λ.NewStr("3D"),
					λ.NewStr("acodec"):      λ.NewStr("aac"),
					λ.NewStr("abr"):         λ.NewInt(192),
					λ.NewStr("vcodec"):      λ.NewStr("h264"),
					λ.NewStr("preference"):  λ.Neg(λ.NewInt(20)),
				}),
				λ.NewStr("85"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("mp4"),
					λ.NewStr("height"):      λ.NewInt(1080),
					λ.NewStr("format_note"): λ.NewStr("3D"),
					λ.NewStr("acodec"):      λ.NewStr("aac"),
					λ.NewStr("abr"):         λ.NewInt(192),
					λ.NewStr("vcodec"):      λ.NewStr("h264"),
					λ.NewStr("preference"):  λ.Neg(λ.NewInt(20)),
				}),
				λ.NewStr("100"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("webm"),
					λ.NewStr("height"):      λ.NewInt(360),
					λ.NewStr("format_note"): λ.NewStr("3D"),
					λ.NewStr("acodec"):      λ.NewStr("vorbis"),
					λ.NewStr("abr"):         λ.NewInt(128),
					λ.NewStr("vcodec"):      λ.NewStr("vp8"),
					λ.NewStr("preference"):  λ.Neg(λ.NewInt(20)),
				}),
				λ.NewStr("101"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("webm"),
					λ.NewStr("height"):      λ.NewInt(480),
					λ.NewStr("format_note"): λ.NewStr("3D"),
					λ.NewStr("acodec"):      λ.NewStr("vorbis"),
					λ.NewStr("abr"):         λ.NewInt(192),
					λ.NewStr("vcodec"):      λ.NewStr("vp8"),
					λ.NewStr("preference"):  λ.Neg(λ.NewInt(20)),
				}),
				λ.NewStr("102"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("webm"),
					λ.NewStr("height"):      λ.NewInt(720),
					λ.NewStr("format_note"): λ.NewStr("3D"),
					λ.NewStr("acodec"):      λ.NewStr("vorbis"),
					λ.NewStr("abr"):         λ.NewInt(192),
					λ.NewStr("vcodec"):      λ.NewStr("vp8"),
					λ.NewStr("preference"):  λ.Neg(λ.NewInt(20)),
				}),
				λ.NewStr("91"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("mp4"),
					λ.NewStr("height"):      λ.NewInt(144),
					λ.NewStr("format_note"): λ.NewStr("HLS"),
					λ.NewStr("acodec"):      λ.NewStr("aac"),
					λ.NewStr("abr"):         λ.NewInt(48),
					λ.NewStr("vcodec"):      λ.NewStr("h264"),
					λ.NewStr("preference"):  λ.Neg(λ.NewInt(10)),
				}),
				λ.NewStr("92"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("mp4"),
					λ.NewStr("height"):      λ.NewInt(240),
					λ.NewStr("format_note"): λ.NewStr("HLS"),
					λ.NewStr("acodec"):      λ.NewStr("aac"),
					λ.NewStr("abr"):         λ.NewInt(48),
					λ.NewStr("vcodec"):      λ.NewStr("h264"),
					λ.NewStr("preference"):  λ.Neg(λ.NewInt(10)),
				}),
				λ.NewStr("93"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("mp4"),
					λ.NewStr("height"):      λ.NewInt(360),
					λ.NewStr("format_note"): λ.NewStr("HLS"),
					λ.NewStr("acodec"):      λ.NewStr("aac"),
					λ.NewStr("abr"):         λ.NewInt(128),
					λ.NewStr("vcodec"):      λ.NewStr("h264"),
					λ.NewStr("preference"):  λ.Neg(λ.NewInt(10)),
				}),
				λ.NewStr("94"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("mp4"),
					λ.NewStr("height"):      λ.NewInt(480),
					λ.NewStr("format_note"): λ.NewStr("HLS"),
					λ.NewStr("acodec"):      λ.NewStr("aac"),
					λ.NewStr("abr"):         λ.NewInt(128),
					λ.NewStr("vcodec"):      λ.NewStr("h264"),
					λ.NewStr("preference"):  λ.Neg(λ.NewInt(10)),
				}),
				λ.NewStr("95"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("mp4"),
					λ.NewStr("height"):      λ.NewInt(720),
					λ.NewStr("format_note"): λ.NewStr("HLS"),
					λ.NewStr("acodec"):      λ.NewStr("aac"),
					λ.NewStr("abr"):         λ.NewInt(256),
					λ.NewStr("vcodec"):      λ.NewStr("h264"),
					λ.NewStr("preference"):  λ.Neg(λ.NewInt(10)),
				}),
				λ.NewStr("96"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("mp4"),
					λ.NewStr("height"):      λ.NewInt(1080),
					λ.NewStr("format_note"): λ.NewStr("HLS"),
					λ.NewStr("acodec"):      λ.NewStr("aac"),
					λ.NewStr("abr"):         λ.NewInt(256),
					λ.NewStr("vcodec"):      λ.NewStr("h264"),
					λ.NewStr("preference"):  λ.Neg(λ.NewInt(10)),
				}),
				λ.NewStr("132"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("mp4"),
					λ.NewStr("height"):      λ.NewInt(240),
					λ.NewStr("format_note"): λ.NewStr("HLS"),
					λ.NewStr("acodec"):      λ.NewStr("aac"),
					λ.NewStr("abr"):         λ.NewInt(48),
					λ.NewStr("vcodec"):      λ.NewStr("h264"),
					λ.NewStr("preference"):  λ.Neg(λ.NewInt(10)),
				}),
				λ.NewStr("151"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("mp4"),
					λ.NewStr("height"):      λ.NewInt(72),
					λ.NewStr("format_note"): λ.NewStr("HLS"),
					λ.NewStr("acodec"):      λ.NewStr("aac"),
					λ.NewStr("abr"):         λ.NewInt(24),
					λ.NewStr("vcodec"):      λ.NewStr("h264"),
					λ.NewStr("preference"):  λ.Neg(λ.NewInt(10)),
				}),
				λ.NewStr("133"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("mp4"),
					λ.NewStr("height"):      λ.NewInt(240),
					λ.NewStr("format_note"): λ.NewStr("DASH video"),
					λ.NewStr("vcodec"):      λ.NewStr("h264"),
				}),
				λ.NewStr("134"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("mp4"),
					λ.NewStr("height"):      λ.NewInt(360),
					λ.NewStr("format_note"): λ.NewStr("DASH video"),
					λ.NewStr("vcodec"):      λ.NewStr("h264"),
				}),
				λ.NewStr("135"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("mp4"),
					λ.NewStr("height"):      λ.NewInt(480),
					λ.NewStr("format_note"): λ.NewStr("DASH video"),
					λ.NewStr("vcodec"):      λ.NewStr("h264"),
				}),
				λ.NewStr("136"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("mp4"),
					λ.NewStr("height"):      λ.NewInt(720),
					λ.NewStr("format_note"): λ.NewStr("DASH video"),
					λ.NewStr("vcodec"):      λ.NewStr("h264"),
				}),
				λ.NewStr("137"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("mp4"),
					λ.NewStr("height"):      λ.NewInt(1080),
					λ.NewStr("format_note"): λ.NewStr("DASH video"),
					λ.NewStr("vcodec"):      λ.NewStr("h264"),
				}),
				λ.NewStr("138"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("mp4"),
					λ.NewStr("format_note"): λ.NewStr("DASH video"),
					λ.NewStr("vcodec"):      λ.NewStr("h264"),
				}),
				λ.NewStr("160"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("mp4"),
					λ.NewStr("height"):      λ.NewInt(144),
					λ.NewStr("format_note"): λ.NewStr("DASH video"),
					λ.NewStr("vcodec"):      λ.NewStr("h264"),
				}),
				λ.NewStr("212"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("mp4"),
					λ.NewStr("height"):      λ.NewInt(480),
					λ.NewStr("format_note"): λ.NewStr("DASH video"),
					λ.NewStr("vcodec"):      λ.NewStr("h264"),
				}),
				λ.NewStr("264"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("mp4"),
					λ.NewStr("height"):      λ.NewInt(1440),
					λ.NewStr("format_note"): λ.NewStr("DASH video"),
					λ.NewStr("vcodec"):      λ.NewStr("h264"),
				}),
				λ.NewStr("298"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("mp4"),
					λ.NewStr("height"):      λ.NewInt(720),
					λ.NewStr("format_note"): λ.NewStr("DASH video"),
					λ.NewStr("vcodec"):      λ.NewStr("h264"),
					λ.NewStr("fps"):         λ.NewInt(60),
				}),
				λ.NewStr("299"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("mp4"),
					λ.NewStr("height"):      λ.NewInt(1080),
					λ.NewStr("format_note"): λ.NewStr("DASH video"),
					λ.NewStr("vcodec"):      λ.NewStr("h264"),
					λ.NewStr("fps"):         λ.NewInt(60),
				}),
				λ.NewStr("266"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("mp4"),
					λ.NewStr("height"):      λ.NewInt(2160),
					λ.NewStr("format_note"): λ.NewStr("DASH video"),
					λ.NewStr("vcodec"):      λ.NewStr("h264"),
				}),
				λ.NewStr("139"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("m4a"),
					λ.NewStr("format_note"): λ.NewStr("DASH audio"),
					λ.NewStr("acodec"):      λ.NewStr("aac"),
					λ.NewStr("abr"):         λ.NewInt(48),
					λ.NewStr("container"):   λ.NewStr("m4a_dash"),
				}),
				λ.NewStr("140"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("m4a"),
					λ.NewStr("format_note"): λ.NewStr("DASH audio"),
					λ.NewStr("acodec"):      λ.NewStr("aac"),
					λ.NewStr("abr"):         λ.NewInt(128),
					λ.NewStr("container"):   λ.NewStr("m4a_dash"),
				}),
				λ.NewStr("141"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("m4a"),
					λ.NewStr("format_note"): λ.NewStr("DASH audio"),
					λ.NewStr("acodec"):      λ.NewStr("aac"),
					λ.NewStr("abr"):         λ.NewInt(256),
					λ.NewStr("container"):   λ.NewStr("m4a_dash"),
				}),
				λ.NewStr("256"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("m4a"),
					λ.NewStr("format_note"): λ.NewStr("DASH audio"),
					λ.NewStr("acodec"):      λ.NewStr("aac"),
					λ.NewStr("container"):   λ.NewStr("m4a_dash"),
				}),
				λ.NewStr("258"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("m4a"),
					λ.NewStr("format_note"): λ.NewStr("DASH audio"),
					λ.NewStr("acodec"):      λ.NewStr("aac"),
					λ.NewStr("container"):   λ.NewStr("m4a_dash"),
				}),
				λ.NewStr("325"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("m4a"),
					λ.NewStr("format_note"): λ.NewStr("DASH audio"),
					λ.NewStr("acodec"):      λ.NewStr("dtse"),
					λ.NewStr("container"):   λ.NewStr("m4a_dash"),
				}),
				λ.NewStr("328"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("m4a"),
					λ.NewStr("format_note"): λ.NewStr("DASH audio"),
					λ.NewStr("acodec"):      λ.NewStr("ec-3"),
					λ.NewStr("container"):   λ.NewStr("m4a_dash"),
				}),
				λ.NewStr("167"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("webm"),
					λ.NewStr("height"):      λ.NewInt(360),
					λ.NewStr("width"):       λ.NewInt(640),
					λ.NewStr("format_note"): λ.NewStr("DASH video"),
					λ.NewStr("container"):   λ.NewStr("webm"),
					λ.NewStr("vcodec"):      λ.NewStr("vp8"),
				}),
				λ.NewStr("168"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("webm"),
					λ.NewStr("height"):      λ.NewInt(480),
					λ.NewStr("width"):       λ.NewInt(854),
					λ.NewStr("format_note"): λ.NewStr("DASH video"),
					λ.NewStr("container"):   λ.NewStr("webm"),
					λ.NewStr("vcodec"):      λ.NewStr("vp8"),
				}),
				λ.NewStr("169"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("webm"),
					λ.NewStr("height"):      λ.NewInt(720),
					λ.NewStr("width"):       λ.NewInt(1280),
					λ.NewStr("format_note"): λ.NewStr("DASH video"),
					λ.NewStr("container"):   λ.NewStr("webm"),
					λ.NewStr("vcodec"):      λ.NewStr("vp8"),
				}),
				λ.NewStr("170"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("webm"),
					λ.NewStr("height"):      λ.NewInt(1080),
					λ.NewStr("width"):       λ.NewInt(1920),
					λ.NewStr("format_note"): λ.NewStr("DASH video"),
					λ.NewStr("container"):   λ.NewStr("webm"),
					λ.NewStr("vcodec"):      λ.NewStr("vp8"),
				}),
				λ.NewStr("218"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("webm"),
					λ.NewStr("height"):      λ.NewInt(480),
					λ.NewStr("width"):       λ.NewInt(854),
					λ.NewStr("format_note"): λ.NewStr("DASH video"),
					λ.NewStr("container"):   λ.NewStr("webm"),
					λ.NewStr("vcodec"):      λ.NewStr("vp8"),
				}),
				λ.NewStr("219"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("webm"),
					λ.NewStr("height"):      λ.NewInt(480),
					λ.NewStr("width"):       λ.NewInt(854),
					λ.NewStr("format_note"): λ.NewStr("DASH video"),
					λ.NewStr("container"):   λ.NewStr("webm"),
					λ.NewStr("vcodec"):      λ.NewStr("vp8"),
				}),
				λ.NewStr("278"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("webm"),
					λ.NewStr("height"):      λ.NewInt(144),
					λ.NewStr("format_note"): λ.NewStr("DASH video"),
					λ.NewStr("container"):   λ.NewStr("webm"),
					λ.NewStr("vcodec"):      λ.NewStr("vp9"),
				}),
				λ.NewStr("242"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("webm"),
					λ.NewStr("height"):      λ.NewInt(240),
					λ.NewStr("format_note"): λ.NewStr("DASH video"),
					λ.NewStr("vcodec"):      λ.NewStr("vp9"),
				}),
				λ.NewStr("243"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("webm"),
					λ.NewStr("height"):      λ.NewInt(360),
					λ.NewStr("format_note"): λ.NewStr("DASH video"),
					λ.NewStr("vcodec"):      λ.NewStr("vp9"),
				}),
				λ.NewStr("244"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("webm"),
					λ.NewStr("height"):      λ.NewInt(480),
					λ.NewStr("format_note"): λ.NewStr("DASH video"),
					λ.NewStr("vcodec"):      λ.NewStr("vp9"),
				}),
				λ.NewStr("245"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("webm"),
					λ.NewStr("height"):      λ.NewInt(480),
					λ.NewStr("format_note"): λ.NewStr("DASH video"),
					λ.NewStr("vcodec"):      λ.NewStr("vp9"),
				}),
				λ.NewStr("246"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("webm"),
					λ.NewStr("height"):      λ.NewInt(480),
					λ.NewStr("format_note"): λ.NewStr("DASH video"),
					λ.NewStr("vcodec"):      λ.NewStr("vp9"),
				}),
				λ.NewStr("247"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("webm"),
					λ.NewStr("height"):      λ.NewInt(720),
					λ.NewStr("format_note"): λ.NewStr("DASH video"),
					λ.NewStr("vcodec"):      λ.NewStr("vp9"),
				}),
				λ.NewStr("248"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("webm"),
					λ.NewStr("height"):      λ.NewInt(1080),
					λ.NewStr("format_note"): λ.NewStr("DASH video"),
					λ.NewStr("vcodec"):      λ.NewStr("vp9"),
				}),
				λ.NewStr("271"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("webm"),
					λ.NewStr("height"):      λ.NewInt(1440),
					λ.NewStr("format_note"): λ.NewStr("DASH video"),
					λ.NewStr("vcodec"):      λ.NewStr("vp9"),
				}),
				λ.NewStr("272"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("webm"),
					λ.NewStr("height"):      λ.NewInt(2160),
					λ.NewStr("format_note"): λ.NewStr("DASH video"),
					λ.NewStr("vcodec"):      λ.NewStr("vp9"),
				}),
				λ.NewStr("302"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("webm"),
					λ.NewStr("height"):      λ.NewInt(720),
					λ.NewStr("format_note"): λ.NewStr("DASH video"),
					λ.NewStr("vcodec"):      λ.NewStr("vp9"),
					λ.NewStr("fps"):         λ.NewInt(60),
				}),
				λ.NewStr("303"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("webm"),
					λ.NewStr("height"):      λ.NewInt(1080),
					λ.NewStr("format_note"): λ.NewStr("DASH video"),
					λ.NewStr("vcodec"):      λ.NewStr("vp9"),
					λ.NewStr("fps"):         λ.NewInt(60),
				}),
				λ.NewStr("308"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("webm"),
					λ.NewStr("height"):      λ.NewInt(1440),
					λ.NewStr("format_note"): λ.NewStr("DASH video"),
					λ.NewStr("vcodec"):      λ.NewStr("vp9"),
					λ.NewStr("fps"):         λ.NewInt(60),
				}),
				λ.NewStr("313"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("webm"),
					λ.NewStr("height"):      λ.NewInt(2160),
					λ.NewStr("format_note"): λ.NewStr("DASH video"),
					λ.NewStr("vcodec"):      λ.NewStr("vp9"),
				}),
				λ.NewStr("315"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("webm"),
					λ.NewStr("height"):      λ.NewInt(2160),
					λ.NewStr("format_note"): λ.NewStr("DASH video"),
					λ.NewStr("vcodec"):      λ.NewStr("vp9"),
					λ.NewStr("fps"):         λ.NewInt(60),
				}),
				λ.NewStr("171"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("webm"),
					λ.NewStr("acodec"):      λ.NewStr("vorbis"),
					λ.NewStr("format_note"): λ.NewStr("DASH audio"),
					λ.NewStr("abr"):         λ.NewInt(128),
				}),
				λ.NewStr("172"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("webm"),
					λ.NewStr("acodec"):      λ.NewStr("vorbis"),
					λ.NewStr("format_note"): λ.NewStr("DASH audio"),
					λ.NewStr("abr"):         λ.NewInt(256),
				}),
				λ.NewStr("249"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("webm"),
					λ.NewStr("format_note"): λ.NewStr("DASH audio"),
					λ.NewStr("acodec"):      λ.NewStr("opus"),
					λ.NewStr("abr"):         λ.NewInt(50),
				}),
				λ.NewStr("250"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("webm"),
					λ.NewStr("format_note"): λ.NewStr("DASH audio"),
					λ.NewStr("acodec"):      λ.NewStr("opus"),
					λ.NewStr("abr"):         λ.NewInt(70),
				}),
				λ.NewStr("251"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("ext"):         λ.NewStr("webm"),
					λ.NewStr("format_note"): λ.NewStr("DASH audio"),
					λ.NewStr("acodec"):      λ.NewStr("opus"),
					λ.NewStr("abr"):         λ.NewInt(160),
				}),
				λ.NewStr("_rtmp"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("protocol"): λ.NewStr("rtmp"),
				}),
				λ.NewStr("394"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("acodec"): λ.NewStr("none"),
					λ.NewStr("vcodec"): λ.NewStr("av01.0.05M.08"),
				}),
				λ.NewStr("395"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("acodec"): λ.NewStr("none"),
					λ.NewStr("vcodec"): λ.NewStr("av01.0.05M.08"),
				}),
				λ.NewStr("396"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("acodec"): λ.NewStr("none"),
					λ.NewStr("vcodec"): λ.NewStr("av01.0.05M.08"),
				}),
				λ.NewStr("397"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("acodec"): λ.NewStr("none"),
					λ.NewStr("vcodec"): λ.NewStr("av01.0.05M.08"),
				}),
			})
			YoutubeIE__GEO_BYPASS = λ.False
			YoutubeIE_IE_NAME = λ.NewStr("youtube")
			YoutubeIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.youtube.com/watch?v=BaW_jenozKc&t=1s&end=9"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):            λ.NewStr("BaW_jenozKc"),
						λ.NewStr("ext"):           λ.NewStr("mp4"),
						λ.NewStr("title"):         λ.NewStr("youtube-dl test video \"'/\\ä↭𝕐"),
						λ.NewStr("uploader"):      λ.NewStr("Philipp Hagemeister"),
						λ.NewStr("uploader_id"):   λ.NewStr("phihag"),
						λ.NewStr("uploader_url"):  λ.NewStr("re:https?://(?:www\\.)?youtube\\.com/user/phihag"),
						λ.NewStr("channel_id"):    λ.NewStr("UCLqxVugv74EIW3VWh2NOa3Q"),
						λ.NewStr("channel_url"):   λ.NewStr("re:https?://(?:www\\.)?youtube\\.com/channel/UCLqxVugv74EIW3VWh2NOa3Q"),
						λ.NewStr("upload_date"):   λ.NewStr("20121002"),
						λ.NewStr("description"):   λ.NewStr("test chars:  \"'/\\ä↭𝕐\ntest URL: https://github.com/rg3/youtube-dl/issues/1892\n\nThis is a test video for youtube-dl.\n\nFor more information, contact phihag@phihag.de ."),
						λ.NewStr("categories"):    λ.NewList(λ.NewStr("Science & Technology")),
						λ.NewStr("tags"):          λ.NewList(λ.NewStr("youtube-dl")),
						λ.NewStr("duration"):      λ.NewInt(10),
						λ.NewStr("view_count"):    λ.IntType,
						λ.NewStr("like_count"):    λ.IntType,
						λ.NewStr("dislike_count"): λ.IntType,
						λ.NewStr("start_time"):    λ.NewInt(1),
						λ.NewStr("end_time"):      λ.NewInt(9),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):  λ.NewStr("https://www.youtube.com/watch?v=UxxajLWwzqY"),
					λ.NewStr("note"): λ.NewStr("Test generic use_cipher_signature video (#897)"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("UxxajLWwzqY"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("upload_date"): λ.NewStr("20120506"),
						λ.NewStr("title"):       λ.NewStr("Icona Pop - I Love It (feat. Charli XCX) [OFFICIAL VIDEO]"),
						λ.NewStr("alt_title"):   λ.NewStr("I Love It (feat. Charli XCX)"),
						λ.NewStr("description"): λ.NewStr("md5:f3ceb5ef83a08d95b9d146f973157cc8"),
						λ.NewStr("tags"): λ.NewList(
							λ.NewStr("Icona Pop i love it"),
							λ.NewStr("sweden"),
							λ.NewStr("pop music"),
							λ.NewStr("big beat records"),
							λ.NewStr("big beat"),
							λ.NewStr("charli"),
							λ.NewStr("xcx"),
							λ.NewStr("charli xcx"),
							λ.NewStr("girls"),
							λ.NewStr("hbo"),
							λ.NewStr("i love it"),
							λ.NewStr("i don't care"),
							λ.NewStr("icona"),
							λ.NewStr("pop"),
							λ.NewStr("iconic ep"),
							λ.NewStr("iconic"),
							λ.NewStr("love"),
							λ.NewStr("it"),
						),
						λ.NewStr("duration"):     λ.NewInt(180),
						λ.NewStr("uploader"):     λ.NewStr("Icona Pop"),
						λ.NewStr("uploader_id"):  λ.NewStr("IconaPop"),
						λ.NewStr("uploader_url"): λ.NewStr("re:https?://(?:www\\.)?youtube\\.com/user/IconaPop"),
						λ.NewStr("creator"):      λ.NewStr("Icona Pop"),
						λ.NewStr("track"):        λ.NewStr("I Love It (feat. Charli XCX)"),
						λ.NewStr("artist"):       λ.NewStr("Icona Pop"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):  λ.NewStr("https://www.youtube.com/watch?v=07FYdnEawAQ"),
					λ.NewStr("note"): λ.NewStr("Test VEVO video with age protection (#956)"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           λ.NewStr("07FYdnEawAQ"),
						λ.NewStr("ext"):          λ.NewStr("mp4"),
						λ.NewStr("upload_date"):  λ.NewStr("20130703"),
						λ.NewStr("title"):        λ.NewStr("Justin Timberlake - Tunnel Vision (Official Music Video) (Explicit)"),
						λ.NewStr("alt_title"):    λ.NewStr("Tunnel Vision"),
						λ.NewStr("description"):  λ.NewStr("md5:07dab3356cde4199048e4c7cd93471e1"),
						λ.NewStr("duration"):     λ.NewInt(419),
						λ.NewStr("uploader"):     λ.NewStr("justintimberlakeVEVO"),
						λ.NewStr("uploader_id"):  λ.NewStr("justintimberlakeVEVO"),
						λ.NewStr("uploader_url"): λ.NewStr("re:https?://(?:www\\.)?youtube\\.com/user/justintimberlakeVEVO"),
						λ.NewStr("creator"):      λ.NewStr("Justin Timberlake"),
						λ.NewStr("track"):        λ.NewStr("Tunnel Vision"),
						λ.NewStr("artist"):       λ.NewStr("Justin Timberlake"),
						λ.NewStr("age_limit"):    λ.NewInt(18),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):  λ.NewStr("//www.YouTube.com/watch?v=yZIXLfi8CZQ"),
					λ.NewStr("note"): λ.NewStr("Embed-only video (#1746)"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           λ.NewStr("yZIXLfi8CZQ"),
						λ.NewStr("ext"):          λ.NewStr("mp4"),
						λ.NewStr("upload_date"):  λ.NewStr("20120608"),
						λ.NewStr("title"):        λ.NewStr("Principal Sexually Assaults A Teacher - Episode 117 - 8th June 2012"),
						λ.NewStr("description"):  λ.NewStr("md5:09b78bd971f1e3e289601dfba15ca4f7"),
						λ.NewStr("uploader"):     λ.NewStr("SET India"),
						λ.NewStr("uploader_id"):  λ.NewStr("setindia"),
						λ.NewStr("uploader_url"): λ.NewStr("re:https?://(?:www\\.)?youtube\\.com/user/setindia"),
						λ.NewStr("age_limit"):    λ.NewInt(18),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):  λ.NewStr("https://www.youtube.com/watch?v=BaW_jenozKc&v=UxxajLWwzqY"),
					λ.NewStr("note"): λ.NewStr("Use the first video ID in the URL"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):            λ.NewStr("BaW_jenozKc"),
						λ.NewStr("ext"):           λ.NewStr("mp4"),
						λ.NewStr("title"):         λ.NewStr("youtube-dl test video \"'/\\ä↭𝕐"),
						λ.NewStr("uploader"):      λ.NewStr("Philipp Hagemeister"),
						λ.NewStr("uploader_id"):   λ.NewStr("phihag"),
						λ.NewStr("uploader_url"):  λ.NewStr("re:https?://(?:www\\.)?youtube\\.com/user/phihag"),
						λ.NewStr("upload_date"):   λ.NewStr("20121002"),
						λ.NewStr("description"):   λ.NewStr("test chars:  \"'/\\ä↭𝕐\ntest URL: https://github.com/rg3/youtube-dl/issues/1892\n\nThis is a test video for youtube-dl.\n\nFor more information, contact phihag@phihag.de ."),
						λ.NewStr("categories"):    λ.NewList(λ.NewStr("Science & Technology")),
						λ.NewStr("tags"):          λ.NewList(λ.NewStr("youtube-dl")),
						λ.NewStr("duration"):      λ.NewInt(10),
						λ.NewStr("view_count"):    λ.IntType,
						λ.NewStr("like_count"):    λ.IntType,
						λ.NewStr("dislike_count"): λ.IntType,
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):  λ.NewStr("https://www.youtube.com/watch?v=a9LDPn-MO4I"),
					λ.NewStr("note"): λ.NewStr("256k DASH audio (format 141) via DASH manifest"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           λ.NewStr("a9LDPn-MO4I"),
						λ.NewStr("ext"):          λ.NewStr("m4a"),
						λ.NewStr("upload_date"):  λ.NewStr("20121002"),
						λ.NewStr("uploader_id"):  λ.NewStr("8KVIDEO"),
						λ.NewStr("uploader_url"): λ.NewStr("re:https?://(?:www\\.)?youtube\\.com/user/8KVIDEO"),
						λ.NewStr("description"):  λ.NewStr(""),
						λ.NewStr("uploader"):     λ.NewStr("8KVIDEO"),
						λ.NewStr("title"):        λ.NewStr("UHDTV TEST 8K VIDEO.mp4"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("youtube_include_dash_manifest"): λ.True,
						λ.NewStr("format"):                        λ.NewStr("141"),
					}),
					λ.NewStr("skip"): λ.NewStr("format 141 not served anymore"),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.youtube.com/watch?v=IB3lcPjvWLA"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("IB3lcPjvWLA"),
						λ.NewStr("ext"):         λ.NewStr("m4a"),
						λ.NewStr("title"):       λ.NewStr("Afrojack, Spree Wilson - The Spark (Official Music Video) ft. Spree Wilson"),
						λ.NewStr("description"): λ.NewStr("md5:8f5e2b82460520b619ccac1f509d43bf"),
						λ.NewStr("duration"):    λ.NewInt(244),
						λ.NewStr("uploader"):    λ.NewStr("AfrojackVEVO"),
						λ.NewStr("uploader_id"): λ.NewStr("AfrojackVEVO"),
						λ.NewStr("upload_date"): λ.NewStr("20131011"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("youtube_include_dash_manifest"): λ.True,
						λ.NewStr("format"):                        λ.NewStr("141/bestaudio[ext=m4a]"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.youtube.com/watch?v=nfWlot6h_JM"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("nfWlot6h_JM"),
						λ.NewStr("ext"):         λ.NewStr("m4a"),
						λ.NewStr("title"):       λ.NewStr("Taylor Swift - Shake It Off"),
						λ.NewStr("description"): λ.NewStr("md5:bec2185232c05479482cb5a9b82719bf"),
						λ.NewStr("duration"):    λ.NewInt(242),
						λ.NewStr("uploader"):    λ.NewStr("TaylorSwiftVEVO"),
						λ.NewStr("uploader_id"): λ.NewStr("TaylorSwiftVEVO"),
						λ.NewStr("upload_date"): λ.NewStr("20140818"),
						λ.NewStr("creator"):     λ.NewStr("Taylor Swift"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("youtube_include_dash_manifest"): λ.True,
						λ.NewStr("format"):                        λ.NewStr("141/bestaudio[ext=m4a]"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.youtube.com/watch?v=T4XJQO3qol8"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           λ.NewStr("T4XJQO3qol8"),
						λ.NewStr("ext"):          λ.NewStr("mp4"),
						λ.NewStr("duration"):     λ.NewInt(219),
						λ.NewStr("upload_date"):  λ.NewStr("20100909"),
						λ.NewStr("uploader"):     λ.NewStr("Amazing Atheist"),
						λ.NewStr("uploader_id"):  λ.NewStr("TheAmazingAtheist"),
						λ.NewStr("uploader_url"): λ.NewStr("re:https?://(?:www\\.)?youtube\\.com/user/TheAmazingAtheist"),
						λ.NewStr("title"):        λ.NewStr("Burning Everyone's Koran"),
						λ.NewStr("description"):  λ.NewStr("SUBSCRIBE: http://www.youtube.com/saturninefilms\n\nEven Obama has taken a stand against freedom on this issue: http://www.huffingtonpost.com/2010/09/09/obama-gma-interview-quran_n_710282.html"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://youtube.com/watch?v=HtVdAasjOgU"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           λ.NewStr("HtVdAasjOgU"),
						λ.NewStr("ext"):          λ.NewStr("mp4"),
						λ.NewStr("title"):        λ.NewStr("The Witcher 3: Wild Hunt - The Sword Of Destiny Trailer"),
						λ.NewStr("description"):  λ.NewStr("re:(?s).{100,}About the Game\\n.*?The Witcher 3: Wild Hunt.{100,}"),
						λ.NewStr("duration"):     λ.NewInt(142),
						λ.NewStr("uploader"):     λ.NewStr("The Witcher"),
						λ.NewStr("uploader_id"):  λ.NewStr("WitcherGame"),
						λ.NewStr("uploader_url"): λ.NewStr("re:https?://(?:www\\.)?youtube\\.com/user/WitcherGame"),
						λ.NewStr("upload_date"):  λ.NewStr("20140605"),
						λ.NewStr("age_limit"):    λ.NewInt(18),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.youtube.com/watch?v=6kLq3WMV1nU"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           λ.NewStr("6kLq3WMV1nU"),
						λ.NewStr("ext"):          λ.NewStr("mp4"),
						λ.NewStr("title"):        λ.NewStr("Dedication To My Ex (Miss That) (Lyric Video)"),
						λ.NewStr("description"):  λ.NewStr("md5:33765bb339e1b47e7e72b5490139bb41"),
						λ.NewStr("duration"):     λ.NewInt(246),
						λ.NewStr("uploader"):     λ.NewStr("LloydVEVO"),
						λ.NewStr("uploader_id"):  λ.NewStr("LloydVEVO"),
						λ.NewStr("uploader_url"): λ.NewStr("re:https?://(?:www\\.)?youtube\\.com/user/LloydVEVO"),
						λ.NewStr("upload_date"):  λ.NewStr("20110629"),
						λ.NewStr("age_limit"):    λ.NewInt(18),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("__2ABJjxzNo"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           λ.NewStr("__2ABJjxzNo"),
						λ.NewStr("ext"):          λ.NewStr("mp4"),
						λ.NewStr("duration"):     λ.NewInt(266),
						λ.NewStr("upload_date"):  λ.NewStr("20100430"),
						λ.NewStr("uploader_id"):  λ.NewStr("deadmau5"),
						λ.NewStr("uploader_url"): λ.NewStr("re:https?://(?:www\\.)?youtube\\.com/user/deadmau5"),
						λ.NewStr("creator"):      λ.NewStr("deadmau5"),
						λ.NewStr("description"):  λ.NewStr("md5:12c56784b8032162bb936a5f76d55360"),
						λ.NewStr("uploader"):     λ.NewStr("deadmau5"),
						λ.NewStr("title"):        λ.NewStr("Deadmau5 - Some Chords (HD)"),
						λ.NewStr("alt_title"):    λ.NewStr("Some Chords"),
					}),
					λ.NewStr("expected_warnings"): λ.NewList(λ.NewStr("DASH manifest missing")),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("lqQg6PlCWgI"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           λ.NewStr("lqQg6PlCWgI"),
						λ.NewStr("ext"):          λ.NewStr("mp4"),
						λ.NewStr("duration"):     λ.NewInt(6085),
						λ.NewStr("upload_date"):  λ.NewStr("20150827"),
						λ.NewStr("uploader_id"):  λ.NewStr("olympic"),
						λ.NewStr("uploader_url"): λ.NewStr("re:https?://(?:www\\.)?youtube\\.com/user/olympic"),
						λ.NewStr("description"):  λ.NewStr("HO09  - Women -  GER-AUS - Hockey - 31 July 2012 - London 2012 Olympic Games"),
						λ.NewStr("uploader"):     λ.NewStr("Olympic"),
						λ.NewStr("title"):        λ.NewStr("Hockey - Women -  GER-AUS - London 2012 Olympic Games"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.NewStr("requires avconv"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.youtube.com/watch?v=_b-2C3KPAM0"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):              λ.NewStr("_b-2C3KPAM0"),
						λ.NewStr("ext"):             λ.NewStr("mp4"),
						λ.NewStr("stretched_ratio"): λ.TrueDiv(λ.NewInt(16), λ.NewFloat(9.0)),
						λ.NewStr("duration"):        λ.NewInt(85),
						λ.NewStr("upload_date"):     λ.NewStr("20110310"),
						λ.NewStr("uploader_id"):     λ.NewStr("AllenMeow"),
						λ.NewStr("uploader_url"):    λ.NewStr("re:https?://(?:www\\.)?youtube\\.com/user/AllenMeow"),
						λ.NewStr("description"):     λ.NewStr("made by Wacom from Korea | 字幕&加油添醋 by TY's Allen | 感謝heylisa00cavey1001同學熱情提供梗及翻譯"),
						λ.NewStr("uploader"):        λ.NewStr("孫ᄋᄅ"),
						λ.NewStr("title"):           λ.NewStr("[A-made] 變態妍字幕版 太妍 我就是這樣的人"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("qEJwOuvDf7I"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("qEJwOuvDf7I"),
						λ.NewStr("ext"):         λ.NewStr("webm"),
						λ.NewStr("title"):       λ.NewStr("Обсуждение судебной практики по выборам 14 сентября 2014 года в Санкт-Петербурге"),
						λ.NewStr("description"): λ.NewStr(""),
						λ.NewStr("upload_date"): λ.NewStr("20150404"),
						λ.NewStr("uploader_id"): λ.NewStr("spbelect"),
						λ.NewStr("uploader"):    λ.NewStr("Наблюдатели Петербурга"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.NewStr("requires avconv"),
					}),
					λ.NewStr("skip"): λ.NewStr("This live event has ended."),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.youtube.com/watch?v=FIl7x6_3R5Y"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           λ.NewStr("FIl7x6_3R5Y"),
						λ.NewStr("ext"):          λ.NewStr("webm"),
						λ.NewStr("title"):        λ.NewStr("md5:7b81415841e02ecd4313668cde88737a"),
						λ.NewStr("description"):  λ.NewStr("md5:116377fd2963b81ec4ce64b542173306"),
						λ.NewStr("duration"):     λ.NewInt(220),
						λ.NewStr("upload_date"):  λ.NewStr("20150625"),
						λ.NewStr("uploader_id"):  λ.NewStr("dorappi2000"),
						λ.NewStr("uploader_url"): λ.NewStr("re:https?://(?:www\\.)?youtube\\.com/user/dorappi2000"),
						λ.NewStr("uploader"):     λ.NewStr("dorappi2000"),
						λ.NewStr("formats"):      λ.NewStr("mincount:31"),
					}),
					λ.NewStr("skip"): λ.NewStr("not actual anymore"),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.youtube.com/embed/CsmdDsKjzN8"),
					λ.NewStr("md5"): λ.NewStr("8ce563a1d667b599d21064e982ab9e31"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("CsmdDsKjzN8"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("upload_date"): λ.NewStr("20150501"),
						λ.NewStr("uploader"):    λ.NewStr("Airtek"),
						λ.NewStr("description"): λ.NewStr("Retransmisión en directo de la XVIII media maratón de Zaragoza."),
						λ.NewStr("uploader_id"): λ.NewStr("UCzTzUmjXxxacNnL8I3m4LnQ"),
						λ.NewStr("title"):       λ.NewStr("Retransmisión XVIII Media maratón Zaragoza 2015"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("youtube_include_dash_manifest"): λ.True,
						λ.NewStr("format"):                        λ.NewStr("135"),
					}),
					λ.NewStr("skip"): λ.NewStr("This live event has ended."),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.youtube.com/watch?v=jqWvoWXjCVs"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("jqWvoWXjCVs"),
						λ.NewStr("title"):       λ.NewStr("teamPGP: Rocket League Noob Stream"),
						λ.NewStr("description"): λ.NewStr("md5:dc7872fb300e143831327f1bae3af010"),
					}),
					λ.NewStr("playlist"): λ.NewList(
						λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("id"):           λ.NewStr("jqWvoWXjCVs"),
								λ.NewStr("ext"):          λ.NewStr("mp4"),
								λ.NewStr("title"):        λ.NewStr("teamPGP: Rocket League Noob Stream (Main Camera)"),
								λ.NewStr("description"):  λ.NewStr("md5:dc7872fb300e143831327f1bae3af010"),
								λ.NewStr("duration"):     λ.NewInt(7335),
								λ.NewStr("upload_date"):  λ.NewStr("20150721"),
								λ.NewStr("uploader"):     λ.NewStr("Beer Games Beer"),
								λ.NewStr("uploader_id"):  λ.NewStr("beergamesbeer"),
								λ.NewStr("uploader_url"): λ.NewStr("re:https?://(?:www\\.)?youtube\\.com/user/beergamesbeer"),
								λ.NewStr("license"):      λ.NewStr("Standard YouTube License"),
							}),
						}),
						λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("id"):           λ.NewStr("6h8e8xoXJzg"),
								λ.NewStr("ext"):          λ.NewStr("mp4"),
								λ.NewStr("title"):        λ.NewStr("teamPGP: Rocket League Noob Stream (kreestuh)"),
								λ.NewStr("description"):  λ.NewStr("md5:dc7872fb300e143831327f1bae3af010"),
								λ.NewStr("duration"):     λ.NewInt(7337),
								λ.NewStr("upload_date"):  λ.NewStr("20150721"),
								λ.NewStr("uploader"):     λ.NewStr("Beer Games Beer"),
								λ.NewStr("uploader_id"):  λ.NewStr("beergamesbeer"),
								λ.NewStr("uploader_url"): λ.NewStr("re:https?://(?:www\\.)?youtube\\.com/user/beergamesbeer"),
								λ.NewStr("license"):      λ.NewStr("Standard YouTube License"),
							}),
						}),
						λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("id"):           λ.NewStr("PUOgX5z9xZw"),
								λ.NewStr("ext"):          λ.NewStr("mp4"),
								λ.NewStr("title"):        λ.NewStr("teamPGP: Rocket League Noob Stream (grizzle)"),
								λ.NewStr("description"):  λ.NewStr("md5:dc7872fb300e143831327f1bae3af010"),
								λ.NewStr("duration"):     λ.NewInt(7337),
								λ.NewStr("upload_date"):  λ.NewStr("20150721"),
								λ.NewStr("uploader"):     λ.NewStr("Beer Games Beer"),
								λ.NewStr("uploader_id"):  λ.NewStr("beergamesbeer"),
								λ.NewStr("uploader_url"): λ.NewStr("re:https?://(?:www\\.)?youtube\\.com/user/beergamesbeer"),
								λ.NewStr("license"):      λ.NewStr("Standard YouTube License"),
							}),
						}),
						λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("id"):           λ.NewStr("teuwxikvS5k"),
								λ.NewStr("ext"):          λ.NewStr("mp4"),
								λ.NewStr("title"):        λ.NewStr("teamPGP: Rocket League Noob Stream (zim)"),
								λ.NewStr("description"):  λ.NewStr("md5:dc7872fb300e143831327f1bae3af010"),
								λ.NewStr("duration"):     λ.NewInt(7334),
								λ.NewStr("upload_date"):  λ.NewStr("20150721"),
								λ.NewStr("uploader"):     λ.NewStr("Beer Games Beer"),
								λ.NewStr("uploader_id"):  λ.NewStr("beergamesbeer"),
								λ.NewStr("uploader_url"): λ.NewStr("re:https?://(?:www\\.)?youtube\\.com/user/beergamesbeer"),
								λ.NewStr("license"):      λ.NewStr("Standard YouTube License"),
							}),
						}),
					),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
					λ.NewStr("skip"): λ.NewStr("This video is not available."),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.youtube.com/watch?v=gVfLd0zydlo"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):    λ.NewStr("gVfLd0zydlo"),
						λ.NewStr("title"): λ.NewStr("DevConf.cz 2016 Day 2 Workshops 1 14:00 - 15:30"),
					}),
					λ.NewStr("playlist_count"): λ.NewInt(2),
					λ.NewStr("skip"):           λ.NewStr("Not multifeed anymore"),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://vid.plus/FlRa-iH7PGw"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://zwearz.com/watch/9lWxNJF-ufM/electra-woman-dyna-girl-official-trailer-grace-helbig.html"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.youtube.com/watch?v=lsguqyKfVQg"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           λ.NewStr("lsguqyKfVQg"),
						λ.NewStr("ext"):          λ.NewStr("mp4"),
						λ.NewStr("title"):        λ.NewStr("{dark walk}; Loki/AC/Dishonored; collab w/Elflover21"),
						λ.NewStr("alt_title"):    λ.NewStr("Dark Walk - Position Music"),
						λ.NewStr("description"):  λ.NewStr("md5:8085699c11dc3f597ce0410b0dcbb34a"),
						λ.NewStr("duration"):     λ.NewInt(133),
						λ.NewStr("upload_date"):  λ.NewStr("20151119"),
						λ.NewStr("uploader_id"):  λ.NewStr("IronSoulElf"),
						λ.NewStr("uploader_url"): λ.NewStr("re:https?://(?:www\\.)?youtube\\.com/user/IronSoulElf"),
						λ.NewStr("uploader"):     λ.NewStr("IronSoulElf"),
						λ.NewStr("creator"):      λ.NewStr("Todd Haberman,  Daniel Law Heath and Aaron Kaplan"),
						λ.NewStr("track"):        λ.NewStr("Dark Walk - Position Music"),
						λ.NewStr("artist"):       λ.NewStr("Todd Haberman,  Daniel Law Heath and Aaron Kaplan"),
						λ.NewStr("album"):        λ.NewStr("Position Music - Production Music Vol. 143 - Dark Walk"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://www.youtube.com/watch?v=Ms7iBXnlUO8"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.youtube.com/watch?v=Q39EVAstoRM"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("Q39EVAstoRM"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Clash Of Clans#14 Dicas De Ataque Para CV 4"),
						λ.NewStr("description"): λ.NewStr("md5:ee18a25c350637c8faff806845bddee9"),
						λ.NewStr("upload_date"): λ.NewStr("20151107"),
						λ.NewStr("uploader_id"): λ.NewStr("UCCr7TALkRbo3EtFzETQF1LA"),
						λ.NewStr("uploader"):    λ.NewStr("CH GAMER DROID"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
					λ.NewStr("skip"): λ.NewStr("This video does not exist."),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.youtube.com/watch?v=M4gD1WSo5mA"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           λ.NewStr("M4gD1WSo5mA"),
						λ.NewStr("ext"):          λ.NewStr("mp4"),
						λ.NewStr("title"):        λ.NewStr("md5:e41008789470fc2533a3252216f1c1d1"),
						λ.NewStr("description"):  λ.NewStr("md5:a677553cf0840649b731a3024aeff4cc"),
						λ.NewStr("duration"):     λ.NewInt(721),
						λ.NewStr("upload_date"):  λ.NewStr("20150127"),
						λ.NewStr("uploader_id"):  λ.NewStr("BerkmanCenter"),
						λ.NewStr("uploader_url"): λ.NewStr("re:https?://(?:www\\.)?youtube\\.com/user/BerkmanCenter"),
						λ.NewStr("uploader"):     λ.NewStr("The Berkman Klein Center for Internet & Society"),
						λ.NewStr("license"):      λ.NewStr("Creative Commons Attribution license (reuse allowed)"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.youtube.com/watch?v=eQcmzGIKrzg"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           λ.NewStr("eQcmzGIKrzg"),
						λ.NewStr("ext"):          λ.NewStr("mp4"),
						λ.NewStr("title"):        λ.NewStr("Democratic Socialism and Foreign Policy | Bernie Sanders"),
						λ.NewStr("description"):  λ.NewStr("md5:dda0d780d5a6e120758d1711d062a867"),
						λ.NewStr("duration"):     λ.NewInt(4060),
						λ.NewStr("upload_date"):  λ.NewStr("20151119"),
						λ.NewStr("uploader"):     λ.NewStr("Bernie Sanders"),
						λ.NewStr("uploader_id"):  λ.NewStr("UCH1dpzjCEiGAt8CXkryhkZg"),
						λ.NewStr("uploader_url"): λ.NewStr("re:https?://(?:www\\.)?youtube\\.com/channel/UCH1dpzjCEiGAt8CXkryhkZg"),
						λ.NewStr("license"):      λ.NewStr("Creative Commons Attribution license (reuse allowed)"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://www.youtube.com/watch?feature=player_embedded&amp;amp;v=V36LpHqtcDY"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://www.youtube.com/watch?v=i1Ko8UG-Tdo"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.youtube.com/watch?v=yYr8q0y5Jfg"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           λ.NewStr("uGpuVWrhIzE"),
						λ.NewStr("ext"):          λ.NewStr("mp4"),
						λ.NewStr("title"):        λ.NewStr("Piku - Trailer"),
						λ.NewStr("description"):  λ.NewStr("md5:c36bd60c3fd6f1954086c083c72092eb"),
						λ.NewStr("upload_date"):  λ.NewStr("20150811"),
						λ.NewStr("uploader"):     λ.NewStr("FlixMatrix"),
						λ.NewStr("uploader_id"):  λ.NewStr("FlixMatrixKaravan"),
						λ.NewStr("uploader_url"): λ.NewStr("re:https?://(?:www\\.)?youtube\\.com/user/FlixMatrixKaravan"),
						λ.NewStr("license"):      λ.NewStr("Standard YouTube License"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
					λ.NewStr("skip"): λ.NewStr("This video is not available."),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.youtube.com/watch?v=iqKdEhx-dD4"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):             λ.NewStr("iqKdEhx-dD4"),
						λ.NewStr("ext"):            λ.NewStr("mp4"),
						λ.NewStr("title"):          λ.NewStr("Isolation - Mind Field (Ep 1)"),
						λ.NewStr("description"):    λ.NewStr("md5:46a29be4ceffa65b92d277b93f463c0f"),
						λ.NewStr("duration"):       λ.NewInt(2085),
						λ.NewStr("upload_date"):    λ.NewStr("20170118"),
						λ.NewStr("uploader"):       λ.NewStr("Vsauce"),
						λ.NewStr("uploader_id"):    λ.NewStr("Vsauce"),
						λ.NewStr("uploader_url"):   λ.NewStr("re:https?://(?:www\\.)?youtube\\.com/user/Vsauce"),
						λ.NewStr("series"):         λ.NewStr("Mind Field"),
						λ.NewStr("season_number"):  λ.NewInt(1),
						λ.NewStr("episode_number"): λ.NewInt(1),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
					λ.NewStr("expected_warnings"): λ.NewList(λ.NewStr("Skipping DASH manifest")),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.youtube.com/watch?v=6SJNVb0GnPI"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           λ.NewStr("6SJNVb0GnPI"),
						λ.NewStr("ext"):          λ.NewStr("mp4"),
						λ.NewStr("title"):        λ.NewStr("Race Differences in Intelligence"),
						λ.NewStr("description"):  λ.NewStr("md5:5d161533167390427a1f8ee89a1fc6f1"),
						λ.NewStr("duration"):     λ.NewInt(965),
						λ.NewStr("upload_date"):  λ.NewStr("20140124"),
						λ.NewStr("uploader"):     λ.NewStr("New Century Foundation"),
						λ.NewStr("uploader_id"):  λ.NewStr("UCEJYpZGqgUob0zVVEaLhvVg"),
						λ.NewStr("uploader_url"): λ.NewStr("re:https?://(?:www\\.)?youtube\\.com/channel/UCEJYpZGqgUob0zVVEaLhvVg"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("1t24XAntNCY"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("sJL6WA-aGkQ"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://www.youtube.com/watch?v=MuAGGZNfUkU&list=RDMM"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://invidio.us/watch?v=BaW_jenozKc"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://www.youtube.com/watch?v=s7_qI6_mIXc"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.youtube.com/watch?v=Z4Vy8R84T1U"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           λ.NewStr("Z4Vy8R84T1U"),
						λ.NewStr("ext"):          λ.NewStr("mp4"),
						λ.NewStr("title"):        λ.NewStr("saman SMAN 53 Jakarta(Sancety) opening COFFEE4th at SMAN 53 Jakarta"),
						λ.NewStr("description"):  λ.NewStr("md5:d41d8cd98f00b204e9800998ecf8427e"),
						λ.NewStr("duration"):     λ.NewInt(433),
						λ.NewStr("upload_date"):  λ.NewStr("20130923"),
						λ.NewStr("uploader"):     λ.NewStr("Amelia Putri Harwita"),
						λ.NewStr("uploader_id"):  λ.NewStr("UCpOxM49HJxmC1qCalXyB3_Q"),
						λ.NewStr("uploader_url"): λ.NewStr("re:https?://(?:www\\.)?youtube\\.com/channel/UCpOxM49HJxmC1qCalXyB3_Q"),
						λ.NewStr("formats"):      λ.NewStr("maxcount:10"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"):                 λ.True,
						λ.NewStr("youtube_include_dash_manifest"): λ.False,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://music.youtube.com/watch?v=MgNrAu2pzNs"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           λ.NewStr("MgNrAu2pzNs"),
						λ.NewStr("ext"):          λ.NewStr("mp4"),
						λ.NewStr("title"):        λ.NewStr("Voyeur Girl"),
						λ.NewStr("description"):  λ.NewStr("md5:7ae382a65843d6df2685993e90a8628f"),
						λ.NewStr("upload_date"):  λ.NewStr("20190312"),
						λ.NewStr("uploader"):     λ.NewStr("Various Artists - Topic"),
						λ.NewStr("uploader_id"):  λ.NewStr("UCVWKBi1ELZn0QX2CBLSkiyw"),
						λ.NewStr("artist"):       λ.NewStr("Stephen"),
						λ.NewStr("track"):        λ.NewStr("Voyeur Girl"),
						λ.NewStr("album"):        λ.NewStr("it's too much love to know my dear"),
						λ.NewStr("release_date"): λ.NewStr("20190313"),
						λ.NewStr("release_year"): λ.NewInt(2019),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.youtube.com/watch?v=k0jLE7tTwjY"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           λ.NewStr("k0jLE7tTwjY"),
						λ.NewStr("ext"):          λ.NewStr("mp4"),
						λ.NewStr("title"):        λ.NewStr("Latch Feat. Sam Smith"),
						λ.NewStr("description"):  λ.NewStr("md5:3cb1e8101a7c85fcba9b4fb41b951335"),
						λ.NewStr("upload_date"):  λ.NewStr("20150110"),
						λ.NewStr("uploader"):     λ.NewStr("Various Artists - Topic"),
						λ.NewStr("uploader_id"):  λ.NewStr("UCNkEcmYdjrH4RqtNgh7BZ9w"),
						λ.NewStr("artist"):       λ.NewStr("Disclosure"),
						λ.NewStr("track"):        λ.NewStr("Latch Feat. Sam Smith"),
						λ.NewStr("album"):        λ.NewStr("Latch Featuring Sam Smith"),
						λ.NewStr("release_date"): λ.NewStr("20121008"),
						λ.NewStr("release_year"): λ.NewInt(2012),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.youtube.com/watch?v=74qn0eJSjpA"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           λ.NewStr("74qn0eJSjpA"),
						λ.NewStr("ext"):          λ.NewStr("mp4"),
						λ.NewStr("title"):        λ.NewStr("Eastside"),
						λ.NewStr("description"):  λ.NewStr("md5:290516bb73dcbfab0dcc4efe6c3de5f2"),
						λ.NewStr("upload_date"):  λ.NewStr("20180710"),
						λ.NewStr("uploader"):     λ.NewStr("Benny Blanco - Topic"),
						λ.NewStr("uploader_id"):  λ.NewStr("UCzqz_ksRu_WkIzmivMdIS7A"),
						λ.NewStr("artist"):       λ.NewStr("benny blanco, Halsey, Khalid"),
						λ.NewStr("track"):        λ.NewStr("Eastside"),
						λ.NewStr("album"):        λ.NewStr("Eastside"),
						λ.NewStr("release_date"): λ.NewStr("20180713"),
						λ.NewStr("release_year"): λ.NewInt(2018),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.youtube.com/watch?v=-hcAI0g-f5M"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           λ.NewStr("-hcAI0g-f5M"),
						λ.NewStr("ext"):          λ.NewStr("mp4"),
						λ.NewStr("title"):        λ.NewStr("Put It On Me"),
						λ.NewStr("description"):  λ.NewStr("md5:93c55acc682ae7b0c668f2e34e1c069e"),
						λ.NewStr("upload_date"):  λ.NewStr("20180426"),
						λ.NewStr("uploader"):     λ.NewStr("Matt Maeson - Topic"),
						λ.NewStr("uploader_id"):  λ.NewStr("UCnEkIGqtGcQMLk73Kp-Q5LQ"),
						λ.NewStr("artist"):       λ.NewStr("Matt Maeson"),
						λ.NewStr("track"):        λ.NewStr("Put It On Me"),
						λ.NewStr("album"):        λ.NewStr("The Hearse"),
						λ.NewStr("release_date"): λ.None,
						λ.NewStr("release_year"): λ.NewInt(2018),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
			)
			YoutubeIE___init__ = λ.NewFunction("__init__",
				[]λ.Param{
					{Name: "self"},
				},
				0, true, true,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒargs   = λargs[1]
						ϒkwargs = λargs[2]
						ϒself   = λargs[0]
					)
					λ.Call(λ.GetAttr(λ.Cal(λ.SuperType, YoutubeIE, ϒself), "__init__", nil), λ.NewArgs(λ.Unpack(λ.AsStarred(ϒargs))...), λ.KWArgs{
						{Name: "", Value: ϒkwargs},
					})
					λ.SetAttr(ϒself, "_player_cache", λ.NewDictWithTable(map[λ.Object]λ.Object{}))
					return λ.None
				})
			YoutubeIE_report_video_info_webpage_download = λ.NewFunction("report_video_info_webpage_download",
				[]λ.Param{
					{Name: "self"},
					{Name: "video_id"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒself     = λargs[0]
						ϒvideo_id = λargs[1]
					)
					λ.NewStr("Report attempt to download video info webpage.")
					λ.Cal(λ.GetAttr(ϒself, "to_screen", nil), λ.Mod(λ.NewStr("%s: Downloading video info webpage"), ϒvideo_id))
					return λ.None
				})
			YoutubeIE__signature_cache_id = λ.NewFunction("_signature_cache_id",
				[]λ.Param{
					{Name: "self"},
					{Name: "example_sig"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒexample_sig = λargs[1]
						ϒself        = λargs[0]
					)
					_ = ϒself
					λ.NewStr(" Return a string representation of a signature ")
					return λ.Cal(λ.GetAttr(λ.NewStr("."), "join", nil), λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒpart λ.Object
									τmp0  λ.Object
									τmp1  λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒexample_sig, "split", nil), λ.NewStr(".")))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒpart = τmp1
									λgy.Yield(λ.Cal(ϒcompat_str, λ.Cal(λ.BuiltinLen, ϒpart)))
								}
								return λ.None
							})
						})))
				})
			YoutubeIE__extract_signature_function = λ.NewFunction("_extract_signature_function",
				[]λ.Param{
					{Name: "self"},
					{Name: "video_id"},
					{Name: "player_url"},
					{Name: "example_sig"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcache_res     λ.Object
						ϒcache_spec    λ.Object
						ϒcode          λ.Object
						ϒdownload_note λ.Object
						ϒexample_sig   = λargs[3]
						ϒfunc_id       λ.Object
						ϒid_m          λ.Object
						ϒplayer_id     λ.Object
						ϒplayer_type   λ.Object
						ϒplayer_url    = λargs[2]
						ϒres           λ.Object
						ϒself          = λargs[0]
						ϒtest_string   λ.Object
						ϒurlh          λ.Object
						ϒvideo_id      = λargs[1]
					)
					ϒid_m = λ.Cal(Ωre.ϒmatch, λ.NewStr(".*?-(?P<id>[a-zA-Z0-9_-]+)(?:/watch_as3|/html5player(?:-new)?|(?:/[a-z]{2,3}_[A-Z]{2})?/base)?\\.(?P<ext>[a-z]+)$"), ϒplayer_url)
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒid_m))) {
						panic(λ.Raise(λ.Cal(ExtractorError, λ.Mod(λ.NewStr("Cannot identify player %r"), ϒplayer_url))))
					}
					ϒplayer_type = λ.Cal(λ.GetAttr(ϒid_m, "group", nil), λ.NewStr("ext"))
					ϒplayer_id = λ.Cal(λ.GetAttr(ϒid_m, "group", nil), λ.NewStr("id"))
					ϒfunc_id = λ.Mod(λ.NewStr("%s_%s_%s"), λ.NewTuple(
						ϒplayer_type,
						ϒplayer_id,
						λ.Cal(λ.GetAttr(ϒself, "_signature_cache_id", nil), ϒexample_sig),
					))
					if !λ.IsTrue(λ.Eq(λ.Cal(Ωpath.ϒbasename, ϒfunc_id), ϒfunc_id)) {
						panic(λ.Raise(λ.Cal(λ.AssertionErrorType)))
					}
					ϒcache_spec = λ.Cal(λ.GetAttr(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "cache", nil), "load", nil), λ.NewStr("youtube-sigfuncs"), ϒfunc_id)
					if λ.IsTrue(λ.NewBool(ϒcache_spec != λ.None)) {
						return λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "s"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒs = λargs[0]
								)
								return λ.Cal(λ.GetAttr(λ.NewStr(""), "join", nil), λ.Cal(λ.NewFunction("<generator>",
									nil,
									0, false, false,
									func(λargs []λ.Object) λ.Object {
										return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
											var (
												ϒi   λ.Object
												τmp0 λ.Object
												τmp1 λ.Object
											)
											τmp0 = λ.Cal(λ.BuiltinIter, ϒcache_spec)
											for {
												if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
													break
												}
												ϒi = τmp1
												λgy.Yield(λ.GetItem(ϒs, ϒi))
											}
											return λ.None
										})
									})))
							})
					}
					ϒdownload_note = func() λ.Object {
						if λ.IsTrue(λ.Cal(λ.GetAttr(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "params", nil), "get", nil), λ.NewStr("verbose"))) {
							return λ.Mod(λ.NewStr("Downloading player %s"), ϒplayer_url)
						} else {
							return λ.Mod(λ.NewStr("Downloading %s player %s"), λ.NewTuple(
								ϒplayer_type,
								ϒplayer_id,
							))
						}
					}()
					if λ.IsTrue(λ.Eq(ϒplayer_type, λ.NewStr("js"))) {
						ϒcode = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
							ϒplayer_url,
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "note", Value: ϒdownload_note},
							{Name: "errnote", Value: λ.Mod(λ.NewStr("Download of %s failed"), ϒplayer_url)},
						})
						ϒres = λ.Cal(λ.GetAttr(ϒself, "_parse_sig_js", nil), ϒcode)
					} else {
						if λ.IsTrue(λ.Eq(ϒplayer_type, λ.NewStr("swf"))) {
							ϒurlh = λ.Call(λ.GetAttr(ϒself, "_request_webpage", nil), λ.NewArgs(
								ϒplayer_url,
								ϒvideo_id,
							), λ.KWArgs{
								{Name: "note", Value: ϒdownload_note},
								{Name: "errnote", Value: λ.Mod(λ.NewStr("Download of %s failed"), ϒplayer_url)},
							})
							ϒcode = λ.Cal(λ.GetAttr(ϒurlh, "read", nil))
							ϒres = λ.Cal(λ.GetAttr(ϒself, "_parse_sig_swf", nil), ϒcode)
						} else {
							if !λ.IsTrue(λ.False) {
								panic(λ.Raise(λ.Cal(λ.AssertionErrorType, λ.Mod(λ.NewStr("Invalid player type %r"), ϒplayer_type))))
							}
						}
					}
					ϒtest_string = λ.Cal(λ.GetAttr(λ.NewStr(""), "join", nil), λ.Cal(λ.MapIteratorType, ϒcompat_chr, λ.Cal(λ.RangeType, λ.Cal(λ.BuiltinLen, ϒexample_sig))))
					ϒcache_res = λ.Cal(ϒres, ϒtest_string)
					ϒcache_spec = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒc   λ.Object
									τmp0 λ.Object
									τmp1 λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, ϒcache_res)
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒc = τmp1
									λgy.Yield(λ.Cal(λ.BuiltinOrd, ϒc))
								}
								return λ.None
							})
						})))
					λ.Cal(λ.GetAttr(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "cache", nil), "store", nil), λ.NewStr("youtube-sigfuncs"), ϒfunc_id, ϒcache_spec)
					return ϒres
				})
			YoutubeIE__parse_sig_js = λ.NewFunction("_parse_sig_js",
				[]λ.Param{
					{Name: "self"},
					{Name: "jscode"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒfuncname         λ.Object
						ϒinitial_function λ.Object
						ϒjscode           = λargs[1]
						ϒjsi              λ.Object
						ϒself             = λargs[0]
					)
					ϒfuncname = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewTuple(
							λ.NewStr("\\b[cs]\\s*&&\\s*[adf]\\.set\\([^,]+\\s*,\\s*encodeURIComponent\\s*\\(\\s*(?P<sig>[a-zA-Z0-9$]+)\\("),
							λ.NewStr("\\b[a-zA-Z0-9]+\\s*&&\\s*[a-zA-Z0-9]+\\.set\\([^,]+\\s*,\\s*encodeURIComponent\\s*\\(\\s*(?P<sig>[a-zA-Z0-9$]+)\\("),
							λ.NewStr("(?P<sig>[a-zA-Z0-9$]+)\\s*=\\s*function\\(\\s*a\\s*\\)\\s*{\\s*a\\s*=\\s*a\\.split\\(\\s*\"\"\\s*\\)"),
							λ.NewStr("([\"\\'])signature\\1\\s*,\\s*(?P<sig>[a-zA-Z0-9$]+)\\("),
							λ.NewStr("\\.sig\\|\\|(?P<sig>[a-zA-Z0-9$]+)\\("),
							λ.NewStr("yt\\.akamaized\\.net/\\)\\s*\\|\\|\\s*.*?\\s*[cs]\\s*&&\\s*[adf]\\.set\\([^,]+\\s*,\\s*(?:encodeURIComponent\\s*\\()?\\s*(?P<sig>[a-zA-Z0-9$]+)\\("),
							λ.NewStr("\\b[cs]\\s*&&\\s*[adf]\\.set\\([^,]+\\s*,\\s*(?P<sig>[a-zA-Z0-9$]+)\\("),
							λ.NewStr("\\b[a-zA-Z0-9]+\\s*&&\\s*[a-zA-Z0-9]+\\.set\\([^,]+\\s*,\\s*(?P<sig>[a-zA-Z0-9$]+)\\("),
							λ.NewStr("\\bc\\s*&&\\s*a\\.set\\([^,]+\\s*,\\s*\\([^)]*\\)\\s*\\(\\s*(?P<sig>[a-zA-Z0-9$]+)\\("),
							λ.NewStr("\\bc\\s*&&\\s*[a-zA-Z0-9]+\\.set\\([^,]+\\s*,\\s*\\([^)]*\\)\\s*\\(\\s*(?P<sig>[a-zA-Z0-9$]+)\\("),
							λ.NewStr("\\bc\\s*&&\\s*[a-zA-Z0-9]+\\.set\\([^,]+\\s*,\\s*\\([^)]*\\)\\s*\\(\\s*(?P<sig>[a-zA-Z0-9$]+)\\("),
						),
						ϒjscode,
						λ.NewStr("Initial JS player signature function name"),
					), λ.KWArgs{
						{Name: "group", Value: λ.NewStr("sig")},
					})
					ϒjsi = λ.Cal(JSInterpreter, ϒjscode)
					ϒinitial_function = λ.Cal(λ.GetAttr(ϒjsi, "extract_function", nil), ϒfuncname)
					return λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "s"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒs = λargs[0]
							)
							return λ.Cal(ϒinitial_function, λ.NewList(ϒs))
						})
				})
			YoutubeIE__decrypt_signature = λ.NewFunction("_decrypt_signature",
				[]λ.Param{
					{Name: "self"},
					{Name: "s"},
					{Name: "video_id"},
					{Name: "player_url"},
					{Name: "age_gate", Def: λ.False},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒage_gate   = λargs[4]
						ϒfunc       λ.Object
						ϒplayer_id  λ.Object
						ϒplayer_url = λargs[3]
						ϒs          = λargs[1]
						ϒself       = λargs[0]
						ϒtb         λ.Object
						ϒvideo_id   = λargs[2]
						τmp0        λ.Object
						τmp1        λ.Object
					)
					_ = ϒage_gate
					λ.NewStr("Turn the encrypted s field into a working signature")
					if λ.IsTrue(λ.NewBool(ϒplayer_url == λ.None)) {
						panic(λ.Raise(λ.Cal(ExtractorError, λ.NewStr("Cannot decrypt signature without player_url"))))
					}
					if λ.IsTrue(λ.Cal(λ.GetAttr(ϒplayer_url, "startswith", nil), λ.NewStr("//"))) {
						ϒplayer_url = λ.Add(λ.NewStr("https:"), ϒplayer_url)
					} else {
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.Cal(Ωre.ϒmatch, λ.NewStr("https?://"), ϒplayer_url)))) {
							ϒplayer_url = λ.Cal(Ωparse.ϒurljoin, λ.NewStr("https://www.youtube.com"), ϒplayer_url)
						}
					}
					τmp0, τmp1 = func() (λexit λ.Object, λret λ.Object) {
						defer λ.CatchMulti(
							nil,
							&λ.Catcher{λ.ExceptionType, func(λex λ.BaseException) {
								var ϒe λ.Object = λex
								ϒtb = λ.Cal(λ.GetAttr(λ.None, "format_exc", nil))
								panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Add(λ.NewStr("Signature extraction failed: "), ϒtb)), λ.KWArgs{
									{Name: "cause", Value: ϒe},
								})))
							}},
						)
						ϒplayer_id = λ.NewTuple(
							ϒplayer_url,
							λ.Cal(λ.GetAttr(ϒself, "_signature_cache_id", nil), ϒs),
						)
						if λ.IsTrue(λ.NewBool(!λ.Contains(λ.GetAttr(ϒself, "_player_cache", nil), ϒplayer_id))) {
							ϒfunc = λ.Cal(λ.GetAttr(ϒself, "_extract_signature_function", nil), ϒvideo_id, ϒplayer_url, ϒs)
							λ.SetItem(λ.GetAttr(ϒself, "_player_cache", nil), ϒplayer_id, ϒfunc)
						}
						ϒfunc = λ.GetItem(λ.GetAttr(ϒself, "_player_cache", nil), ϒplayer_id)
						if λ.IsTrue(λ.Cal(λ.GetAttr(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "params", nil), "get", nil), λ.NewStr("youtube_print_sig_code"))) {
							λ.Cal(λ.GetAttr(ϒself, "_print_sig_code", nil), ϒfunc, ϒs)
						}
						λexit, λret = λ.BlockExitReturn, λ.Cal(ϒfunc, ϒs)
						return
						return λ.BlockExitNormally, nil
					}()
					if τmp0 == λ.BlockExitReturn {
						return τmp1
					}
					return λ.None
				})
			YoutubeIE__get_ytplayer_config = λ.NewFunction("_get_ytplayer_config",
				[]λ.Param{
					{Name: "self"},
					{Name: "video_id"},
					{Name: "webpage"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒconfig   λ.Object
						ϒpatterns λ.Object
						ϒself     = λargs[0]
						ϒvideo_id = λargs[1]
						ϒwebpage  = λargs[2]
					)
					ϒpatterns = λ.NewTuple(
						λ.NewStr(";ytplayer\\.config\\s*=\\s*({.+?});ytplayer"),
						λ.NewStr(";ytplayer\\.config\\s*=\\s*({.+?});"),
					)
					ϒconfig = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						ϒpatterns,
						ϒwebpage,
						λ.NewStr("ytplayer.config"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(ϒconfig) {
						return λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
							λ.Cal(ϒuppercase_escape, ϒconfig),
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "fatal", Value: λ.False},
						})
					}
					return λ.None
				})
			YoutubeIE__extract_urls = λ.NewFunction("_extract_urls",
				[]λ.Param{
					{Name: "webpage"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒentries λ.Object
						ϒmatches λ.Object
						ϒwebpage = λargs[0]
					)
					ϒentries = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒmobj λ.Object
									τmp0  λ.Object
									τmp1  λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfinditer, λ.NewStr("(?x)\n            (?:\n                <iframe[^>]+?src=|\n                data-video-url=|\n                <embed[^>]+?src=|\n                embedSWF\\(?:\\s*|\n                <object[^>]+data=|\n                new\\s+SWFObject\\(\n            )\n            ([\"\\'])\n                (?P<url>(?:https?:)?//(?:www\\.)?youtube(?:-nocookie)?\\.com/\n                (?:embed|v|p)/[0-9A-Za-z_-]{11}.*?)\n            \\1"), ϒwebpage))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒmobj = τmp1
									λgy.Yield(λ.Cal(ϒunescapeHTML, λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("url"))))
								}
								return λ.None
							})
						})))
					λ.Cal(λ.GetAttr(ϒentries, "extend", nil), λ.Cal(λ.ListType, λ.Cal(λ.MapIteratorType, ϒunescapeHTML, λ.Cal(Ωre.ϒfindall, λ.NewStr("class=\"lazyYT\" data-youtube-id=\"([^\"]+)\""), ϒwebpage))))
					ϒmatches = λ.Cal(Ωre.ϒfindall, λ.NewStr("(?x)<div[^>]+\n            class=(?P<q1>[\\'\"])[^\\'\"]*\\byvii_single_video_player\\b[^\\'\"]*(?P=q1)[^>]+\n            data-video_id=(?P<q2>[\\'\"])([^\\'\"]+)(?P=q2)"), ϒwebpage)
					λ.Cal(λ.GetAttr(ϒentries, "extend", nil), λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒm   λ.Object
									τmp0 λ.Object
									τmp1 λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, ϒmatches)
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒm = τmp1
									λgy.Yield(λ.GetItem(ϒm, λ.Neg(λ.NewInt(1))))
								}
								return λ.None
							})
						})))
					return ϒentries
				})
			YoutubeIE__extract_urls = λ.Cal(λ.StaticMethodType, YoutubeIE__extract_urls)
			YoutubeIE__extract_url = λ.NewFunction("_extract_url",
				[]λ.Param{
					{Name: "webpage"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒurls    λ.Object
						ϒwebpage = λargs[0]
					)
					ϒurls = λ.Cal(λ.GetAttr(YoutubeIE, "_extract_urls", nil), ϒwebpage)
					return func() λ.Object {
						if λ.IsTrue(ϒurls) {
							return λ.GetItem(ϒurls, λ.NewInt(0))
						} else {
							return λ.None
						}
					}()
				})
			YoutubeIE__extract_url = λ.Cal(λ.StaticMethodType, YoutubeIE__extract_url)
			YoutubeIE_extract_id = λ.NewFunction("extract_id",
				[]λ.Param{
					{Name: "cls"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls      = λargs[0]
						ϒmobj     λ.Object
						ϒurl      = λargs[1]
						ϒvideo_id λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒcls, "_VALID_URL", nil), ϒurl, Ωre.VERBOSE)
					if λ.IsTrue(λ.NewBool(ϒmobj == λ.None)) {
						panic(λ.Raise(λ.Cal(ExtractorError, λ.Mod(λ.NewStr("Invalid URL: %s"), ϒurl))))
					}
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewInt(2))
					return ϒvideo_id
				})
			YoutubeIE_extract_id = λ.Cal(λ.ClassMethodType, YoutubeIE_extract_id)
			YoutubeIE__extract_chapters = λ.NewFunction("_extract_chapters",
				[]λ.Param{
					{Name: "description"},
					{Name: "duration"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒchapter_line  λ.Object
						ϒchapter_lines λ.Object
						ϒchapter_title λ.Object
						ϒchapters      λ.Object
						ϒdescription   = λargs[0]
						ϒduration      = λargs[1]
						ϒend_time      λ.Object
						ϒnext_num      λ.Object
						ϒstart_time    λ.Object
						ϒtime_point    λ.Object
						τmp0           λ.Object
						τmp1           λ.Object
						τmp2           λ.Object
						τmp3           λ.Object
					)
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒdescription))) {
						return λ.None
					}
					ϒchapter_lines = λ.Cal(Ωre.ϒfindall, λ.NewStr("(?:^|<br\\s*/>)([^<]*<a[^>]+onclick=[\"\\']yt\\.www\\.watch\\.player\\.seekTo[^>]+>(\\d{1,2}:\\d{1,2}(?::\\d{1,2})?)</a>[^>]*)(?=$|<br\\s*/>)"), ϒdescription)
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒchapter_lines))) {
						return λ.None
					}
					ϒchapters = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Call(λ.EnumerateIteratorType, λ.NewArgs(ϒchapter_lines), λ.KWArgs{
						{Name: "start", Value: λ.NewInt(1)},
					}))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒnext_num = λ.GetItem(τmp2, λ.NewInt(0))
						τmp3 = λ.GetItem(τmp2, λ.NewInt(1))
						ϒchapter_line = λ.GetItem(τmp3, λ.NewInt(0))
						ϒtime_point = λ.GetItem(τmp3, λ.NewInt(1))
						ϒstart_time = λ.Cal(ϒparse_duration, ϒtime_point)
						if λ.IsTrue(λ.NewBool(ϒstart_time == λ.None)) {
							continue
						}
						if λ.IsTrue(λ.Gt(ϒstart_time, ϒduration)) {
							break
						}
						ϒend_time = func() λ.Object {
							if λ.IsTrue(λ.Eq(ϒnext_num, λ.Cal(λ.BuiltinLen, ϒchapter_lines))) {
								return ϒduration
							} else {
								return λ.Cal(ϒparse_duration, λ.GetItem(λ.GetItem(ϒchapter_lines, ϒnext_num), λ.NewInt(1)))
							}
						}()
						if λ.IsTrue(λ.NewBool(ϒend_time == λ.None)) {
							continue
						}
						if λ.IsTrue(λ.Gt(ϒend_time, ϒduration)) {
							ϒend_time = ϒduration
						}
						if λ.IsTrue(λ.Gt(ϒstart_time, ϒend_time)) {
							break
						}
						ϒchapter_title = λ.Cal(λ.GetAttr(λ.Cal(Ωre.ϒsub, λ.NewStr("<a[^>]+>[^<]+</a>"), λ.NewStr(""), ϒchapter_line), "strip", nil), λ.NewStr(" \t-"))
						ϒchapter_title = λ.Cal(Ωre.ϒsub, λ.NewStr("\\s+"), λ.NewStr(" "), ϒchapter_title)
						λ.Cal(λ.GetAttr(ϒchapters, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("start_time"): ϒstart_time,
							λ.NewStr("end_time"):   ϒend_time,
							λ.NewStr("title"):      ϒchapter_title,
						}))
					}
					return ϒchapters
				})
			YoutubeIE__extract_chapters = λ.Cal(λ.StaticMethodType, YoutubeIE__extract_chapters)
			YoutubeIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ASSETS_RE                    λ.Object
						ϒ_extract_count              λ.Object
						ϒ_extract_filesize           λ.Object
						ϒa_format                    λ.Object
						ϒadd_dash_mpd                λ.Object
						ϒadd_dash_mpd_pr             λ.Object
						ϒage_gate                    λ.Object
						ϒalbum                       λ.Object
						ϒargs                        λ.Object
						ϒartist                      λ.Object
						ϒautomatic_captions          λ.Object
						ϒaverage_rating              λ.Object
						ϒcategory                    λ.Object
						ϒchannel_id                  λ.Object
						ϒchannel_url                 λ.Object
						ϒchapters                    λ.Object
						ϒcipher                      λ.Object
						ϒcodecs                      λ.Object
						ϒcomponent                   λ.Object
						ϒcountries                   λ.Object
						ϒdash_formats                λ.Object
						ϒdash_mpd_fatal              λ.Object
						ϒdash_mpds                   λ.Object
						ϒdata                        λ.Object
						ϒdct                         λ.Object
						ϒdecrypt_sig                 λ.Object
						ϒdescription_original        λ.Object
						ϒdf                          λ.Object
						ϒdislike_count               λ.Object
						ϒel                          λ.Object
						ϒembed_url                   λ.Object
						ϒembed_webpage               λ.Object
						ϒencoded_url_map             λ.Object
						ϒencrypted_sig               λ.Object
						ϒend_time                    λ.Object
						ϒentries                     λ.Object
						ϒepisode_number              λ.Object
						ϒerror_message               λ.Object
						ϒextract_meta                λ.Object
						ϒextract_player_response     λ.Object
						ϒextract_token               λ.Object
						ϒextract_unavailable_message λ.Object
						ϒextract_view_count          λ.Object
						ϒf                           λ.Object
						ϒfeed                        λ.Object
						ϒfeed_data                   λ.Object
						ϒfeed_ids                    λ.Object
						ϒfilesize                    λ.Object
						ϒfmt                         λ.Object
						ϒfmt_list                    λ.Object
						ϒformat_id                   λ.Object
						ϒformats                     λ.Object
						ϒformats_spec                λ.Object
						ϒfps                         λ.Object
						ϒget_token                   λ.Object
						ϒget_video_info              λ.Object
						ϒh                           λ.Object
						ϒheight                      λ.Object
						ϒinvideo_url                 λ.Object
						ϒis_live                     λ.Object
						ϒitag                        λ.Object
						ϒjsplayer_url_json           λ.Object
						ϒkey                         λ.Object
						ϒkind                        λ.Object
						ϒkind_ext                    λ.Object
						ϒlike_count                  λ.Object
						ϒm3u8_formats                λ.Object
						ϒm_cat_container             λ.Object
						ϒm_episode                   λ.Object
						ϒm_music                     λ.Object
						ϒm_thumb                     λ.Object
						ϒmanifest_url                λ.Object
						ϒmobj                        λ.Object
						ϒmore_fields                 λ.Object
						ϒmpd_url                     λ.Object
						ϒmultifeed_metadata_list     λ.Object
						ϒparsed_url                  λ.Object
						ϒparts_sizes                 λ.Object
						ϒpl_response                 λ.Object
						ϒplayer_desc                 λ.Object
						ϒplayer_response             λ.Object
						ϒplayer_url                  λ.Object
						ϒplayer_url_json             λ.Object
						ϒplayer_version              λ.Object
						ϒproto                       λ.Object
						ϒquality                     λ.Object
						ϒquality_label               λ.Object
						ϒquery                       λ.Object
						ϒratio                       λ.Object
						ϒreason                      λ.Object
						ϒregions_allowed             λ.Object
						ϒrelease_date                λ.Object
						ϒrelease_year                λ.Object
						ϒreplace_url                 λ.Object
						ϒseason_number               λ.Object
						ϒself                        = λargs[0]
						ϒseries                      λ.Object
						ϒsignature                   λ.Object
						ϒsmuggled_data               λ.Object
						ϒsp                          λ.Object
						ϒspec                        λ.Object
						ϒstart_time                  λ.Object
						ϒstream_type                 λ.Object
						ϒstreaming_formats           λ.Object
						ϒstretched_m                 λ.Object
						ϒsts                         λ.Object
						ϒtbr                         λ.Object
						ϒtoken                       λ.Object
						ϒtrack                       λ.Object
						ϒtype_                       λ.Object
						ϒtype_split                  λ.Object
						ϒunavailable_message         λ.Object
						ϒupload_date                 λ.Object
						ϒurl                         = λargs[1]
						ϒurl_data                    λ.Object
						ϒvalue                       λ.Object
						ϒvideo_alt_title             λ.Object
						ϒvideo_annotations           λ.Object
						ϒvideo_categories            λ.Object
						ϒvideo_creator               λ.Object
						ϒvideo_description           λ.Object
						ϒvideo_details               λ.Object
						ϒvideo_duration              λ.Object
						ϒvideo_id                    λ.Object
						ϒvideo_info                  λ.Object
						ϒvideo_info_url              λ.Object
						ϒvideo_info_webpage          λ.Object
						ϒvideo_license               λ.Object
						ϒvideo_subtitles             λ.Object
						ϒvideo_tags                  λ.Object
						ϒvideo_thumbnail             λ.Object
						ϒvideo_title                 λ.Object
						ϒvideo_uploader              λ.Object
						ϒvideo_uploader_id           λ.Object
						ϒvideo_uploader_url          λ.Object
						ϒvideo_webpage               λ.Object
						ϒview_count                  λ.Object
						ϒw                           λ.Object
						ϒwidth                       λ.Object
						ϒwidth_height                λ.Object
						ϒxsrf_field_name             λ.Object
						ϒxsrf_token                  λ.Object
						ϒytplayer_config             λ.Object
						τmp0                         λ.Object
						τmp1                         λ.Object
						τmp2                         λ.Object
						τmp3                         λ.Object
						τmp4                         λ.Object
						τmp5                         λ.Object
					)
					_ = τmp2
					_ = τmp3
					τmp0 = λ.Cal(ϒunsmuggle_url, ϒurl, λ.NewDictWithTable(map[λ.Object]λ.Object{}))
					ϒurl = λ.GetItem(τmp0, λ.NewInt(0))
					ϒsmuggled_data = λ.GetItem(τmp0, λ.NewInt(1))
					ϒproto = func() λ.Object {
						if λ.IsTrue(λ.Cal(λ.GetAttr(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "params", nil), "get", nil), λ.NewStr("prefer_insecure"), λ.False)) {
							return λ.NewStr("http")
						} else {
							return λ.NewStr("https")
						}
					}()
					ϒstart_time = λ.None
					ϒend_time = λ.None
					ϒparsed_url = λ.Cal(ϒcompat_urllib_parse_urlparse, ϒurl)
					τmp0 = λ.Cal(λ.BuiltinIter, λ.NewList(
						λ.GetAttr(ϒparsed_url, "fragment", nil),
						λ.GetAttr(ϒparsed_url, "query", nil),
					))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒcomponent = τmp1
						ϒquery = λ.Cal(ϒcompat_parse_qs, ϒcomponent)
						if λ.IsTrue(func() λ.Object {
							if λv := λ.NewBool(ϒstart_time == λ.None); !λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(λ.Contains(ϒquery, λ.NewStr("t")))
							}
						}()) {
							ϒstart_time = λ.Cal(ϒparse_duration, λ.GetItem(λ.GetItem(ϒquery, λ.NewStr("t")), λ.NewInt(0)))
						}
						if λ.IsTrue(func() λ.Object {
							if λv := λ.NewBool(ϒstart_time == λ.None); !λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(λ.Contains(ϒquery, λ.NewStr("start")))
							}
						}()) {
							ϒstart_time = λ.Cal(ϒparse_duration, λ.GetItem(λ.GetItem(ϒquery, λ.NewStr("start")), λ.NewInt(0)))
						}
						if λ.IsTrue(func() λ.Object {
							if λv := λ.NewBool(ϒend_time == λ.None); !λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(λ.Contains(ϒquery, λ.NewStr("end")))
							}
						}()) {
							ϒend_time = λ.Cal(ϒparse_duration, λ.GetItem(λ.GetItem(ϒquery, λ.NewStr("end")), λ.NewInt(0)))
						}
					}
					ϒmobj = λ.Cal(Ωre.ϒsearch, λ.GetAttr(ϒself, "_NEXT_URL_RE", nil), ϒurl)
					if λ.IsTrue(ϒmobj) {
						ϒurl = λ.Add(λ.Add(ϒproto, λ.NewStr("://www.youtube.com/")), λ.Cal(λ.GetAttr(λ.Cal(ϒcompat_urllib_parse_unquote, λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewInt(1))), "lstrip", nil), λ.NewStr("/")))
					}
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "extract_id", nil), ϒurl)
					ϒurl = λ.Add(ϒproto, λ.Mod(λ.NewStr("://www.youtube.com/watch?v=%s&gl=US&hl=en&has_verified=1&bpctr=9999999999"), ϒvideo_id))
					ϒvideo_webpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					ϒmobj = λ.Cal(Ωre.ϒsearch, λ.NewStr("swfConfig.*?\"(https?:\\\\/\\\\/.*?watch.*?-.*?\\.swf)\""), ϒvideo_webpage)
					if λ.IsTrue(λ.NewBool(ϒmobj != λ.None)) {
						ϒplayer_url = λ.Cal(Ωre.ϒsub, λ.NewStr("\\\\(.)"), λ.NewStr("\\1"), λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewInt(1)))
					} else {
						ϒplayer_url = λ.None
					}
					ϒdash_mpds = λ.NewList()
					ϒadd_dash_mpd = λ.NewFunction("add_dash_mpd",
						[]λ.Param{
							{Name: "video_info"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒdash_mpd   λ.Object
								ϒvideo_info = λargs[0]
							)
							ϒdash_mpd = λ.Cal(λ.GetAttr(ϒvideo_info, "get", nil), λ.NewStr("dashmpd"))
							if λ.IsTrue(func() λ.Object {
								if λv := ϒdash_mpd; !λ.IsTrue(λv) {
									return λv
								} else {
									return λ.NewBool(!λ.Contains(ϒdash_mpds, λ.GetItem(ϒdash_mpd, λ.NewInt(0))))
								}
							}()) {
								λ.Cal(λ.GetAttr(ϒdash_mpds, "append", nil), λ.GetItem(ϒdash_mpd, λ.NewInt(0)))
							}
							return λ.None
						})
					ϒadd_dash_mpd_pr = λ.NewFunction("add_dash_mpd_pr",
						[]λ.Param{
							{Name: "pl_response"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒdash_mpd    λ.Object
								ϒpl_response = λargs[0]
							)
							ϒdash_mpd = λ.Cal(ϒurl_or_none, λ.Cal(ϒtry_get, ϒpl_response, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("streamingData")), λ.NewStr("dashManifestUrl"))
								}), ϒcompat_str))
							if λ.IsTrue(func() λ.Object {
								if λv := ϒdash_mpd; !λ.IsTrue(λv) {
									return λv
								} else {
									return λ.NewBool(!λ.Contains(ϒdash_mpds, ϒdash_mpd))
								}
							}()) {
								λ.Cal(λ.GetAttr(ϒdash_mpds, "append", nil), ϒdash_mpd)
							}
							return λ.None
						})
					ϒis_live = λ.None
					ϒview_count = λ.None
					ϒextract_view_count = λ.NewFunction("extract_view_count",
						[]λ.Param{
							{Name: "v_info"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒv_info = λargs[0]
							)
							return λ.Cal(ϒint_or_none, λ.Cal(ϒtry_get, ϒv_info, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("view_count")), λ.NewInt(0))
								})))
						})
					ϒextract_token = λ.NewFunction("extract_token",
						[]λ.Param{
							{Name: "v_info"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒv_info = λargs[0]
							)
							return λ.Cal(ϒdict_get, ϒv_info, λ.NewTuple(
								λ.NewStr("account_playback_token"),
								λ.NewStr("accountPlaybackToken"),
								λ.NewStr("token"),
							))
						})
					ϒextract_player_response = λ.NewFunction("extract_player_response",
						[]λ.Param{
							{Name: "player_response"},
							{Name: "video_id"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒpl_response     λ.Object
								ϒplayer_response = λargs[0]
								ϒvideo_id        = λargs[1]
							)
							ϒpl_response = λ.Cal(ϒstr_or_none, ϒplayer_response)
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒpl_response))) {
								return λ.None
							}
							ϒpl_response = λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
								ϒpl_response,
								ϒvideo_id,
							), λ.KWArgs{
								{Name: "fatal", Value: λ.False},
							})
							if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒpl_response, λ.DictType)) {
								λ.Cal(ϒadd_dash_mpd_pr, ϒpl_response)
								return ϒpl_response
							}
							return λ.None
						})
					ϒplayer_response = λ.NewDictWithTable(map[λ.Object]λ.Object{})
					ϒembed_webpage = λ.None
					if λ.IsTrue(λ.NewBool(λ.Cal(Ωre.ϒsearch, λ.NewStr("player-age-gate-content\">"), ϒvideo_webpage) != λ.None)) {
						ϒage_gate = λ.True
						ϒurl = λ.Add(ϒproto, λ.Mod(λ.NewStr("://www.youtube.com/embed/%s"), ϒvideo_id))
						ϒembed_webpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id, λ.NewStr("Downloading embed webpage"))
						ϒdata = λ.Cal(ϒcompat_urllib_parse_urlencode, λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("video_id"): ϒvideo_id,
							λ.NewStr("eurl"):     λ.Add(λ.NewStr("https://youtube.googleapis.com/v/"), ϒvideo_id),
							λ.NewStr("sts"): λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
								λ.NewStr("\"sts\"\\s*:\\s*(\\d+)"),
								ϒembed_webpage,
								λ.NewStr("sts"),
							), λ.KWArgs{
								{Name: "default", Value: λ.NewStr("")},
							}),
						}))
						ϒvideo_info_url = λ.Add(λ.Add(ϒproto, λ.NewStr("://www.youtube.com/get_video_info?")), ϒdata)
						ϒvideo_info_webpage = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
							ϒvideo_info_url,
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "note", Value: λ.NewStr("Refetching age-gated info webpage")},
							{Name: "errnote", Value: λ.NewStr("unable to download video info webpage")},
						})
						ϒvideo_info = λ.Cal(ϒcompat_parse_qs, ϒvideo_info_webpage)
						ϒpl_response = λ.GetItem(λ.Cal(λ.GetAttr(ϒvideo_info, "get", nil), λ.NewStr("player_response"), λ.NewList(λ.None)), λ.NewInt(0))
						ϒplayer_response = λ.Cal(ϒextract_player_response, ϒpl_response, ϒvideo_id)
						λ.Cal(ϒadd_dash_mpd, ϒvideo_info)
						ϒview_count = λ.Cal(ϒextract_view_count, ϒvideo_info)
					} else {
						ϒage_gate = λ.False
						ϒvideo_info = λ.None
						ϒsts = λ.None
						ϒytplayer_config = λ.Cal(λ.GetAttr(ϒself, "_get_ytplayer_config", nil), ϒvideo_id, ϒvideo_webpage)
						if λ.IsTrue(ϒytplayer_config) {
							ϒargs = λ.GetItem(ϒytplayer_config, λ.NewStr("args"))
							if λ.IsTrue(func() λ.Object {
								if λv := λ.Cal(λ.GetAttr(ϒargs, "get", nil), λ.NewStr("url_encoded_fmt_stream_map")); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Cal(λ.GetAttr(ϒargs, "get", nil), λ.NewStr("hlsvp"))
								}
							}()) {
								ϒvideo_info = λ.Cal(λ.DictType, λ.Cal(λ.NewFunction("<generator>",
									nil,
									0, false, false,
									func(λargs []λ.Object) λ.Object {
										return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
											var (
												ϒk   λ.Object
												ϒv   λ.Object
												τmp0 λ.Object
												τmp1 λ.Object
												τmp2 λ.Object
											)
											τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒargs, "items", nil)))
											for {
												if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
													break
												}
												τmp2 = τmp1
												ϒk = λ.GetItem(τmp2, λ.NewInt(0))
												ϒv = λ.GetItem(τmp2, λ.NewInt(1))
												λgy.Yield(λ.NewTuple(
													ϒk,
													λ.NewList(ϒv),
												))
											}
											return λ.None
										})
									})))
								λ.Cal(ϒadd_dash_mpd, ϒvideo_info)
							}
							if λ.IsTrue(func() λ.Object {
								if λv := λ.NewBool(!λ.IsTrue(ϒvideo_info)); !λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Cal(λ.GetAttr(ϒargs, "get", nil), λ.NewStr("ypc_vid"))
								}
							}()) {
								return λ.Call(λ.GetAttr(ϒself, "url_result", nil), λ.NewArgs(
									λ.GetItem(ϒargs, λ.NewStr("ypc_vid")),
									λ.Cal(λ.GetAttr(YoutubeIE, "ie_key", nil)),
								), λ.KWArgs{
									{Name: "video_id", Value: λ.GetItem(ϒargs, λ.NewStr("ypc_vid"))},
								})
							}
							if λ.IsTrue(func() λ.Object {
								if λv := λ.Eq(λ.Cal(λ.GetAttr(ϒargs, "get", nil), λ.NewStr("livestream")), λ.NewStr("1")); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Eq(λ.Cal(λ.GetAttr(ϒargs, "get", nil), λ.NewStr("live_playback")), λ.NewInt(1))
								}
							}()) {
								ϒis_live = λ.True
							}
							ϒsts = λ.Cal(λ.GetAttr(ϒytplayer_config, "get", nil), λ.NewStr("sts"))
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒplayer_response))) {
								ϒplayer_response = λ.Cal(ϒextract_player_response, λ.Cal(λ.GetAttr(ϒargs, "get", nil), λ.NewStr("player_response")), ϒvideo_id)
							}
						}
						if λ.IsTrue(func() λ.Object {
							if λv := λ.NewBool(!λ.IsTrue(ϒvideo_info)); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "params", nil), "get", nil), λ.NewStr("youtube_include_dash_manifest"), λ.True)
							}
						}()) {
							λ.Cal(ϒadd_dash_mpd_pr, ϒplayer_response)
							λ.Cal(λ.GetAttr(ϒself, "report_video_info_webpage_download", nil), ϒvideo_id)
							τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
								λ.NewStr("embedded"),
								λ.NewStr("detailpage"),
								λ.NewStr("vevo"),
								λ.NewStr(""),
							))
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒel = τmp1
								ϒquery = λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("video_id"): ϒvideo_id,
									λ.NewStr("ps"):       λ.NewStr("default"),
									λ.NewStr("eurl"):     λ.NewStr(""),
									λ.NewStr("gl"):       λ.NewStr("US"),
									λ.NewStr("hl"):       λ.NewStr("en"),
								})
								if λ.IsTrue(ϒel) {
									λ.SetItem(ϒquery, λ.NewStr("el"), ϒel)
								}
								if λ.IsTrue(ϒsts) {
									λ.SetItem(ϒquery, λ.NewStr("sts"), ϒsts)
								}
								ϒvideo_info_webpage = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
									λ.Mod(λ.NewStr("%s://www.youtube.com/get_video_info"), ϒproto),
									ϒvideo_id,
								), λ.KWArgs{
									{Name: "note", Value: λ.False},
									{Name: "errnote", Value: λ.NewStr("unable to download video info webpage")},
									{Name: "fatal", Value: λ.False},
									{Name: "query", Value: ϒquery},
								})
								if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒvideo_info_webpage))) {
									continue
								}
								ϒget_video_info = λ.Cal(ϒcompat_parse_qs, ϒvideo_info_webpage)
								if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒplayer_response))) {
									ϒpl_response = λ.GetItem(λ.Cal(λ.GetAttr(ϒget_video_info, "get", nil), λ.NewStr("player_response"), λ.NewList(λ.None)), λ.NewInt(0))
									ϒplayer_response = λ.Cal(ϒextract_player_response, ϒpl_response, ϒvideo_id)
								}
								λ.Cal(ϒadd_dash_mpd, ϒget_video_info)
								if λ.IsTrue(λ.NewBool(ϒview_count == λ.None)) {
									ϒview_count = λ.Cal(ϒextract_view_count, ϒget_video_info)
								}
								if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒvideo_info))) {
									ϒvideo_info = ϒget_video_info
								}
								ϒget_token = λ.Cal(ϒextract_token, ϒget_video_info)
								if λ.IsTrue(ϒget_token) {
									ϒtoken = λ.Cal(ϒextract_token, ϒvideo_info)
									if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒtoken))) {
										ϒvideo_info = ϒget_video_info
									}
									break
								}
							}
						}
					}
					ϒextract_unavailable_message = λ.NewFunction("extract_unavailable_message",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒkind     λ.Object
								ϒmessages λ.Object
								ϒmsg      λ.Object
								ϒtag      λ.Object
								τmp0      λ.Object
								τmp1      λ.Object
								τmp2      λ.Object
							)
							ϒmessages = λ.NewList()
							τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
								λ.NewTuple(
									λ.NewStr("h1"),
									λ.NewStr("message"),
								),
								λ.NewTuple(
									λ.NewStr("div"),
									λ.NewStr("submessage"),
								),
							))
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								τmp2 = τmp1
								ϒtag = λ.GetItem(τmp2, λ.NewInt(0))
								ϒkind = λ.GetItem(τmp2, λ.NewInt(1))
								ϒmsg = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
									λ.Call(λ.GetAttr(λ.NewStr("(?s)<{tag}[^>]+id=[\"\\']unavailable-{kind}[\"\\'][^>]*>(.+?)</{tag}>"), "format", nil), nil, λ.KWArgs{
										{Name: "tag", Value: ϒtag},
										{Name: "kind", Value: ϒkind},
									}),
									ϒvideo_webpage,
									λ.Mod(λ.NewStr("unavailable %s"), ϒkind),
								), λ.KWArgs{
									{Name: "default", Value: λ.None},
								})
								if λ.IsTrue(ϒmsg) {
									λ.Cal(λ.GetAttr(ϒmessages, "append", nil), ϒmsg)
								}
							}
							if λ.IsTrue(ϒmessages) {
								return λ.Cal(λ.GetAttr(λ.NewStr("\n"), "join", nil), ϒmessages)
							}
							return λ.None
						})
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒvideo_info))) {
						ϒunavailable_message = λ.Cal(ϒextract_unavailable_message)
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒunavailable_message))) {
							ϒunavailable_message = λ.NewStr("Unable to extract video data")
						}
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.NewStr("YouTube said: %s"), ϒunavailable_message)), λ.KWArgs{
							{Name: "expected", Value: λ.True},
							{Name: "video_id", Value: ϒvideo_id},
						})))
					}
					ϒvideo_details = func() λ.Object {
						if λv := λ.Cal(ϒtry_get, ϒplayer_response, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(ϒx, λ.NewStr("videoDetails"))
							}), λ.DictType); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewDictWithTable(map[λ.Object]λ.Object{})
						}
					}()
					ϒvideo_title = func() λ.Object {
						if λv := λ.GetItem(λ.Cal(λ.GetAttr(ϒvideo_info, "get", nil), λ.NewStr("title"), λ.NewList(λ.None)), λ.NewInt(0)); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒvideo_details, "get", nil), λ.NewStr("title"))
						}
					}()
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒvideo_title))) {
						λ.Cal(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "report_warning", nil), λ.NewStr("Unable to extract video title"))
						ϒvideo_title = λ.NewStr("_")
					}
					τmp0 = λ.Cal(ϒget_element_by_id, λ.NewStr("eow-description"), ϒvideo_webpage)
					ϒdescription_original = τmp0
					ϒvideo_description = τmp0
					if λ.IsTrue(ϒvideo_description) {
						ϒreplace_url = λ.NewFunction("replace_url",
							[]λ.Param{
								{Name: "m"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒm                = λargs[0]
									ϒparsed_redir_url λ.Object
									ϒq                λ.Object
									ϒqs               λ.Object
									ϒredir_url        λ.Object
								)
								ϒredir_url = λ.Cal(Ωparse.ϒurljoin, ϒurl, λ.Cal(λ.GetAttr(ϒm, "group", nil), λ.NewInt(1)))
								ϒparsed_redir_url = λ.Cal(ϒcompat_urllib_parse_urlparse, ϒredir_url)
								if λ.IsTrue(func() λ.Object {
									if λv := λ.Cal(Ωre.ϒsearch, λ.NewStr("^(?:www\\.)?(?:youtube(?:-nocookie)?\\.com|youtu\\.be)$"), λ.GetAttr(ϒparsed_redir_url, "netloc", nil)); !λ.IsTrue(λv) {
										return λv
									} else {
										return λ.Eq(λ.GetAttr(ϒparsed_redir_url, "path", nil), λ.NewStr("/redirect"))
									}
								}()) {
									ϒqs = λ.Cal(ϒcompat_parse_qs, λ.GetAttr(ϒparsed_redir_url, "query", nil))
									ϒq = λ.Cal(λ.GetAttr(ϒqs, "get", nil), λ.NewStr("q"))
									if λ.IsTrue(func() λ.Object {
										if λv := ϒq; !λ.IsTrue(λv) {
											return λv
										} else {
											return λ.GetItem(ϒq, λ.NewInt(0))
										}
									}()) {
										return λ.GetItem(ϒq, λ.NewInt(0))
									}
								}
								return ϒredir_url
							})
						τmp0 = λ.Cal(Ωre.ϒsub, λ.NewStr("(?x)\n                <a\\s+\n                    (?:[a-zA-Z-]+=\"[^\"]*\"\\s+)*?\n                    (?:title|href)=\"([^\"]+)\"\\s+\n                    (?:[a-zA-Z-]+=\"[^\"]*\"\\s+)*?\n                    class=\"[^\"]*\"[^>]*>\n                [^<]+\\.{3}\\s*\n                </a>\n            "), ϒreplace_url, ϒvideo_description)
						ϒdescription_original = τmp0
						ϒvideo_description = τmp0
						ϒvideo_description = λ.Cal(ϒclean_html, ϒvideo_description)
					} else {
						ϒvideo_description = func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewStr("description"), ϒvideo_webpage); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(ϒvideo_details, "get", nil), λ.NewStr("shortDescription"))
							}
						}()
					}
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.Cal(λ.GetAttr(ϒsmuggled_data, "get", nil), λ.NewStr("force_singlefeed"), λ.False)))) {
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.Cal(λ.GetAttr(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "params", nil), "get", nil), λ.NewStr("noplaylist"))))) {
							ϒmultifeed_metadata_list = func() λ.Object {
								if λv := λ.Cal(ϒtry_get, ϒplayer_response, λ.NewFunction("<lambda>",
									[]λ.Param{
										{Name: "x"},
									},
									0, false, false,
									func(λargs []λ.Object) λ.Object {
										var (
											ϒx = λargs[0]
										)
										return λ.GetItem(λ.GetItem(λ.GetItem(ϒx, λ.NewStr("multicamera")), λ.NewStr("playerLegacyMulticameraRenderer")), λ.NewStr("metadataList"))
									}), ϒcompat_str); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Cal(ϒtry_get, ϒvideo_info, λ.NewFunction("<lambda>",
										[]λ.Param{
											{Name: "x"},
										},
										0, false, false,
										func(λargs []λ.Object) λ.Object {
											var (
												ϒx = λargs[0]
											)
											return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("multifeed_metadata_list")), λ.NewInt(0))
										}), ϒcompat_str)
								}
							}()
							if λ.IsTrue(ϒmultifeed_metadata_list) {
								ϒentries = λ.NewList()
								ϒfeed_ids = λ.NewList()
								τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒmultifeed_metadata_list, "split", nil), λ.NewStr(",")))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒfeed = τmp1
									ϒfeed_data = λ.Cal(ϒcompat_parse_qs, λ.Cal(ϒcompat_urllib_parse_unquote_plus, ϒfeed))
									λ.Cal(λ.GetAttr(ϒentries, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
										λ.NewStr("_type"):  λ.NewStr("url_transparent"),
										λ.NewStr("ie_key"): λ.NewStr("Youtube"),
										λ.NewStr("url"): λ.Cal(ϒsmuggle_url, λ.Mod(λ.NewStr("%s://www.youtube.com/watch?v=%s"), λ.NewTuple(
											ϒproto,
											λ.GetItem(λ.GetItem(ϒfeed_data, λ.NewStr("id")), λ.NewInt(0)),
										)), λ.NewDictWithTable(map[λ.Object]λ.Object{
											λ.NewStr("force_singlefeed"): λ.True,
										})),
										λ.NewStr("title"): λ.Mod(λ.NewStr("%s (%s)"), λ.NewTuple(
											ϒvideo_title,
											λ.GetItem(λ.GetItem(ϒfeed_data, λ.NewStr("title")), λ.NewInt(0)),
										)),
									}))
									λ.Cal(λ.GetAttr(ϒfeed_ids, "append", nil), λ.GetItem(λ.GetItem(ϒfeed_data, λ.NewStr("id")), λ.NewInt(0)))
								}
								λ.Cal(λ.GetAttr(ϒself, "to_screen", nil), λ.Mod(λ.NewStr("Downloading multifeed video (%s) - add --no-playlist to just download video %s"), λ.NewTuple(
									λ.Cal(λ.GetAttr(λ.NewStr(", "), "join", nil), ϒfeed_ids),
									ϒvideo_id,
								)))
								return λ.Cal(λ.GetAttr(ϒself, "playlist_result", nil), ϒentries, ϒvideo_id, ϒvideo_title, ϒvideo_description)
							}
						} else {
							λ.Cal(λ.GetAttr(ϒself, "to_screen", nil), λ.Mod(λ.NewStr("Downloading just video %s because of --no-playlist"), ϒvideo_id))
						}
					}
					if λ.IsTrue(λ.NewBool(ϒview_count == λ.None)) {
						ϒview_count = λ.Cal(ϒextract_view_count, ϒvideo_info)
					}
					if λ.IsTrue(func() λ.Object {
						if λv := λ.NewBool(ϒview_count == λ.None); !λ.IsTrue(λv) {
							return λv
						} else {
							return ϒvideo_details
						}
					}()) {
						ϒview_count = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo_details, "get", nil), λ.NewStr("viewCount")))
					}
					if λ.IsTrue(λ.NewBool(ϒis_live == λ.None)) {
						ϒis_live = λ.Cal(ϒbool_or_none, λ.Cal(λ.GetAttr(ϒvideo_details, "get", nil), λ.NewStr("isLive")))
					}
					if λ.IsTrue(func() λ.Object {
						if λv := λ.NewBool(λ.Contains(ϒvideo_info, λ.NewStr("ypc_video_rental_bar_text"))); !λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewBool(!λ.Contains(ϒvideo_info, λ.NewStr("author")))
						}
					}()) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.NewStr("\"rental\" videos not supported. See https://github.com/ytdl-org/youtube-dl/issues/359 for more information.")), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒ_extract_filesize = λ.NewFunction("_extract_filesize",
						[]λ.Param{
							{Name: "media_url"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒmedia_url = λargs[0]
							)
							return λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
								λ.NewStr("\\bclen[=/](\\d+)"),
								ϒmedia_url,
								λ.NewStr("filesize"),
							), λ.KWArgs{
								{Name: "default", Value: λ.None},
							}))
						})
					ϒstreaming_formats = func() λ.Object {
						if λv := λ.Cal(ϒtry_get, ϒplayer_response, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("streamingData")), λ.NewStr("formats"))
							}), λ.ListType); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewList()
						}
					}()
					λ.Cal(λ.GetAttr(ϒstreaming_formats, "extend", nil), func() λ.Object {
						if λv := λ.Cal(ϒtry_get, ϒplayer_response, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("streamingData")), λ.NewStr("adaptiveFormats"))
							}), λ.ListType); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewList()
						}
					}())
					if λ.IsTrue(func() λ.Object {
						if λv := λ.NewBool(λ.Contains(ϒvideo_info, λ.NewStr("conn"))); !λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(λ.GetItem(λ.GetItem(ϒvideo_info, λ.NewStr("conn")), λ.NewInt(0)), "startswith", nil), λ.NewStr("rtmp"))
						}
					}()) {
						λ.Cal(λ.GetAttr(ϒself, "report_rtmp_download", nil))
						ϒformats = λ.NewList(λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("format_id"):  λ.NewStr("_rtmp"),
							λ.NewStr("protocol"):   λ.NewStr("rtmp"),
							λ.NewStr("url"):        λ.GetItem(λ.GetItem(ϒvideo_info, λ.NewStr("conn")), λ.NewInt(0)),
							λ.NewStr("player_url"): ϒplayer_url,
						}))
					} else {
						if λ.IsTrue(func() λ.Object {
							if λv := λ.NewBool(!λ.IsTrue(ϒis_live)); !λ.IsTrue(λv) {
								return λv
							} else {
								return func() λ.Object {
									if λv := ϒstreaming_formats; λ.IsTrue(λv) {
										return λv
									} else if λv := λ.Ge(λ.Cal(λ.BuiltinLen, λ.GetItem(λ.Cal(λ.GetAttr(ϒvideo_info, "get", nil), λ.NewStr("url_encoded_fmt_stream_map"), λ.NewList(λ.NewStr(""))), λ.NewInt(0))), λ.NewInt(1)); λ.IsTrue(λv) {
										return λv
									} else {
										return λ.Ge(λ.Cal(λ.BuiltinLen, λ.GetItem(λ.Cal(λ.GetAttr(ϒvideo_info, "get", nil), λ.NewStr("adaptive_fmts"), λ.NewList(λ.NewStr(""))), λ.NewInt(0))), λ.NewInt(1))
									}
								}()
							}
						}()) {
							ϒencoded_url_map = λ.Add(λ.Add(λ.GetItem(λ.Cal(λ.GetAttr(ϒvideo_info, "get", nil), λ.NewStr("url_encoded_fmt_stream_map"), λ.NewList(λ.NewStr(""))), λ.NewInt(0)), λ.NewStr(",")), λ.GetItem(λ.Cal(λ.GetAttr(ϒvideo_info, "get", nil), λ.NewStr("adaptive_fmts"), λ.NewList(λ.NewStr(""))), λ.NewInt(0)))
							if λ.IsTrue(λ.NewBool(λ.Contains(ϒencoded_url_map, λ.NewStr("rtmpe%3Dyes")))) {
								panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.NewStr("rtmpe downloads are not supported, see https://github.com/ytdl-org/youtube-dl/issues/343 for more information.")), λ.KWArgs{
									{Name: "expected", Value: λ.True},
								})))
							}
							ϒformats = λ.NewList()
							ϒformats_spec = λ.NewDictWithTable(map[λ.Object]λ.Object{})
							ϒfmt_list = λ.GetItem(λ.Cal(λ.GetAttr(ϒvideo_info, "get", nil), λ.NewStr("fmt_list"), λ.NewList(λ.NewStr(""))), λ.NewInt(0))
							if λ.IsTrue(ϒfmt_list) {
								τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒfmt_list, "split", nil), λ.NewStr(",")))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒfmt = τmp1
									ϒspec = λ.Cal(λ.GetAttr(ϒfmt, "split", nil), λ.NewStr("/"))
									if λ.IsTrue(λ.Gt(λ.Cal(λ.BuiltinLen, ϒspec), λ.NewInt(1))) {
										ϒwidth_height = λ.Cal(λ.GetAttr(λ.GetItem(ϒspec, λ.NewInt(1)), "split", nil), λ.NewStr("x"))
										if λ.IsTrue(λ.Eq(λ.Cal(λ.BuiltinLen, ϒwidth_height), λ.NewInt(2))) {
											λ.SetItem(ϒformats_spec, λ.GetItem(ϒspec, λ.NewInt(0)), λ.NewDictWithTable(map[λ.Object]λ.Object{
												λ.NewStr("resolution"): λ.GetItem(ϒspec, λ.NewInt(1)),
												λ.NewStr("width"):      λ.Cal(ϒint_or_none, λ.GetItem(ϒwidth_height, λ.NewInt(0))),
												λ.NewStr("height"):     λ.Cal(ϒint_or_none, λ.GetItem(ϒwidth_height, λ.NewInt(1))),
											}))
										}
									}
								}
							}
							τmp0 = λ.Cal(λ.BuiltinIter, ϒstreaming_formats)
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒfmt = τmp1
								ϒitag = λ.Cal(ϒstr_or_none, λ.Cal(λ.GetAttr(ϒfmt, "get", nil), λ.NewStr("itag")))
								if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒitag))) {
									continue
								}
								ϒquality = λ.Cal(λ.GetAttr(ϒfmt, "get", nil), λ.NewStr("quality"))
								ϒquality_label = func() λ.Object {
									if λv := λ.Cal(λ.GetAttr(ϒfmt, "get", nil), λ.NewStr("qualityLabel")); λ.IsTrue(λv) {
										return λv
									} else {
										return ϒquality
									}
								}()
								λ.SetItem(ϒformats_spec, ϒitag, λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("asr"):         λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒfmt, "get", nil), λ.NewStr("audioSampleRate"))),
									λ.NewStr("filesize"):    λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒfmt, "get", nil), λ.NewStr("contentLength"))),
									λ.NewStr("format_note"): ϒquality_label,
									λ.NewStr("fps"):         λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒfmt, "get", nil), λ.NewStr("fps"))),
									λ.NewStr("height"):      λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒfmt, "get", nil), λ.NewStr("height"))),
									λ.NewStr("tbr"): func() λ.Object {
										if λ.IsTrue(λ.Ne(ϒitag, λ.NewStr("43"))) {
											return λ.Cal(ϒfloat_or_none, func() λ.Object {
												if λv := λ.Cal(λ.GetAttr(ϒfmt, "get", nil), λ.NewStr("averageBitrate")); λ.IsTrue(λv) {
													return λv
												} else {
													return λ.Cal(λ.GetAttr(ϒfmt, "get", nil), λ.NewStr("bitrate"))
												}
											}(), λ.NewInt(1000))
										} else {
											return λ.None
										}
									}(),
									λ.NewStr("width"): λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒfmt, "get", nil), λ.NewStr("width"))),
								}))
							}
							τmp0 = λ.Cal(λ.BuiltinIter, ϒstreaming_formats)
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒfmt = τmp1
								if λ.IsTrue(λ.Cal(λ.GetAttr(ϒfmt, "get", nil), λ.NewStr("drm_families"))) {
									continue
								}
								ϒurl = λ.Cal(ϒurl_or_none, λ.Cal(λ.GetAttr(ϒfmt, "get", nil), λ.NewStr("url")))
								if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒurl))) {
									ϒcipher = λ.Cal(λ.GetAttr(ϒfmt, "get", nil), λ.NewStr("cipher"))
									if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒcipher))) {
										continue
									}
									ϒurl_data = λ.Cal(ϒcompat_parse_qs, ϒcipher)
									ϒurl = λ.Cal(ϒurl_or_none, λ.Cal(ϒtry_get, ϒurl_data, λ.NewFunction("<lambda>",
										[]λ.Param{
											{Name: "x"},
										},
										0, false, false,
										func(λargs []λ.Object) λ.Object {
											var (
												ϒx = λargs[0]
											)
											return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("url")), λ.NewInt(0))
										}), ϒcompat_str))
									if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒurl))) {
										continue
									}
								} else {
									ϒcipher = λ.None
									ϒurl_data = λ.Cal(ϒcompat_parse_qs, λ.GetAttr(λ.Cal(ϒcompat_urllib_parse_urlparse, ϒurl), "query", nil))
								}
								ϒstream_type = λ.Cal(ϒint_or_none, λ.Cal(ϒtry_get, ϒurl_data, λ.NewFunction("<lambda>",
									[]λ.Param{
										{Name: "x"},
									},
									0, false, false,
									func(λargs []λ.Object) λ.Object {
										var (
											ϒx = λargs[0]
										)
										return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("stream_type")), λ.NewInt(0))
									})))
								if λ.IsTrue(λ.Eq(ϒstream_type, λ.NewInt(3))) {
									continue
								}
								ϒformat_id = func() λ.Object {
									if λv := λ.Cal(λ.GetAttr(ϒfmt, "get", nil), λ.NewStr("itag")); λ.IsTrue(λv) {
										return λv
									} else {
										return λ.GetItem(λ.GetItem(ϒurl_data, λ.NewStr("itag")), λ.NewInt(0))
									}
								}()
								if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒformat_id))) {
									continue
								}
								ϒformat_id = λ.Cal(ϒcompat_str, ϒformat_id)
								if λ.IsTrue(ϒcipher) {
									if λ.IsTrue(func() λ.Object {
										if λv := λ.NewBool(λ.Contains(ϒurl_data, λ.NewStr("s"))); λ.IsTrue(λv) {
											return λv
										} else {
											return λ.Cal(λ.GetAttr(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "params", nil), "get", nil), λ.NewStr("youtube_include_dash_manifest"), λ.True)
										}
									}()) {
										ASSETS_RE = λ.NewStr("\"assets\":.+?\"js\":\\s*(\"[^\"]+\")")
										ϒjsplayer_url_json = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
											ASSETS_RE,
											func() λ.Object {
												if λ.IsTrue(ϒage_gate) {
													return ϒembed_webpage
												} else {
													return ϒvideo_webpage
												}
											}(),
											λ.NewStr("JS player URL (1)"),
										), λ.KWArgs{
											{Name: "default", Value: λ.None},
										})
										if λ.IsTrue(func() λ.Object {
											if λv := λ.NewBool(!λ.IsTrue(ϒjsplayer_url_json)); !λ.IsTrue(λv) {
												return λv
											} else {
												return λ.NewBool(!λ.IsTrue(ϒage_gate))
											}
										}()) {
											if λ.IsTrue(λ.NewBool(ϒembed_webpage == λ.None)) {
												ϒembed_url = λ.Add(ϒproto, λ.Mod(λ.NewStr("://www.youtube.com/embed/%s"), ϒvideo_id))
												ϒembed_webpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒembed_url, ϒvideo_id, λ.NewStr("Downloading embed webpage"))
											}
											ϒjsplayer_url_json = λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), ASSETS_RE, ϒembed_webpage, λ.NewStr("JS player URL"))
										}
										ϒplayer_url = λ.Cal(Ωjson.ϒloads, ϒjsplayer_url_json)
										if λ.IsTrue(λ.NewBool(ϒplayer_url == λ.None)) {
											ϒplayer_url_json = λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("ytplayer\\.config.*?\"url\"\\s*:\\s*(\"[^\"]+\")"), ϒvideo_webpage, λ.NewStr("age gate player URL"))
											ϒplayer_url = λ.Cal(Ωjson.ϒloads, ϒplayer_url_json)
										}
									}
									if λ.IsTrue(λ.NewBool(λ.Contains(ϒurl_data, λ.NewStr("sig")))) {
										τmp2 = λ.IAdd(ϒurl, λ.Add(λ.NewStr("&signature="), λ.GetItem(λ.GetItem(ϒurl_data, λ.NewStr("sig")), λ.NewInt(0))))
										ϒurl = τmp2
									} else {
										if λ.IsTrue(λ.NewBool(λ.Contains(ϒurl_data, λ.NewStr("s")))) {
											ϒencrypted_sig = λ.GetItem(λ.GetItem(ϒurl_data, λ.NewStr("s")), λ.NewInt(0))
											if λ.IsTrue(λ.Cal(λ.GetAttr(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "params", nil), "get", nil), λ.NewStr("verbose"))) {
												if λ.IsTrue(λ.NewBool(ϒplayer_url == λ.None)) {
													ϒplayer_version = λ.NewStr("unknown")
													ϒplayer_desc = λ.NewStr("unknown")
												} else {
													if λ.IsTrue(λ.Cal(λ.GetAttr(ϒplayer_url, "endswith", nil), λ.NewStr("swf"))) {
														ϒplayer_version = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
															λ.NewStr("-(.+?)(?:/watch_as3)?\\.swf$"),
															ϒplayer_url,
															λ.NewStr("flash player"),
														), λ.KWArgs{
															{Name: "fatal", Value: λ.False},
														})
														ϒplayer_desc = λ.Mod(λ.NewStr("flash player %s"), ϒplayer_version)
													} else {
														ϒplayer_version = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
															λ.NewList(
																λ.NewStr("html5player-([^/]+?)(?:/html5player(?:-new)?)?\\.js"),
																λ.NewStr("(?:www|player(?:_ias)?)-([^/]+)(?:/[a-z]{2,3}_[A-Z]{2})?/base\\.js"),
															),
															ϒplayer_url,
															λ.NewStr("html5 player"),
														), λ.KWArgs{
															{Name: "fatal", Value: λ.False},
														})
														ϒplayer_desc = λ.Mod(λ.NewStr("html5 player %s"), ϒplayer_version)
													}
												}
												ϒparts_sizes = λ.Cal(λ.GetAttr(ϒself, "_signature_cache_id", nil), ϒencrypted_sig)
												λ.Cal(λ.GetAttr(ϒself, "to_screen", nil), λ.Mod(λ.NewStr("{%s} signature length %s, %s"), λ.NewTuple(
													ϒformat_id,
													ϒparts_sizes,
													ϒplayer_desc,
												)))
											}
											ϒsignature = λ.Cal(λ.GetAttr(ϒself, "_decrypt_signature", nil), ϒencrypted_sig, ϒvideo_id, ϒplayer_url, ϒage_gate)
											ϒsp = func() λ.Object {
												if λv := λ.Cal(ϒtry_get, ϒurl_data, λ.NewFunction("<lambda>",
													[]λ.Param{
														{Name: "x"},
													},
													0, false, false,
													func(λargs []λ.Object) λ.Object {
														var (
															ϒx = λargs[0]
														)
														return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("sp")), λ.NewInt(0))
													}), ϒcompat_str); λ.IsTrue(λv) {
													return λv
												} else {
													return λ.NewStr("signature")
												}
											}()
											τmp2 = λ.IAdd(ϒurl, λ.Mod(λ.NewStr("&%s=%s"), λ.NewTuple(
												ϒsp,
												ϒsignature,
											)))
											ϒurl = τmp2
										}
									}
								}
								if λ.IsTrue(λ.NewBool(!λ.Contains(ϒurl, λ.NewStr("ratebypass")))) {
									τmp2 = λ.IAdd(ϒurl, λ.NewStr("&ratebypass=yes"))
									ϒurl = τmp2
								}
								ϒdct = λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("format_id"):  ϒformat_id,
									λ.NewStr("url"):        ϒurl,
									λ.NewStr("player_url"): ϒplayer_url,
								})
								if λ.IsTrue(λ.NewBool(λ.Contains(λ.GetAttr(ϒself, "_formats", nil), ϒformat_id))) {
									λ.Cal(λ.GetAttr(ϒdct, "update", nil), λ.GetItem(λ.GetAttr(ϒself, "_formats", nil), ϒformat_id))
								}
								if λ.IsTrue(λ.NewBool(λ.Contains(ϒformats_spec, ϒformat_id))) {
									λ.Cal(λ.GetAttr(ϒdct, "update", nil), λ.GetItem(ϒformats_spec, ϒformat_id))
								}
								ϒmobj = λ.Cal(Ωre.ϒsearch, λ.NewStr("^(?P<width>\\d+)[xX](?P<height>\\d+)$"), λ.GetItem(λ.Cal(λ.GetAttr(ϒurl_data, "get", nil), λ.NewStr("size"), λ.NewList(λ.NewStr(""))), λ.NewInt(0)))
								τmp2 = func() λ.Object {
									if λ.IsTrue(ϒmobj) {
										return λ.NewTuple(
											λ.Cal(λ.IntType, λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("width"))),
											λ.Cal(λ.IntType, λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("height"))),
										)
									} else {
										return λ.NewTuple(
											λ.None,
											λ.None,
										)
									}
								}()
								ϒwidth = λ.GetItem(τmp2, λ.NewInt(0))
								ϒheight = λ.GetItem(τmp2, λ.NewInt(1))
								if λ.IsTrue(λ.NewBool(ϒwidth == λ.None)) {
									ϒwidth = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒfmt, "get", nil), λ.NewStr("width")))
								}
								if λ.IsTrue(λ.NewBool(ϒheight == λ.None)) {
									ϒheight = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒfmt, "get", nil), λ.NewStr("height")))
								}
								ϒfilesize = func() λ.Object {
									if λv := λ.Cal(ϒint_or_none, λ.GetItem(λ.Cal(λ.GetAttr(ϒurl_data, "get", nil), λ.NewStr("clen"), λ.NewList(λ.None)), λ.NewInt(0))); λ.IsTrue(λv) {
										return λv
									} else {
										return λ.Cal(ϒ_extract_filesize, ϒurl)
									}
								}()
								ϒquality = func() λ.Object {
									if λv := λ.GetItem(λ.Cal(λ.GetAttr(ϒurl_data, "get", nil), λ.NewStr("quality"), λ.NewList(λ.None)), λ.NewInt(0)); λ.IsTrue(λv) {
										return λv
									} else {
										return λ.Cal(λ.GetAttr(ϒfmt, "get", nil), λ.NewStr("quality"))
									}
								}()
								ϒquality_label = func() λ.Object {
									if λv := λ.GetItem(λ.Cal(λ.GetAttr(ϒurl_data, "get", nil), λ.NewStr("quality_label"), λ.NewList(λ.None)), λ.NewInt(0)); λ.IsTrue(λv) {
										return λv
									} else {
										return λ.Cal(λ.GetAttr(ϒfmt, "get", nil), λ.NewStr("qualityLabel"))
									}
								}()
								ϒtbr = func() λ.Object {
									if λ.IsTrue(λ.Ne(ϒformat_id, λ.NewStr("43"))) {
										return func() λ.Object {
											if λv := λ.Cal(ϒfloat_or_none, λ.GetItem(λ.Cal(λ.GetAttr(ϒurl_data, "get", nil), λ.NewStr("bitrate"), λ.NewList(λ.None)), λ.NewInt(0)), λ.NewInt(1000)); λ.IsTrue(λv) {
												return λv
											} else {
												return λ.Cal(ϒfloat_or_none, λ.Cal(λ.GetAttr(ϒfmt, "get", nil), λ.NewStr("bitrate")), λ.NewInt(1000))
											}
										}()
									} else {
										return λ.None
									}
								}()
								ϒfps = func() λ.Object {
									if λv := λ.Cal(ϒint_or_none, λ.GetItem(λ.Cal(λ.GetAttr(ϒurl_data, "get", nil), λ.NewStr("fps"), λ.NewList(λ.None)), λ.NewInt(0))); λ.IsTrue(λv) {
										return λv
									} else {
										return λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒfmt, "get", nil), λ.NewStr("fps")))
									}
								}()
								ϒmore_fields = λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("filesize"): ϒfilesize,
									λ.NewStr("tbr"):      ϒtbr,
									λ.NewStr("width"):    ϒwidth,
									λ.NewStr("height"):   ϒheight,
									λ.NewStr("fps"):      ϒfps,
									λ.NewStr("format_note"): func() λ.Object {
										if λv := ϒquality_label; λ.IsTrue(λv) {
											return λv
										} else {
											return ϒquality
										}
									}(),
								})
								τmp2 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒmore_fields, "items", nil)))
								for {
									if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
										break
									}
									τmp4 = τmp3
									ϒkey = λ.GetItem(τmp4, λ.NewInt(0))
									ϒvalue = λ.GetItem(τmp4, λ.NewInt(1))
									if λ.IsTrue(ϒvalue) {
										λ.SetItem(ϒdct, ϒkey, ϒvalue)
									}
								}
								ϒtype_ = func() λ.Object {
									if λv := λ.GetItem(λ.Cal(λ.GetAttr(ϒurl_data, "get", nil), λ.NewStr("type"), λ.NewList(λ.None)), λ.NewInt(0)); λ.IsTrue(λv) {
										return λv
									} else {
										return λ.Cal(λ.GetAttr(ϒfmt, "get", nil), λ.NewStr("mimeType"))
									}
								}()
								if λ.IsTrue(ϒtype_) {
									ϒtype_split = λ.Cal(λ.GetAttr(ϒtype_, "split", nil), λ.NewStr(";"))
									ϒkind_ext = λ.Cal(λ.GetAttr(λ.GetItem(ϒtype_split, λ.NewInt(0)), "split", nil), λ.NewStr("/"))
									if λ.IsTrue(λ.Eq(λ.Cal(λ.BuiltinLen, ϒkind_ext), λ.NewInt(2))) {
										τmp2 = ϒkind_ext
										ϒkind = λ.GetItem(τmp2, λ.NewInt(0))
										_ = λ.GetItem(τmp2, λ.NewInt(1))
										λ.SetItem(ϒdct, λ.NewStr("ext"), λ.Cal(ϒmimetype2ext, λ.GetItem(ϒtype_split, λ.NewInt(0))))
										if λ.IsTrue(λ.NewBool(λ.Contains(λ.NewTuple(
											λ.NewStr("audio"),
											λ.NewStr("video"),
										), ϒkind))) {
											ϒcodecs = λ.None
											τmp2 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfinditer, λ.NewStr("(?P<key>[a-zA-Z_-]+)=(?P<quote>[\"\\']?)(?P<val>.+?)(?P=quote)(?:;|$)"), ϒtype_))
											for {
												if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
													break
												}
												ϒmobj = τmp3
												if λ.IsTrue(λ.Eq(λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("key")), λ.NewStr("codecs"))) {
													ϒcodecs = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("val"))
													break
												}
											}
											if λ.IsTrue(ϒcodecs) {
												λ.Cal(λ.GetAttr(ϒdct, "update", nil), λ.Cal(ϒparse_codecs, ϒcodecs))
											}
										}
									}
								}
								if λ.IsTrue(func() λ.Object {
									if λv := λ.Eq(λ.Cal(λ.GetAttr(ϒdct, "get", nil), λ.NewStr("acodec")), λ.NewStr("none")); λ.IsTrue(λv) {
										return λv
									} else {
										return λ.Eq(λ.Cal(λ.GetAttr(ϒdct, "get", nil), λ.NewStr("vcodec")), λ.NewStr("none"))
									}
								}()) {
									λ.SetItem(ϒdct, λ.NewStr("downloader_options"), λ.NewDictWithTable(map[λ.Object]λ.Object{
										λ.NewStr("http_chunk_size"): λ.NewInt(10485760),
									}))
								}
								λ.Cal(λ.GetAttr(ϒformats, "append", nil), ϒdct)
							}
						} else {
							ϒmanifest_url = func() λ.Object {
								if λv := λ.Cal(ϒurl_or_none, λ.Cal(ϒtry_get, ϒplayer_response, λ.NewFunction("<lambda>",
									[]λ.Param{
										{Name: "x"},
									},
									0, false, false,
									func(λargs []λ.Object) λ.Object {
										var (
											ϒx = λargs[0]
										)
										return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("streamingData")), λ.NewStr("hlsManifestUrl"))
									}), ϒcompat_str)); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Cal(ϒurl_or_none, λ.Cal(ϒtry_get, ϒvideo_info, λ.NewFunction("<lambda>",
										[]λ.Param{
											{Name: "x"},
										},
										0, false, false,
										func(λargs []λ.Object) λ.Object {
											var (
												ϒx = λargs[0]
											)
											return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("hlsvp")), λ.NewInt(0))
										}), ϒcompat_str))
								}
							}()
							if λ.IsTrue(ϒmanifest_url) {
								ϒformats = λ.NewList()
								ϒm3u8_formats = λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
									ϒmanifest_url,
									ϒvideo_id,
									λ.NewStr("mp4"),
								), λ.KWArgs{
									{Name: "fatal", Value: λ.False},
								})
								τmp0 = λ.Cal(λ.BuiltinIter, ϒm3u8_formats)
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒa_format = τmp1
									ϒitag = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
										λ.NewStr("/itag/(\\d+)/"),
										λ.GetItem(ϒa_format, λ.NewStr("url")),
										λ.NewStr("itag"),
									), λ.KWArgs{
										{Name: "default", Value: λ.None},
									})
									if λ.IsTrue(ϒitag) {
										λ.SetItem(ϒa_format, λ.NewStr("format_id"), ϒitag)
										if λ.IsTrue(λ.NewBool(λ.Contains(λ.GetAttr(ϒself, "_formats", nil), ϒitag))) {
											ϒdct = λ.Cal(λ.GetAttr(λ.GetItem(λ.GetAttr(ϒself, "_formats", nil), ϒitag), "copy", nil))
											λ.Cal(λ.GetAttr(ϒdct, "update", nil), ϒa_format)
											ϒa_format = ϒdct
										}
									}
									λ.SetItem(ϒa_format, λ.NewStr("player_url"), ϒplayer_url)
									λ.SetItem(λ.Cal(λ.GetAttr(ϒa_format, "setdefault", nil), λ.NewStr("http_headers"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), λ.NewStr("Youtubedl-no-compression"), λ.NewStr("True"))
									λ.Cal(λ.GetAttr(ϒformats, "append", nil), ϒa_format)
								}
							} else {
								ϒerror_message = λ.Cal(ϒextract_unavailable_message)
								if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒerror_message))) {
									ϒerror_message = λ.Cal(ϒclean_html, λ.Cal(ϒtry_get, ϒplayer_response, λ.NewFunction("<lambda>",
										[]λ.Param{
											{Name: "x"},
										},
										0, false, false,
										func(λargs []λ.Object) λ.Object {
											var (
												ϒx = λargs[0]
											)
											return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("playabilityStatus")), λ.NewStr("reason"))
										}), ϒcompat_str))
								}
								if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒerror_message))) {
									ϒerror_message = λ.Cal(ϒclean_html, λ.Cal(ϒtry_get, ϒvideo_info, λ.NewFunction("<lambda>",
										[]λ.Param{
											{Name: "x"},
										},
										0, false, false,
										func(λargs []λ.Object) λ.Object {
											var (
												ϒx = λargs[0]
											)
											return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("reason")), λ.NewInt(0))
										}), ϒcompat_str))
								}
								if λ.IsTrue(ϒerror_message) {
									panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(ϒerror_message), λ.KWArgs{
										{Name: "expected", Value: λ.True},
									})))
								}
								panic(λ.Raise(λ.Cal(ExtractorError, λ.NewStr("no conn, hlsvp, hlsManifestUrl or url_encoded_fmt_stream_map information found in video info"))))
							}
						}
					}
					ϒvideo_uploader = func() λ.Object {
						if λv := λ.Cal(ϒtry_get, ϒvideo_info, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("author")), λ.NewInt(0))
							}), ϒcompat_str); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(ϒstr_or_none, λ.Cal(λ.GetAttr(ϒvideo_details, "get", nil), λ.NewStr("author")))
						}
					}()
					if λ.IsTrue(ϒvideo_uploader) {
						ϒvideo_uploader = λ.Cal(ϒcompat_urllib_parse_unquote_plus, ϒvideo_uploader)
					} else {
						λ.Cal(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "report_warning", nil), λ.NewStr("unable to extract uploader name"))
					}
					ϒvideo_uploader_id = λ.None
					ϒvideo_uploader_url = λ.None
					ϒmobj = λ.Cal(Ωre.ϒsearch, λ.NewStr("<link itemprop=\"url\" href=\"(?P<uploader_url>https?://www\\.youtube\\.com/(?:user|channel)/(?P<uploader_id>[^\"]+))\">"), ϒvideo_webpage)
					if λ.IsTrue(λ.NewBool(ϒmobj != λ.None)) {
						ϒvideo_uploader_id = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("uploader_id"))
						ϒvideo_uploader_url = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("uploader_url"))
					} else {
						λ.Cal(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "report_warning", nil), λ.NewStr("unable to extract uploader nickname"))
					}
					ϒchannel_id = func() λ.Object {
						if λv := λ.Cal(ϒstr_or_none, λ.Cal(λ.GetAttr(ϒvideo_details, "get", nil), λ.NewStr("channelId"))); λ.IsTrue(λv) {
							return λv
						} else if λv := λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
							λ.NewStr("channelId"),
							ϒvideo_webpage,
							λ.NewStr("channel id"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
								λ.NewStr("data-channel-external-id=([\"\\'])(?P<id>(?:(?!\\1).)+)\\1"),
								ϒvideo_webpage,
								λ.NewStr("channel id"),
							), λ.KWArgs{
								{Name: "default", Value: λ.None},
								{Name: "group", Value: λ.NewStr("id")},
							})
						}
					}()
					ϒchannel_url = func() λ.Object {
						if λ.IsTrue(ϒchannel_id) {
							return λ.Mod(λ.NewStr("http://www.youtube.com/channel/%s"), ϒchannel_id)
						} else {
							return λ.None
						}
					}()
					ϒm_thumb = λ.Cal(Ωre.ϒsearch, λ.NewStr("<span itemprop=\"thumbnail\".*?href=\"(.*?)\">"), ϒvideo_webpage, Ωre.DOTALL)
					if λ.IsTrue(λ.NewBool(ϒm_thumb != λ.None)) {
						ϒvideo_thumbnail = λ.Cal(λ.GetAttr(ϒm_thumb, "group", nil), λ.NewInt(1))
					} else {
						if λ.IsTrue(λ.NewBool(!λ.Contains(ϒvideo_info, λ.NewStr("thumbnail_url")))) {
							λ.Cal(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "report_warning", nil), λ.NewStr("unable to extract video thumbnail"))
							ϒvideo_thumbnail = λ.None
						} else {
							ϒvideo_thumbnail = λ.Cal(ϒcompat_urllib_parse_unquote_plus, λ.GetItem(λ.GetItem(ϒvideo_info, λ.NewStr("thumbnail_url")), λ.NewInt(0)))
						}
					}
					ϒupload_date = λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
						λ.NewStr("datePublished"),
						ϒvideo_webpage,
						λ.NewStr("upload date"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒupload_date))) {
						ϒupload_date = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewList(
								λ.NewStr("(?s)id=\"eow-date.*?>(.*?)</span>"),
								λ.NewStr("(?:id=\"watch-uploader-info\".*?>.*?|[\"\\']simpleText[\"\\']\\s*:\\s*[\"\\'])(?:Published|Uploaded|Streamed live|Started) on (.+?)[<\"\\']"),
							),
							ϒvideo_webpage,
							λ.NewStr("upload date"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						})
					}
					ϒupload_date = λ.Cal(ϒunified_strdate, ϒupload_date)
					ϒvideo_license = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
						λ.NewStr("<h4[^>]+class=\"title\"[^>]*>\\s*License\\s*</h4>\\s*<ul[^>]*>\\s*<li>(.+?)</li"),
						ϒvideo_webpage,
						λ.NewStr("license"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					ϒm_music = λ.Cal(Ωre.ϒsearch, λ.NewStr("(?x)\n                <h4[^>]+class=\"title\"[^>]*>\\s*Music\\s*</h4>\\s*\n                <ul[^>]*>\\s*\n                <li>(?P<title>.+?)\n                by (?P<creator>.+?)\n                (?:\n                    \\(.+?\\)|\n                    <a[^>]*\n                        (?:\n                            \\bhref=[\"\\']/red[^>]*>|             # drop possible\n                            >\\s*Listen ad-free with YouTube Red # YouTube Red ad\n                        )\n                    .*?\n                )?</li\n            "), ϒvideo_webpage)
					if λ.IsTrue(ϒm_music) {
						ϒvideo_alt_title = λ.Cal(ϒremove_quotes, λ.Cal(ϒunescapeHTML, λ.Cal(λ.GetAttr(ϒm_music, "group", nil), λ.NewStr("title"))))
						ϒvideo_creator = λ.Cal(ϒclean_html, λ.Cal(λ.GetAttr(ϒm_music, "group", nil), λ.NewStr("creator")))
					} else {
						τmp0 = λ.None
						ϒvideo_alt_title = τmp0
						ϒvideo_creator = τmp0
					}
					ϒextract_meta = λ.NewFunction("extract_meta",
						[]λ.Param{
							{Name: "field"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒfield = λargs[0]
							)
							return λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
								λ.Mod(λ.NewStr("<h4[^>]+class=\"title\"[^>]*>\\s*%s\\s*</h4>\\s*<ul[^>]*>\\s*<li>(.+?)</li>\\s*"), ϒfield),
								ϒvideo_webpage,
								ϒfield,
							), λ.KWArgs{
								{Name: "default", Value: λ.None},
							})
						})
					ϒtrack = λ.Cal(ϒextract_meta, λ.NewStr("Song"))
					ϒartist = λ.Cal(ϒextract_meta, λ.NewStr("Artist"))
					ϒalbum = λ.Cal(ϒextract_meta, λ.NewStr("Album"))
					τmp0 = λ.None
					ϒrelease_date = τmp0
					ϒrelease_year = τmp0
					if λ.IsTrue(ϒvideo_description) {
						ϒmobj = λ.Cal(Ωre.ϒsearch, λ.NewStr("(?s)Provided to YouTube by [^\\n]+\\n+(?P<track>[^·]+)·(?P<artist>[^\\n]+)\\n+(?P<album>[^\\n]+)(?:.+?℗\\s*(?P<release_year>\\d{4})(?!\\d))?(?:.+?Released on\\s*:\\s*(?P<release_date>\\d{4}-\\d{2}-\\d{2}))?(.+?\\nArtist\\s*:\\s*(?P<clean_artist>[^\\n]+))?"), ϒvideo_description)
						if λ.IsTrue(ϒmobj) {
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒtrack))) {
								ϒtrack = λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("track")), "strip", nil))
							}
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒartist))) {
								ϒartist = func() λ.Object {
									if λv := λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("clean_artist")); λ.IsTrue(λv) {
										return λv
									} else {
										return λ.Cal(λ.GetAttr(λ.NewStr(", "), "join", nil), λ.Cal(λ.NewFunction("<generator>",
											nil,
											0, false, false,
											func(λargs []λ.Object) λ.Object {
												return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
													var (
														ϒa   λ.Object
														τmp0 λ.Object
														τmp1 λ.Object
													)
													τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("artist")), "split", nil), λ.NewStr("·")))
													for {
														if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
															break
														}
														ϒa = τmp1
														λgy.Yield(λ.Cal(λ.GetAttr(ϒa, "strip", nil)))
													}
													return λ.None
												})
											})))
									}
								}()
							}
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒalbum))) {
								ϒalbum = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.Cal(λ.GetAttr(λ.NewStr("album"), "strip", nil)))
							}
							ϒrelease_year = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("release_year"))
							ϒrelease_date = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("release_date"))
							if λ.IsTrue(ϒrelease_date) {
								ϒrelease_date = λ.Cal(λ.GetAttr(ϒrelease_date, "replace", nil), λ.NewStr("-"), λ.NewStr(""))
								if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒrelease_year))) {
									ϒrelease_year = λ.Cal(λ.IntType, λ.GetItem(ϒrelease_date, λ.NewSlice(λ.None, λ.NewInt(4), λ.None)))
								}
							}
							if λ.IsTrue(ϒrelease_year) {
								ϒrelease_year = λ.Cal(λ.IntType, ϒrelease_year)
							}
						}
					}
					ϒm_episode = λ.Cal(Ωre.ϒsearch, λ.NewStr("<div[^>]+id=\"watch7-headline\"[^>]*>\\s*<span[^>]*>.*?>(?P<series>[^<]+)</a></b>\\s*S(?P<season>\\d+)\\s*•\\s*E(?P<episode>\\d+)</span>"), ϒvideo_webpage)
					if λ.IsTrue(ϒm_episode) {
						ϒseries = λ.Cal(ϒunescapeHTML, λ.Cal(λ.GetAttr(ϒm_episode, "group", nil), λ.NewStr("series")))
						ϒseason_number = λ.Cal(λ.IntType, λ.Cal(λ.GetAttr(ϒm_episode, "group", nil), λ.NewStr("season")))
						ϒepisode_number = λ.Cal(λ.IntType, λ.Cal(λ.GetAttr(ϒm_episode, "group", nil), λ.NewStr("episode")))
					} else {
						τmp0 = λ.None
						ϒseries = τmp0
						ϒseason_number = τmp0
						ϒepisode_number = τmp0
					}
					ϒm_cat_container = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("(?s)<h4[^>]*>\\s*Category\\s*</h4>\\s*<ul[^>]*>(.*?)</ul>"),
						ϒvideo_webpage,
						λ.NewStr("categories"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(ϒm_cat_container) {
						ϒcategory = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
							λ.NewStr("(?s)<a[^<]+>(.*?)</a>"),
							ϒm_cat_container,
							λ.NewStr("category"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						})
						ϒvideo_categories = func() λ.Object {
							if λ.IsTrue(λ.NewBool(ϒcategory == λ.None)) {
								return λ.None
							} else {
								return λ.NewList(ϒcategory)
							}
						}()
					} else {
						ϒvideo_categories = λ.None
					}
					ϒvideo_tags = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒm   λ.Object
									τmp0 λ.Object
									τmp1 λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfinditer, λ.Cal(λ.GetAttr(ϒself, "_meta_regex", nil), λ.NewStr("og:video:tag")), ϒvideo_webpage))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒm = τmp1
									λgy.Yield(λ.Cal(ϒunescapeHTML, λ.Cal(λ.GetAttr(ϒm, "group", nil), λ.NewStr("content"))))
								}
								return λ.None
							})
						})))
					ϒ_extract_count = λ.NewFunction("_extract_count",
						[]λ.Param{
							{Name: "count_name"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒcount_name = λargs[0]
							)
							return λ.Cal(ϒstr_to_int, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
								λ.Mod(λ.NewStr("-%s-button[^>]+><span[^>]+class=\"yt-uix-button-content\"[^>]*>([\\d,]+)</span>"), λ.Cal(Ωre.ϒescape, ϒcount_name)),
								ϒvideo_webpage,
								ϒcount_name,
							), λ.KWArgs{
								{Name: "default", Value: λ.None},
							}))
						})
					ϒlike_count = λ.Cal(ϒ_extract_count, λ.NewStr("like"))
					ϒdislike_count = λ.Cal(ϒ_extract_count, λ.NewStr("dislike"))
					if λ.IsTrue(λ.NewBool(ϒview_count == λ.None)) {
						ϒview_count = λ.Cal(ϒstr_to_int, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewStr("<[^>]+class=[\"\\']watch-view-count[^>]+>\\s*([\\d,\\s]+)"),
							ϒvideo_webpage,
							λ.NewStr("view count"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}))
					}
					ϒaverage_rating = func() λ.Object {
						if λv := λ.Cal(ϒfloat_or_none, λ.Cal(λ.GetAttr(ϒvideo_details, "get", nil), λ.NewStr("averageRating"))); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(ϒtry_get, ϒvideo_info, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.Cal(ϒfloat_or_none, λ.GetItem(λ.GetItem(ϒx, λ.NewStr("avg_rating")), λ.NewInt(0)))
								}))
						}
					}()
					ϒvideo_subtitles = λ.Cal(λ.GetAttr(ϒself, "extract_subtitles", nil), ϒvideo_id, ϒvideo_webpage)
					ϒautomatic_captions = λ.Cal(λ.GetAttr(ϒself, "extract_automatic_captions", nil), ϒvideo_id, ϒvideo_webpage)
					ϒvideo_duration = λ.Cal(ϒtry_get, ϒvideo_info, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.Cal(ϒint_or_none, λ.GetItem(λ.GetItem(ϒx, λ.NewStr("length_seconds")), λ.NewInt(0)))
						}))
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒvideo_duration))) {
						ϒvideo_duration = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo_details, "get", nil), λ.NewStr("lengthSeconds")))
					}
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒvideo_duration))) {
						ϒvideo_duration = λ.Cal(ϒparse_duration, λ.Cal(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewStr("duration"), ϒvideo_webpage, λ.NewStr("video duration")))
					}
					ϒvideo_annotations = λ.None
					if λ.IsTrue(λ.Cal(λ.GetAttr(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "params", nil), "get", nil), λ.NewStr("writeannotations"), λ.False)) {
						ϒxsrf_token = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewStr("([\\'\"])XSRF_TOKEN\\1\\s*:\\s*([\\'\"])(?P<xsrf_token>[A-Za-z0-9+/=]+)\\2"),
							ϒvideo_webpage,
							λ.NewStr("xsrf token"),
						), λ.KWArgs{
							{Name: "group", Value: λ.NewStr("xsrf_token")},
							{Name: "fatal", Value: λ.False},
						})
						ϒinvideo_url = λ.Cal(ϒtry_get, ϒplayer_response, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(λ.GetItem(λ.GetItem(ϒx, λ.NewStr("annotations")), λ.NewInt(0)), λ.NewStr("playerAnnotationsUrlsRenderer")), λ.NewStr("invideoUrl"))
							}), ϒcompat_str)
						if λ.IsTrue(func() λ.Object {
							if λv := ϒxsrf_token; !λ.IsTrue(λv) {
								return λv
							} else {
								return ϒinvideo_url
							}
						}()) {
							ϒxsrf_field_name = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
								λ.NewStr("([\\'\"])XSRF_FIELD_NAME\\1\\s*:\\s*([\\'\"])(?P<xsrf_field_name>\\w+)\\2"),
								ϒvideo_webpage,
								λ.NewStr("xsrf field name"),
							), λ.KWArgs{
								{Name: "group", Value: λ.NewStr("xsrf_field_name")},
								{Name: "default", Value: λ.NewStr("session_token")},
							})
							ϒvideo_annotations = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
								λ.Cal(λ.GetAttr(ϒself, "_proto_relative_url", nil), ϒinvideo_url),
								ϒvideo_id,
							), λ.KWArgs{
								{Name: "note", Value: λ.NewStr("Downloading annotations")},
								{Name: "errnote", Value: λ.NewStr("Unable to download video annotations")},
								{Name: "fatal", Value: λ.False},
								{Name: "data", Value: λ.Cal(ϒurlencode_postdata, λ.NewDictWithTable(map[λ.Object]λ.Object{
									ϒxsrf_field_name: ϒxsrf_token,
								}))},
							})
						}
					}
					ϒchapters = λ.Cal(λ.GetAttr(ϒself, "_extract_chapters", nil), ϒdescription_original, ϒvideo_duration)
					if λ.IsTrue(λ.Cal(λ.GetAttr(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "params", nil), "get", nil), λ.NewStr("youtube_include_dash_manifest"), λ.True)) {
						ϒdash_mpd_fatal = λ.True
						τmp0 = λ.Cal(λ.BuiltinIter, ϒdash_mpds)
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒmpd_url = τmp1
							ϒdash_formats = λ.NewDictWithTable(map[λ.Object]λ.Object{})
							τmp2, τmp3 = func() (λexit λ.Object, λret λ.Object) {
								defer λ.CatchMulti(
									nil,
									&λ.Catcher{λ.NewTuple(
										ExtractorError,
										λ.KeyErrorType,
									), func(λex λ.BaseException) {
										var ϒe λ.Object = λex
										λ.Cal(λ.GetAttr(ϒself, "report_warning", nil), λ.Mod(λ.NewStr("Skipping DASH manifest: %r"), ϒe), ϒvideo_id)
									}},
								)
								ϒdecrypt_sig = λ.NewFunction("decrypt_sig",
									[]λ.Param{
										{Name: "mobj"},
									},
									0, false, false,
									func(λargs []λ.Object) λ.Object {
										var (
											ϒdec_s λ.Object
											ϒmobj  = λargs[0]
											ϒs     λ.Object
										)
										ϒs = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewInt(1))
										ϒdec_s = λ.Cal(λ.GetAttr(ϒself, "_decrypt_signature", nil), ϒs, ϒvideo_id, ϒplayer_url, ϒage_gate)
										return λ.Mod(λ.NewStr("/signature/%s"), ϒdec_s)
									})
								ϒmpd_url = λ.Cal(Ωre.ϒsub, λ.NewStr("/s/([a-fA-F0-9\\.]+)"), ϒdecrypt_sig, ϒmpd_url)
								τmp4 = λ.Cal(λ.BuiltinIter, λ.Call(λ.GetAttr(ϒself, "_extract_mpd_formats", nil), λ.NewArgs(
									ϒmpd_url,
									ϒvideo_id,
								), λ.KWArgs{
									{Name: "fatal", Value: ϒdash_mpd_fatal},
									{Name: "formats_dict", Value: λ.GetAttr(ϒself, "_formats", nil)},
								}))
								for {
									if τmp5 = λ.NextDefault(τmp4, λ.AfterLast); τmp5 == λ.AfterLast {
										break
									}
									ϒdf = τmp5
									if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.Cal(λ.GetAttr(ϒdf, "get", nil), λ.NewStr("filesize"))))) {
										λ.SetItem(ϒdf, λ.NewStr("filesize"), λ.Cal(ϒ_extract_filesize, λ.GetItem(ϒdf, λ.NewStr("url"))))
									}
									if λ.IsTrue(λ.NewBool(!λ.Contains(ϒdash_formats, λ.GetItem(ϒdf, λ.NewStr("format_id"))))) {
										λ.SetItem(ϒdash_formats, λ.GetItem(ϒdf, λ.NewStr("format_id")), ϒdf)
									}
									ϒdash_mpd_fatal = λ.False
								}
								return λ.BlockExitNormally, nil
							}()
							if λ.IsTrue(ϒdash_formats) {
								ϒformats = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
									nil,
									0, false, false,
									func(λargs []λ.Object) λ.Object {
										return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
											var (
												ϒf   λ.Object
												τmp0 λ.Object
												τmp1 λ.Object
											)
											τmp0 = λ.Cal(λ.BuiltinIter, ϒformats)
											for {
												if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
													break
												}
												ϒf = τmp1
												if λ.IsTrue(λ.NewBool(!λ.Contains(λ.Cal(λ.GetAttr(ϒdash_formats, "keys", nil)), λ.GetItem(ϒf, λ.NewStr("format_id"))))) {
													λgy.Yield(ϒf)
												}
											}
											return λ.None
										})
									})))
								λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Cal(λ.GetAttr(ϒdash_formats, "values", nil)))
							}
						}
					}
					ϒstretched_m = λ.Cal(Ωre.ϒsearch, λ.NewStr("<meta\\s+property=\"og:video:tag\".*?content=\"yt:stretch=(?P<w>[0-9]+):(?P<h>[0-9]+)\">"), ϒvideo_webpage)
					if λ.IsTrue(ϒstretched_m) {
						ϒw = λ.Cal(λ.FloatType, λ.Cal(λ.GetAttr(ϒstretched_m, "group", nil), λ.NewStr("w")))
						ϒh = λ.Cal(λ.FloatType, λ.Cal(λ.GetAttr(ϒstretched_m, "group", nil), λ.NewStr("h")))
						if λ.IsTrue(func() λ.Object {
							if λv := λ.Gt(ϒw, λ.NewInt(0)); !λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Gt(ϒh, λ.NewInt(0))
							}
						}()) {
							ϒratio = λ.TrueDiv(ϒw, ϒh)
							τmp0 = λ.Cal(λ.BuiltinIter, ϒformats)
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒf = τmp1
								if λ.IsTrue(λ.Ne(λ.Cal(λ.GetAttr(ϒf, "get", nil), λ.NewStr("vcodec")), λ.NewStr("none"))) {
									λ.SetItem(ϒf, λ.NewStr("stretched_ratio"), ϒratio)
								}
							}
						}
					}
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒformats))) {
						ϒtoken = λ.Cal(ϒextract_token, ϒvideo_info)
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒtoken))) {
							if λ.IsTrue(λ.NewBool(λ.Contains(ϒvideo_info, λ.NewStr("reason")))) {
								if λ.IsTrue(λ.NewBool(λ.Contains(λ.GetItem(ϒvideo_info, λ.NewStr("reason")), λ.NewStr("The uploader has not made this video available in your country.")))) {
									ϒregions_allowed = λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
										λ.NewStr("regionsAllowed"),
										ϒvideo_webpage,
									), λ.KWArgs{
										{Name: "default", Value: λ.None},
									})
									ϒcountries = func() λ.Object {
										if λ.IsTrue(ϒregions_allowed) {
											return λ.Cal(λ.GetAttr(ϒregions_allowed, "split", nil), λ.NewStr(","))
										} else {
											return λ.None
										}
									}()
									λ.Call(λ.GetAttr(ϒself, "raise_geo_restricted", nil), nil, λ.KWArgs{
										{Name: "msg", Value: λ.GetItem(λ.GetItem(ϒvideo_info, λ.NewStr("reason")), λ.NewInt(0))},
										{Name: "countries", Value: ϒcountries},
									})
								}
								ϒreason = λ.GetItem(λ.GetItem(ϒvideo_info, λ.NewStr("reason")), λ.NewInt(0))
								if λ.IsTrue(λ.NewBool(λ.Contains(ϒreason, λ.NewStr("Invalid parameters")))) {
									ϒunavailable_message = λ.Cal(ϒextract_unavailable_message)
									if λ.IsTrue(ϒunavailable_message) {
										ϒreason = ϒunavailable_message
									}
								}
								panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.NewStr("YouTube said: %s"), ϒreason)), λ.KWArgs{
									{Name: "expected", Value: λ.True},
									{Name: "video_id", Value: ϒvideo_id},
								})))
							} else {
								panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.NewStr("\"token\" parameter not in video info for unknown reason")), λ.KWArgs{
									{Name: "video_id", Value: ϒvideo_id},
								})))
							}
						}
					}
					if λ.IsTrue(func() λ.Object {
						if λv := λ.NewBool(!λ.IsTrue(ϒformats)); !λ.IsTrue(λv) {
							return λv
						} else {
							return func() λ.Object {
								if λv := λ.Cal(λ.GetAttr(ϒvideo_info, "get", nil), λ.NewStr("license_info")); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Cal(ϒtry_get, ϒplayer_response, λ.NewFunction("<lambda>",
										[]λ.Param{
											{Name: "x"},
										},
										0, false, false,
										func(λargs []λ.Object) λ.Object {
											var (
												ϒx = λargs[0]
											)
											return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("streamingData")), λ.NewStr("licenseInfos"))
										}))
								}
							}()
						}
					}()) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.NewStr("This video is DRM protected.")), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					λ.Cal(λ.GetAttr(ϒself, "mark_watched", nil), ϒvideo_id, ϒvideo_info, ϒplayer_response)
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           ϒvideo_id,
						λ.NewStr("uploader"):     ϒvideo_uploader,
						λ.NewStr("uploader_id"):  ϒvideo_uploader_id,
						λ.NewStr("uploader_url"): ϒvideo_uploader_url,
						λ.NewStr("channel_id"):   ϒchannel_id,
						λ.NewStr("channel_url"):  ϒchannel_url,
						λ.NewStr("upload_date"):  ϒupload_date,
						λ.NewStr("license"):      ϒvideo_license,
						λ.NewStr("creator"): func() λ.Object {
							if λv := ϒvideo_creator; λ.IsTrue(λv) {
								return λv
							} else {
								return ϒartist
							}
						}(),
						λ.NewStr("title"): ϒvideo_title,
						λ.NewStr("alt_title"): func() λ.Object {
							if λv := ϒvideo_alt_title; λ.IsTrue(λv) {
								return λv
							} else {
								return ϒtrack
							}
						}(),
						λ.NewStr("thumbnail"):          ϒvideo_thumbnail,
						λ.NewStr("description"):        ϒvideo_description,
						λ.NewStr("categories"):         ϒvideo_categories,
						λ.NewStr("tags"):               ϒvideo_tags,
						λ.NewStr("subtitles"):          ϒvideo_subtitles,
						λ.NewStr("automatic_captions"): ϒautomatic_captions,
						λ.NewStr("duration"):           ϒvideo_duration,
						λ.NewStr("age_limit"): func() λ.Object {
							if λ.IsTrue(ϒage_gate) {
								return λ.NewInt(18)
							} else {
								return λ.NewInt(0)
							}
						}(),
						λ.NewStr("annotations"):    ϒvideo_annotations,
						λ.NewStr("chapters"):       ϒchapters,
						λ.NewStr("webpage_url"):    λ.Add(ϒproto, λ.Mod(λ.NewStr("://www.youtube.com/watch?v=%s"), ϒvideo_id)),
						λ.NewStr("view_count"):     ϒview_count,
						λ.NewStr("like_count"):     ϒlike_count,
						λ.NewStr("dislike_count"):  ϒdislike_count,
						λ.NewStr("average_rating"): ϒaverage_rating,
						λ.NewStr("formats"):        ϒformats,
						λ.NewStr("is_live"):        ϒis_live,
						λ.NewStr("start_time"):     ϒstart_time,
						λ.NewStr("end_time"):       ϒend_time,
						λ.NewStr("series"):         ϒseries,
						λ.NewStr("season_number"):  ϒseason_number,
						λ.NewStr("episode_number"): ϒepisode_number,
						λ.NewStr("track"):          ϒtrack,
						λ.NewStr("artist"):         ϒartist,
						λ.NewStr("album"):          ϒalbum,
						λ.NewStr("release_date"):   ϒrelease_date,
						λ.NewStr("release_year"):   ϒrelease_year,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):                            YoutubeIE_IE_NAME,
				λ.NewStr("_GEO_BYPASS"):                        YoutubeIE__GEO_BYPASS,
				λ.NewStr("_NEXT_URL_RE"):                       YoutubeIE__NEXT_URL_RE,
				λ.NewStr("_TESTS"):                             YoutubeIE__TESTS,
				λ.NewStr("_VALID_URL"):                         YoutubeIE__VALID_URL,
				λ.NewStr("__init__"):                           YoutubeIE___init__,
				λ.NewStr("_decrypt_signature"):                 YoutubeIE__decrypt_signature,
				λ.NewStr("_extract_chapters"):                  YoutubeIE__extract_chapters,
				λ.NewStr("_extract_signature_function"):        YoutubeIE__extract_signature_function,
				λ.NewStr("_extract_url"):                       YoutubeIE__extract_url,
				λ.NewStr("_extract_urls"):                      YoutubeIE__extract_urls,
				λ.NewStr("_formats"):                           YoutubeIE__formats,
				λ.NewStr("_get_ytplayer_config"):               YoutubeIE__get_ytplayer_config,
				λ.NewStr("_parse_sig_js"):                      YoutubeIE__parse_sig_js,
				λ.NewStr("_real_extract"):                      YoutubeIE__real_extract,
				λ.NewStr("_signature_cache_id"):                YoutubeIE__signature_cache_id,
				λ.NewStr("extract_id"):                         YoutubeIE_extract_id,
				λ.NewStr("report_video_info_webpage_download"): YoutubeIE_report_video_info_webpage_download,
			})
		}())
		YoutubePlaylistIE = λ.Cal(λ.TypeType, λ.NewStr("YoutubePlaylistIE"), λ.NewTuple(YoutubePlaylistBaseInfoExtractor), func() λ.Dict {
			var (
				YoutubePlaylistIE_IE_NAME                    λ.Object
				YoutubePlaylistIE__TEMPLATE_URL              λ.Object
				YoutubePlaylistIE__TESTS                     λ.Object
				YoutubePlaylistIE__VALID_URL                 λ.Object
				YoutubePlaylistIE__VIDEO_RE_TPL              λ.Object
				YoutubePlaylistIE__check_download_just_video λ.Object
				YoutubePlaylistIE__extract_playlist          λ.Object
				YoutubePlaylistIE__real_extract              λ.Object
				YoutubePlaylistIE__real_initialize           λ.Object
			)
			YoutubePlaylistIE__VALID_URL = λ.Mod(λ.NewStr("(?x)(?:\n                        (?:https?://)?\n                        (?:\\w+\\.)?\n                        (?:\n                            (?:\n                                youtube\\.com|\n                                invidio\\.us\n                            )\n                            /\n                            (?:\n                               (?:course|view_play_list|my_playlists|artist|playlist|watch|embed/(?:videoseries|[0-9A-Za-z_-]{11}))\n                               \\? (?:.*?[&;])*? (?:p|a|list)=\n                            |  p/\n                            )|\n                            youtu\\.be/[0-9A-Za-z_-]{11}\\?.*?\\blist=\n                        )\n                        (\n                            (?:PL|LL|EC|UU|FL|RD|UL|TL|OLAK5uy_)?[0-9A-Za-z-_]{10,}\n                            # Top tracks, they can also include dots\n                            |(?:MC)[\\w\\.]*\n                        )\n                        .*\n                     |\n                        (%(playlist_id)s)\n                     )"), λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("playlist_id"): λ.GetAttr(YoutubeBaseInfoExtractor, "_PLAYLIST_ID_RE", nil),
			}))
			YoutubePlaylistIE__TEMPLATE_URL = λ.NewStr("https://www.youtube.com/playlist?list=%s")
			YoutubePlaylistIE__VIDEO_RE_TPL = λ.NewStr("href=\"\\s*/watch\\?v=%s(?:&amp;(?:[^\"]*?index=(?P<index>\\d+))?(?:[^>]+>(?P<title>[^<]+))?)?")
			YoutubePlaylistIE_IE_NAME = λ.NewStr("youtube:playlist")
			YoutubePlaylistIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.youtube.com/playlist?list=PLwiyx1dc3P2JR9N8gQaQN_BCvlSlap7re"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("title"): λ.NewStr("ytdl test PL"),
						λ.NewStr("id"):    λ.NewStr("PLwiyx1dc3P2JR9N8gQaQN_BCvlSlap7re"),
					}),
					λ.NewStr("playlist_count"): λ.NewInt(3),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.youtube.com/playlist?list=PLtPgu7CB4gbZDA7i_euNxn75ISqxwZPYx"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):    λ.NewStr("PLtPgu7CB4gbZDA7i_euNxn75ISqxwZPYx"),
						λ.NewStr("title"): λ.NewStr("YDL_Empty_List"),
					}),
					λ.NewStr("playlist_count"): λ.NewInt(0),
					λ.NewStr("skip"):           λ.NewStr("This playlist is private"),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("note"): λ.NewStr("Playlist with deleted videos (#651). As a bonus, the video #51 is also twice in this list."),
					λ.NewStr("url"):  λ.NewStr("https://www.youtube.com/playlist?list=PLwP_SiAcdui0KVebT0mU9Apz359a4ubsC"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("title"):       λ.NewStr("29C3: Not my department"),
						λ.NewStr("id"):          λ.NewStr("PLwP_SiAcdui0KVebT0mU9Apz359a4ubsC"),
						λ.NewStr("uploader"):    λ.NewStr("Christiaan008"),
						λ.NewStr("uploader_id"): λ.NewStr("ChRiStIaAn008"),
					}),
					λ.NewStr("playlist_count"): λ.NewInt(95),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("note"): λ.NewStr("issue #673"),
					λ.NewStr("url"):  λ.NewStr("PLBB231211A4F62143"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("title"):       λ.NewStr("[OLD]Team Fortress 2 (Class-based LP)"),
						λ.NewStr("id"):          λ.NewStr("PLBB231211A4F62143"),
						λ.NewStr("uploader"):    λ.NewStr("Wickydoo"),
						λ.NewStr("uploader_id"): λ.NewStr("Wickydoo"),
					}),
					λ.NewStr("playlist_mincount"): λ.NewInt(26),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("note"): λ.NewStr("Large playlist"),
					λ.NewStr("url"):  λ.NewStr("https://www.youtube.com/playlist?list=UUBABnxM4Ar9ten8Mdjj1j0Q"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("title"):       λ.NewStr("Uploads from Cauchemar"),
						λ.NewStr("id"):          λ.NewStr("UUBABnxM4Ar9ten8Mdjj1j0Q"),
						λ.NewStr("uploader"):    λ.NewStr("Cauchemar"),
						λ.NewStr("uploader_id"): λ.NewStr("Cauchemar89"),
					}),
					λ.NewStr("playlist_mincount"): λ.NewInt(799),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("PLtPgu7CB4gbY9oDN3drwC3cMbJggS7dKl"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("title"): λ.NewStr("YDL_safe_search"),
						λ.NewStr("id"):    λ.NewStr("PLtPgu7CB4gbY9oDN3drwC3cMbJggS7dKl"),
					}),
					λ.NewStr("playlist_count"): λ.NewInt(2),
					λ.NewStr("skip"):           λ.NewStr("This playlist is private"),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("note"):           λ.NewStr("embedded"),
					λ.NewStr("url"):            λ.NewStr("https://www.youtube.com/embed/videoseries?list=PL6IaIsEjSbf96XFRuNccS_RuEXwNdsoEu"),
					λ.NewStr("playlist_count"): λ.NewInt(4),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("title"):       λ.NewStr("JODA15"),
						λ.NewStr("id"):          λ.NewStr("PL6IaIsEjSbf96XFRuNccS_RuEXwNdsoEu"),
						λ.NewStr("uploader"):    λ.NewStr("milan"),
						λ.NewStr("uploader_id"): λ.NewStr("UCEI1-PVPcYXjB73Hfelbmaw"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):               λ.NewStr("http://www.youtube.com/embed/_xDOZElKyNU?list=PLsyOSbh5bs16vubvKePAQ1x3PhKavfBIl"),
					λ.NewStr("playlist_mincount"): λ.NewInt(485),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("title"):       λ.NewStr("2018 Chinese New Singles (11/6 updated)"),
						λ.NewStr("id"):          λ.NewStr("PLsyOSbh5bs16vubvKePAQ1x3PhKavfBIl"),
						λ.NewStr("uploader"):    λ.NewStr("LBK"),
						λ.NewStr("uploader_id"): λ.NewStr("sdragonfang"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("note"):           λ.NewStr("Embedded SWF player"),
					λ.NewStr("url"):            λ.NewStr("https://www.youtube.com/p/YN5VISEtHet5D4NEvfTd0zcgFk84NqFZ?hl=en_US&fs=1&rel=0"),
					λ.NewStr("playlist_count"): λ.NewInt(4),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("title"): λ.NewStr("JODA7"),
						λ.NewStr("id"):    λ.NewStr("YN5VISEtHet5D4NEvfTd0zcgFk84NqFZ"),
					}),
					λ.NewStr("skip"): λ.NewStr("This playlist does not exist"),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("note"): λ.NewStr("Buggy playlist: the webpage has a \"Load more\" button but it doesn't have more videos"),
					λ.NewStr("url"):  λ.NewStr("https://www.youtube.com/playlist?list=UUXw-G3eDE9trcvY2sBMM_aA"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("title"):       λ.NewStr("Uploads from Interstellar Movie"),
						λ.NewStr("id"):          λ.NewStr("UUXw-G3eDE9trcvY2sBMM_aA"),
						λ.NewStr("uploader"):    λ.NewStr("Interstellar Movie"),
						λ.NewStr("uploader_id"): λ.NewStr("InterstellarMovie1"),
					}),
					λ.NewStr("playlist_mincount"): λ.NewInt(21),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.youtube.com/watch?v=FqZTN594JQw&list=PLMYEtVRpaqY00V9W81Cwmzp6N6vZqfUKD4"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):            λ.NewStr("FqZTN594JQw"),
						λ.NewStr("ext"):           λ.NewStr("webm"),
						λ.NewStr("title"):         λ.NewStr("Smiley's People 01 detective, Adventure Series, Action"),
						λ.NewStr("uploader"):      λ.NewStr("STREEM"),
						λ.NewStr("uploader_id"):   λ.NewStr("UCyPhqAZgwYWZfxElWVbVJng"),
						λ.NewStr("uploader_url"):  λ.NewStr("re:https?://(?:www\\.)?youtube\\.com/channel/UCyPhqAZgwYWZfxElWVbVJng"),
						λ.NewStr("upload_date"):   λ.NewStr("20150526"),
						λ.NewStr("license"):       λ.NewStr("Standard YouTube License"),
						λ.NewStr("description"):   λ.NewStr("md5:507cdcb5a49ac0da37a920ece610be80"),
						λ.NewStr("categories"):    λ.NewList(λ.NewStr("People & Blogs")),
						λ.NewStr("tags"):          λ.ListType,
						λ.NewStr("view_count"):    λ.IntType,
						λ.NewStr("like_count"):    λ.IntType,
						λ.NewStr("dislike_count"): λ.IntType,
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
					λ.NewStr("skip"):   λ.NewStr("This video is not available."),
					λ.NewStr("add_ie"): λ.NewList(λ.Cal(λ.GetAttr(YoutubeIE, "ie_key", nil))),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://youtu.be/yeWKywCrFtk?list=PL2qgrgXsNUG5ig9cat4ohreBjYLAPC0J5"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):            λ.NewStr("yeWKywCrFtk"),
						λ.NewStr("ext"):           λ.NewStr("mp4"),
						λ.NewStr("title"):         λ.NewStr("Small Scale Baler and Braiding Rugs"),
						λ.NewStr("uploader"):      λ.NewStr("Backus-Page House Museum"),
						λ.NewStr("uploader_id"):   λ.NewStr("backuspagemuseum"),
						λ.NewStr("uploader_url"):  λ.NewStr("re:https?://(?:www\\.)?youtube\\.com/user/backuspagemuseum"),
						λ.NewStr("upload_date"):   λ.NewStr("20161008"),
						λ.NewStr("description"):   λ.NewStr("md5:800c0c78d5eb128500bffd4f0b4f2e8a"),
						λ.NewStr("categories"):    λ.NewList(λ.NewStr("Nonprofits & Activism")),
						λ.NewStr("tags"):          λ.ListType,
						λ.NewStr("like_count"):    λ.IntType,
						λ.NewStr("dislike_count"): λ.IntType,
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("noplaylist"):    λ.True,
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.youtube.com/playlist?list=PLzH6n4zXuckpfMu_4Ff8E7Z1behQks5ba"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("title"):       λ.NewStr("Data Analysis with Dr Mike Pound"),
						λ.NewStr("id"):          λ.NewStr("PLzH6n4zXuckpfMu_4Ff8E7Z1behQks5ba"),
						λ.NewStr("uploader_id"): λ.NewStr("Computerphile"),
						λ.NewStr("uploader"):    λ.NewStr("Computerphile"),
					}),
					λ.NewStr("playlist_mincount"): λ.NewInt(11),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://youtu.be/uWyaPkt-VOI?list=PL9D9FC436B881BA21"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("TLGGrESM50VT6acwMjAyMjAxNw"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("OLAK5uy_m4xAFdmMC5rX3Ji3g93pQe3hqLZw_9LhM"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://invidio.us/playlist?list=PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			YoutubePlaylistIE__real_initialize = λ.NewFunction("_real_initialize",
				[]λ.Param{
					{Name: "self"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒself = λargs[0]
					)
					λ.Cal(λ.GetAttr(ϒself, "_login", nil))
					return λ.None
				})
			YoutubePlaylistIE__extract_playlist = λ.NewFunction("_extract_playlist",
				[]λ.Param{
					{Name: "self"},
					{Name: "playlist_id"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒ_UPLOADER_BASE λ.Object
						ϒhas_videos     λ.Object
						ϒmatch          λ.Object
						ϒmessage        λ.Object
						ϒmobj           λ.Object
						ϒpage           λ.Object
						ϒplaylist       λ.Object
						ϒplaylist_id    = λargs[1]
						ϒplaylist_title λ.Object
						ϒreason         λ.Object
						ϒself           = λargs[0]
						ϒuploader       λ.Object
						ϒuploader_id    λ.Object
						ϒuploader_url   λ.Object
						ϒurl            λ.Object
						τmp0            λ.Object
						τmp1            λ.Object
						τmp2            λ.Object
					)
					_ = τmp0
					_ = τmp1
					ϒurl = λ.Mod(λ.GetAttr(ϒself, "_TEMPLATE_URL", nil), ϒplaylist_id)
					ϒpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒplaylist_id)
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfindall, λ.NewStr("<div class=\"yt-alert-message\"[^>]*>([^<]+)</div>"), ϒpage))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒmatch = τmp1
						ϒmatch = λ.Cal(λ.GetAttr(ϒmatch, "strip", nil))
						ϒmobj = λ.Cal(Ωre.ϒmatch, λ.NewStr("[^<]*(?:The|This) playlist (?P<reason>does not exist|is private)[^<]*"), ϒmatch)
						if λ.IsTrue(ϒmobj) {
							ϒreason = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("reason"))
							ϒmessage = λ.Mod(λ.NewStr("This playlist %s"), ϒreason)
							if λ.IsTrue(λ.NewBool(λ.Contains(ϒreason, λ.NewStr("private")))) {
								τmp2 = λ.IAdd(ϒmessage, λ.NewStr(", use --username or --netrc to access it"))
								ϒmessage = τmp2
							}
							τmp2 = λ.IAdd(ϒmessage, λ.NewStr("."))
							ϒmessage = τmp2
							panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(ϒmessage), λ.KWArgs{
								{Name: "expected", Value: λ.True},
							})))
						} else {
							if λ.IsTrue(λ.Cal(Ωre.ϒmatch, λ.NewStr("[^<]*Invalid parameters[^<]*"), ϒmatch)) {
								panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.NewStr("Invalid parameters. Maybe URL is incorrect.")), λ.KWArgs{
									{Name: "expected", Value: λ.True},
								})))
							} else {
								if λ.IsTrue(λ.Cal(Ωre.ϒmatch, λ.NewStr("[^<]*Choose your language[^<]*"), ϒmatch)) {
									continue
								} else {
									λ.Cal(λ.GetAttr(ϒself, "report_warning", nil), λ.Add(λ.NewStr("Youtube gives an alert message: "), ϒmatch))
								}
							}
						}
					}
					ϒplaylist_title = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
						λ.NewStr("(?s)<h1 class=\"pl-header-title[^\"]*\"[^>]*>\\s*(.*?)\\s*</h1>"),
						ϒpage,
						λ.NewStr("title"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					ϒ_UPLOADER_BASE = λ.NewStr("class=[\"\\']pl-header-details[^>]+>\\s*<li>\\s*<a[^>]+\\bhref=")
					ϒuploader = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.Mod(λ.NewStr("%s[\"\\']/(?:user|channel)/[^>]+>([^<]+)"), ϒ_UPLOADER_BASE),
						ϒpage,
						λ.NewStr("uploader"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					ϒmobj = λ.Cal(Ωre.ϒsearch, λ.Mod(λ.NewStr("%s([\"\\'])(?P<path>/(?:user|channel)/(?P<uploader_id>.+?))\\1"), ϒ_UPLOADER_BASE), ϒpage)
					if λ.IsTrue(ϒmobj) {
						ϒuploader_id = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("uploader_id"))
						ϒuploader_url = λ.Cal(Ωparse.ϒurljoin, ϒurl, λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("path")))
					} else {
						τmp0 = λ.None
						ϒuploader_id = τmp0
						ϒuploader_url = τmp0
					}
					ϒhas_videos = λ.True
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒplaylist_title))) {
						τmp0, τmp1 = func() (λexit λ.Object, λret λ.Object) {
							defer λ.CatchMulti(
								nil,
								&λ.Catcher{λ.StopIterationType, func(λex λ.BaseException) {
									ϒhas_videos = λ.False
								}},
							)
							λ.Cal(λ.BuiltinNext, λ.Cal(λ.GetAttr(ϒself, "_entries", nil), ϒpage, ϒplaylist_id))
							return λ.BlockExitNormally, nil
						}()
					}
					ϒplaylist = λ.Cal(λ.GetAttr(ϒself, "playlist_result", nil), λ.Cal(λ.GetAttr(ϒself, "_entries", nil), ϒpage, ϒplaylist_id), ϒplaylist_id, ϒplaylist_title)
					λ.Cal(λ.GetAttr(ϒplaylist, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("uploader"):     ϒuploader,
						λ.NewStr("uploader_id"):  ϒuploader_id,
						λ.NewStr("uploader_url"): ϒuploader_url,
					}))
					return λ.NewTuple(
						ϒhas_videos,
						ϒplaylist,
					)
				})
			YoutubePlaylistIE__check_download_just_video = λ.NewFunction("_check_download_just_video",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
					{Name: "playlist_id"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒplaylist_id = λargs[2]
						ϒquery_dict  λ.Object
						ϒself        = λargs[0]
						ϒurl         = λargs[1]
						ϒvideo_id    λ.Object
					)
					ϒquery_dict = λ.Cal(Ωparse.ϒparse_qs, λ.GetAttr(λ.Cal(Ωparse.ϒurlparse, ϒurl), "query", nil))
					ϒvideo_id = func() λ.Object {
						if λv := λ.GetItem(λ.Cal(λ.GetAttr(ϒquery_dict, "get", nil), λ.NewStr("v"), λ.NewList(λ.None)), λ.NewInt(0)); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
								λ.NewStr("(?:(?:^|//)youtu\\.be/|youtube\\.com/embed/(?!videoseries))([0-9A-Za-z_-]{11})"),
								ϒurl,
								λ.NewStr("video id"),
							), λ.KWArgs{
								{Name: "default", Value: λ.None},
							})
						}
					}()
					if λ.IsTrue(ϒvideo_id) {
						if λ.IsTrue(λ.Cal(λ.GetAttr(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "params", nil), "get", nil), λ.NewStr("noplaylist"))) {
							λ.Cal(λ.GetAttr(ϒself, "to_screen", nil), λ.Mod(λ.NewStr("Downloading just video %s because of --no-playlist"), ϒvideo_id))
							return λ.NewTuple(
								ϒvideo_id,
								λ.Call(λ.GetAttr(ϒself, "url_result", nil), λ.NewArgs(
									ϒvideo_id,
									λ.NewStr("Youtube"),
								), λ.KWArgs{
									{Name: "video_id", Value: ϒvideo_id},
								}),
							)
						} else {
							λ.Cal(λ.GetAttr(ϒself, "to_screen", nil), λ.Mod(λ.NewStr("Downloading playlist %s - add --no-playlist to just download video %s"), λ.NewTuple(
								ϒplaylist_id,
								ϒvideo_id,
							)))
							return λ.NewTuple(
								ϒvideo_id,
								λ.None,
							)
						}
					}
					return λ.NewTuple(
						λ.None,
						λ.None,
					)
				})
			YoutubePlaylistIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒhas_videos  λ.Object
						ϒmobj        λ.Object
						ϒplaylist    λ.Object
						ϒplaylist_id λ.Object
						ϒself        = λargs[0]
						ϒurl         = λargs[1]
						ϒvideo       λ.Object
						ϒvideo_id    λ.Object
						τmp0         λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					if λ.IsTrue(λ.NewBool(ϒmobj == λ.None)) {
						panic(λ.Raise(λ.Cal(ExtractorError, λ.Mod(λ.NewStr("Invalid URL: %s"), ϒurl))))
					}
					ϒplaylist_id = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewInt(1)); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewInt(2))
						}
					}()
					τmp0 = λ.Cal(λ.GetAttr(ϒself, "_check_download_just_video", nil), ϒurl, ϒplaylist_id)
					ϒvideo_id = λ.GetItem(τmp0, λ.NewInt(0))
					ϒvideo = λ.GetItem(τmp0, λ.NewInt(1))
					if λ.IsTrue(ϒvideo) {
						return ϒvideo
					}
					if λ.IsTrue(λ.Cal(λ.GetAttr(ϒplaylist_id, "startswith", nil), λ.NewTuple(
						λ.NewStr("RD"),
						λ.NewStr("UL"),
						λ.NewStr("PU"),
					))) {
						return λ.Cal(λ.GetAttr(ϒself, "_extract_mix", nil), ϒplaylist_id)
					}
					τmp0 = λ.Cal(λ.GetAttr(ϒself, "_extract_playlist", nil), ϒplaylist_id)
					ϒhas_videos = λ.GetItem(τmp0, λ.NewInt(0))
					ϒplaylist = λ.GetItem(τmp0, λ.NewInt(1))
					if λ.IsTrue(func() λ.Object {
						if λv := ϒhas_videos; λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewBool(!λ.IsTrue(ϒvideo_id))
						}
					}()) {
						return ϒplaylist
					}
					return λ.Call(λ.GetAttr(ϒself, "url_result", nil), λ.NewArgs(
						ϒvideo_id,
						λ.NewStr("Youtube"),
					), λ.KWArgs{
						{Name: "video_id", Value: ϒvideo_id},
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):                    YoutubePlaylistIE_IE_NAME,
				λ.NewStr("_TEMPLATE_URL"):              YoutubePlaylistIE__TEMPLATE_URL,
				λ.NewStr("_TESTS"):                     YoutubePlaylistIE__TESTS,
				λ.NewStr("_VALID_URL"):                 YoutubePlaylistIE__VALID_URL,
				λ.NewStr("_VIDEO_RE_TPL"):              YoutubePlaylistIE__VIDEO_RE_TPL,
				λ.NewStr("_check_download_just_video"): YoutubePlaylistIE__check_download_just_video,
				λ.NewStr("_extract_playlist"):          YoutubePlaylistIE__extract_playlist,
				λ.NewStr("_real_extract"):              YoutubePlaylistIE__real_extract,
				λ.NewStr("_real_initialize"):           YoutubePlaylistIE__real_initialize,
			})
		}())
		YoutubeChannelIE = λ.Cal(λ.TypeType, λ.NewStr("YoutubeChannelIE"), λ.NewTuple(YoutubePlaylistBaseInfoExtractor), func() λ.Dict {
			var (
				YoutubeChannelIE__VALID_URL λ.Object
				YoutubeChannelIE_suitable   λ.Object
			)
			YoutubeChannelIE__VALID_URL = λ.NewStr("https?://(?:youtu\\.be|(?:\\w+\\.)?youtube(?:-nocookie)?\\.com|(?:www\\.)?invidio\\.us)/channel/(?P<id>[0-9A-Za-z_-]+)")
			YoutubeChannelIE_suitable = λ.NewFunction("suitable",
				[]λ.Param{
					{Name: "cls"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls = λargs[0]
						ϒurl = λargs[1]
					)
					return func() λ.Object {
						if λ.IsTrue(func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(YoutubePlaylistsIE, "suitable", nil), ϒurl); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(YoutubeLiveIE, "suitable", nil), ϒurl)
							}
						}()) {
							return λ.False
						} else {
							return λ.Cal(λ.GetAttr(λ.Cal(λ.SuperType, YoutubeChannelIE, ϒcls), "suitable", nil), ϒurl)
						}
					}()
				})
			YoutubeChannelIE_suitable = λ.Cal(λ.ClassMethodType, YoutubeChannelIE_suitable)
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): YoutubeChannelIE__VALID_URL,
				λ.NewStr("suitable"):   YoutubeChannelIE_suitable,
			})
		}())
		YoutubeUserIE = λ.Cal(λ.TypeType, λ.NewStr("YoutubeUserIE"), λ.NewTuple(YoutubeChannelIE), func() λ.Dict {

			return λ.NewDictWithTable(map[λ.Object]λ.Object{})
		}())
		YoutubeLiveIE = λ.Cal(λ.TypeType, λ.NewStr("YoutubeLiveIE"), λ.NewTuple(YoutubeBaseInfoExtractor), func() λ.Dict {
			var (
				YoutubeLiveIE__VALID_URL λ.Object
			)
			YoutubeLiveIE__VALID_URL = λ.NewStr("(?P<base_url>https?://(?:\\w+\\.)?youtube\\.com/(?:(?:user|channel|c)/)?(?P<id>[^/]+))/live")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): YoutubeLiveIE__VALID_URL,
			})
		}())
		YoutubePlaylistsIE = λ.Cal(λ.TypeType, λ.NewStr("YoutubePlaylistsIE"), λ.NewTuple(YoutubePlaylistsBaseInfoExtractor), func() λ.Dict {
			var (
				YoutubePlaylistsIE__VALID_URL λ.Object
			)
			YoutubePlaylistsIE__VALID_URL = λ.NewStr("https?://(?:\\w+\\.)?youtube\\.com/(?:user|channel)/(?P<id>[^/]+)/playlists")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): YoutubePlaylistsIE__VALID_URL,
			})
		}())
		YoutubeSearchBaseInfoExtractor = λ.Cal(λ.TypeType, λ.NewStr("YoutubeSearchBaseInfoExtractor"), λ.NewTuple(YoutubePlaylistBaseInfoExtractor), func() λ.Dict {

			return λ.NewDictWithTable(map[λ.Object]λ.Object{})
		}())
		YoutubeSearchIE = λ.Cal(λ.TypeType, λ.NewStr("YoutubeSearchIE"), λ.NewTuple(
			SearchInfoExtractor,
			YoutubeSearchBaseInfoExtractor,
		), func() λ.Dict {
			var (
				YoutubeSearchIE_IE_NAME λ.Object
			)
			YoutubeSearchIE_IE_NAME = λ.NewStr("youtube:search")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"): YoutubeSearchIE_IE_NAME,
			})
		}())
		YoutubeSearchURLIE = λ.Cal(λ.TypeType, λ.NewStr("YoutubeSearchURLIE"), λ.NewTuple(YoutubeSearchBaseInfoExtractor), func() λ.Dict {

			return λ.NewDictWithTable(map[λ.Object]λ.Object{})
		}())
		YoutubeShowIE = λ.Cal(λ.TypeType, λ.NewStr("YoutubeShowIE"), λ.NewTuple(YoutubePlaylistsBaseInfoExtractor), func() λ.Dict {

			return λ.NewDictWithTable(map[λ.Object]λ.Object{})
		}())
		YoutubeFeedsInfoExtractor = λ.Cal(λ.TypeType, λ.NewStr("YoutubeFeedsInfoExtractor"), λ.NewTuple(YoutubeBaseInfoExtractor), func() λ.Dict {
			λ.NewStr("\n    Base class for feed extractors\n    Subclasses must define the _FEED_NAME and _PLAYLIST_TITLE properties.\n    ")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{})
		}())
		YoutubeWatchLaterIE = λ.Cal(λ.TypeType, λ.NewStr("YoutubeWatchLaterIE"), λ.NewTuple(YoutubePlaylistIE), func() λ.Dict {

			return λ.NewDictWithTable(map[λ.Object]λ.Object{})
		}())
		YoutubeFavouritesIE = λ.Cal(λ.TypeType, λ.NewStr("YoutubeFavouritesIE"), λ.NewTuple(YoutubeBaseInfoExtractor), func() λ.Dict {
			var (
				YoutubeFavouritesIE__VALID_URL λ.Object
			)
			YoutubeFavouritesIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?youtube\\.com/my_favorites|:ytfav(?:ou?rites)?")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): YoutubeFavouritesIE__VALID_URL,
			})
		}())
		YoutubeRecommendedIE = λ.Cal(λ.TypeType, λ.NewStr("YoutubeRecommendedIE"), λ.NewTuple(YoutubeFeedsInfoExtractor), func() λ.Dict {

			return λ.NewDictWithTable(map[λ.Object]λ.Object{})
		}())
		YoutubeSubscriptionsIE = λ.Cal(λ.TypeType, λ.NewStr("YoutubeSubscriptionsIE"), λ.NewTuple(YoutubeFeedsInfoExtractor), func() λ.Dict {

			return λ.NewDictWithTable(map[λ.Object]λ.Object{})
		}())
		YoutubeHistoryIE = λ.Cal(λ.TypeType, λ.NewStr("YoutubeHistoryIE"), λ.NewTuple(YoutubeFeedsInfoExtractor), func() λ.Dict {
			var (
				YoutubeHistoryIE__VALID_URL λ.Object
			)
			YoutubeHistoryIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?youtube\\.com/feed/history|:ythistory")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): YoutubeHistoryIE__VALID_URL,
			})
		}())
		YoutubeTruncatedURLIE = λ.Cal(λ.TypeType, λ.NewStr("YoutubeTruncatedURLIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {

			return λ.NewDictWithTable(map[λ.Object]λ.Object{})
		}())
		YoutubeTruncatedIDIE = λ.Cal(λ.TypeType, λ.NewStr("YoutubeTruncatedIDIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {

			return λ.NewDictWithTable(map[λ.Object]λ.Object{})
		}())
	})
}

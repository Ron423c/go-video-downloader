// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * kakao/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/kakao.py
 */

package kakao

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor      λ.Object
	KakaoIE            λ.Object
	ϒcompat_str        λ.Object
	ϒint_or_none       λ.Object
	ϒstrip_or_none     λ.Object
	ϒunified_timestamp λ.Object
	ϒupdate_url_query  λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒstrip_or_none = Ωutils.ϒstrip_or_none
		ϒunified_timestamp = Ωutils.ϒunified_timestamp
		ϒupdate_url_query = Ωutils.ϒupdate_url_query
		KakaoIE = λ.Cal(λ.TypeType, λ.NewStr("KakaoIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				KakaoIE__API_BASE_TMPL λ.Object
				KakaoIE__TESTS         λ.Object
				KakaoIE__VALID_URL     λ.Object
				KakaoIE__real_extract  λ.Object
			)
			KakaoIE__VALID_URL = λ.NewStr("https?://(?:play-)?tv\\.kakao\\.com/(?:channel/\\d+|embed/player)/cliplink/(?P<id>\\d+|[^?#&]+@my)")
			KakaoIE__API_BASE_TMPL = λ.NewStr("http://tv.kakao.com/api/v1/ft/cliplinks/%s/")
			KakaoIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://tv.kakao.com/channel/2671005/cliplink/301965083"),
					λ.NewStr("md5"): λ.NewStr("702b2fbdeb51ad82f5c904e8c0766340"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("301965083"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("乃木坂46 バナナマン 「3期生紹介コーナーが始動！顔高低差GPも！」 『乃木坂工事中』"),
						λ.NewStr("uploader_id"): λ.NewInt(2671005),
						λ.NewStr("uploader"):    λ.NewStr("그랑그랑이"),
						λ.NewStr("timestamp"):   λ.NewInt(1488160199),
						λ.NewStr("upload_date"): λ.NewStr("20170227"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://tv.kakao.com/channel/2653210/cliplink/300103180"),
					λ.NewStr("md5"): λ.NewStr("a8917742069a4dd442516b86e7d66529"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("300103180"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("description"): λ.NewStr("러블리즈 - Destiny (나의 지구) (Lovelyz - Destiny)\r\n\r\n[쇼! 음악중심] 20160611, 507회"),
						λ.NewStr("title"):       λ.NewStr("러블리즈 - Destiny (나의 지구) (Lovelyz - Destiny)"),
						λ.NewStr("uploader_id"): λ.NewInt(2653210),
						λ.NewStr("uploader"):    λ.NewStr("쇼! 음악중심"),
						λ.NewStr("timestamp"):   λ.NewInt(1485684628),
						λ.NewStr("upload_date"): λ.NewStr("20170129"),
					}),
				}),
			)
			KakaoIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒapi_base      λ.Object
						ϒclip          λ.Object
						ϒclip_link     λ.Object
						ϒdisplay_id    λ.Object
						ϒfmt           λ.Object
						ϒfmt_url       λ.Object
						ϒfmt_url_json  λ.Object
						ϒformats       λ.Object
						ϒimpress       λ.Object
						ϒplayer_header λ.Object
						ϒprofile_name  λ.Object
						ϒquery         λ.Object
						ϒself          = λargs[0]
						ϒthumb         λ.Object
						ϒthumbs        λ.Object
						ϒtitle         λ.Object
						ϒtop_thumbnail λ.Object
						ϒurl           = λargs[1]
						ϒvideo_id      λ.Object
						τmp0           λ.Object
						τmp1           λ.Object
						τmp2           λ.Object
						τmp3           λ.Object
					)
					_ = τmp3
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒdisplay_id = λ.Cal(λ.GetAttr(ϒvideo_id, "rstrip", nil), λ.NewStr("@my"))
					ϒapi_base = λ.Mod(λ.GetAttr(ϒself, "_API_BASE_TMPL", nil), ϒvideo_id)
					ϒplayer_header = λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("Referer"): λ.Cal(ϒupdate_url_query, λ.Mod(λ.NewStr("http://tv.kakao.com/embed/player/cliplink/%s"), ϒvideo_id), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("service"):  λ.NewStr("kakao_tv"),
							λ.NewStr("autoplay"): λ.NewStr("1"),
							λ.NewStr("profile"):  λ.NewStr("HIGH"),
							λ.NewStr("wmode"):    λ.NewStr("transparent"),
						})),
					})
					ϒquery = λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("player"):  λ.NewStr("monet_html5"),
						λ.NewStr("referer"): ϒurl,
						λ.NewStr("uuid"):    λ.NewStr(""),
						λ.NewStr("service"): λ.NewStr("kakao_tv"),
						λ.NewStr("section"): λ.NewStr(""),
						λ.NewStr("dteType"): λ.NewStr("PC"),
						λ.NewStr("fields"): λ.Cal(λ.GetAttr(λ.NewStr(","), "join", nil), λ.NewList(
							λ.NewStr("-*"),
							λ.NewStr("tid"),
							λ.NewStr("clipLink"),
							λ.NewStr("displayTitle"),
							λ.NewStr("clip"),
							λ.NewStr("title"),
							λ.NewStr("description"),
							λ.NewStr("channelId"),
							λ.NewStr("createTime"),
							λ.NewStr("duration"),
							λ.NewStr("playCount"),
							λ.NewStr("likeCount"),
							λ.NewStr("commentCount"),
							λ.NewStr("tagList"),
							λ.NewStr("channel"),
							λ.NewStr("name"),
							λ.NewStr("clipChapterThumbnailList"),
							λ.NewStr("thumbnailUrl"),
							λ.NewStr("timeInSec"),
							λ.NewStr("isDefault"),
							λ.NewStr("videoOutputList"),
							λ.NewStr("width"),
							λ.NewStr("height"),
							λ.NewStr("kbps"),
							λ.NewStr("profile"),
							λ.NewStr("label"),
						)),
					})
					ϒimpress = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Add(ϒapi_base, λ.NewStr("impress")),
						ϒdisplay_id,
						λ.NewStr("Downloading video info"),
					), λ.KWArgs{
						{Name: "query", Value: ϒquery},
						{Name: "headers", Value: ϒplayer_header},
					})
					ϒclip_link = λ.GetItem(ϒimpress, λ.NewStr("clipLink"))
					ϒclip = λ.GetItem(ϒclip_link, λ.NewStr("clip"))
					ϒtitle = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒclip, "get", nil), λ.NewStr("title")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒclip_link, "get", nil), λ.NewStr("displayTitle"))
						}
					}()
					λ.SetItem(ϒquery, λ.NewStr("tid"), λ.Cal(λ.GetAttr(ϒimpress, "get", nil), λ.NewStr("tid"), λ.NewStr("")))
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒclip, "get", nil), λ.NewStr("videoOutputList"), λ.NewList()))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒfmt = τmp1
						τmp2, τmp3 = func() (λexit λ.Object, λret λ.Object) {
							defer λ.CatchMulti(
								nil,
								&λ.Catcher{λ.KeyErrorType, func(λex λ.BaseException) {
									// pass
								}},
							)
							ϒprofile_name = λ.GetItem(ϒfmt, λ.NewStr("profile"))
							if λ.IsTrue(λ.Eq(ϒprofile_name, λ.NewStr("AUDIO"))) {
								λexit = λ.BlockExitContinue
								return
							}
							λ.Cal(λ.GetAttr(ϒquery, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("profile"): ϒprofile_name,
								λ.NewStr("fields"):  λ.NewStr("-*,url"),
							}))
							ϒfmt_url_json = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
								λ.Add(ϒapi_base, λ.NewStr("raw/videolocation")),
								ϒdisplay_id,
								λ.Mod(λ.NewStr("Downloading video URL for profile %s"), ϒprofile_name),
							), λ.KWArgs{
								{Name: "query", Value: ϒquery},
								{Name: "headers", Value: ϒplayer_header},
								{Name: "fatal", Value: λ.False},
							})
							if λ.IsTrue(λ.NewBool(ϒfmt_url_json == λ.None)) {
								λexit = λ.BlockExitContinue
								return
							}
							ϒfmt_url = λ.GetItem(ϒfmt_url_json, λ.NewStr("url"))
							λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("url"):         ϒfmt_url,
								λ.NewStr("format_id"):   ϒprofile_name,
								λ.NewStr("width"):       λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒfmt, "get", nil), λ.NewStr("width"))),
								λ.NewStr("height"):      λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒfmt, "get", nil), λ.NewStr("height"))),
								λ.NewStr("format_note"): λ.Cal(λ.GetAttr(ϒfmt, "get", nil), λ.NewStr("label")),
								λ.NewStr("filesize"):    λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒfmt, "get", nil), λ.NewStr("filesize"))),
								λ.NewStr("tbr"):         λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒfmt, "get", nil), λ.NewStr("kbps"))),
							}))
							return λ.BlockExitNormally, nil
						}()
						if τmp2 == λ.BlockExitContinue {
							continue
						}
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒthumbs = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒclip, "get", nil), λ.NewStr("clipChapterThumbnailList"), λ.NewList()))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒthumb = τmp1
						λ.Cal(λ.GetAttr(ϒthumbs, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"): λ.Cal(λ.GetAttr(ϒthumb, "get", nil), λ.NewStr("thumbnailUrl")),
							λ.NewStr("id"):  λ.Cal(ϒcompat_str, λ.Cal(λ.GetAttr(ϒthumb, "get", nil), λ.NewStr("timeInSec"))),
							λ.NewStr("preference"): func() λ.Object {
								if λ.IsTrue(λ.Cal(λ.GetAttr(ϒthumb, "get", nil), λ.NewStr("isDefault"))) {
									return λ.Neg(λ.NewInt(1))
								} else {
									return λ.NewInt(0)
								}
							}(),
						}))
					}
					ϒtop_thumbnail = λ.Cal(λ.GetAttr(ϒclip, "get", nil), λ.NewStr("thumbnailUrl"))
					if λ.IsTrue(ϒtop_thumbnail) {
						λ.Cal(λ.GetAttr(ϒthumbs, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"):        ϒtop_thumbnail,
							λ.NewStr("preference"): λ.NewInt(10),
						}))
					}
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):            ϒdisplay_id,
						λ.NewStr("title"):         ϒtitle,
						λ.NewStr("description"):   λ.Cal(ϒstrip_or_none, λ.Cal(λ.GetAttr(ϒclip, "get", nil), λ.NewStr("description"))),
						λ.NewStr("uploader"):      λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒclip_link, "get", nil), λ.NewStr("channel"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("name")),
						λ.NewStr("uploader_id"):   λ.Cal(λ.GetAttr(ϒclip_link, "get", nil), λ.NewStr("channelId")),
						λ.NewStr("thumbnails"):    ϒthumbs,
						λ.NewStr("timestamp"):     λ.Cal(ϒunified_timestamp, λ.Cal(λ.GetAttr(ϒclip_link, "get", nil), λ.NewStr("createTime"))),
						λ.NewStr("duration"):      λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒclip, "get", nil), λ.NewStr("duration"))),
						λ.NewStr("view_count"):    λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒclip, "get", nil), λ.NewStr("playCount"))),
						λ.NewStr("like_count"):    λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒclip, "get", nil), λ.NewStr("likeCount"))),
						λ.NewStr("comment_count"): λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒclip, "get", nil), λ.NewStr("commentCount"))),
						λ.NewStr("formats"):       ϒformats,
						λ.NewStr("tags"):          λ.Cal(λ.GetAttr(ϒclip, "get", nil), λ.NewStr("tagList")),
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_API_BASE_TMPL"): KakaoIE__API_BASE_TMPL,
				λ.NewStr("_TESTS"):         KakaoIE__TESTS,
				λ.NewStr("_VALID_URL"):     KakaoIE__VALID_URL,
				λ.NewStr("_real_extract"):  KakaoIE__real_extract,
			})
		}())
	})
}

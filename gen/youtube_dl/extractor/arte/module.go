// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * arte/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/arte.py
 */

package arte

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ArteTVBaseIE     λ.Object
	ArteTVEmbedIE    λ.Object
	ArteTVPlaylistIE λ.Object
	ArteTVPlus7IE    λ.Object
	ExtractorError   λ.Object
	InfoExtractor    λ.Object
	ϒcompat_str      λ.Object
	ϒint_or_none     λ.Object
	ϒqualities       λ.Object
	ϒtry_get         λ.Object
	ϒunified_strdate λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒqualities = Ωutils.ϒqualities
		ϒtry_get = Ωutils.ϒtry_get
		ϒunified_strdate = Ωutils.ϒunified_strdate
		ArteTVBaseIE = λ.Cal(λ.TypeType, λ.StrLiteral("ArteTVBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ArteTVBaseIE__extract_from_json_url λ.Object
			)
			ArteTVBaseIE__extract_from_json_url = λ.NewFunction("_extract_from_json_url",
				[]λ.Param{
					{Name: "self"},
					{Name: "json_url"},
					{Name: "video_id"},
					{Name: "lang"},
					{Name: "title", Def: λ.None},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						LANGS            λ.Object
						PREFERENCES      λ.Object
						ϒerror           λ.Object
						ϒf               λ.Object
						ϒformat          λ.Object
						ϒformat_dict     λ.Object
						ϒformat_id       λ.Object
						ϒformats         λ.Object
						ϒinfo            λ.Object
						ϒinfo_dict       λ.Object
						ϒjson_url        = λargs[1]
						ϒl               λ.Object
						ϒlang            = λargs[3]
						ϒlang_pref       λ.Object
						ϒlangcode        λ.Object
						ϒp               λ.Object
						ϒplayer_info     λ.Object
						ϒpref            λ.Object
						ϒqfunc           λ.Object
						ϒself            = λargs[0]
						ϒsubtitle        λ.Object
						ϒtitle           = λargs[4]
						ϒupload_date_str λ.Object
						ϒversionCode     λ.Object
						ϒvideo_id        = λargs[2]
						ϒvsr             λ.Object
						τmp0             λ.Object
						τmp1             λ.Object
						τmp2             λ.Object
						τmp3             λ.Object
						τmp4             λ.Object
					)
					ϒinfo = λ.Calm(ϒself, "_download_json", ϒjson_url, ϒvideo_id)
					ϒplayer_info = λ.GetItem(ϒinfo, λ.StrLiteral("videoJsonPlayer"))
					ϒvsr = λ.Cal(ϒtry_get, ϒplayer_info, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(ϒx, λ.StrLiteral("VSR"))
						}), λ.DictType)
					if !λ.IsTrue(ϒvsr) {
						ϒerror = λ.None
						if λ.IsTrue(λ.Eq(λ.Cal(ϒtry_get, ϒplayer_info, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("custom_msg")), λ.StrLiteral("type"))
							})), λ.StrLiteral("error"))) {
							ϒerror = λ.Cal(ϒtry_get, ϒplayer_info, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("custom_msg")), λ.StrLiteral("msg"))
								}), ϒcompat_str)
						}
						if !λ.IsTrue(ϒerror) {
							ϒerror = func() λ.Object {
								if λv := λ.Mod(λ.StrLiteral("Video %s is not available"), λ.Calm(ϒplayer_info, "get", λ.StrLiteral("VID"))); λ.IsTrue(λv) {
									return λv
								} else {
									return ϒvideo_id
								}
							}()
						}
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(ϒerror), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒupload_date_str = λ.Calm(ϒplayer_info, "get", λ.StrLiteral("shootingDate"))
					if !λ.IsTrue(ϒupload_date_str) {
						ϒupload_date_str = λ.GetItem(λ.Calm(func() λ.Object {
							if λv := λ.Calm(ϒplayer_info, "get", λ.StrLiteral("VRA")); λ.IsTrue(λv) {
								return λv
							} else if λv := λ.Calm(ϒplayer_info, "get", λ.StrLiteral("VDA")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.StrLiteral("")
							}
						}(), "split", λ.StrLiteral(" ")), λ.IntLiteral(0))
					}
					ϒtitle = λ.Calm(func() λ.Object {
						if λv := λ.Calm(ϒplayer_info, "get", λ.StrLiteral("VTI")); λ.IsTrue(λv) {
							return λv
						} else if λv := ϒtitle; λ.IsTrue(λv) {
							return λv
						} else {
							return λ.GetItem(ϒplayer_info, λ.StrLiteral("VID"))
						}
					}(), "strip")
					ϒsubtitle = λ.Calm(λ.Calm(ϒplayer_info, "get", λ.StrLiteral("VSU"), λ.StrLiteral("")), "strip")
					if λ.IsTrue(ϒsubtitle) {
						τmp0 = λ.IAdd(ϒtitle, λ.Mod(λ.StrLiteral(" - %s"), ϒsubtitle))
						ϒtitle = τmp0
					}
					ϒinfo_dict = λ.DictLiteral(map[string]λ.Object{
						"id":          λ.GetItem(ϒplayer_info, λ.StrLiteral("VID")),
						"title":       ϒtitle,
						"description": λ.Calm(ϒplayer_info, "get", λ.StrLiteral("VDE")),
						"upload_date": λ.Cal(ϒunified_strdate, ϒupload_date_str),
						"thumbnail": func() λ.Object {
							if λv := λ.Calm(ϒplayer_info, "get", λ.StrLiteral("programImage")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Calm(λ.Calm(ϒplayer_info, "get", λ.StrLiteral("VTU"), λ.DictLiteral(map[λ.Object]λ.Object{})), "get", λ.StrLiteral("IUR"))
							}
						}(),
					})
					ϒqfunc = λ.Cal(ϒqualities, λ.NewList(
						λ.StrLiteral("MQ"),
						λ.StrLiteral("HQ"),
						λ.StrLiteral("EQ"),
						λ.StrLiteral("SQ"),
					))
					LANGS = λ.DictLiteral(map[string]string{
						"fr": "F",
						"de": "A",
						"en": "E[ANG]",
						"es": "E[ESP]",
						"it": "E[ITA]",
						"pl": "E[POL]",
					})
					ϒlangcode = λ.Calm(LANGS, "get", ϒlang, ϒlang)
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒvsr, "items"))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒformat_id = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒformat_dict = λ.GetItem(τmp2, λ.IntLiteral(1))
						ϒf = λ.Cal(λ.DictType, ϒformat_dict)
						ϒversionCode = λ.Calm(ϒf, "get", λ.StrLiteral("versionCode"))
						ϒl = λ.Cal(Ωre.ϒescape, ϒlangcode)
						PREFERENCES = λ.NewTuple(
							λ.Calm(λ.StrLiteral("VO{0}$"), "format", ϒl),
							λ.Calm(λ.StrLiteral("VO{0}-ST{0}$"), "format", ϒl),
							λ.Calm(λ.StrLiteral("VO{0}-STM{0}$"), "format", ϒl),
							λ.Calm(λ.StrLiteral("V{0}$"), "format", ϒl),
							λ.Calm(λ.StrLiteral("V{0}-ST{0}$"), "format", ϒl),
							λ.Calm(λ.StrLiteral("V{0}-STM{0}$"), "format", ϒl),
							λ.Calm(λ.StrLiteral("VO{0}-ST(?!{0}).+?$"), "format", ϒl),
							λ.Calm(λ.StrLiteral("VO{0}-STM(?!{0}).+?$"), "format", ϒl),
							λ.Calm(λ.StrLiteral("VO(?:(?!{0}).+?)?-ST{0}$"), "format", ϒl),
							λ.Calm(λ.StrLiteral("VO(?:(?!{0}).+?)?-STM{0}$"), "format", ϒl),
							λ.Calm(λ.StrLiteral("VO(?:(?!{0}))?$"), "format", ϒl),
							λ.Calm(λ.StrLiteral("VO(?:(?!{0}).+?)?-ST(?!{0}).+?$"), "format", ϒl),
							λ.Calm(λ.StrLiteral("VO(?:(?!{0}).+?)?-STM(?!{0}).+?$"), "format", ϒl),
						)
						τmp2 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.EnumerateIteratorType, PREFERENCES))
						for {
							if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
								break
							}
							τmp4 = τmp3
							ϒpref = λ.GetItem(τmp4, λ.IntLiteral(0))
							ϒp = λ.GetItem(τmp4, λ.IntLiteral(1))
							if λ.IsTrue(λ.Cal(Ωre.ϒmatch, ϒp, ϒversionCode)) {
								ϒlang_pref = λ.Sub(λ.Cal(λ.BuiltinLen, PREFERENCES), ϒpref)
								break
							}
						}
						if τmp3 == λ.AfterLast {
							ϒlang_pref = λ.Neg(λ.IntLiteral(1))
						}
						ϒformat = λ.DictLiteral(map[string]λ.Object{
							"format_id": ϒformat_id,
							"preference": func() λ.Object {
								if λ.IsTrue(λ.Eq(λ.Calm(ϒf, "get", λ.StrLiteral("videoFormat")), λ.StrLiteral("M3U8"))) {
									return λ.Neg(λ.IntLiteral(10))
								} else {
									return λ.None
								}
							}(),
							"language_preference": ϒlang_pref,
							"format_note": λ.Mod(λ.StrLiteral("%s, %s"), λ.NewTuple(
								λ.Calm(ϒf, "get", λ.StrLiteral("versionCode")),
								λ.Calm(ϒf, "get", λ.StrLiteral("versionLibelle")),
							)),
							"width":   λ.Cal(ϒint_or_none, λ.Calm(ϒf, "get", λ.StrLiteral("width"))),
							"height":  λ.Cal(ϒint_or_none, λ.Calm(ϒf, "get", λ.StrLiteral("height"))),
							"tbr":     λ.Cal(ϒint_or_none, λ.Calm(ϒf, "get", λ.StrLiteral("bitrate"))),
							"quality": λ.Cal(ϒqfunc, λ.Calm(ϒf, "get", λ.StrLiteral("quality"))),
						})
						if λ.IsTrue(λ.Eq(λ.Calm(ϒf, "get", λ.StrLiteral("mediaType")), λ.StrLiteral("rtmp"))) {
							λ.SetItem(ϒformat, λ.StrLiteral("url"), λ.GetItem(ϒf, λ.StrLiteral("streamer")))
							λ.SetItem(ϒformat, λ.StrLiteral("play_path"), λ.Add(λ.StrLiteral("mp4:"), λ.GetItem(ϒf, λ.StrLiteral("url"))))
							λ.SetItem(ϒformat, λ.StrLiteral("ext"), λ.StrLiteral("flv"))
						} else {
							λ.SetItem(ϒformat, λ.StrLiteral("url"), λ.GetItem(ϒf, λ.StrLiteral("url")))
						}
						λ.Calm(ϒformats, "append", ϒformat)
					}
					λ.Calm(ϒself, "_check_formats", ϒformats, ϒvideo_id)
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					λ.SetItem(ϒinfo_dict, λ.StrLiteral("formats"), ϒformats)
					return ϒinfo_dict
				})
			return λ.DictLiteral(map[string]λ.Object{
				"_extract_from_json_url": ArteTVBaseIE__extract_from_json_url,
			})
		}())
		ArteTVPlus7IE = λ.Cal(λ.TypeType, λ.StrLiteral("ArteTVPlus7IE"), λ.NewTuple(ArteTVBaseIE), func() λ.Dict {
			var (
				ArteTVPlus7IE_IE_NAME       λ.Object
				ArteTVPlus7IE__VALID_URL    λ.Object
				ArteTVPlus7IE__real_extract λ.Object
			)
			ArteTVPlus7IE_IE_NAME = λ.StrLiteral("arte.tv:+7")
			ArteTVPlus7IE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?arte\\.tv/(?P<lang>fr|de|en|es|it|pl)/videos/(?P<id>\\d{6}-\\d{3}-[AF])")
			ArteTVPlus7IE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒlang     λ.Object
						ϒself     = λargs[0]
						ϒurl      = λargs[1]
						ϒvideo_id λ.Object
						τmp0      λ.Object
					)
					τmp0 = λ.Calm(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups")
					ϒlang = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒvideo_id = λ.GetItem(τmp0, λ.IntLiteral(1))
					return λ.Calm(ϒself, "_extract_from_json_url", λ.Mod(λ.StrLiteral("https://api.arte.tv/api/player/v1/config/%s/%s"), λ.NewTuple(
						ϒlang,
						ϒvideo_id,
					)), ϒvideo_id, ϒlang)
				})
			return λ.DictLiteral(map[string]λ.Object{
				"IE_NAME":       ArteTVPlus7IE_IE_NAME,
				"_VALID_URL":    ArteTVPlus7IE__VALID_URL,
				"_real_extract": ArteTVPlus7IE__real_extract,
			})
		}())
		ArteTVEmbedIE = λ.Cal(λ.TypeType, λ.StrLiteral("ArteTVEmbedIE"), λ.NewTuple(ArteTVPlus7IE), func() λ.Dict {
			var (
				ArteTVEmbedIE__VALID_URL λ.Object
			)
			ArteTVEmbedIE__VALID_URL = λ.StrLiteral("(?x)\n        https://www\\.arte\\.tv\n        /player/v3/index\\.php\\?json_url=\n        (?P<json_url>\n            https?://api\\.arte\\.tv/api/player/v1/config/\n            (?P<lang>[^/]+)/(?P<id>\\d{6}-\\d{3}-[AF])\n        )\n    ")
			return λ.DictLiteral(map[string]λ.Object{
				"_VALID_URL": ArteTVEmbedIE__VALID_URL,
			})
		}())
		ArteTVPlaylistIE = λ.Cal(λ.TypeType, λ.StrLiteral("ArteTVPlaylistIE"), λ.NewTuple(ArteTVBaseIE), func() λ.Dict {
			var (
				ArteTVPlaylistIE__VALID_URL λ.Object
			)
			ArteTVPlaylistIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?arte\\.tv/(?P<lang>fr|de|en|es|it|pl)/videos/(?P<id>RC-\\d{6})")
			return λ.DictLiteral(map[string]λ.Object{
				"_VALID_URL": ArteTVPlaylistIE__VALID_URL,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * arte/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/arte.py
 */

package arte

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ArteTVBaseIE     λ.Object
	ArteTVEmbedIE    λ.Object
	ArteTVPlaylistIE λ.Object
	ArteTVPlus7IE    λ.Object
	ExtractorError   λ.Object
	InfoExtractor    λ.Object
	ϒcompat_str      λ.Object
	ϒint_or_none     λ.Object
	ϒqualities       λ.Object
	ϒtry_get         λ.Object
	ϒunified_strdate λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒqualities = Ωutils.ϒqualities
		ϒtry_get = Ωutils.ϒtry_get
		ϒunified_strdate = Ωutils.ϒunified_strdate
		ArteTVBaseIE = λ.Cal(λ.TypeType, λ.NewStr("ArteTVBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ArteTVBaseIE__extract_from_json_url λ.Object
			)
			ArteTVBaseIE__extract_from_json_url = λ.NewFunction("_extract_from_json_url",
				[]λ.Param{
					{Name: "self"},
					{Name: "json_url"},
					{Name: "video_id"},
					{Name: "lang"},
					{Name: "title", Def: λ.None},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						LANGS            λ.Object
						PREFERENCES      λ.Object
						ϒerror           λ.Object
						ϒf               λ.Object
						ϒformat          λ.Object
						ϒformat_dict     λ.Object
						ϒformat_id       λ.Object
						ϒformats         λ.Object
						ϒinfo            λ.Object
						ϒinfo_dict       λ.Object
						ϒjson_url        = λargs[1]
						ϒl               λ.Object
						ϒlang            = λargs[3]
						ϒlang_pref       λ.Object
						ϒlangcode        λ.Object
						ϒp               λ.Object
						ϒplayer_info     λ.Object
						ϒpref            λ.Object
						ϒqfunc           λ.Object
						ϒself            = λargs[0]
						ϒsubtitle        λ.Object
						ϒtitle           = λargs[4]
						ϒupload_date_str λ.Object
						ϒversionCode     λ.Object
						ϒvideo_id        = λargs[2]
						ϒvsr             λ.Object
						τmp0             λ.Object
						τmp1             λ.Object
						τmp2             λ.Object
						τmp3             λ.Object
						τmp4             λ.Object
					)
					ϒinfo = λ.Cal(λ.GetAttr(ϒself, "_download_json", nil), ϒjson_url, ϒvideo_id)
					ϒplayer_info = λ.GetItem(ϒinfo, λ.NewStr("videoJsonPlayer"))
					ϒvsr = λ.Cal(ϒtry_get, ϒplayer_info, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(ϒx, λ.NewStr("VSR"))
						}), λ.DictType)
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒvsr))) {
						ϒerror = λ.None
						if λ.IsTrue(λ.Eq(λ.Cal(ϒtry_get, ϒplayer_info, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("custom_msg")), λ.NewStr("type"))
							})), λ.NewStr("error"))) {
							ϒerror = λ.Cal(ϒtry_get, ϒplayer_info, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("custom_msg")), λ.NewStr("msg"))
								}), ϒcompat_str)
						}
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒerror))) {
							ϒerror = func() λ.Object {
								if λv := λ.Mod(λ.NewStr("Video %s is not available"), λ.Cal(λ.GetAttr(ϒplayer_info, "get", nil), λ.NewStr("VID"))); λ.IsTrue(λv) {
									return λv
								} else {
									return ϒvideo_id
								}
							}()
						}
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(ϒerror), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒupload_date_str = λ.Cal(λ.GetAttr(ϒplayer_info, "get", nil), λ.NewStr("shootingDate"))
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒupload_date_str))) {
						ϒupload_date_str = λ.GetItem(λ.Cal(λ.GetAttr(func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒplayer_info, "get", nil), λ.NewStr("VRA")); λ.IsTrue(λv) {
								return λv
							} else if λv := λ.Cal(λ.GetAttr(ϒplayer_info, "get", nil), λ.NewStr("VDA")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewStr("")
							}
						}(), "split", nil), λ.NewStr(" ")), λ.NewInt(0))
					}
					ϒtitle = λ.Cal(λ.GetAttr(func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒplayer_info, "get", nil), λ.NewStr("VTI")); λ.IsTrue(λv) {
							return λv
						} else if λv := ϒtitle; λ.IsTrue(λv) {
							return λv
						} else {
							return λ.GetItem(ϒplayer_info, λ.NewStr("VID"))
						}
					}(), "strip", nil))
					ϒsubtitle = λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒplayer_info, "get", nil), λ.NewStr("VSU"), λ.NewStr("")), "strip", nil))
					if λ.IsTrue(ϒsubtitle) {
						τmp0 = λ.IAdd(ϒtitle, λ.Mod(λ.NewStr(" - %s"), ϒsubtitle))
						ϒtitle = τmp0
					}
					ϒinfo_dict = λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.GetItem(ϒplayer_info, λ.NewStr("VID")),
						λ.NewStr("title"):       ϒtitle,
						λ.NewStr("description"): λ.Cal(λ.GetAttr(ϒplayer_info, "get", nil), λ.NewStr("VDE")),
						λ.NewStr("upload_date"): λ.Cal(ϒunified_strdate, ϒupload_date_str),
						λ.NewStr("thumbnail"): func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒplayer_info, "get", nil), λ.NewStr("programImage")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒplayer_info, "get", nil), λ.NewStr("VTU"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("IUR"))
							}
						}(),
					})
					ϒqfunc = λ.Cal(ϒqualities, λ.NewList(
						λ.NewStr("MQ"),
						λ.NewStr("HQ"),
						λ.NewStr("EQ"),
						λ.NewStr("SQ"),
					))
					LANGS = λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("fr"): λ.NewStr("F"),
						λ.NewStr("de"): λ.NewStr("A"),
						λ.NewStr("en"): λ.NewStr("E[ANG]"),
						λ.NewStr("es"): λ.NewStr("E[ESP]"),
						λ.NewStr("it"): λ.NewStr("E[ITA]"),
						λ.NewStr("pl"): λ.NewStr("E[POL]"),
					})
					ϒlangcode = λ.Cal(λ.GetAttr(LANGS, "get", nil), ϒlang, ϒlang)
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒvsr, "items", nil)))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒformat_id = λ.GetItem(τmp2, λ.NewInt(0))
						ϒformat_dict = λ.GetItem(τmp2, λ.NewInt(1))
						ϒf = λ.Cal(λ.DictType, ϒformat_dict)
						ϒversionCode = λ.Cal(λ.GetAttr(ϒf, "get", nil), λ.NewStr("versionCode"))
						ϒl = λ.Cal(Ωre.ϒescape, ϒlangcode)
						PREFERENCES = λ.NewTuple(
							λ.Cal(λ.GetAttr(λ.NewStr("VO{0}$"), "format", nil), ϒl),
							λ.Cal(λ.GetAttr(λ.NewStr("VO{0}-ST{0}$"), "format", nil), ϒl),
							λ.Cal(λ.GetAttr(λ.NewStr("VO{0}-STM{0}$"), "format", nil), ϒl),
							λ.Cal(λ.GetAttr(λ.NewStr("V{0}$"), "format", nil), ϒl),
							λ.Cal(λ.GetAttr(λ.NewStr("V{0}-ST{0}$"), "format", nil), ϒl),
							λ.Cal(λ.GetAttr(λ.NewStr("V{0}-STM{0}$"), "format", nil), ϒl),
							λ.Cal(λ.GetAttr(λ.NewStr("VO{0}-ST(?!{0}).+?$"), "format", nil), ϒl),
							λ.Cal(λ.GetAttr(λ.NewStr("VO{0}-STM(?!{0}).+?$"), "format", nil), ϒl),
							λ.Cal(λ.GetAttr(λ.NewStr("VO(?:(?!{0}).+?)?-ST{0}$"), "format", nil), ϒl),
							λ.Cal(λ.GetAttr(λ.NewStr("VO(?:(?!{0}).+?)?-STM{0}$"), "format", nil), ϒl),
							λ.Cal(λ.GetAttr(λ.NewStr("VO(?:(?!{0}))?$"), "format", nil), ϒl),
							λ.Cal(λ.GetAttr(λ.NewStr("VO(?:(?!{0}).+?)?-ST(?!{0}).+?$"), "format", nil), ϒl),
							λ.Cal(λ.GetAttr(λ.NewStr("VO(?:(?!{0}).+?)?-STM(?!{0}).+?$"), "format", nil), ϒl),
						)
						τmp2 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.EnumerateIteratorType, PREFERENCES))
						for {
							if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
								break
							}
							τmp4 = τmp3
							ϒpref = λ.GetItem(τmp4, λ.NewInt(0))
							ϒp = λ.GetItem(τmp4, λ.NewInt(1))
							if λ.IsTrue(λ.Cal(Ωre.ϒmatch, ϒp, ϒversionCode)) {
								ϒlang_pref = λ.Sub(λ.Cal(λ.BuiltinLen, PREFERENCES), ϒpref)
								break
							}
						}
						if τmp3 == λ.AfterLast {
							ϒlang_pref = λ.Neg(λ.NewInt(1))
						}
						ϒformat = λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("format_id"): ϒformat_id,
							λ.NewStr("preference"): func() λ.Object {
								if λ.IsTrue(λ.Eq(λ.Cal(λ.GetAttr(ϒf, "get", nil), λ.NewStr("videoFormat")), λ.NewStr("M3U8"))) {
									return λ.Neg(λ.NewInt(10))
								} else {
									return λ.None
								}
							}(),
							λ.NewStr("language_preference"): ϒlang_pref,
							λ.NewStr("format_note"): λ.Mod(λ.NewStr("%s, %s"), λ.NewTuple(
								λ.Cal(λ.GetAttr(ϒf, "get", nil), λ.NewStr("versionCode")),
								λ.Cal(λ.GetAttr(ϒf, "get", nil), λ.NewStr("versionLibelle")),
							)),
							λ.NewStr("width"):   λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒf, "get", nil), λ.NewStr("width"))),
							λ.NewStr("height"):  λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒf, "get", nil), λ.NewStr("height"))),
							λ.NewStr("tbr"):     λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒf, "get", nil), λ.NewStr("bitrate"))),
							λ.NewStr("quality"): λ.Cal(ϒqfunc, λ.Cal(λ.GetAttr(ϒf, "get", nil), λ.NewStr("quality"))),
						})
						if λ.IsTrue(λ.Eq(λ.Cal(λ.GetAttr(ϒf, "get", nil), λ.NewStr("mediaType")), λ.NewStr("rtmp"))) {
							λ.SetItem(ϒformat, λ.NewStr("url"), λ.GetItem(ϒf, λ.NewStr("streamer")))
							λ.SetItem(ϒformat, λ.NewStr("play_path"), λ.Add(λ.NewStr("mp4:"), λ.GetItem(ϒf, λ.NewStr("url"))))
							λ.SetItem(ϒformat, λ.NewStr("ext"), λ.NewStr("flv"))
						} else {
							λ.SetItem(ϒformat, λ.NewStr("url"), λ.GetItem(ϒf, λ.NewStr("url")))
						}
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), ϒformat)
					}
					λ.Cal(λ.GetAttr(ϒself, "_check_formats", nil), ϒformats, ϒvideo_id)
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					λ.SetItem(ϒinfo_dict, λ.NewStr("formats"), ϒformats)
					return ϒinfo_dict
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_extract_from_json_url"): ArteTVBaseIE__extract_from_json_url,
			})
		}())
		ArteTVPlus7IE = λ.Cal(λ.TypeType, λ.NewStr("ArteTVPlus7IE"), λ.NewTuple(ArteTVBaseIE), func() λ.Dict {
			var (
				ArteTVPlus7IE_IE_NAME       λ.Object
				ArteTVPlus7IE__VALID_URL    λ.Object
				ArteTVPlus7IE__real_extract λ.Object
			)
			ArteTVPlus7IE_IE_NAME = λ.NewStr("arte.tv:+7")
			ArteTVPlus7IE__VALID_URL = λ.NewStr("https?://(?:www\\.)?arte\\.tv/(?P<lang>fr|de|en|es|it|pl)/videos/(?P<id>\\d{6}-\\d{3}-[AF])")
			ArteTVPlus7IE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒlang     λ.Object
						ϒself     = λargs[0]
						ϒurl      = λargs[1]
						ϒvideo_id λ.Object
						τmp0      λ.Object
					)
					τmp0 = λ.Cal(λ.GetAttr(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups", nil))
					ϒlang = λ.GetItem(τmp0, λ.NewInt(0))
					ϒvideo_id = λ.GetItem(τmp0, λ.NewInt(1))
					return λ.Cal(λ.GetAttr(ϒself, "_extract_from_json_url", nil), λ.Mod(λ.NewStr("https://api.arte.tv/api/player/v1/config/%s/%s"), λ.NewTuple(
						ϒlang,
						ϒvideo_id,
					)), ϒvideo_id, ϒlang)
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):       ArteTVPlus7IE_IE_NAME,
				λ.NewStr("_VALID_URL"):    ArteTVPlus7IE__VALID_URL,
				λ.NewStr("_real_extract"): ArteTVPlus7IE__real_extract,
			})
		}())
		ArteTVEmbedIE = λ.Cal(λ.TypeType, λ.NewStr("ArteTVEmbedIE"), λ.NewTuple(ArteTVPlus7IE), func() λ.Dict {
			var (
				ArteTVEmbedIE__VALID_URL λ.Object
			)
			ArteTVEmbedIE__VALID_URL = λ.NewStr("(?x)\n        https://www\\.arte\\.tv\n        /player/v3/index\\.php\\?json_url=\n        (?P<json_url>\n            https?://api\\.arte\\.tv/api/player/v1/config/\n            (?P<lang>[^/]+)/(?P<id>\\d{6}-\\d{3}-[AF])\n        )\n    ")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): ArteTVEmbedIE__VALID_URL,
			})
		}())
		ArteTVPlaylistIE = λ.Cal(λ.TypeType, λ.NewStr("ArteTVPlaylistIE"), λ.NewTuple(ArteTVBaseIE), func() λ.Dict {
			var (
				ArteTVPlaylistIE__VALID_URL λ.Object
			)
			ArteTVPlaylistIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?arte\\.tv/(?P<lang>fr|de|en|es|it|pl)/videos/(?P<id>RC-\\d{6})")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): ArteTVPlaylistIE__VALID_URL,
			})
		}())
	})
}

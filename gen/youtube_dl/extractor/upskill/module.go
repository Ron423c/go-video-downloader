// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * upskill/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/upskill.py
 */

package upskill

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωwistia "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/wistia"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError        λ.Object
	InfoExtractor         λ.Object
	UpskillBaseIE         λ.Object
	UpskillCourseIE       λ.Object
	UpskillIE             λ.Object
	WistiaIE              λ.Object
	ϒclean_html           λ.Object
	ϒcompat_str           λ.Object
	ϒget_element_by_class λ.Object
	ϒurlencode_postdata   λ.Object
	ϒurljoin              λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		WistiaIE = Ωwistia.WistiaIE
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒclean_html = Ωutils.ϒclean_html
		ExtractorError = Ωutils.ExtractorError
		ϒget_element_by_class = Ωutils.ϒget_element_by_class
		ϒurlencode_postdata = Ωutils.ϒurlencode_postdata
		ϒurljoin = Ωutils.ϒurljoin
		UpskillBaseIE = λ.Cal(λ.TypeType, λ.NewStr("UpskillBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				UpskillBaseIE__NETRC_MACHINE   λ.Object
				UpskillBaseIE__login           λ.Object
				UpskillBaseIE__real_initialize λ.Object
			)
			UpskillBaseIE__NETRC_MACHINE = λ.NewStr("upskill")
			UpskillBaseIE__real_initialize = λ.NewFunction("_real_initialize",
				[]λ.Param{
					{Name: "self"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒself = λargs[0]
					)
					λ.Cal(λ.GetAttr(ϒself, "_login", nil))
					return λ.None
				})
			UpskillBaseIE__login = λ.NewFunction("_login",
				[]λ.Param{
					{Name: "self"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒlogin_form λ.Object
						ϒlogin_page λ.Object
						ϒlogin_url  λ.Object
						ϒmessage    λ.Object
						ϒpassword   λ.Object
						ϒpost_url   λ.Object
						ϒresponse   λ.Object
						ϒself       = λargs[0]
						ϒurlh       λ.Object
						ϒusername   λ.Object
						τmp0        λ.Object
					)
					τmp0 = λ.Cal(λ.GetAttr(ϒself, "_get_login_info", nil))
					ϒusername = λ.GetItem(τmp0, λ.NewInt(0))
					ϒpassword = λ.GetItem(τmp0, λ.NewInt(1))
					if λ.IsTrue(λ.NewBool(ϒusername == λ.None)) {
						return λ.None
					}
					τmp0 = λ.Cal(λ.GetAttr(ϒself, "_download_webpage_handle", nil), λ.GetAttr(ϒself, "_LOGIN_URL", nil), λ.None, λ.NewStr("Downloading login page"))
					ϒlogin_page = λ.GetItem(τmp0, λ.NewInt(0))
					ϒurlh = λ.GetItem(τmp0, λ.NewInt(1))
					ϒlogin_url = λ.Cal(ϒcompat_str, λ.Cal(λ.GetAttr(ϒurlh, "geturl", nil)))
					ϒlogin_form = λ.Cal(λ.GetAttr(ϒself, "_hidden_inputs", nil), ϒlogin_page)
					λ.Cal(λ.GetAttr(ϒlogin_form, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("user[email]"):    ϒusername,
						λ.NewStr("user[password]"): ϒpassword,
					}))
					ϒpost_url = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("<form[^>]+action=([\"\\'])(?P<url>(?:(?!\\1).)+)\\1"),
						ϒlogin_page,
						λ.NewStr("post url"),
					), λ.KWArgs{
						{Name: "default", Value: ϒlogin_url},
						{Name: "group", Value: λ.NewStr("url")},
					})
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.Cal(λ.GetAttr(ϒpost_url, "startswith", nil), λ.NewStr("http"))))) {
						ϒpost_url = λ.Cal(ϒurljoin, ϒlogin_url, ϒpost_url)
					}
					ϒresponse = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
						ϒpost_url,
						λ.None,
						λ.NewStr("Logging in"),
					), λ.KWArgs{
						{Name: "data", Value: λ.Cal(ϒurlencode_postdata, ϒlogin_form)},
						{Name: "headers", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("Content-Type"): λ.NewStr("application/x-www-form-urlencoded"),
							λ.NewStr("Referer"):      ϒlogin_url,
						})},
					})
					if λ.IsTrue(λ.Cal(λ.BuiltinAny, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgen λ.Generator) λ.Object {
								var (
									ϒp   λ.Object
									τmp0 λ.Object
									τmp1 λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
									λ.NewStr("class=[\"\\']user-signout"),
									λ.NewStr("<a[^>]+\\bhref=[\"\\']/sign_out"),
									λ.NewStr(">\\s*Log out\\s*<"),
								))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒp = τmp1
									λgen.Yield(λ.Cal(Ωre.ϒsearch, ϒp, ϒresponse))
								}
								return λ.None
							})
						})))) {
						return λ.None
					}
					ϒmessage = λ.Cal(ϒget_element_by_class, λ.NewStr("alert"), ϒresponse)
					if λ.IsTrue(λ.NewBool(ϒmessage != λ.None)) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.NewStr("Unable to login: %s"), λ.Cal(ϒclean_html, ϒmessage))), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					panic(λ.Raise(λ.Cal(ExtractorError, λ.NewStr("Unable to log in"))))
					return λ.None
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_NETRC_MACHINE"):   UpskillBaseIE__NETRC_MACHINE,
				λ.NewStr("_login"):           UpskillBaseIE__login,
				λ.NewStr("_real_initialize"): UpskillBaseIE__real_initialize,
			})
		}())
		UpskillIE = λ.Cal(λ.TypeType, λ.NewStr("UpskillIE"), λ.NewTuple(UpskillBaseIE), func() λ.Dict {
			var (
				UpskillIE__TESTS        λ.Object
				UpskillIE__VALID_URL    λ.Object
				UpskillIE__real_extract λ.Object
			)
			UpskillIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?upskillcourses\\.com/courses/[^/]+/lectures/(?P<id>\\d+)")
			UpskillIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://upskillcourses.com/courses/essential-web-developer-course/lectures/1747100"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("uzw6zw58or"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Welcome to the Course!"),
						λ.NewStr("description"): λ.NewStr("md5:8d66c13403783370af62ca97a7357bdd"),
						λ.NewStr("duration"):    λ.NewFloat(138.763),
						λ.NewStr("timestamp"):   λ.NewInt(1479846621),
						λ.NewStr("upload_date"): λ.NewStr("20161122"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://upskillcourses.com/courses/119763/lectures/1747100"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			UpskillIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒself       = λargs[0]
						ϒtitle      λ.Object
						ϒurl        = λargs[1]
						ϒvideo_id   λ.Object
						ϒwebpage    λ.Object
						ϒwistia_url λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					ϒwistia_url = λ.Cal(λ.GetAttr(WistiaIE, "_extract_url", nil), ϒwebpage)
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒwistia_url))) {
						if λ.IsTrue(λ.Cal(λ.BuiltinAny, λ.Cal(λ.NewFunction("<generator>",
							nil,
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								return λ.NewGenerator(func(λgen λ.Generator) λ.Object {
									var (
										ϒp   λ.Object
										τmp0 λ.Object
										τmp1 λ.Object
									)
									τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
										λ.NewStr("class=[\"\\']lecture-contents-locked"),
										λ.NewStr(">\\s*Lecture contents locked"),
										λ.NewStr("id=[\"\\']lecture-locked"),
									))
									for {
										if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
											break
										}
										ϒp = τmp1
										λgen.Yield(λ.Cal(Ωre.ϒsearch, ϒp, ϒwebpage))
									}
									return λ.None
								})
							})))) {
							λ.Cal(λ.GetAttr(ϒself, "raise_login_required", nil), λ.NewStr("Lecture contents locked"))
						}
					}
					ϒtitle = λ.Call(λ.GetAttr(ϒself, "_og_search_title", nil), λ.NewArgs(ϒwebpage), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("_type"):  λ.NewStr("url_transparent"),
						λ.NewStr("url"):    ϒwistia_url,
						λ.NewStr("ie_key"): λ.Cal(λ.GetAttr(WistiaIE, "ie_key", nil)),
						λ.NewStr("title"):  ϒtitle,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        UpskillIE__TESTS,
				λ.NewStr("_VALID_URL"):    UpskillIE__VALID_URL,
				λ.NewStr("_real_extract"): UpskillIE__real_extract,
			})
		}())
		UpskillCourseIE = λ.Cal(λ.TypeType, λ.NewStr("UpskillCourseIE"), λ.NewTuple(UpskillBaseIE), func() λ.Dict {
			var (
				UpskillCourseIE__VALID_URL λ.Object
				UpskillCourseIE_suitable   λ.Object
			)
			UpskillCourseIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?upskillcourses\\.com/courses/(?:enrolled/)?(?P<id>[^/?#&]+)")
			UpskillCourseIE_suitable = λ.NewFunction("suitable",
				[]λ.Param{
					{Name: "cls"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls = λargs[0]
						ϒurl = λargs[1]
					)
					return func() λ.Object {
						if λ.IsTrue(λ.Cal(λ.GetAttr(UpskillIE, "suitable", nil), ϒurl)) {
							return λ.False
						} else {
							return λ.Cal(λ.GetAttr(λ.Cal(λ.SuperType, UpskillCourseIE, ϒcls), "suitable", nil), ϒurl)
						}
					}()
				})
			UpskillCourseIE_suitable = λ.Cal(λ.ClassMethodType, UpskillCourseIE_suitable)
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): UpskillCourseIE__VALID_URL,
				λ.NewStr("suitable"):   UpskillCourseIE_suitable,
			})
		}())
	})
}

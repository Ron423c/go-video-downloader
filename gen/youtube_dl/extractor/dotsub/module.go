// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * dotsub/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/dotsub.py
 */

package dotsub

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	DotsubIE       λ.Object
	InfoExtractor  λ.Object
	ϒfloat_or_none λ.Object
	ϒint_or_none   λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒint_or_none = Ωutils.ϒint_or_none
		DotsubIE = λ.Cal(λ.TypeType, λ.StrLiteral("DotsubIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				DotsubIE__VALID_URL    λ.Object
				DotsubIE__real_extract λ.Object
			)
			DotsubIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?dotsub\\.com/view/(?P<id>[^/]+)")
			DotsubIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒinfo       λ.Object
						ϒinfo_dict  λ.Object
						ϒself       = λargs[0]
						ϒsetup_data λ.Object
						ϒurl        = λargs[1]
						ϒvideo_id   λ.Object
						ϒvideo_url  λ.Object
						ϒwebpage    λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒinfo = λ.Calm(ϒself, "_download_json", λ.Mod(λ.StrLiteral("https://dotsub.com/api/media/%s/metadata"), ϒvideo_id), ϒvideo_id)
					ϒvideo_url = λ.Calm(ϒinfo, "get", λ.StrLiteral("mediaURI"))
					if !λ.IsTrue(ϒvideo_url) {
						ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒvideo_id)
						ϒvideo_url = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewList(
								λ.StrLiteral("<source[^>]+src=\"([^\"]+)\""),
								λ.StrLiteral("\"file\"\\s*:\\s*\\'([^\\']+)"),
							),
							ϒwebpage,
							λ.StrLiteral("video url"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						})
						ϒinfo_dict = λ.DictLiteral(map[string]λ.Object{
							"id":  ϒvideo_id,
							"url": ϒvideo_url,
							"ext": λ.StrLiteral("flv"),
						})
					}
					if !λ.IsTrue(ϒvideo_url) {
						ϒsetup_data = λ.Calm(ϒself, "_parse_json", λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
							λ.StrLiteral("(?s)data-setup=([\\'\"])(?P<content>(?!\\1).+?)\\1"),
							ϒwebpage,
							λ.StrLiteral("setup data"),
						), λ.KWArgs{
							{Name: "group", Value: λ.StrLiteral("content")},
						}), ϒvideo_id)
						ϒinfo_dict = λ.DictLiteral(map[string]λ.Object{
							"_type": λ.StrLiteral("url_transparent"),
							"url":   λ.GetItem(ϒsetup_data, λ.StrLiteral("src")),
						})
					}
					λ.Calm(ϒinfo_dict, "update", λ.DictLiteral(map[string]λ.Object{
						"title":       λ.GetItem(ϒinfo, λ.StrLiteral("title")),
						"description": λ.Calm(ϒinfo, "get", λ.StrLiteral("description")),
						"thumbnail":   λ.Calm(ϒinfo, "get", λ.StrLiteral("screenshotURI")),
						"duration":    λ.Cal(ϒint_or_none, λ.Calm(ϒinfo, "get", λ.StrLiteral("duration")), λ.IntLiteral(1000)),
						"uploader":    λ.Calm(ϒinfo, "get", λ.StrLiteral("user")),
						"timestamp":   λ.Cal(ϒfloat_or_none, λ.Calm(ϒinfo, "get", λ.StrLiteral("dateCreated")), λ.IntLiteral(1000)),
						"view_count":  λ.Cal(ϒint_or_none, λ.Calm(ϒinfo, "get", λ.StrLiteral("numberOfViews"))),
					}))
					return ϒinfo_dict
				})
			return λ.DictLiteral(map[string]λ.Object{
				"_VALID_URL":    DotsubIE__VALID_URL,
				"_real_extract": DotsubIE__real_extract,
			})
		}())
	})
}

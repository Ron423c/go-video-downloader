// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * soundcloud/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/soundcloud.py
 */

package soundcloud

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError                 λ.Object
	InfoExtractor                  λ.Object
	SearchInfoExtractor            λ.Object
	SoundcloudIE                   λ.Object
	SoundcloudPagedPlaylistBaseIE  λ.Object
	SoundcloudPlaylistBaseIE       λ.Object
	SoundcloudPlaylistIE           λ.Object
	SoundcloudSearchIE             λ.Object
	SoundcloudSetIE                λ.Object
	SoundcloudTrackStationIE       λ.Object
	SoundcloudUserIE               λ.Object
	ϒcompat_str                    λ.Object
	ϒcompat_urllib_parse_urlencode λ.Object
	ϒint_or_none                   λ.Object
	ϒtry_get                       λ.Object
	ϒunified_timestamp             λ.Object
	ϒupdate_url_query              λ.Object
	ϒurl_or_none                   λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		SearchInfoExtractor = Ωcommon.SearchInfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒcompat_urllib_parse_urlencode = Ωcompat.ϒcompat_urllib_parse_urlencode
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒtry_get = Ωutils.ϒtry_get
		ϒunified_timestamp = Ωutils.ϒunified_timestamp
		ϒupdate_url_query = Ωutils.ϒupdate_url_query
		ϒurl_or_none = Ωutils.ϒurl_or_none
		SoundcloudIE = λ.Cal(λ.TypeType, λ.NewStr("SoundcloudIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				SoundcloudIE__VALID_URL λ.Object
			)
			λ.NewStr("Information extractor for soundcloud.com\n       To access the media, the uid of the song and a stream token\n       must be extracted from the page source and the script must make\n       a request to media.soundcloud.com/crossdomain.xml. Then\n       the media can be grabbed by requesting from an url composed\n       of the stream token and uid\n     ")
			SoundcloudIE__VALID_URL = λ.NewStr("(?x)^(?:https?://)?\n                    (?:(?:(?:www\\.|m\\.)?soundcloud\\.com/\n                            (?!stations/track)\n                            (?P<uploader>[\\w\\d-]+)/\n                            (?!(?:tracks|albums|sets(?:/.+?)?|reposts|likes|spotlight)/?(?:$|[?#]))\n                            (?P<title>[\\w\\d-]+)/?\n                            (?P<token>[^?]+?)?(?:[?].*)?$)\n                       |(?:api\\.soundcloud\\.com/tracks/(?P<track_id>\\d+)\n                          (?:/?\\?secret_token=(?P<secret_token>[^&]+))?)\n                       |(?P<player>(?:w|player|p.)\\.soundcloud\\.com/player/?.*?url=.*)\n                    )\n                    ")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): SoundcloudIE__VALID_URL,
			})
		}())
		SoundcloudPlaylistBaseIE = λ.Cal(λ.TypeType, λ.NewStr("SoundcloudPlaylistBaseIE"), λ.NewTuple(SoundcloudIE), func() λ.Dict {

			return λ.NewDictWithTable(map[λ.Object]λ.Object{})
		}())
		SoundcloudSetIE = λ.Cal(λ.TypeType, λ.NewStr("SoundcloudSetIE"), λ.NewTuple(SoundcloudPlaylistBaseIE), func() λ.Dict {
			var (
				SoundcloudSetIE__VALID_URL λ.Object
			)
			SoundcloudSetIE__VALID_URL = λ.NewStr("https?://(?:(?:www|m)\\.)?soundcloud\\.com/(?P<uploader>[\\w\\d-]+)/sets/(?P<slug_title>[\\w\\d-]+)(?:/(?P<token>[^?/]+))?")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): SoundcloudSetIE__VALID_URL,
			})
		}())
		SoundcloudPagedPlaylistBaseIE = λ.Cal(λ.TypeType, λ.NewStr("SoundcloudPagedPlaylistBaseIE"), λ.NewTuple(SoundcloudPlaylistBaseIE), func() λ.Dict {
			var (
				SoundcloudPagedPlaylistBaseIE__API_V2_BASE λ.Object
			)
			SoundcloudPagedPlaylistBaseIE__API_V2_BASE = λ.NewStr("https://api-v2.soundcloud.com")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_API_V2_BASE"): SoundcloudPagedPlaylistBaseIE__API_V2_BASE,
			})
		}())
		SoundcloudUserIE = λ.Cal(λ.TypeType, λ.NewStr("SoundcloudUserIE"), λ.NewTuple(SoundcloudPagedPlaylistBaseIE), func() λ.Dict {
			var (
				SoundcloudUserIE__VALID_URL λ.Object
			)
			SoundcloudUserIE__VALID_URL = λ.NewStr("(?x)\n                        https?://\n                            (?:(?:www|m)\\.)?soundcloud\\.com/\n                            (?P<user>[^/]+)\n                            (?:/\n                                (?P<rsrc>tracks|albums|sets|reposts|likes|spotlight)\n                            )?\n                            /?(?:[?#].*)?$\n                    ")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): SoundcloudUserIE__VALID_URL,
			})
		}())
		SoundcloudTrackStationIE = λ.Cal(λ.TypeType, λ.NewStr("SoundcloudTrackStationIE"), λ.NewTuple(SoundcloudPagedPlaylistBaseIE), func() λ.Dict {
			var (
				SoundcloudTrackStationIE__VALID_URL λ.Object
			)
			SoundcloudTrackStationIE__VALID_URL = λ.NewStr("https?://(?:(?:www|m)\\.)?soundcloud\\.com/stations/track/[^/]+/(?P<id>[^/?#&]+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): SoundcloudTrackStationIE__VALID_URL,
			})
		}())
		SoundcloudPlaylistIE = λ.Cal(λ.TypeType, λ.NewStr("SoundcloudPlaylistIE"), λ.NewTuple(SoundcloudPlaylistBaseIE), func() λ.Dict {
			var (
				SoundcloudPlaylistIE__VALID_URL λ.Object
			)
			SoundcloudPlaylistIE__VALID_URL = λ.NewStr("https?://api\\.soundcloud\\.com/playlists/(?P<id>[0-9]+)(?:/?\\?secret_token=(?P<token>[^&]+?))?$")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): SoundcloudPlaylistIE__VALID_URL,
			})
		}())
		SoundcloudSearchIE = λ.Cal(λ.TypeType, λ.NewStr("SoundcloudSearchIE"), λ.NewTuple(
			SearchInfoExtractor,
			SoundcloudIE,
		), func() λ.Dict {
			var (
				SoundcloudSearchIE__SEARCH_KEY λ.Object
			)
			SoundcloudSearchIE__SEARCH_KEY = λ.NewStr("scsearch")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_SEARCH_KEY"): SoundcloudSearchIE__SEARCH_KEY,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * unistra/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/unistra.py
 */

package unistra

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor λ.Object
	UnistraIE     λ.Object
	ϒqualities    λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒqualities = Ωutils.ϒqualities
		UnistraIE = λ.Cal(λ.TypeType, λ.StrLiteral("UnistraIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				UnistraIE__VALID_URL    λ.Object
				UnistraIE__real_extract λ.Object
			)
			UnistraIE__VALID_URL = λ.StrLiteral("https?://utv\\.unistra\\.fr/(?:index|video)\\.php\\?id_video\\=(?P<id>\\d+)")
			UnistraIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdescription λ.Object
						ϒfile_path   λ.Object
						ϒfiles       λ.Object
						ϒformat_id   λ.Object
						ϒformats     λ.Object
						ϒmobj        λ.Object
						ϒquality     λ.Object
						ϒself        = λargs[0]
						ϒthumbnail   λ.Object
						ϒtitle       λ.Object
						ϒurl         = λargs[1]
						ϒvideo_id    λ.Object
						ϒwebpage     λ.Object
						τmp0         λ.Object
						τmp1         λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒvideo_id = λ.Calm(ϒmobj, "group", λ.StrLiteral("id"))
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒvideo_id)
					ϒfiles = λ.Cal(λ.SetType, λ.Cal(Ωre.ϒfindall, λ.StrLiteral("file\\s*:\\s*\"(/[^\"]+)\""), ϒwebpage))
					ϒquality = λ.Cal(ϒqualities, λ.NewList(
						λ.StrLiteral("SD"),
						λ.StrLiteral("HD"),
					))
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, ϒfiles)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒfile_path = τmp1
						ϒformat_id = func() λ.Object {
							if λ.IsTrue(λ.Calm(ϒfile_path, "endswith", λ.StrLiteral("-HD.mp4"))) {
								return λ.StrLiteral("HD")
							} else {
								return λ.StrLiteral("SD")
							}
						}()
						λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
							"url":       λ.Mod(λ.StrLiteral("http://vod-flash.u-strasbg.fr:8080%s"), ϒfile_path),
							"format_id": ϒformat_id,
							"quality":   λ.Cal(ϒquality, ϒformat_id),
						}))
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					ϒtitle = λ.Calm(ϒself, "_html_search_regex", λ.StrLiteral("<title>UTV - (.*?)</"), ϒwebpage, λ.StrLiteral("title"))
					ϒdescription = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("<meta name=\"Description\" content=\"(.*?)\""),
						ϒwebpage,
						λ.StrLiteral("description"),
					), λ.KWArgs{
						{Name: "flags", Value: Ωre.DOTALL},
					})
					ϒthumbnail = λ.Calm(ϒself, "_search_regex", λ.StrLiteral("image: \"(.*?)\""), ϒwebpage, λ.StrLiteral("thumbnail"))
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒvideo_id,
						"title":       ϒtitle,
						"description": ϒdescription,
						"thumbnail":   ϒthumbnail,
						"formats":     ϒformats,
					})
				})
			return λ.DictLiteral(map[string]λ.Object{
				"_VALID_URL":    UnistraIE__VALID_URL,
				"_real_extract": UnistraIE__real_extract,
			})
		}())
	})
}

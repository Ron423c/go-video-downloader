// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * playvid/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/playvid.py
 */

package playvid

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError                    λ.Object
	InfoExtractor                     λ.Object
	PlayvidIE                         λ.Object
	ϒclean_html                       λ.Object
	ϒcompat_urllib_parse_unquote      λ.Object
	ϒcompat_urllib_parse_unquote_plus λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_urllib_parse_unquote = Ωcompat.ϒcompat_urllib_parse_unquote
		ϒcompat_urllib_parse_unquote_plus = Ωcompat.ϒcompat_urllib_parse_unquote_plus
		ϒclean_html = Ωutils.ϒclean_html
		ExtractorError = Ωutils.ExtractorError
		PlayvidIE = λ.Cal(λ.TypeType, λ.NewStr("PlayvidIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				PlayvidIE__VALID_URL    λ.Object
				PlayvidIE__real_extract λ.Object
			)
			PlayvidIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?playvid\\.com/watch(\\?v=|/)(?P<id>.+?)(?:#|$)")
			PlayvidIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒduration        λ.Object
						ϒflashvars       λ.Object
						ϒformats         λ.Object
						ϒheight          λ.Object
						ϒinfo            λ.Object
						ϒinfos           λ.Object
						ϒkey             λ.Object
						ϒm_error         λ.Object
						ϒself            = λargs[0]
						ϒurl             = λargs[1]
						ϒval             λ.Object
						ϒvideo_id        λ.Object
						ϒvideo_thumbnail λ.Object
						ϒvideo_title     λ.Object
						ϒvideourl_match  λ.Object
						ϒvideovars_match λ.Object
						ϒwebpage         λ.Object
						τmp0             λ.Object
						τmp1             λ.Object
						τmp2             λ.Object
						τmp3             λ.Object
					)
					_ = τmp2
					_ = τmp3
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					ϒm_error = λ.Cal(Ωre.ϒsearch, λ.NewStr("<div class=\"block-error\">\\s*<div class=\"heading\">\\s*<div>(?P<msg>.+?)</div>\\s*</div>"), ϒwebpage)
					if λ.IsTrue(ϒm_error) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Cal(ϒclean_html, λ.Cal(λ.GetAttr(ϒm_error, "group", nil), λ.NewStr("msg")))), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒvideo_title = λ.None
					ϒduration = λ.None
					ϒvideo_thumbnail = λ.None
					ϒformats = λ.NewList()
					ϒflashvars = λ.Cal(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewStr("flashvars=\"(.+?)\""), ϒwebpage, λ.NewStr("flashvars"))
					ϒinfos = λ.Cal(λ.GetAttr(λ.Cal(ϒcompat_urllib_parse_unquote, ϒflashvars), "split", nil), λ.NewStr("&"))
					τmp0 = λ.Cal(λ.BuiltinIter, ϒinfos)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒinfo = τmp1
						ϒvideovars_match = λ.Cal(Ωre.ϒmatch, λ.NewStr("^video_vars\\[(.+?)\\]=(.+?)$"), ϒinfo)
						if λ.IsTrue(ϒvideovars_match) {
							ϒkey = λ.Cal(λ.GetAttr(ϒvideovars_match, "group", nil), λ.NewInt(1))
							ϒval = λ.Cal(λ.GetAttr(ϒvideovars_match, "group", nil), λ.NewInt(2))
							if λ.IsTrue(λ.Eq(ϒkey, λ.NewStr("title"))) {
								ϒvideo_title = λ.Cal(ϒcompat_urllib_parse_unquote_plus, ϒval)
							}
							if λ.IsTrue(λ.Eq(ϒkey, λ.NewStr("duration"))) {
								τmp2, τmp3 = func() (λexit λ.Object, λret λ.Object) {
									defer λ.CatchMulti(
										nil,
										&λ.Catcher{λ.ValueErrorType, func(λex λ.BaseException) {
											// pass
										}},
									)
									ϒduration = λ.Cal(λ.IntType, ϒval)
									return λ.BlockExitNormally, nil
								}()
							}
							if λ.IsTrue(λ.Eq(ϒkey, λ.NewStr("big_thumb"))) {
								ϒvideo_thumbnail = ϒval
							}
							ϒvideourl_match = λ.Cal(Ωre.ϒmatch, λ.NewStr("^video_urls\\]\\[(?P<resolution>[0-9]+)p"), ϒkey)
							if λ.IsTrue(ϒvideourl_match) {
								ϒheight = λ.Cal(λ.IntType, λ.Cal(λ.GetAttr(ϒvideourl_match, "group", nil), λ.NewStr("resolution")))
								λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("height"): ϒheight,
									λ.NewStr("url"):    ϒval,
								}))
							}
						}
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					if λ.IsTrue(λ.NewBool(ϒvideo_title == λ.None)) {
						ϒvideo_title = λ.Cal(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewStr("<title>(.*?)</title"), ϒwebpage, λ.NewStr("title"))
					}
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("formats"):     ϒformats,
						λ.NewStr("title"):       ϒvideo_title,
						λ.NewStr("thumbnail"):   ϒvideo_thumbnail,
						λ.NewStr("duration"):    ϒduration,
						λ.NewStr("description"): λ.None,
						λ.NewStr("age_limit"):   λ.NewInt(18),
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"):    PlayvidIE__VALID_URL,
				λ.NewStr("_real_extract"): PlayvidIE__real_extract,
			})
		}())
	})
}

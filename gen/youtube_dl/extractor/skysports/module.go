// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * skysports/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/skysports.py
 */

package skysports

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor       λ.Object
	SkySportsIE         λ.Object
	ϒextract_attributes λ.Object
	ϒsmuggle_url        λ.Object
	ϒstrip_or_none      λ.Object
	ϒurljoin            λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒextract_attributes = Ωutils.ϒextract_attributes
		ϒsmuggle_url = Ωutils.ϒsmuggle_url
		ϒstrip_or_none = Ωutils.ϒstrip_or_none
		ϒurljoin = Ωutils.ϒurljoin
		SkySportsIE = λ.Cal(λ.TypeType, λ.NewStr("SkySportsIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				SkySportsIE__TEST         λ.Object
				SkySportsIE__VALID_URL    λ.Object
				SkySportsIE__real_extract λ.Object
			)
			SkySportsIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?skysports\\.com/watch/video/(?P<id>[0-9]+)")
			SkySportsIE__TEST = λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("url"): λ.NewStr("http://www.skysports.com/watch/video/10328419/bale-its-our-time-to-shine"),
				λ.NewStr("md5"): λ.NewStr("77d59166cddc8d3cb7b13e35eaf0f5ec"),
				λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("id"):          λ.NewStr("10328419"),
					λ.NewStr("ext"):         λ.NewStr("mp4"),
					λ.NewStr("title"):       λ.NewStr("Bale: It's our time to shine"),
					λ.NewStr("description"): λ.NewStr("md5:e88bda94ae15f7720c5cb467e777bb6d"),
				}),
				λ.NewStr("add_ie"): λ.NewList(λ.NewStr("Ooyala")),
			})
			SkySportsIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒembed_token         λ.Object
						ϒself                = λargs[0]
						ϒtoken_fetch_options λ.Object
						ϒtoken_fetch_url     λ.Object
						ϒurl                 = λargs[1]
						ϒvideo_data          λ.Object
						ϒvideo_id            λ.Object
						ϒvideo_url           λ.Object
						ϒwebpage             λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					ϒvideo_data = λ.Cal(ϒextract_attributes, λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("(<div.+?class=\"sdc-article-video__media-ooyala\"[^>]+>)"), ϒwebpage, λ.NewStr("video data")))
					ϒvideo_url = λ.Mod(λ.NewStr("ooyala:%s"), λ.GetItem(ϒvideo_data, λ.NewStr("data-video-id")))
					if λ.IsTrue(λ.Eq(λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("data-token-required")), λ.NewStr("true"))) {
						ϒtoken_fetch_options = func() λ.Object {
							if λv := λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
								λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("data-token-fetch-options"), λ.NewStr("{}")),
								ϒvideo_id,
							), λ.KWArgs{
								{Name: "fatal", Value: λ.False},
							}); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewDictWithTable(map[λ.Object]λ.Object{})
							}
						}()
						ϒtoken_fetch_url = λ.Cal(λ.GetAttr(ϒtoken_fetch_options, "get", nil), λ.NewStr("url"))
						if λ.IsTrue(ϒtoken_fetch_url) {
							ϒembed_token = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
								λ.Cal(ϒurljoin, ϒurl, ϒtoken_fetch_url),
								ϒvideo_id,
							), λ.KWArgs{
								{Name: "fatal", Value: λ.False},
							})
							if λ.IsTrue(ϒembed_token) {
								ϒvideo_url = λ.Cal(ϒsmuggle_url, ϒvideo_url, λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("embed_token"): λ.Cal(λ.GetAttr(ϒembed_token, "strip", nil), λ.NewStr("\"")),
								}))
							}
						}
					}
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("_type"):       λ.NewStr("url_transparent"),
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("url"):         ϒvideo_url,
						λ.NewStr("title"):       λ.Cal(λ.GetAttr(ϒself, "_og_search_title", nil), ϒwebpage),
						λ.NewStr("description"): λ.Cal(ϒstrip_or_none, λ.Cal(λ.GetAttr(ϒself, "_og_search_description", nil), ϒwebpage)),
						λ.NewStr("ie_key"):      λ.NewStr("Ooyala"),
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TEST"):         SkySportsIE__TEST,
				λ.NewStr("_VALID_URL"):    SkySportsIE__VALID_URL,
				λ.NewStr("_real_extract"): SkySportsIE__real_extract,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * hbo/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/hbo.py
 */

package hbo

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	HBOBaseIE       λ.Object
	HBOIE           λ.Object
	InfoExtractor   λ.Object
	ϒint_or_none    λ.Object
	ϒparse_duration λ.Object
	ϒurljoin        λ.Object
	ϒxpath_element  λ.Object
	ϒxpath_text     λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒxpath_text = Ωutils.ϒxpath_text
		ϒxpath_element = Ωutils.ϒxpath_element
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒurljoin = Ωutils.ϒurljoin
		HBOBaseIE = λ.Cal(λ.TypeType, λ.StrLiteral("HBOBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				HBOBaseIE__FORMATS_INFO λ.Object
				HBOBaseIE__extract_info λ.Object
			)
			HBOBaseIE__FORMATS_INFO = λ.DictLiteral(map[string]λ.Object{
				"pro7": λ.DictLiteral(map[string]int{
					"width":  1280,
					"height": 720,
				}),
				"1920": λ.DictLiteral(map[string]int{
					"width":  1280,
					"height": 720,
				}),
				"pro6": λ.DictLiteral(map[string]int{
					"width":  768,
					"height": 432,
				}),
				"640": λ.DictLiteral(map[string]int{
					"width":  768,
					"height": 432,
				}),
				"pro5": λ.DictLiteral(map[string]int{
					"width":  640,
					"height": 360,
				}),
				"highwifi": λ.DictLiteral(map[string]int{
					"width":  640,
					"height": 360,
				}),
				"high3g": λ.DictLiteral(map[string]int{
					"width":  640,
					"height": 360,
				}),
				"medwifi": λ.DictLiteral(map[string]int{
					"width":  400,
					"height": 224,
				}),
				"med3g": λ.DictLiteral(map[string]int{
					"width":  400,
					"height": 224,
				}),
			})
			HBOBaseIE__extract_info = λ.NewFunction("_extract_info",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
					{Name: "display_id"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcaption_url   λ.Object
						ϒcard_sizes    λ.Object
						ϒdisplay_id    = λargs[2]
						ϒepisode_title λ.Object
						ϒf             λ.Object
						ϒfmt           λ.Object
						ϒformat_info   λ.Object
						ϒformats       λ.Object
						ϒheight        λ.Object
						ϒm3u8_formats  λ.Object
						ϒpath          λ.Object
						ϒrtmp          λ.Object
						ϒself          = λargs[0]
						ϒseries        λ.Object
						ϒsize          λ.Object
						ϒsource        λ.Object
						ϒsubtitles     λ.Object
						ϒthumbnails    λ.Object
						ϒtitle         λ.Object
						ϒurl           = λargs[1]
						ϒvideo_data    λ.Object
						ϒvideo_id      λ.Object
						ϒvideo_url     λ.Object
						ϒwidth         λ.Object
						τmp0           λ.Object
						τmp1           λ.Object
						τmp2           λ.Object
						τmp3           λ.Object
					)
					ϒvideo_data = λ.Calm(ϒself, "_download_xml", ϒurl, ϒdisplay_id)
					ϒvideo_id = λ.Call(ϒxpath_text, λ.NewArgs(
						ϒvideo_data,
						λ.StrLiteral("id"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.True},
					})
					τmp0 = λ.Call(ϒxpath_text, λ.NewArgs(
						ϒvideo_data,
						λ.StrLiteral("title"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.True},
					})
					ϒepisode_title = τmp0
					ϒtitle = τmp0
					ϒseries = λ.Cal(ϒxpath_text, ϒvideo_data, λ.StrLiteral("program"))
					if λ.IsTrue(ϒseries) {
						ϒtitle = λ.Mod(λ.StrLiteral("%s - %s"), λ.NewTuple(
							ϒseries,
							ϒtitle,
						))
					}
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(ϒxpath_element, ϒvideo_data, λ.StrLiteral("videos"), λ.StrLiteral("sources"), λ.True))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒsource = τmp1
						if λ.IsTrue(λ.Eq(λ.GetAttr(ϒsource, "tag", nil), λ.StrLiteral("size"))) {
							ϒpath = λ.Cal(ϒxpath_text, ϒsource, λ.StrLiteral(".//path"))
							if !λ.IsTrue(ϒpath) {
								continue
							}
							ϒwidth = λ.Calm(λ.GetAttr(ϒsource, "attrib", nil), "get", λ.StrLiteral("width"))
							ϒformat_info = λ.Calm(λ.GetAttr(ϒself, "_FORMATS_INFO", nil), "get", ϒwidth, λ.DictLiteral(map[λ.Object]λ.Object{}))
							ϒheight = λ.Calm(ϒformat_info, "get", λ.StrLiteral("height"))
							ϒfmt = λ.DictLiteral(map[string]λ.Object{
								"url": ϒpath,
								"format_id": λ.Mod(λ.StrLiteral("http%s"), func() λ.Object {
									if λ.IsTrue(ϒheight) {
										return λ.Mod(λ.StrLiteral("-%dp"), ϒheight)
									} else {
										return λ.StrLiteral("")
									}
								}()),
								"width":  λ.Calm(ϒformat_info, "get", λ.StrLiteral("width")),
								"height": ϒheight,
							})
							ϒrtmp = λ.Cal(Ωre.ϒsearch, λ.StrLiteral("^(?P<url>rtmpe?://[^/]+/(?P<app>.+))/(?P<playpath>mp4:.+)$"), ϒpath)
							if λ.IsTrue(ϒrtmp) {
								λ.Calm(ϒfmt, "update", λ.DictLiteral(map[string]λ.Object{
									"url":       λ.Calm(ϒrtmp, "group", λ.StrLiteral("url")),
									"play_path": λ.Calm(ϒrtmp, "group", λ.StrLiteral("playpath")),
									"app":       λ.Calm(ϒrtmp, "group", λ.StrLiteral("app")),
									"ext":       λ.StrLiteral("flv"),
									"format_id": λ.Calm(λ.GetItem(ϒfmt, λ.StrLiteral("format_id")), "replace", λ.StrLiteral("http"), λ.StrLiteral("rtmp")),
								}))
							}
							λ.Calm(ϒformats, "append", ϒfmt)
						} else {
							ϒvideo_url = λ.GetAttr(ϒsource, "text", nil)
							if !λ.IsTrue(ϒvideo_url) {
								continue
							}
							if λ.IsTrue(λ.Eq(λ.GetAttr(ϒsource, "tag", nil), λ.StrLiteral("tarball"))) {
								λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
									λ.Calm(ϒvideo_url, "replace", λ.StrLiteral(".tar"), λ.StrLiteral("/base_index_w8.m3u8")),
									ϒvideo_id,
									λ.StrLiteral("mp4"),
									λ.StrLiteral("m3u8_native"),
								), λ.KWArgs{
									{Name: "m3u8_id", Value: λ.StrLiteral("hls")},
									{Name: "fatal", Value: λ.False},
								}))
							} else {
								if λ.IsTrue(λ.Eq(λ.GetAttr(ϒsource, "tag", nil), λ.StrLiteral("hls"))) {
									ϒm3u8_formats = λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
										λ.Calm(ϒvideo_url, "replace", λ.StrLiteral(".tar"), λ.StrLiteral("/base_index.m3u8")),
										ϒvideo_id,
										λ.StrLiteral("mp4"),
										λ.StrLiteral("m3u8_native"),
									), λ.KWArgs{
										{Name: "m3u8_id", Value: λ.StrLiteral("hls")},
										{Name: "fatal", Value: λ.False},
									})
									τmp2 = λ.Cal(λ.BuiltinIter, ϒm3u8_formats)
									for {
										if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
											break
										}
										ϒf = τmp3
										if λ.IsTrue(func() λ.Object {
											if λv := λ.Eq(λ.Calm(ϒf, "get", λ.StrLiteral("vcodec")), λ.StrLiteral("none")); !λ.IsTrue(λv) {
												return λv
											} else {
												return λ.NewBool(!λ.IsTrue(λ.Calm(ϒf, "get", λ.StrLiteral("tbr"))))
											}
										}()) {
											λ.SetItem(ϒf, λ.StrLiteral("tbr"), λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
												λ.StrLiteral("-(\\d+)k/"),
												λ.GetItem(ϒf, λ.StrLiteral("url")),
												λ.StrLiteral("tbr"),
											), λ.KWArgs{
												{Name: "default", Value: λ.None},
											})))
										}
									}
									λ.Calm(ϒformats, "extend", ϒm3u8_formats)
								} else {
									if λ.IsTrue(λ.Eq(λ.GetAttr(ϒsource, "tag", nil), λ.StrLiteral("dash"))) {
										λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_mpd_formats", nil), λ.NewArgs(
											λ.Calm(ϒvideo_url, "replace", λ.StrLiteral(".tar"), λ.StrLiteral("/manifest.mpd")),
											ϒvideo_id,
										), λ.KWArgs{
											{Name: "mpd_id", Value: λ.StrLiteral("dash")},
											{Name: "fatal", Value: λ.False},
										}))
									} else {
										ϒformat_info = λ.Calm(λ.GetAttr(ϒself, "_FORMATS_INFO", nil), "get", λ.GetAttr(ϒsource, "tag", nil), λ.DictLiteral(map[λ.Object]λ.Object{}))
										λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
											"format_id": λ.Mod(λ.StrLiteral("http-%s"), λ.GetAttr(ϒsource, "tag", nil)),
											"url":       ϒvideo_url,
											"width":     λ.Calm(ϒformat_info, "get", λ.StrLiteral("width")),
											"height":    λ.Calm(ϒformat_info, "get", λ.StrLiteral("height")),
										}))
									}
								}
							}
						}
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					ϒthumbnails = λ.NewList()
					ϒcard_sizes = λ.Cal(ϒxpath_element, ϒvideo_data, λ.StrLiteral("titleCardSizes"))
					if ϒcard_sizes != λ.None {
						τmp0 = λ.Cal(λ.BuiltinIter, ϒcard_sizes)
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒsize = τmp1
							ϒpath = λ.Cal(ϒxpath_text, ϒsize, λ.StrLiteral("path"))
							if !λ.IsTrue(ϒpath) {
								continue
							}
							ϒwidth = λ.Cal(ϒint_or_none, λ.Calm(ϒsize, "get", λ.StrLiteral("width")))
							λ.Calm(ϒthumbnails, "append", λ.DictLiteral(map[string]λ.Object{
								"id":    ϒwidth,
								"url":   ϒpath,
								"width": ϒwidth,
							}))
						}
					}
					ϒsubtitles = λ.None
					ϒcaption_url = λ.Cal(ϒxpath_text, ϒvideo_data, λ.StrLiteral("captionUrl"))
					if λ.IsTrue(ϒcaption_url) {
						ϒsubtitles = λ.DictLiteral(map[string]λ.Object{
							"en": λ.NewList(λ.DictLiteral(map[string]λ.Object{
								"url": ϒcaption_url,
								"ext": λ.StrLiteral("ttml"),
							})),
						})
					}
					return λ.DictLiteral(map[string]λ.Object{
						"id":         ϒvideo_id,
						"title":      ϒtitle,
						"duration":   λ.Cal(ϒparse_duration, λ.Cal(ϒxpath_text, ϒvideo_data, λ.StrLiteral("duration/tv14"))),
						"series":     ϒseries,
						"episode":    ϒepisode_title,
						"formats":    ϒformats,
						"thumbnails": ϒthumbnails,
						"subtitles":  ϒsubtitles,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_FORMATS_INFO": HBOBaseIE__FORMATS_INFO,
				"_extract_info": HBOBaseIE__extract_info,
			})
		}())
		HBOIE = λ.Cal(λ.TypeType, λ.StrLiteral("HBOIE"), λ.NewTuple(HBOBaseIE), func() λ.Dict {
			var (
				HBOIE_IE_NAME       λ.Object
				HBOIE__VALID_URL    λ.Object
				HBOIE__real_extract λ.Object
			)
			HBOIE_IE_NAME = λ.StrLiteral("hbo")
			HBOIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?hbo\\.com/(?:video|embed)(?:/[^/]+)*/(?P<id>[^/?#]+)")
			HBOIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdisplay_id    λ.Object
						ϒlocation_path λ.Object
						ϒself          = λargs[0]
						ϒurl           = λargs[1]
						ϒwebpage       λ.Object
					)
					ϒdisplay_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒdisplay_id)
					ϒlocation_path = λ.GetItem(λ.GetItem(λ.Calm(ϒself, "_parse_json", λ.Calm(ϒself, "_html_search_regex", λ.StrLiteral("data-state=\"({.+?})\""), ϒwebpage, λ.StrLiteral("state")), ϒdisplay_id), λ.StrLiteral("video")), λ.StrLiteral("locationUrl"))
					return λ.Calm(ϒself, "_extract_info", λ.Cal(ϒurljoin, ϒurl, ϒlocation_path), ϒdisplay_id)
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"IE_NAME":       HBOIE_IE_NAME,
				"_VALID_URL":    HBOIE__VALID_URL,
				"_real_extract": HBOIE__real_extract,
			})
		}())
	})
}

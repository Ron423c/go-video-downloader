// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * hbo/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/hbo.py
 */

package hbo

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	HBOIE           λ.Object
	InfoExtractor   λ.Object
	ϒint_or_none    λ.Object
	ϒparse_duration λ.Object
	ϒurljoin        λ.Object
	ϒxpath_element  λ.Object
	ϒxpath_text     λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒxpath_text = Ωutils.ϒxpath_text
		ϒxpath_element = Ωutils.ϒxpath_element
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒurljoin = Ωutils.ϒurljoin
		HBOIE = λ.Cal(λ.TypeType, λ.NewStr("HBOIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				HBOIE_IE_NAME       λ.Object
				HBOIE__FORMATS_INFO λ.Object
				HBOIE__TEST         λ.Object
				HBOIE__VALID_URL    λ.Object
				HBOIE__real_extract λ.Object
			)
			HBOIE_IE_NAME = λ.NewStr("hbo")
			HBOIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?hbo\\.com/(?:video|embed)(?:/[^/]+)*/(?P<id>[^/?#]+)")
			HBOIE__TEST = λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("url"): λ.NewStr("https://www.hbo.com/video/game-of-thrones/seasons/season-8/videos/trailer"),
				λ.NewStr("md5"): λ.NewStr("8126210656f433c452a21367f9ad85b3"),
				λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("id"):    λ.NewStr("22113301"),
					λ.NewStr("ext"):   λ.NewStr("mp4"),
					λ.NewStr("title"): λ.NewStr("Game of Thrones - Trailer"),
				}),
				λ.NewStr("expected_warnings"): λ.NewList(λ.NewStr("Unknown MIME type application/mp4 in DASH manifest")),
			})
			HBOIE__FORMATS_INFO = λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("pro7"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("width"):  λ.NewInt(1280),
					λ.NewStr("height"): λ.NewInt(720),
				}),
				λ.NewStr("1920"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("width"):  λ.NewInt(1280),
					λ.NewStr("height"): λ.NewInt(720),
				}),
				λ.NewStr("pro6"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("width"):  λ.NewInt(768),
					λ.NewStr("height"): λ.NewInt(432),
				}),
				λ.NewStr("640"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("width"):  λ.NewInt(768),
					λ.NewStr("height"): λ.NewInt(432),
				}),
				λ.NewStr("pro5"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("width"):  λ.NewInt(640),
					λ.NewStr("height"): λ.NewInt(360),
				}),
				λ.NewStr("highwifi"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("width"):  λ.NewInt(640),
					λ.NewStr("height"): λ.NewInt(360),
				}),
				λ.NewStr("high3g"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("width"):  λ.NewInt(640),
					λ.NewStr("height"): λ.NewInt(360),
				}),
				λ.NewStr("medwifi"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("width"):  λ.NewInt(400),
					λ.NewStr("height"): λ.NewInt(224),
				}),
				λ.NewStr("med3g"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("width"):  λ.NewInt(400),
					λ.NewStr("height"): λ.NewInt(224),
				}),
			})
			HBOIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcaption_url   λ.Object
						ϒcard_sizes    λ.Object
						ϒdisplay_id    λ.Object
						ϒepisode_title λ.Object
						ϒf             λ.Object
						ϒfmt           λ.Object
						ϒformat_info   λ.Object
						ϒformats       λ.Object
						ϒheight        λ.Object
						ϒlocation_path λ.Object
						ϒm3u8_formats  λ.Object
						ϒpath          λ.Object
						ϒrtmp          λ.Object
						ϒself          = λargs[0]
						ϒseries        λ.Object
						ϒsize          λ.Object
						ϒsource        λ.Object
						ϒsubtitles     λ.Object
						ϒthumbnails    λ.Object
						ϒtitle         λ.Object
						ϒurl           = λargs[1]
						ϒvideo_data    λ.Object
						ϒvideo_id      λ.Object
						ϒvideo_url     λ.Object
						ϒwebpage       λ.Object
						ϒwidth         λ.Object
						τmp0           λ.Object
						τmp1           λ.Object
						τmp2           λ.Object
						τmp3           λ.Object
					)
					ϒdisplay_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒdisplay_id)
					ϒlocation_path = λ.GetItem(λ.GetItem(λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), λ.Cal(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewStr("data-state=\"({.+?})\""), ϒwebpage, λ.NewStr("state")), ϒdisplay_id), λ.NewStr("video")), λ.NewStr("locationUrl"))
					ϒvideo_data = λ.Cal(λ.GetAttr(ϒself, "_download_xml", nil), λ.Cal(ϒurljoin, ϒurl, ϒlocation_path), ϒdisplay_id)
					ϒvideo_id = λ.Call(ϒxpath_text, λ.NewArgs(
						ϒvideo_data,
						λ.NewStr("id"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.True},
					})
					τmp0 = λ.Call(ϒxpath_text, λ.NewArgs(
						ϒvideo_data,
						λ.NewStr("title"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.True},
					})
					ϒepisode_title = τmp0
					ϒtitle = τmp0
					ϒseries = λ.Cal(ϒxpath_text, ϒvideo_data, λ.NewStr("program"))
					if λ.IsTrue(ϒseries) {
						ϒtitle = λ.Mod(λ.NewStr("%s - %s"), λ.NewTuple(
							ϒseries,
							ϒtitle,
						))
					}
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(ϒxpath_element, ϒvideo_data, λ.NewStr("videos"), λ.NewStr("sources"), λ.True))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒsource = τmp1
						if λ.IsTrue(λ.Eq(λ.GetAttr(ϒsource, "tag", nil), λ.NewStr("size"))) {
							ϒpath = λ.Cal(ϒxpath_text, ϒsource, λ.NewStr(".//path"))
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒpath))) {
								continue
							}
							ϒwidth = λ.Cal(λ.GetAttr(λ.GetAttr(ϒsource, "attrib", nil), "get", nil), λ.NewStr("width"))
							ϒformat_info = λ.Cal(λ.GetAttr(λ.GetAttr(ϒself, "_FORMATS_INFO", nil), "get", nil), ϒwidth, λ.NewDictWithTable(map[λ.Object]λ.Object{}))
							ϒheight = λ.Cal(λ.GetAttr(ϒformat_info, "get", nil), λ.NewStr("height"))
							ϒfmt = λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("url"): ϒpath,
								λ.NewStr("format_id"): λ.Mod(λ.NewStr("http%s"), func() λ.Object {
									if λ.IsTrue(ϒheight) {
										return λ.Mod(λ.NewStr("-%dp"), ϒheight)
									} else {
										return λ.NewStr("")
									}
								}()),
								λ.NewStr("width"):  λ.Cal(λ.GetAttr(ϒformat_info, "get", nil), λ.NewStr("width")),
								λ.NewStr("height"): ϒheight,
							})
							ϒrtmp = λ.Cal(Ωre.ϒsearch, λ.NewStr("^(?P<url>rtmpe?://[^/]+/(?P<app>.+))/(?P<playpath>mp4:.+)$"), ϒpath)
							if λ.IsTrue(ϒrtmp) {
								λ.Cal(λ.GetAttr(ϒfmt, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("url"):       λ.Cal(λ.GetAttr(ϒrtmp, "group", nil), λ.NewStr("url")),
									λ.NewStr("play_path"): λ.Cal(λ.GetAttr(ϒrtmp, "group", nil), λ.NewStr("playpath")),
									λ.NewStr("app"):       λ.Cal(λ.GetAttr(ϒrtmp, "group", nil), λ.NewStr("app")),
									λ.NewStr("ext"):       λ.NewStr("flv"),
									λ.NewStr("format_id"): λ.Cal(λ.GetAttr(λ.GetItem(ϒfmt, λ.NewStr("format_id")), "replace", nil), λ.NewStr("http"), λ.NewStr("rtmp")),
								}))
							}
							λ.Cal(λ.GetAttr(ϒformats, "append", nil), ϒfmt)
						} else {
							ϒvideo_url = λ.GetAttr(ϒsource, "text", nil)
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒvideo_url))) {
								continue
							}
							if λ.IsTrue(λ.Eq(λ.GetAttr(ϒsource, "tag", nil), λ.NewStr("tarball"))) {
								λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
									λ.Cal(λ.GetAttr(ϒvideo_url, "replace", nil), λ.NewStr(".tar"), λ.NewStr("/base_index_w8.m3u8")),
									ϒvideo_id,
									λ.NewStr("mp4"),
									λ.NewStr("m3u8_native"),
								), λ.KWArgs{
									{Name: "m3u8_id", Value: λ.NewStr("hls")},
									{Name: "fatal", Value: λ.False},
								}))
							} else {
								if λ.IsTrue(λ.Eq(λ.GetAttr(ϒsource, "tag", nil), λ.NewStr("hls"))) {
									ϒm3u8_formats = λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
										λ.Cal(λ.GetAttr(ϒvideo_url, "replace", nil), λ.NewStr(".tar"), λ.NewStr("/base_index.m3u8")),
										ϒvideo_id,
										λ.NewStr("mp4"),
										λ.NewStr("m3u8_native"),
									), λ.KWArgs{
										{Name: "m3u8_id", Value: λ.NewStr("hls")},
										{Name: "fatal", Value: λ.False},
									})
									τmp2 = λ.Cal(λ.BuiltinIter, ϒm3u8_formats)
									for {
										if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
											break
										}
										ϒf = τmp3
										if λ.IsTrue(func() λ.Object {
											if λv := λ.Eq(λ.Cal(λ.GetAttr(ϒf, "get", nil), λ.NewStr("vcodec")), λ.NewStr("none")); !λ.IsTrue(λv) {
												return λv
											} else {
												return λ.NewBool(!λ.IsTrue(λ.Cal(λ.GetAttr(ϒf, "get", nil), λ.NewStr("tbr"))))
											}
										}()) {
											λ.SetItem(ϒf, λ.NewStr("tbr"), λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
												λ.NewStr("-(\\d+)k/"),
												λ.GetItem(ϒf, λ.NewStr("url")),
												λ.NewStr("tbr"),
											), λ.KWArgs{
												{Name: "default", Value: λ.None},
											})))
										}
									}
									λ.Cal(λ.GetAttr(ϒformats, "extend", nil), ϒm3u8_formats)
								} else {
									if λ.IsTrue(λ.Eq(λ.GetAttr(ϒsource, "tag", nil), λ.NewStr("dash"))) {
										λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_mpd_formats", nil), λ.NewArgs(
											λ.Cal(λ.GetAttr(ϒvideo_url, "replace", nil), λ.NewStr(".tar"), λ.NewStr("/manifest.mpd")),
											ϒvideo_id,
										), λ.KWArgs{
											{Name: "mpd_id", Value: λ.NewStr("dash")},
											{Name: "fatal", Value: λ.False},
										}))
									} else {
										ϒformat_info = λ.Cal(λ.GetAttr(λ.GetAttr(ϒself, "_FORMATS_INFO", nil), "get", nil), λ.GetAttr(ϒsource, "tag", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{}))
										λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
											λ.NewStr("format_id"): λ.Mod(λ.NewStr("http-%s"), λ.GetAttr(ϒsource, "tag", nil)),
											λ.NewStr("url"):       ϒvideo_url,
											λ.NewStr("width"):     λ.Cal(λ.GetAttr(ϒformat_info, "get", nil), λ.NewStr("width")),
											λ.NewStr("height"):    λ.Cal(λ.GetAttr(ϒformat_info, "get", nil), λ.NewStr("height")),
										}))
									}
								}
							}
						}
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒthumbnails = λ.NewList()
					ϒcard_sizes = λ.Cal(ϒxpath_element, ϒvideo_data, λ.NewStr("titleCardSizes"))
					if λ.IsTrue(λ.NewBool(ϒcard_sizes != λ.None)) {
						τmp0 = λ.Cal(λ.BuiltinIter, ϒcard_sizes)
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒsize = τmp1
							ϒpath = λ.Cal(ϒxpath_text, ϒsize, λ.NewStr("path"))
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒpath))) {
								continue
							}
							ϒwidth = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒsize, "get", nil), λ.NewStr("width")))
							λ.Cal(λ.GetAttr(ϒthumbnails, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("id"):    ϒwidth,
								λ.NewStr("url"):   ϒpath,
								λ.NewStr("width"): ϒwidth,
							}))
						}
					}
					ϒsubtitles = λ.None
					ϒcaption_url = λ.Cal(ϒxpath_text, ϒvideo_data, λ.NewStr("captionUrl"))
					if λ.IsTrue(ϒcaption_url) {
						ϒsubtitles = λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("en"): λ.NewList(λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("url"): ϒcaption_url,
								λ.NewStr("ext"): λ.NewStr("ttml"),
							})),
						})
					}
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):         ϒvideo_id,
						λ.NewStr("title"):      ϒtitle,
						λ.NewStr("duration"):   λ.Cal(ϒparse_duration, λ.Cal(ϒxpath_text, ϒvideo_data, λ.NewStr("duration/tv14"))),
						λ.NewStr("series"):     ϒseries,
						λ.NewStr("episode"):    ϒepisode_title,
						λ.NewStr("formats"):    ϒformats,
						λ.NewStr("thumbnails"): ϒthumbnails,
						λ.NewStr("subtitles"):  ϒsubtitles,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):       HBOIE_IE_NAME,
				λ.NewStr("_FORMATS_INFO"): HBOIE__FORMATS_INFO,
				λ.NewStr("_TEST"):         HBOIE__TEST,
				λ.NewStr("_VALID_URL"):    HBOIE__VALID_URL,
				λ.NewStr("_real_extract"): HBOIE__real_extract,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * naver/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/naver.py
 */

package naver

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError    λ.Object
	InfoExtractor     λ.Object
	NaverIE           λ.Object
	ϒint_or_none      λ.Object
	ϒupdate_url_query λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒupdate_url_query = Ωutils.ϒupdate_url_query
		NaverIE = λ.Cal(λ.TypeType, λ.NewStr("NaverIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				NaverIE__VALID_URL    λ.Object
				NaverIE__real_extract λ.Object
			)
			NaverIE__VALID_URL = λ.NewStr("https?://(?:m\\.)?tv(?:cast)?\\.naver\\.com/v/(?P<id>\\d+)")
			NaverIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcaption         λ.Object
						ϒcaption_url     λ.Object
						ϒerror           λ.Object
						ϒextract_formats λ.Object
						ϒformats         λ.Object
						ϒin_key          λ.Object
						ϒmeta            λ.Object
						ϒparam           λ.Object
						ϒquery           λ.Object
						ϒself            = λargs[0]
						ϒstream_set      λ.Object
						ϒstream_type     λ.Object
						ϒstream_url      λ.Object
						ϒsubtitles       λ.Object
						ϒtitle           λ.Object
						ϒupload_date     λ.Object
						ϒurl             = λargs[1]
						ϒvid             λ.Object
						ϒvideo_data      λ.Object
						ϒvideo_id        λ.Object
						ϒvideos          λ.Object
						ϒwebpage         λ.Object
						τmp0             λ.Object
						τmp1             λ.Object
						τmp2             λ.Object
						τmp3             λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					ϒvid = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("videoId[\"\\']\\s*:\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1"),
						ϒwebpage,
						λ.NewStr("video id"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.None},
						{Name: "group", Value: λ.NewStr("value")},
					})
					ϒin_key = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("inKey[\"\\']\\s*:\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1"),
						ϒwebpage,
						λ.NewStr("key"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
						{Name: "group", Value: λ.NewStr("value")},
					})
					if λ.IsTrue(func() λ.Object {
						if λv := λ.NewBool(!λ.IsTrue(ϒvid)); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewBool(!λ.IsTrue(ϒin_key))
						}
					}()) {
						ϒerror = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
							λ.NewStr("(?s)<div class=\"(?:nation_error|nation_box|error_box)\">\\s*(?:<!--.*?-->)?\\s*<p class=\"[^\"]+\">(?P<msg>.+?)</p>\\s*</div>"),
							ϒwebpage,
							λ.NewStr("error"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						})
						if λ.IsTrue(ϒerror) {
							panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(ϒerror), λ.KWArgs{
								{Name: "expected", Value: λ.True},
							})))
						}
						panic(λ.Raise(λ.Cal(ExtractorError, λ.NewStr("couldn't extract vid and key"))))
					}
					ϒvideo_data = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Add(λ.NewStr("http://play.rmcnmv.naver.com/vod/play/v2.0/"), ϒvid),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "query", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("key"): ϒin_key,
						})},
					})
					ϒmeta = λ.GetItem(ϒvideo_data, λ.NewStr("meta"))
					ϒtitle = λ.GetItem(ϒmeta, λ.NewStr("subject"))
					ϒformats = λ.NewList()
					ϒextract_formats = λ.NewFunction("extract_formats",
						[]λ.Param{
							{Name: "streams"},
							{Name: "stream_type"},
							{Name: "query", Def: λ.NewDictWithTable(map[λ.Object]λ.Object{})},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒbitrate         λ.Object
								ϒencoding_option λ.Object
								ϒquery           = λargs[2]
								ϒstream          λ.Object
								ϒstream_type     = λargs[1]
								ϒstream_url      λ.Object
								ϒstreams         = λargs[0]
								τmp0             λ.Object
								τmp1             λ.Object
							)
							τmp0 = λ.Cal(λ.BuiltinIter, ϒstreams)
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒstream = τmp1
								ϒstream_url = λ.Cal(λ.GetAttr(ϒstream, "get", nil), λ.NewStr("source"))
								if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒstream_url))) {
									continue
								}
								ϒstream_url = λ.Cal(ϒupdate_url_query, ϒstream_url, ϒquery)
								ϒencoding_option = λ.Cal(λ.GetAttr(ϒstream, "get", nil), λ.NewStr("encodingOption"), λ.NewDictWithTable(map[λ.Object]λ.Object{}))
								ϒbitrate = λ.Cal(λ.GetAttr(ϒstream, "get", nil), λ.NewStr("bitrate"), λ.NewDictWithTable(map[λ.Object]λ.Object{}))
								λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("format_id"): λ.Mod(λ.NewStr("%s_%s"), λ.NewTuple(
										func() λ.Object {
											if λv := λ.Cal(λ.GetAttr(ϒstream, "get", nil), λ.NewStr("type")); λ.IsTrue(λv) {
												return λv
											} else {
												return ϒstream_type
											}
										}(),
										func() λ.Object {
											if λv := λ.Cal(λ.GetAttr(ϒencoding_option, "get", nil), λ.NewStr("id")); λ.IsTrue(λv) {
												return λv
											} else {
												return λ.Cal(λ.GetAttr(ϒencoding_option, "get", nil), λ.NewStr("name"))
											}
										}(),
									)),
									λ.NewStr("url"):      ϒstream_url,
									λ.NewStr("width"):    λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒencoding_option, "get", nil), λ.NewStr("width"))),
									λ.NewStr("height"):   λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒencoding_option, "get", nil), λ.NewStr("height"))),
									λ.NewStr("vbr"):      λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒbitrate, "get", nil), λ.NewStr("video"))),
									λ.NewStr("abr"):      λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒbitrate, "get", nil), λ.NewStr("audio"))),
									λ.NewStr("filesize"): λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒstream, "get", nil), λ.NewStr("size"))),
									λ.NewStr("protocol"): func() λ.Object {
										if λ.IsTrue(λ.Eq(ϒstream_type, λ.NewStr("HLS"))) {
											return λ.NewStr("m3u8_native")
										} else {
											return λ.None
										}
									}(),
								}))
							}
							return λ.None
						})
					λ.Cal(ϒextract_formats, λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("videos"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("list"), λ.NewList()), λ.NewStr("H264"))
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("streams"), λ.NewList()))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒstream_set = τmp1
						ϒquery = λ.NewDictWithTable(map[λ.Object]λ.Object{})
						τmp2 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒstream_set, "get", nil), λ.NewStr("keys"), λ.NewList()))
						for {
							if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
								break
							}
							ϒparam = τmp3
							λ.SetItem(ϒquery, λ.GetItem(ϒparam, λ.NewStr("name")), λ.GetItem(ϒparam, λ.NewStr("value")))
						}
						ϒstream_type = λ.Cal(λ.GetAttr(ϒstream_set, "get", nil), λ.NewStr("type"))
						ϒvideos = λ.Cal(λ.GetAttr(ϒstream_set, "get", nil), λ.NewStr("videos"))
						if λ.IsTrue(ϒvideos) {
							λ.Cal(ϒextract_formats, ϒvideos, ϒstream_type, ϒquery)
						} else {
							if λ.IsTrue(λ.Eq(ϒstream_type, λ.NewStr("HLS"))) {
								ϒstream_url = λ.Cal(λ.GetAttr(ϒstream_set, "get", nil), λ.NewStr("source"))
								if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒstream_url))) {
									continue
								}
								λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
									λ.Cal(ϒupdate_url_query, ϒstream_url, ϒquery),
									ϒvideo_id,
									λ.NewStr("mp4"),
									λ.NewStr("m3u8_native"),
								), λ.KWArgs{
									{Name: "m3u8_id", Value: ϒstream_type},
									{Name: "fatal", Value: λ.False},
								}))
							}
						}
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒsubtitles = λ.NewDictWithTable(map[λ.Object]λ.Object{})
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("captions"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("list"), λ.NewList()))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒcaption = τmp1
						ϒcaption_url = λ.Cal(λ.GetAttr(ϒcaption, "get", nil), λ.NewStr("source"))
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒcaption_url))) {
							continue
						}
						λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒsubtitles, "setdefault", nil), func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒcaption, "get", nil), λ.NewStr("language")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(ϒcaption, "get", nil), λ.NewStr("locale"))
							}
						}(), λ.NewList()), "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"): ϒcaption_url,
						}))
					}
					ϒupload_date = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("<span[^>]+class=\"date\".*?(\\d{4}\\.\\d{2}\\.\\d{2})"),
						ϒwebpage,
						λ.NewStr("upload date"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					if λ.IsTrue(ϒupload_date) {
						ϒupload_date = λ.Cal(λ.GetAttr(ϒupload_date, "replace", nil), λ.NewStr("."), λ.NewStr(""))
					}
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("title"):       ϒtitle,
						λ.NewStr("formats"):     ϒformats,
						λ.NewStr("subtitles"):   ϒsubtitles,
						λ.NewStr("description"): λ.Cal(λ.GetAttr(ϒself, "_og_search_description", nil), ϒwebpage),
						λ.NewStr("thumbnail"): func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒmeta, "get", nil), λ.NewStr("cover"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("source")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(ϒself, "_og_search_thumbnail", nil), ϒwebpage)
							}
						}(),
						λ.NewStr("view_count"):  λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒmeta, "get", nil), λ.NewStr("count"))),
						λ.NewStr("upload_date"): ϒupload_date,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"):    NaverIE__VALID_URL,
				λ.NewStr("_real_extract"): NaverIE__real_extract,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * naver/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/naver.py
 */

package naver

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError    λ.Object
	InfoExtractor     λ.Object
	NaverBaseIE       λ.Object
	NaverIE           λ.Object
	ϒclean_html       λ.Object
	ϒdict_get         λ.Object
	ϒint_or_none      λ.Object
	ϒparse_duration   λ.Object
	ϒtry_get          λ.Object
	ϒupdate_url_query λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒclean_html = Ωutils.ϒclean_html
		ϒdict_get = Ωutils.ϒdict_get
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒtry_get = Ωutils.ϒtry_get
		ϒupdate_url_query = Ωutils.ϒupdate_url_query
		NaverBaseIE = λ.Cal(λ.TypeType, λ.NewStr("NaverBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				NaverBaseIE__CAPTION_EXT_RE     λ.Object
				NaverBaseIE__extract_video_info λ.Object
			)
			NaverBaseIE__CAPTION_EXT_RE = λ.NewStr("\\.(?:ttml|vtt)")
			NaverBaseIE__extract_video_info = λ.NewFunction("_extract_video_info",
				[]λ.Param{
					{Name: "self"},
					{Name: "video_id"},
					{Name: "vid"},
					{Name: "key"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒautomatic_captions λ.Object
						ϒcaption            λ.Object
						ϒcaption_url        λ.Object
						ϒextract_formats    λ.Object
						ϒformats            λ.Object
						ϒget_list           λ.Object
						ϒget_subs           λ.Object
						ϒkey                = λargs[3]
						ϒmeta               λ.Object
						ϒparam              λ.Object
						ϒquery              λ.Object
						ϒreplace_ext        λ.Object
						ϒself               = λargs[0]
						ϒstream_set         λ.Object
						ϒstream_type        λ.Object
						ϒstream_url         λ.Object
						ϒsub_dict           λ.Object
						ϒsubtitles          λ.Object
						ϒtitle              λ.Object
						ϒuser               λ.Object
						ϒvid                = λargs[2]
						ϒvideo_data         λ.Object
						ϒvideo_id           = λargs[1]
						ϒvideos             λ.Object
						τmp0                λ.Object
						τmp1                λ.Object
						τmp2                λ.Object
						τmp3                λ.Object
					)
					ϒvideo_data = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Add(λ.NewStr("http://play.rmcnmv.naver.com/vod/play/v2.0/"), ϒvid),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "query", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("key"): ϒkey,
						})},
					})
					ϒmeta = λ.GetItem(ϒvideo_data, λ.NewStr("meta"))
					ϒtitle = λ.GetItem(ϒmeta, λ.NewStr("subject"))
					ϒformats = λ.NewList()
					ϒget_list = λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return func() λ.Object {
								if λv := λ.Cal(ϒtry_get, ϒvideo_data, λ.NewFunction("<lambda>",
									[]λ.Param{
										{Name: "y"},
									},
									0, false, false,
									func(λargs []λ.Object) λ.Object {
										var (
											ϒy = λargs[0]
										)
										return λ.GetItem(λ.GetItem(ϒy, λ.Add(ϒx, λ.NewStr("s"))), λ.NewStr("list"))
									}), λ.ListType); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.NewList()
								}
							}()
						})
					ϒextract_formats = λ.NewFunction("extract_formats",
						[]λ.Param{
							{Name: "streams"},
							{Name: "stream_type"},
							{Name: "query", Def: λ.NewDictWithTable(map[λ.Object]λ.Object{})},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒbitrate         λ.Object
								ϒencoding_option λ.Object
								ϒquery           = λargs[2]
								ϒstream          λ.Object
								ϒstream_type     = λargs[1]
								ϒstream_url      λ.Object
								ϒstreams         = λargs[0]
								τmp0             λ.Object
								τmp1             λ.Object
							)
							τmp0 = λ.Cal(λ.BuiltinIter, ϒstreams)
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒstream = τmp1
								ϒstream_url = λ.Cal(λ.GetAttr(ϒstream, "get", nil), λ.NewStr("source"))
								if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒstream_url))) {
									continue
								}
								ϒstream_url = λ.Cal(ϒupdate_url_query, ϒstream_url, ϒquery)
								ϒencoding_option = λ.Cal(λ.GetAttr(ϒstream, "get", nil), λ.NewStr("encodingOption"), λ.NewDictWithTable(map[λ.Object]λ.Object{}))
								ϒbitrate = λ.Cal(λ.GetAttr(ϒstream, "get", nil), λ.NewStr("bitrate"), λ.NewDictWithTable(map[λ.Object]λ.Object{}))
								λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("format_id"): λ.Mod(λ.NewStr("%s_%s"), λ.NewTuple(
										func() λ.Object {
											if λv := λ.Cal(λ.GetAttr(ϒstream, "get", nil), λ.NewStr("type")); λ.IsTrue(λv) {
												return λv
											} else {
												return ϒstream_type
											}
										}(),
										λ.Cal(ϒdict_get, ϒencoding_option, λ.NewTuple(
											λ.NewStr("name"),
											λ.NewStr("id"),
										)),
									)),
									λ.NewStr("url"):      ϒstream_url,
									λ.NewStr("width"):    λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒencoding_option, "get", nil), λ.NewStr("width"))),
									λ.NewStr("height"):   λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒencoding_option, "get", nil), λ.NewStr("height"))),
									λ.NewStr("vbr"):      λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒbitrate, "get", nil), λ.NewStr("video"))),
									λ.NewStr("abr"):      λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒbitrate, "get", nil), λ.NewStr("audio"))),
									λ.NewStr("filesize"): λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒstream, "get", nil), λ.NewStr("size"))),
									λ.NewStr("protocol"): func() λ.Object {
										if λ.IsTrue(λ.Eq(ϒstream_type, λ.NewStr("HLS"))) {
											return λ.NewStr("m3u8_native")
										} else {
											return λ.None
										}
									}(),
								}))
							}
							return λ.None
						})
					λ.Cal(ϒextract_formats, λ.Cal(ϒget_list, λ.NewStr("video")), λ.NewStr("H264"))
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("streams"), λ.NewList()))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒstream_set = τmp1
						ϒquery = λ.NewDictWithTable(map[λ.Object]λ.Object{})
						τmp2 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒstream_set, "get", nil), λ.NewStr("keys"), λ.NewList()))
						for {
							if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
								break
							}
							ϒparam = τmp3
							λ.SetItem(ϒquery, λ.GetItem(ϒparam, λ.NewStr("name")), λ.GetItem(ϒparam, λ.NewStr("value")))
						}
						ϒstream_type = λ.Cal(λ.GetAttr(ϒstream_set, "get", nil), λ.NewStr("type"))
						ϒvideos = λ.Cal(λ.GetAttr(ϒstream_set, "get", nil), λ.NewStr("videos"))
						if λ.IsTrue(ϒvideos) {
							λ.Cal(ϒextract_formats, ϒvideos, ϒstream_type, ϒquery)
						} else {
							if λ.IsTrue(λ.Eq(ϒstream_type, λ.NewStr("HLS"))) {
								ϒstream_url = λ.Cal(λ.GetAttr(ϒstream_set, "get", nil), λ.NewStr("source"))
								if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒstream_url))) {
									continue
								}
								λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
									λ.Cal(ϒupdate_url_query, ϒstream_url, ϒquery),
									ϒvideo_id,
									λ.NewStr("mp4"),
									λ.NewStr("m3u8_native"),
								), λ.KWArgs{
									{Name: "m3u8_id", Value: ϒstream_type},
									{Name: "fatal", Value: λ.False},
								}))
							}
						}
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒreplace_ext = λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
							{Name: "y"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
								ϒy = λargs[1]
							)
							return λ.Cal(Ωre.ϒsub, λ.GetAttr(ϒself, "_CAPTION_EXT_RE", nil), λ.Add(λ.NewStr("."), ϒy), ϒx)
						})
					ϒget_subs = λ.NewFunction("get_subs",
						[]λ.Param{
							{Name: "caption_url"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒcaption_url = λargs[0]
							)
							if λ.IsTrue(λ.Cal(Ωre.ϒsearch, λ.GetAttr(ϒself, "_CAPTION_EXT_RE", nil), ϒcaption_url)) {
								return λ.NewList(
									λ.NewDictWithTable(map[λ.Object]λ.Object{
										λ.NewStr("url"): λ.Cal(ϒreplace_ext, ϒcaption_url, λ.NewStr("ttml")),
									}),
									λ.NewDictWithTable(map[λ.Object]λ.Object{
										λ.NewStr("url"): λ.Cal(ϒreplace_ext, ϒcaption_url, λ.NewStr("vtt")),
									}),
								)
							} else {
								return λ.NewList(λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("url"): ϒcaption_url,
								}))
							}
							return λ.None
						})
					ϒautomatic_captions = λ.NewDictWithTable(map[λ.Object]λ.Object{})
					ϒsubtitles = λ.NewDictWithTable(map[λ.Object]λ.Object{})
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(ϒget_list, λ.NewStr("caption")))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒcaption = τmp1
						ϒcaption_url = λ.Cal(λ.GetAttr(ϒcaption, "get", nil), λ.NewStr("source"))
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒcaption_url))) {
							continue
						}
						ϒsub_dict = func() λ.Object {
							if λ.IsTrue(λ.Eq(λ.Cal(λ.GetAttr(ϒcaption, "get", nil), λ.NewStr("type")), λ.NewStr("auto"))) {
								return ϒautomatic_captions
							} else {
								return ϒsubtitles
							}
						}()
						λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒsub_dict, "setdefault", nil), λ.Cal(ϒdict_get, ϒcaption, λ.NewTuple(
							λ.NewStr("locale"),
							λ.NewStr("language"),
						)), λ.NewList()), "extend", nil), λ.Cal(ϒget_subs, ϒcaption_url))
					}
					ϒuser = λ.Cal(λ.GetAttr(ϒmeta, "get", nil), λ.NewStr("user"), λ.NewDictWithTable(map[λ.Object]λ.Object{}))
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):                 ϒvideo_id,
						λ.NewStr("title"):              ϒtitle,
						λ.NewStr("formats"):            ϒformats,
						λ.NewStr("subtitles"):          ϒsubtitles,
						λ.NewStr("automatic_captions"): ϒautomatic_captions,
						λ.NewStr("thumbnail"): λ.Cal(ϒtry_get, ϒmeta, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("cover")), λ.NewStr("source"))
							})),
						λ.NewStr("view_count"):   λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒmeta, "get", nil), λ.NewStr("count"))),
						λ.NewStr("uploader_id"):  λ.Cal(λ.GetAttr(ϒuser, "get", nil), λ.NewStr("id")),
						λ.NewStr("uploader"):     λ.Cal(λ.GetAttr(ϒuser, "get", nil), λ.NewStr("name")),
						λ.NewStr("uploader_url"): λ.Cal(λ.GetAttr(ϒuser, "get", nil), λ.NewStr("url")),
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_CAPTION_EXT_RE"):     NaverBaseIE__CAPTION_EXT_RE,
				λ.NewStr("_extract_video_info"): NaverBaseIE__extract_video_info,
			})
		}())
		NaverIE = λ.Cal(λ.TypeType, λ.NewStr("NaverIE"), λ.NewTuple(NaverBaseIE), func() λ.Dict {
			var (
				NaverIE__GEO_BYPASS   λ.Object
				NaverIE__VALID_URL    λ.Object
				NaverIE__real_extract λ.Object
			)
			NaverIE__VALID_URL = λ.NewStr("https?://(?:m\\.)?tv(?:cast)?\\.naver\\.com/(?:v|embed)/(?P<id>\\d+)")
			NaverIE__GEO_BYPASS = λ.False
			NaverIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcontent          λ.Object
						ϒcurrent_clip     λ.Object
						ϒin_key           λ.Object
						ϒinfo             λ.Object
						ϒplayer_auth      λ.Object
						ϒplayer_info_json λ.Object
						ϒself             = λargs[0]
						ϒurl              = λargs[1]
						ϒvid              λ.Object
						ϒvideo_id         λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒcontent = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Add(λ.NewStr("https://tv.naver.com/api/json/v/"), ϒvideo_id),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "headers", Value: λ.Cal(λ.GetAttr(ϒself, "geo_verification_headers", nil))},
					})
					ϒplayer_info_json = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒcontent, "get", nil), λ.NewStr("playerInfoJson")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewDictWithTable(map[λ.Object]λ.Object{})
						}
					}()
					ϒcurrent_clip = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒplayer_info_json, "get", nil), λ.NewStr("currentClip")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewDictWithTable(map[λ.Object]λ.Object{})
						}
					}()
					ϒvid = λ.Cal(λ.GetAttr(ϒcurrent_clip, "get", nil), λ.NewStr("videoId"))
					ϒin_key = λ.Cal(λ.GetAttr(ϒcurrent_clip, "get", nil), λ.NewStr("inKey"))
					if λ.IsTrue(func() λ.Object {
						if λv := λ.NewBool(!λ.IsTrue(ϒvid)); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewBool(!λ.IsTrue(ϒin_key))
						}
					}()) {
						ϒplayer_auth = λ.Cal(ϒtry_get, ϒplayer_info_json, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("playerOption")), λ.NewStr("auth"))
							}))
						if λ.IsTrue(λ.Eq(ϒplayer_auth, λ.NewStr("notCountry"))) {
							λ.Call(λ.GetAttr(ϒself, "raise_geo_restricted", nil), nil, λ.KWArgs{
								{Name: "countries", Value: λ.NewList(λ.NewStr("KR"))},
							})
						} else {
							if λ.IsTrue(λ.Eq(ϒplayer_auth, λ.NewStr("notLogin"))) {
								λ.Cal(λ.GetAttr(ϒself, "raise_login_required", nil))
							}
						}
						panic(λ.Raise(λ.Cal(ExtractorError, λ.NewStr("couldn't extract vid and key"))))
					}
					ϒinfo = λ.Cal(λ.GetAttr(ϒself, "_extract_video_info", nil), ϒvideo_id, ϒvid, ϒin_key)
					λ.Cal(λ.GetAttr(ϒinfo, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("description"): λ.Cal(ϒclean_html, λ.Cal(λ.GetAttr(ϒcurrent_clip, "get", nil), λ.NewStr("description"))),
						λ.NewStr("timestamp"):   λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒcurrent_clip, "get", nil), λ.NewStr("firstExposureTime")), λ.NewInt(1000)),
						λ.NewStr("duration"):    λ.Cal(ϒparse_duration, λ.Cal(λ.GetAttr(ϒcurrent_clip, "get", nil), λ.NewStr("displayPlayTime"))),
						λ.NewStr("like_count"):  λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒcurrent_clip, "get", nil), λ.NewStr("recommendPoint"))),
						λ.NewStr("age_limit"): func() λ.Object {
							if λ.IsTrue(λ.Cal(λ.GetAttr(ϒcurrent_clip, "get", nil), λ.NewStr("adult"))) {
								return λ.NewInt(19)
							} else {
								return λ.None
							}
						}(),
					}))
					return ϒinfo
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_GEO_BYPASS"):   NaverIE__GEO_BYPASS,
				λ.NewStr("_VALID_URL"):    NaverIE__VALID_URL,
				λ.NewStr("_real_extract"): NaverIE__real_extract,
			})
		}())
	})
}

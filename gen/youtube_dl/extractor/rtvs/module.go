// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * rtvs/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/rtvs.py
 */

package rtvs

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor λ.Object
	RTVSIE        λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		RTVSIE = λ.Cal(λ.TypeType, λ.NewStr("RTVSIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				RTVSIE__TESTS        λ.Object
				RTVSIE__VALID_URL    λ.Object
				RTVSIE__real_extract λ.Object
			)
			RTVSIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?rtvs\\.sk/(?:radio|televizia)/archiv/\\d+/(?P<id>\\d+)")
			RTVSIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.rtvs.sk/radio/archiv/11224/414872"),
					λ.NewStr("md5"): λ.NewStr("134d5d6debdeddf8a5d761cbc9edacb8"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):    λ.NewStr("414872"),
						λ.NewStr("ext"):   λ.NewStr("mp3"),
						λ.NewStr("title"): λ.NewStr("Ostrov pokladov 1 časť.mp3"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.rtvs.sk/televizia/archiv/8249/63118"),
					λ.NewStr("md5"): λ.NewStr("85e2c55cf988403b70cac24f5c086dc6"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("63118"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Amaro Džives - Náš deň"),
						λ.NewStr("description"): λ.NewStr("Galavečer pri príležitosti Medzinárodného dňa Rómov."),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
			)
			RTVSIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdata         λ.Object
						ϒplaylist_url λ.Object
						ϒself         = λargs[0]
						ϒurl          = λargs[1]
						ϒvideo_id     λ.Object
						ϒwebpage      λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					ϒplaylist_url = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("playlist[\"\\']?\\s*:\\s*([\"\\'])(?P<url>(?:(?!\\1).)+)\\1"),
						ϒwebpage,
						λ.NewStr("playlist url"),
					), λ.KWArgs{
						{Name: "group", Value: λ.NewStr("url")},
					})
					ϒdata = λ.GetItem(λ.Cal(λ.GetAttr(ϒself, "_download_json", nil), ϒplaylist_url, ϒvideo_id, λ.NewStr("Downloading playlist")), λ.NewInt(0))
					return λ.Call(λ.GetAttr(ϒself, "_parse_jwplayer_data", nil), λ.NewArgs(ϒdata), λ.KWArgs{
						{Name: "video_id", Value: ϒvideo_id},
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        RTVSIE__TESTS,
				λ.NewStr("_VALID_URL"):    RTVSIE__VALID_URL,
				λ.NewStr("_real_extract"): RTVSIE__real_extract,
			})
		}())
	})
}

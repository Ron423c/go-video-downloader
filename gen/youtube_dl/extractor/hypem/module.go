// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * hypem/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/hypem.py
 */

package hypem

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	HypemIE       λ.Object
	InfoExtractor λ.Object
	ϒint_or_none  λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒint_or_none = Ωutils.ϒint_or_none
		HypemIE = λ.Cal(λ.TypeType, λ.StrLiteral("HypemIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				HypemIE__VALID_URL    λ.Object
				HypemIE__real_extract λ.Object
			)
			HypemIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?hypem\\.com/track/(?P<id>[0-9a-z]{5})")
			HypemIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒfinal_url λ.Object
						ϒresponse  λ.Object
						ϒself      = λargs[0]
						ϒtitle     λ.Object
						ϒtrack     λ.Object
						ϒtrack_id  λ.Object
						ϒurl       = λargs[1]
					)
					ϒtrack_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒresponse = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒtrack_id)
					ϒtrack = λ.GetItem(λ.GetItem(λ.Calm(ϒself, "_parse_json", λ.Calm(ϒself, "_html_search_regex", λ.StrLiteral("(?s)<script\\s+type=\"application/json\"\\s+id=\"displayList-data\">(.+?)</script>"), ϒresponse, λ.StrLiteral("tracks")), ϒtrack_id), λ.StrLiteral("tracks")), λ.IntLiteral(0))
					ϒtrack_id = λ.GetItem(ϒtrack, λ.StrLiteral("id"))
					ϒtitle = λ.GetItem(ϒtrack, λ.StrLiteral("song"))
					ϒfinal_url = λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Mod(λ.StrLiteral("http://hypem.com/serve/source/%s/%s"), λ.NewTuple(
							ϒtrack_id,
							λ.GetItem(ϒtrack, λ.StrLiteral("key")),
						)),
						ϒtrack_id,
						λ.StrLiteral("Downloading metadata"),
					), λ.KWArgs{
						{Name: "headers", Value: λ.DictLiteral(map[string]string{
							"Content-Type": "application/json",
						})},
					}), λ.StrLiteral("url"))
					return λ.DictLiteral(map[string]λ.Object{
						"id":        ϒtrack_id,
						"url":       ϒfinal_url,
						"ext":       λ.StrLiteral("mp3"),
						"title":     ϒtitle,
						"uploader":  λ.Calm(ϒtrack, "get", λ.StrLiteral("artist")),
						"duration":  λ.Cal(ϒint_or_none, λ.Calm(ϒtrack, "get", λ.StrLiteral("time"))),
						"timestamp": λ.Cal(ϒint_or_none, λ.Calm(ϒtrack, "get", λ.StrLiteral("ts"))),
						"track":     ϒtitle,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    HypemIE__VALID_URL,
				"_real_extract": HypemIE__real_extract,
			})
		}())
	})
}

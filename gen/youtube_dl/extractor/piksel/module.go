// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * piksel/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/piksel.py
 */

package piksel

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError λ.Object
	InfoExtractor  λ.Object
	PikselIE       λ.Object
	ϒcompat_str    λ.Object
	ϒdict_get      λ.Object
	ϒint_or_none   λ.Object
	ϒparse_iso8601 λ.Object
	ϒunescapeHTML  λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ExtractorError = Ωutils.ExtractorError
		ϒdict_get = Ωutils.ϒdict_get
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒunescapeHTML = Ωutils.ϒunescapeHTML
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		PikselIE = λ.Cal(λ.TypeType, λ.NewStr("PikselIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				PikselIE__VALID_URL    λ.Object
				PikselIE__real_extract λ.Object
			)
			PikselIE__VALID_URL = λ.NewStr("https?://player\\.piksel\\.com/v/(?:refid/[^/]+/prefid/)?(?P<id>[a-z0-9_]+)")
			PikselIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒabr         λ.Object
						ϒapp_token   λ.Object
						ϒasset_file  λ.Object
						ϒasset_type  λ.Object
						ϒcaption     λ.Object
						ϒcaption_url λ.Object
						ϒdisplay_id  λ.Object
						ϒfailure     λ.Object
						ϒformat_id   λ.Object
						ϒformats     λ.Object
						ϒhttp_url    λ.Object
						ϒm3u8_url    λ.Object
						ϒresponse    λ.Object
						ϒself        = λargs[0]
						ϒsubtitles   λ.Object
						ϒtbr         λ.Object
						ϒtitle       λ.Object
						ϒurl         = λargs[1]
						ϒvbr         λ.Object
						ϒvideo_data  λ.Object
						ϒvideo_id    λ.Object
						ϒwebpage     λ.Object
						τmp0         λ.Object
						τmp1         λ.Object
					)
					ϒdisplay_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒdisplay_id)
					ϒvideo_id = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("data-de-program-uuid=[\\'\"]([a-z0-9]+)"),
						ϒwebpage,
						λ.NewStr("program uuid"),
					), λ.KWArgs{
						{Name: "default", Value: ϒdisplay_id},
					})
					ϒapp_token = λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewList(
						λ.NewStr("clientAPI\\s*:\\s*\"([^\"]+)\""),
						λ.NewStr("data-de-api-key\\s*=\\s*\"([^\"]+)\""),
					), ϒwebpage, λ.NewStr("app token"))
					ϒresponse = λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Mod(λ.NewStr("http://player.piksel.com/ws/ws_program/api/%s/mode/json/apiv/5"), ϒapp_token),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "query", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("v"): ϒvideo_id,
						})},
					}), λ.NewStr("response"))
					ϒfailure = λ.Cal(λ.GetAttr(ϒresponse, "get", nil), λ.NewStr("failure"))
					if λ.IsTrue(ϒfailure) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.GetItem(λ.GetItem(ϒresponse, λ.NewStr("failure")), λ.NewStr("reason"))), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒvideo_data = λ.GetItem(λ.GetItem(λ.GetItem(ϒresponse, λ.NewStr("WsProgramResponse")), λ.NewStr("program")), λ.NewStr("asset"))
					ϒtitle = λ.GetItem(ϒvideo_data, λ.NewStr("title"))
					ϒformats = λ.NewList()
					ϒm3u8_url = λ.Cal(ϒdict_get, ϒvideo_data, λ.NewList(
						λ.NewStr("m3u8iPadURL"),
						λ.NewStr("ipadM3u8Url"),
						λ.NewStr("m3u8AndroidURL"),
						λ.NewStr("m3u8iPhoneURL"),
						λ.NewStr("iphoneM3u8Url"),
					))
					if λ.IsTrue(ϒm3u8_url) {
						λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
							ϒm3u8_url,
							ϒvideo_id,
							λ.NewStr("mp4"),
							λ.NewStr("m3u8_native"),
						), λ.KWArgs{
							{Name: "m3u8_id", Value: λ.NewStr("hls")},
							{Name: "fatal", Value: λ.False},
						}))
					}
					ϒasset_type = λ.Cal(ϒdict_get, ϒvideo_data, λ.NewList(
						λ.NewStr("assetType"),
						λ.NewStr("asset_type"),
					))
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("assetFiles"), λ.NewList()))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒasset_file = τmp1
						ϒhttp_url = λ.Cal(λ.GetAttr(ϒasset_file, "get", nil), λ.NewStr("http_url"))
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒhttp_url))) {
							continue
						}
						ϒtbr = λ.None
						ϒvbr = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒasset_file, "get", nil), λ.NewStr("videoBitrate")), λ.NewInt(1024))
						ϒabr = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒasset_file, "get", nil), λ.NewStr("audioBitrate")), λ.NewInt(1024))
						if λ.IsTrue(λ.Eq(ϒasset_type, λ.NewStr("video"))) {
							ϒtbr = λ.Add(ϒvbr, ϒabr)
						} else {
							if λ.IsTrue(λ.Eq(ϒasset_type, λ.NewStr("audio"))) {
								ϒtbr = ϒabr
							}
						}
						ϒformat_id = λ.NewList(λ.NewStr("http"))
						if λ.IsTrue(ϒtbr) {
							λ.Cal(λ.GetAttr(ϒformat_id, "append", nil), λ.Cal(ϒcompat_str, ϒtbr))
						}
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("format_id"): λ.Cal(λ.GetAttr(λ.NewStr("-"), "join", nil), ϒformat_id),
							λ.NewStr("url"):       λ.Cal(ϒunescapeHTML, ϒhttp_url),
							λ.NewStr("vbr"):       ϒvbr,
							λ.NewStr("abr"):       ϒabr,
							λ.NewStr("width"):     λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒasset_file, "get", nil), λ.NewStr("videoWidth"))),
							λ.NewStr("height"):    λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒasset_file, "get", nil), λ.NewStr("videoHeight"))),
							λ.NewStr("filesize"):  λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒasset_file, "get", nil), λ.NewStr("filesize"))),
							λ.NewStr("tbr"):       ϒtbr,
						}))
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒsubtitles = λ.NewDictWithTable(map[λ.Object]λ.Object{})
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("captions"), λ.NewList()))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒcaption = τmp1
						ϒcaption_url = λ.Cal(λ.GetAttr(ϒcaption, "get", nil), λ.NewStr("url"))
						if λ.IsTrue(ϒcaption_url) {
							λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒsubtitles, "setdefault", nil), λ.Cal(λ.GetAttr(ϒcaption, "get", nil), λ.NewStr("locale"), λ.NewStr("en")), λ.NewList()), "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("url"): ϒcaption_url,
							}))
						}
					}
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("title"):       ϒtitle,
						λ.NewStr("description"): λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("description")),
						λ.NewStr("thumbnail"):   λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("thumbnailUrl")),
						λ.NewStr("timestamp"):   λ.Cal(ϒparse_iso8601, λ.Cal(λ.GetAttr(ϒvideo_data, "get", nil), λ.NewStr("dateadd"))),
						λ.NewStr("formats"):     ϒformats,
						λ.NewStr("subtitles"):   ϒsubtitles,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"):    PikselIE__VALID_URL,
				λ.NewStr("_real_extract"): PikselIE__real_extract,
			})
		}())
	})
}

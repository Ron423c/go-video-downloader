// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * rentv/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/rentv.py
 */

package rentv

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor  λ.Object
	RENTVArticleIE λ.Object
	RENTVIE        λ.Object
	ϒcompat_str    λ.Object
	ϒdetermine_ext λ.Object
	ϒint_or_none   λ.Object
	ϒurl_or_none   λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒurl_or_none = Ωutils.ϒurl_or_none
		RENTVIE = λ.Cal(λ.TypeType, λ.NewStr("RENTVIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				RENTVIE__TESTS        λ.Object
				RENTVIE__VALID_URL    λ.Object
				RENTVIE__real_extract λ.Object
			)
			RENTVIE__VALID_URL = λ.NewStr("(?:rentv:|https?://(?:www\\.)?ren\\.tv/(?:player|video/epizod)/)(?P<id>\\d+)")
			RENTVIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://ren.tv/video/epizod/118577"),
					λ.NewStr("md5"): λ.NewStr("d91851bf9af73c0ad9b2cdf76c127fbb"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("118577"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Документальный спецпроект: \"Промывка мозгов. Технологии XXI века\""),
						λ.NewStr("timestamp"):   λ.NewInt(1472230800),
						λ.NewStr("upload_date"): λ.NewStr("20160826"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://ren.tv/player/118577"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("rentv:118577"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			RENTVIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒconfig   λ.Object
						ϒext      λ.Object
						ϒformats  λ.Object
						ϒself     = λargs[0]
						ϒsrc      λ.Object
						ϒtitle    λ.Object
						ϒurl      = λargs[1]
						ϒvideo    λ.Object
						ϒvideo_id λ.Object
						ϒwebpage  λ.Object
						τmp0      λ.Object
						τmp1      λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), λ.Add(λ.NewStr("http://ren.tv/player/"), ϒvideo_id), ϒvideo_id)
					ϒconfig = λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("config\\s*=\\s*({.+})\\s*;"), ϒwebpage, λ.NewStr("config")), ϒvideo_id)
					ϒtitle = λ.GetItem(ϒconfig, λ.NewStr("title"))
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.GetItem(ϒconfig, λ.NewStr("src")))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒvideo = τmp1
						ϒsrc = λ.Cal(ϒurl_or_none, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("src")))
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒsrc))) {
							continue
						}
						ϒext = λ.Cal(ϒdetermine_ext, ϒsrc)
						if λ.IsTrue(λ.Eq(ϒext, λ.NewStr("m3u8"))) {
							λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
								ϒsrc,
								ϒvideo_id,
								λ.NewStr("mp4"),
							), λ.KWArgs{
								{Name: "entry_protocol", Value: λ.NewStr("m3u8_native")},
								{Name: "m3u8_id", Value: λ.NewStr("hls")},
								{Name: "fatal", Value: λ.False},
							}))
						} else {
							λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("url"): ϒsrc,
							}))
						}
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("title"):       ϒtitle,
						λ.NewStr("description"): λ.Cal(λ.GetAttr(ϒconfig, "get", nil), λ.NewStr("description")),
						λ.NewStr("thumbnail"):   λ.Cal(λ.GetAttr(ϒconfig, "get", nil), λ.NewStr("image")),
						λ.NewStr("duration"):    λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒconfig, "get", nil), λ.NewStr("duration"))),
						λ.NewStr("timestamp"):   λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒconfig, "get", nil), λ.NewStr("date"))),
						λ.NewStr("formats"):     ϒformats,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        RENTVIE__TESTS,
				λ.NewStr("_VALID_URL"):    RENTVIE__VALID_URL,
				λ.NewStr("_real_extract"): RENTVIE__real_extract,
			})
		}())
		RENTVArticleIE = λ.Cal(λ.TypeType, λ.NewStr("RENTVArticleIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				RENTVArticleIE__VALID_URL λ.Object
			)
			RENTVArticleIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?ren\\.tv/novosti/\\d{4}-\\d{2}-\\d{2}/(?P<id>[^/?#]+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): RENTVArticleIE__VALID_URL,
			})
		}())
	})
}

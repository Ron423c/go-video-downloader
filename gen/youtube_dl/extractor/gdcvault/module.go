// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * gdcvault/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/gdcvault.py
 */

package gdcvault

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωkaltura "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/kaltura"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	GDCVaultIE          λ.Object
	HEADRequest         λ.Object
	InfoExtractor       λ.Object
	KalturaIE           λ.Object
	ϒsanitized_Request  λ.Object
	ϒsmuggle_url        λ.Object
	ϒurlencode_postdata λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		KalturaIE = Ωkaltura.KalturaIE
		HEADRequest = Ωutils.HEADRequest
		ϒsanitized_Request = Ωutils.ϒsanitized_Request
		ϒsmuggle_url = Ωutils.ϒsmuggle_url
		ϒurlencode_postdata = Ωutils.ϒurlencode_postdata
		GDCVaultIE = λ.Cal(λ.TypeType, λ.NewStr("GDCVaultIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				GDCVaultIE__NETRC_MACHINE λ.Object
				GDCVaultIE__VALID_URL     λ.Object
				GDCVaultIE__login         λ.Object
				GDCVaultIE__real_extract  λ.Object
			)
			GDCVaultIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?gdcvault\\.com/play/(?P<id>\\d+)(?:/(?P<name>[\\w-]+))?")
			GDCVaultIE__NETRC_MACHINE = λ.NewStr("gdcvault")
			GDCVaultIE__login = λ.NewFunction("_login",
				[]λ.Param{
					{Name: "self"},
					{Name: "webpage_url"},
					{Name: "display_id"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdisplay_id  = λargs[2]
						ϒlogin_form  λ.Object
						ϒlogin_url   λ.Object
						ϒlogout_url  λ.Object
						ϒmobj        λ.Object
						ϒpassword    λ.Object
						ϒrequest     λ.Object
						ϒself        = λargs[0]
						ϒstart_page  λ.Object
						ϒusername    λ.Object
						ϒwebpage_url = λargs[1]
						τmp0         λ.Object
					)
					τmp0 = λ.Cal(λ.GetAttr(ϒself, "_get_login_info", nil))
					ϒusername = λ.GetItem(τmp0, λ.NewInt(0))
					ϒpassword = λ.GetItem(τmp0, λ.NewInt(1))
					if λ.IsTrue(func() λ.Object {
						if λv := λ.NewBool(ϒusername == λ.None); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewBool(ϒpassword == λ.None)
						}
					}()) {
						λ.Cal(λ.GetAttr(ϒself, "report_warning", nil), λ.Add(λ.Add(λ.NewStr("It looks like "), ϒwebpage_url), λ.NewStr(" requires a login. Try specifying a username and password and try again.")))
						return λ.None
					}
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.NewStr("(?P<root_url>https?://.*?/).*"), ϒwebpage_url)
					ϒlogin_url = λ.Add(λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("root_url")), λ.NewStr("api/login.php"))
					ϒlogout_url = λ.Add(λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("root_url")), λ.NewStr("logout"))
					ϒlogin_form = λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("email"):    ϒusername,
						λ.NewStr("password"): ϒpassword,
					})
					ϒrequest = λ.Cal(ϒsanitized_Request, ϒlogin_url, λ.Cal(ϒurlencode_postdata, ϒlogin_form))
					λ.Cal(λ.GetAttr(ϒrequest, "add_header", nil), λ.NewStr("Content-Type"), λ.NewStr("application/x-www-form-urlencoded"))
					λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒrequest, ϒdisplay_id, λ.NewStr("Logging in"))
					ϒstart_page = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒwebpage_url, ϒdisplay_id, λ.NewStr("Getting authenticated video page"))
					λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒlogout_url, ϒdisplay_id, λ.NewStr("Logging out"))
					return ϒstart_page
				})
			GDCVaultIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						PLAYER_REGEX λ.Object
						ϒdirect_url  λ.Object
						ϒdisplay_id  λ.Object
						ϒembed_url   λ.Object
						ϒie_key      λ.Object
						ϒlogin_res   λ.Object
						ϒname        λ.Object
						ϒself        = λargs[0]
						ϒstart_page  λ.Object
						ϒtitle       λ.Object
						ϒurl         = λargs[1]
						ϒvideo_id    λ.Object
						ϒvideo_url   λ.Object
						ϒwebpage_url λ.Object
						ϒxml_name    λ.Object
						ϒxml_root    λ.Object
						τmp0         λ.Object
					)
					τmp0 = λ.Cal(λ.GetAttr(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups", nil))
					ϒvideo_id = λ.GetItem(τmp0, λ.NewInt(0))
					ϒname = λ.GetItem(τmp0, λ.NewInt(1))
					ϒdisplay_id = func() λ.Object {
						if λv := ϒname; λ.IsTrue(λv) {
							return λv
						} else {
							return ϒvideo_id
						}
					}()
					ϒwebpage_url = λ.Add(λ.NewStr("http://www.gdcvault.com/play/"), ϒvideo_id)
					ϒstart_page = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒwebpage_url, ϒdisplay_id)
					ϒdirect_url = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("s1\\.addVariable\\(\"file\",\\s*encodeURIComponent\\(\"(/[^\"]+)\"\\)\\);"),
						ϒstart_page,
						λ.NewStr("url"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(ϒdirect_url) {
						ϒtitle = λ.Cal(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewStr("<td><strong>Session Name:?</strong></td>\\s*<td>(.*?)</td>"), ϒstart_page, λ.NewStr("title"))
						ϒvideo_url = λ.Add(λ.NewStr("http://www.gdcvault.com"), ϒdirect_url)
						ϒvideo_url = λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒself, "_request_webpage", nil), λ.Cal(HEADRequest, ϒvideo_url), ϒvideo_id), "geturl", nil))
						return λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("id"):         ϒvideo_id,
							λ.NewStr("display_id"): ϒdisplay_id,
							λ.NewStr("url"):        ϒvideo_url,
							λ.NewStr("title"):      ϒtitle,
						})
					}
					ϒembed_url = λ.Cal(λ.GetAttr(KalturaIE, "_extract_url", nil), ϒstart_page)
					if λ.IsTrue(ϒembed_url) {
						ϒembed_url = λ.Cal(ϒsmuggle_url, ϒembed_url, λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("source_url"): ϒurl,
						}))
						ϒie_key = λ.NewStr("Kaltura")
					} else {
						PLAYER_REGEX = λ.NewStr("<iframe src=\"(?P<xml_root>.+?)/(?:gdc-)?player.*?\\.html.*?\".*?</iframe>")
						ϒxml_root = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
							PLAYER_REGEX,
							ϒstart_page,
							λ.NewStr("xml root"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						})
						if λ.IsTrue(λ.NewBool(ϒxml_root == λ.None)) {
							ϒlogin_res = λ.Cal(λ.GetAttr(ϒself, "_login", nil), ϒwebpage_url, ϒdisplay_id)
							if λ.IsTrue(λ.NewBool(ϒlogin_res == λ.None)) {
								λ.Cal(λ.GetAttr(ϒself, "report_warning", nil), λ.NewStr("Could not login."))
							} else {
								ϒstart_page = ϒlogin_res
								ϒxml_root = λ.Cal(λ.GetAttr(ϒself, "_html_search_regex", nil), PLAYER_REGEX, ϒstart_page, λ.NewStr("xml root"))
							}
						}
						ϒxml_name = λ.Cal(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewStr("<iframe src=\".*?\\?xml(?:=|URL=xml/)(.+?\\.xml).*?\".*?</iframe>"), ϒstart_page, λ.NewStr("xml filename"))
						ϒembed_url = λ.Mod(λ.NewStr("%s/xml/%s"), λ.NewTuple(
							ϒxml_root,
							ϒxml_name,
						))
						ϒie_key = λ.NewStr("DigitallySpeaking")
					}
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("_type"):      λ.NewStr("url_transparent"),
						λ.NewStr("id"):         ϒvideo_id,
						λ.NewStr("display_id"): ϒdisplay_id,
						λ.NewStr("url"):        ϒembed_url,
						λ.NewStr("ie_key"):     ϒie_key,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_NETRC_MACHINE"): GDCVaultIE__NETRC_MACHINE,
				λ.NewStr("_VALID_URL"):     GDCVaultIE__VALID_URL,
				λ.NewStr("_login"):         GDCVaultIE__login,
				λ.NewStr("_real_extract"):  GDCVaultIE__real_extract,
			})
		}())
	})
}

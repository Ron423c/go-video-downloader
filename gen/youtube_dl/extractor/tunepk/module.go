// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * tunepk/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/tunepk.py
 */

package tunepk

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor      λ.Object
	TunePkIE           λ.Object
	ϒcompat_str        λ.Object
	ϒint_or_none       λ.Object
	ϒtry_get           λ.Object
	ϒunified_timestamp λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒtry_get = Ωutils.ϒtry_get
		ϒunified_timestamp = Ωutils.ϒunified_timestamp
		TunePkIE = λ.Cal(λ.TypeType, λ.NewStr("TunePkIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				TunePkIE__TESTS        λ.Object
				TunePkIE__VALID_URL    λ.Object
				TunePkIE__real_extract λ.Object
			)
			TunePkIE__VALID_URL = λ.NewStr("(?x)\n                    https?://\n                        (?:\n                            (?:www\\.)?tune\\.pk/(?:video/|player/embed_player.php?.*?\\bvid=)|\n                            embed\\.tune\\.pk/play/\n                        )\n                        (?P<id>\\d+)\n                    ")
			TunePkIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://tune.pk/video/6919541/maudie-2017-international-trailer-1-ft-ethan-hawke-sally-hawkins"),
					λ.NewStr("md5"): λ.NewStr("0c537163b7f6f97da3c5dd1e3ef6dd55"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("6919541"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Maudie (2017) | International Trailer # 1 ft Ethan Hawke, Sally Hawkins"),
						λ.NewStr("description"): λ.NewStr("md5:eb5a04114fafef5cec90799a93a2d09c"),
						λ.NewStr("thumbnail"):   λ.NewStr("re:^https?://.*\\.jpg$"),
						λ.NewStr("timestamp"):   λ.NewInt(1487327564),
						λ.NewStr("upload_date"): λ.NewStr("20170217"),
						λ.NewStr("uploader"):    λ.NewStr("Movie Trailers"),
						λ.NewStr("duration"):    λ.NewInt(107),
						λ.NewStr("view_count"):  λ.IntType,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://tune.pk/player/embed_player.php?vid=6919541&folder=2017/02/17/&width=600&height=350&autoplay=no"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://embed.tune.pk/play/6919541?autoplay=no&ssl=yes&inline=true"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			TunePkIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdescription λ.Object
						ϒdetails     λ.Object
						ϒduration    λ.Object
						ϒformats     λ.Object
						ϒself        = λargs[0]
						ϒthumbnail   λ.Object
						ϒtimestamp   λ.Object
						ϒtitle       λ.Object
						ϒuploader    λ.Object
						ϒurl         = λargs[1]
						ϒvideo       λ.Object
						ϒvideo_id    λ.Object
						ϒview_count  λ.Object
						ϒwebpage     λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), λ.Mod(λ.NewStr("https://tune.pk/video/%s"), ϒvideo_id), ϒvideo_id)
					ϒdetails = λ.GetItem(λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("new\\s+TunePlayer\\(({.+?})\\)\\s*;\\s*\\n"), ϒwebpage, λ.NewStr("tune player")), ϒvideo_id), λ.NewStr("details"))
					ϒvideo = λ.GetItem(ϒdetails, λ.NewStr("video"))
					ϒtitle = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("title")); λ.IsTrue(λv) {
							return λv
						} else if λv := λ.Call(λ.GetAttr(ϒself, "_og_search_title", nil), λ.NewArgs(ϒwebpage), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
								λ.NewStr("title"),
								ϒwebpage,
								λ.NewStr("title"),
							), λ.KWArgs{
								{Name: "fatal", Value: λ.True},
							})
						}
					}()
					ϒformats = λ.Cal(λ.GetAttr(ϒself, "_parse_jwplayer_formats", nil), λ.GetItem(λ.GetItem(ϒdetails, λ.NewStr("player")), λ.NewStr("sources")), ϒvideo_id)
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒdescription = func() λ.Object {
						if λv := λ.Call(λ.GetAttr(ϒself, "_og_search_description", nil), λ.NewArgs(ϒwebpage), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewStr("description"), ϒwebpage, λ.NewStr("description"))
						}
					}()
					ϒthumbnail = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("thumb")); λ.IsTrue(λv) {
							return λv
						} else if λv := λ.Call(λ.GetAttr(ϒself, "_og_search_thumbnail", nil), λ.NewArgs(ϒwebpage), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewStr("thumbnail"), ϒwebpage, λ.NewStr("thumbnail"))
						}
					}()
					ϒtimestamp = λ.Cal(ϒunified_timestamp, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("date_added")))
					ϒuploader = func() λ.Object {
						if λv := λ.Cal(ϒtry_get, ϒvideo, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("uploader")), λ.NewStr("name"))
							}), ϒcompat_str); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewStr("author"), ϒwebpage, λ.NewStr("author"))
						}
					}()
					ϒduration = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("duration")))
					ϒview_count = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("views")))
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("title"):       ϒtitle,
						λ.NewStr("description"): ϒdescription,
						λ.NewStr("thumbnail"):   ϒthumbnail,
						λ.NewStr("timestamp"):   ϒtimestamp,
						λ.NewStr("uploader"):    ϒuploader,
						λ.NewStr("duration"):    ϒduration,
						λ.NewStr("view_count"):  ϒview_count,
						λ.NewStr("formats"):     ϒformats,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        TunePkIE__TESTS,
				λ.NewStr("_VALID_URL"):    TunePkIE__VALID_URL,
				λ.NewStr("_real_extract"): TunePkIE__real_extract,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * plays/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/plays.py
 */

package plays

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor λ.Object
	PlaysTVIE     λ.Object
	ϒint_or_none  λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒint_or_none = Ωutils.ϒint_or_none
		PlaysTVIE = λ.Cal(λ.TypeType, λ.NewStr("PlaysTVIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				PlaysTVIE__TESTS        λ.Object
				PlaysTVIE__VALID_URL    λ.Object
				PlaysTVIE__real_extract λ.Object
			)
			PlaysTVIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?plays\\.tv/(?:video|embeds)/(?P<id>[0-9a-f]{18})")
			PlaysTVIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://plays.tv/video/56af17f56c95335490/when-you-outplay-the-azir-wall"),
					λ.NewStr("md5"): λ.NewStr("dfeac1198506652b5257a62762cec7bc"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("56af17f56c95335490"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Bjergsen - When you outplay the Azir wall"),
						λ.NewStr("description"): λ.NewStr("Posted by Bjergsen"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://plays.tv/embeds/56af17f56c95335490"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			PlaysTVIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒformat_id  λ.Object
						ϒformat_url λ.Object
						ϒformats    λ.Object
						ϒheight     λ.Object
						ϒinfo       λ.Object
						ϒmpd_url    λ.Object
						ϒself       = λargs[0]
						ϒsources    λ.Object
						ϒurl        = λargs[1]
						ϒvideo_id   λ.Object
						ϒwebpage    λ.Object
						τmp0        λ.Object
						τmp1        λ.Object
						τmp2        λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), λ.Mod(λ.NewStr("https://plays.tv/video/%s"), ϒvideo_id), ϒvideo_id)
					ϒinfo = λ.Cal(λ.GetAttr(ϒself, "_search_json_ld", nil), ϒwebpage, ϒvideo_id)
					τmp0 = λ.Cal(λ.GetAttr(λ.Cal(Ωre.ϒsearch, λ.NewStr("(?s)<video[^>]+data-mpd=\"([^\"]+)\"[^>]*>(.+?)</video>"), ϒwebpage), "groups", nil))
					ϒmpd_url = λ.GetItem(τmp0, λ.NewInt(0))
					ϒsources = λ.GetItem(τmp0, λ.NewInt(1))
					ϒformats = λ.Call(λ.GetAttr(ϒself, "_extract_mpd_formats", nil), λ.NewArgs(
						λ.Cal(λ.GetAttr(ϒself, "_proto_relative_url", nil), ϒmpd_url),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "mpd_id", Value: λ.NewStr("DASH")},
					})
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfindall, λ.NewStr("<source\\s+res=\"((\\d+)h?)\"\\s+src=\"([^\"]+)\""), ϒsources))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒformat_id = λ.GetItem(τmp2, λ.NewInt(0))
						ϒheight = λ.GetItem(τmp2, λ.NewInt(1))
						ϒformat_url = λ.GetItem(τmp2, λ.NewInt(2))
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"):       λ.Cal(λ.GetAttr(ϒself, "_proto_relative_url", nil), ϒformat_url),
							λ.NewStr("format_id"): λ.Add(λ.NewStr("http-"), ϒformat_id),
							λ.NewStr("height"):    λ.Cal(ϒint_or_none, ϒheight),
						}))
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					λ.Cal(λ.GetAttr(ϒinfo, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("description"): λ.Cal(λ.GetAttr(ϒself, "_og_search_description", nil), ϒwebpage),
						λ.NewStr("thumbnail"): func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("thumbnail")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(ϒself, "_og_search_thumbnail", nil), ϒwebpage)
							}
						}(),
						λ.NewStr("formats"): ϒformats,
					}))
					return ϒinfo
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        PlaysTVIE__TESTS,
				λ.NewStr("_VALID_URL"):    PlaysTVIE__VALID_URL,
				λ.NewStr("_real_extract"): PlaysTVIE__real_extract,
			})
		}())
	})
}

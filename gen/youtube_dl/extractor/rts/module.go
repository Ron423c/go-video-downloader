// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * rts/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/rts.py
 */

package rts

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωsrgssr "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/srgssr"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	RTSIE           λ.Object
	SRGSSRIE        λ.Object
	ϒcompat_str     λ.Object
	ϒdetermine_ext  λ.Object
	ϒint_or_none    λ.Object
	ϒparse_duration λ.Object
	ϒparse_iso8601  λ.Object
	ϒunescapeHTML   λ.Object
)

func init() {
	λ.InitModule(func() {
		SRGSSRIE = Ωsrgssr.SRGSSRIE
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		ϒunescapeHTML = Ωutils.ϒunescapeHTML
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		RTSIE = λ.Cal(λ.TypeType, λ.NewStr("RTSIE"), λ.NewTuple(SRGSSRIE), func() λ.Dict {
			var (
				RTSIE__TESTS        λ.Object
				RTSIE__VALID_URL    λ.Object
				RTSIE__real_extract λ.Object
			)
			RTSIE__VALID_URL = λ.NewStr("rts:(?P<rts_id>\\d+)|https?://(?:.+?\\.)?rts\\.ch/(?:[^/]+/){2,}(?P<id>[0-9]+)-(?P<display_id>.+?)\\.html")
			RTSIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.rts.ch/archives/tv/divers/3449373-les-enfants-terribles.html"),
					λ.NewStr("md5"): λ.NewStr("ff7f8450a90cf58dacb64e29707b4a8e"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("3449373"),
						λ.NewStr("display_id"):  λ.NewStr("les-enfants-terribles"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("duration"):    λ.NewInt(1488),
						λ.NewStr("title"):       λ.NewStr("Les Enfants Terribles"),
						λ.NewStr("description"): λ.NewStr("France Pommier et sa soeur Luce Feral, les deux filles de ce groupe de 5."),
						λ.NewStr("uploader"):    λ.NewStr("Divers"),
						λ.NewStr("upload_date"): λ.NewStr("19680921"),
						λ.NewStr("timestamp"):   λ.Neg(λ.NewInt(40280400)),
						λ.NewStr("thumbnail"):   λ.NewStr("re:^https?://.*\\.image"),
						λ.NewStr("view_count"):  λ.IntType,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.rts.ch/emissions/passe-moi-les-jumelles/5624067-entre-ciel-et-mer.html"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):    λ.NewStr("5624065"),
						λ.NewStr("title"): λ.NewStr("Passe-moi les jumelles"),
					}),
					λ.NewStr("playlist_mincount"): λ.NewInt(4),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.rts.ch/video/sport/hockey/5745975-1-2-kloten-fribourg-5-2-second-but-pour-gotteron-par-kwiatowski.html"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("5745975"),
						λ.NewStr("display_id"):  λ.NewStr("1-2-kloten-fribourg-5-2-second-but-pour-gotteron-par-kwiatowski"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("duration"):    λ.NewInt(48),
						λ.NewStr("title"):       λ.NewStr("1/2, Kloten - Fribourg (5-2): second but pour Gottéron par Kwiatowski"),
						λ.NewStr("description"): λ.NewStr("Hockey - Playoff"),
						λ.NewStr("uploader"):    λ.NewStr("Hockey"),
						λ.NewStr("upload_date"): λ.NewStr("20140403"),
						λ.NewStr("timestamp"):   λ.NewInt(1396556882),
						λ.NewStr("thumbnail"):   λ.NewStr("re:^https?://.*\\.image"),
						λ.NewStr("view_count"):  λ.IntType,
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
					λ.NewStr("skip"): λ.NewStr("Blocked outside Switzerland"),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.rts.ch/video/info/journal-continu/5745356-londres-cachee-par-un-epais-smog.html"),
					λ.NewStr("md5"): λ.NewStr("1bae984fe7b1f78e94abc74e802ed99f"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("5745356"),
						λ.NewStr("display_id"):  λ.NewStr("londres-cachee-par-un-epais-smog"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("duration"):    λ.NewInt(33),
						λ.NewStr("title"):       λ.NewStr("Londres cachée par un épais smog"),
						λ.NewStr("description"): λ.NewStr("Un important voile de smog recouvre Londres depuis mercredi, provoqué par la pollution et du sable du Sahara."),
						λ.NewStr("uploader"):    λ.NewStr("L'actu en vidéo"),
						λ.NewStr("upload_date"): λ.NewStr("20140403"),
						λ.NewStr("timestamp"):   λ.NewInt(1396537322),
						λ.NewStr("thumbnail"):   λ.NewStr("re:^https?://.*\\.image"),
						λ.NewStr("view_count"):  λ.IntType,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.rts.ch/audio/couleur3/programmes/la-belle-video-de-stephane-laurenceau/5706148-urban-hippie-de-damien-krisl-03-04-2014.html"),
					λ.NewStr("md5"): λ.NewStr("dd8ef6a22dff163d063e2a52bc8adcae"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("5706148"),
						λ.NewStr("display_id"):  λ.NewStr("urban-hippie-de-damien-krisl-03-04-2014"),
						λ.NewStr("ext"):         λ.NewStr("mp3"),
						λ.NewStr("duration"):    λ.NewInt(123),
						λ.NewStr("title"):       λ.NewStr("\"Urban Hippie\", de Damien Krisl"),
						λ.NewStr("description"): λ.NewStr("Des Hippies super glam."),
						λ.NewStr("upload_date"): λ.NewStr("20140403"),
						λ.NewStr("timestamp"):   λ.NewInt(1396551600),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.rts.ch/sport/hockey/6693917-hockey-davos-decroche-son-31e-titre-de-champion-de-suisse.html"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):    λ.NewStr("6693917"),
						λ.NewStr("title"): λ.NewStr("Hockey: Davos décroche son 31e titre de champion de Suisse"),
					}),
					λ.NewStr("playlist_mincount"): λ.NewInt(5),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://pages.rts.ch/emissions/passe-moi-les-jumelles/5624065-entre-ciel-et-mer.html"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			RTSIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒall_info        λ.Object
						ϒdisplay_id      λ.Object
						ϒdownload_json   λ.Object
						ϒduration        λ.Object
						ϒentries         λ.Object
						ϒext             λ.Object
						ϒextract_bitrate λ.Object
						ϒformat_id       λ.Object
						ϒformat_url      λ.Object
						ϒformats         λ.Object
						ϒinfo            λ.Object
						ϒinternal_id     λ.Object
						ϒitem            λ.Object
						ϒitem_url        λ.Object
						ϒm               λ.Object
						ϒmedia           λ.Object
						ϒmedia_id        λ.Object
						ϒmedia_type      λ.Object
						ϒmedia_url       λ.Object
						ϒpage            λ.Object
						ϒrate            λ.Object
						ϒself            = λargs[0]
						ϒstreams         λ.Object
						ϒtitle           λ.Object
						ϒurl             = λargs[1]
						ϒurlh            λ.Object
						ϒvideos          λ.Object
						τmp0             λ.Object
						τmp1             λ.Object
						τmp2             λ.Object
					)
					ϒm = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒmedia_id = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒm, "group", nil), λ.NewStr("rts_id")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒm, "group", nil), λ.NewStr("id"))
						}
					}()
					ϒdisplay_id = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒm, "group", nil), λ.NewStr("display_id")); λ.IsTrue(λv) {
							return λv
						} else {
							return ϒmedia_id
						}
					}()
					ϒdownload_json = λ.NewFunction("download_json",
						[]λ.Param{
							{Name: "internal_id"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒinternal_id = λargs[0]
							)
							return λ.Cal(λ.GetAttr(ϒself, "_download_json", nil), λ.Mod(λ.NewStr("http://www.rts.ch/a/%s.html?f=json/article"), ϒinternal_id), ϒdisplay_id)
						})
					ϒall_info = λ.Cal(ϒdownload_json, ϒmedia_id)
					if λ.IsTrue(func() λ.Object {
						if λv := λ.NewBool(!λ.Contains(ϒall_info, λ.NewStr("video"))); !λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewBool(!λ.Contains(ϒall_info, λ.NewStr("audio")))
						}
					}()) {
						ϒentries = λ.NewList()
						τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒall_info, "get", nil), λ.NewStr("items"), λ.NewList()))
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒitem = τmp1
							ϒitem_url = λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("url"))
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒitem_url))) {
								continue
							}
							λ.Cal(λ.GetAttr(ϒentries, "append", nil), λ.Cal(λ.GetAttr(ϒself, "url_result", nil), ϒitem_url, λ.NewStr("RTS")))
						}
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒentries))) {
							τmp0 = λ.Cal(λ.GetAttr(ϒself, "_download_webpage_handle", nil), ϒurl, ϒdisplay_id)
							ϒpage = λ.GetItem(τmp0, λ.NewInt(0))
							ϒurlh = λ.GetItem(τmp0, λ.NewInt(1))
							if λ.IsTrue(λ.Ne(λ.Cal(λ.GetAttr(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), λ.Cal(λ.GetAttr(ϒurlh, "geturl", nil))), "group", nil), λ.NewStr("id")), ϒmedia_id)) {
								return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), λ.Cal(λ.GetAttr(ϒurlh, "geturl", nil)), λ.NewStr("RTS"))
							}
							ϒvideos = λ.Cal(Ωre.ϒfindall, λ.NewStr("<article[^>]+class=\"content-item\"[^>]*>\\s*<a[^>]+data-video-urn=\"urn:([^\"]+)\""), ϒpage)
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒvideos))) {
								ϒvideos = λ.Cal(Ωre.ϒfindall, λ.NewStr("(?s)<iframe[^>]+class=\"srg-player\"[^>]+src=\"[^\"]+urn:([^\"]+)\""), ϒpage)
							}
							if λ.IsTrue(ϒvideos) {
								ϒentries = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
									nil,
									0, false, false,
									func(λargs []λ.Object) λ.Object {
										return λ.NewGenerator(func(λgen λ.Generator) λ.Object {
											var (
												ϒvideo_urn λ.Object
												τmp0       λ.Object
												τmp1       λ.Object
											)
											τmp0 = λ.Cal(λ.BuiltinIter, ϒvideos)
											for {
												if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
													break
												}
												ϒvideo_urn = τmp1
												λgen.Yield(λ.Cal(λ.GetAttr(ϒself, "url_result", nil), λ.Mod(λ.NewStr("srgssr:%s"), ϒvideo_urn), λ.NewStr("SRGSSR")))
											}
											return λ.None
										})
									})))
							}
						}
						if λ.IsTrue(ϒentries) {
							return λ.Cal(λ.GetAttr(ϒself, "playlist_result", nil), ϒentries, ϒmedia_id, λ.Cal(λ.GetAttr(ϒall_info, "get", nil), λ.NewStr("title")))
						}
						ϒinternal_id = λ.Cal(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewStr("<(?:video|audio) data-id=\"([0-9]+)\""), ϒpage, λ.NewStr("internal video id"))
						ϒall_info = λ.Cal(ϒdownload_json, ϒinternal_id)
					}
					ϒmedia_type = func() λ.Object {
						if λ.IsTrue(λ.NewBool(λ.Contains(ϒall_info, λ.NewStr("video")))) {
							return λ.NewStr("video")
						} else {
							return λ.NewStr("audio")
						}
					}()
					λ.Cal(λ.GetAttr(ϒself, "get_media_data", nil), λ.NewStr("rts"), ϒmedia_type, ϒmedia_id)
					ϒinfo = func() λ.Object {
						if λ.IsTrue(λ.NewBool(λ.Contains(ϒall_info, λ.NewStr("video")))) {
							return λ.GetItem(λ.GetItem(ϒall_info, λ.NewStr("video")), λ.NewStr("JSONinfo"))
						} else {
							return λ.GetItem(ϒall_info, λ.NewStr("audio"))
						}
					}()
					ϒtitle = λ.GetItem(ϒinfo, λ.NewStr("title"))
					ϒextract_bitrate = λ.NewFunction("extract_bitrate",
						[]λ.Param{
							{Name: "url"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒurl = λargs[0]
							)
							return λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
								λ.NewStr("-([0-9]+)k\\."),
								ϒurl,
								λ.NewStr("bitrate"),
							), λ.KWArgs{
								{Name: "default", Value: λ.None},
							}))
						})
					ϒformats = λ.NewList()
					ϒstreams = λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("streams"), λ.NewDictWithTable(map[λ.Object]λ.Object{}))
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒstreams, "items", nil)))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒformat_id = λ.GetItem(τmp2, λ.NewInt(0))
						ϒformat_url = λ.GetItem(τmp2, λ.NewInt(1))
						if λ.IsTrue(func() λ.Object {
							if λv := λ.Eq(ϒformat_id, λ.NewStr("hds_sd")); !λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(λ.Contains(ϒstreams, λ.NewStr("hds")))
							}
						}()) {
							continue
						}
						if λ.IsTrue(func() λ.Object {
							if λv := λ.Eq(ϒformat_id, λ.NewStr("hls_sd")); !λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(λ.Contains(ϒstreams, λ.NewStr("hls")))
							}
						}()) {
							continue
						}
						ϒext = λ.Cal(ϒdetermine_ext, ϒformat_url)
						if λ.IsTrue(λ.NewBool(λ.Contains(λ.NewTuple(
							λ.NewStr("m3u8"),
							λ.NewStr("f4m"),
						), ϒext))) {
							ϒformat_url = λ.Cal(λ.GetAttr(ϒself, "_get_tokenized_src", nil), ϒformat_url, ϒmedia_id, ϒformat_id)
							if λ.IsTrue(λ.Eq(ϒext, λ.NewStr("f4m"))) {
								λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_f4m_formats", nil), λ.NewArgs(
									λ.Add(λ.Add(ϒformat_url, func() λ.Object {
										if λ.IsTrue(λ.NewBool(!λ.Contains(ϒformat_url, λ.NewStr("?")))) {
											return λ.NewStr("?")
										} else {
											return λ.NewStr("&")
										}
									}()), λ.NewStr("hdcore=3.4.0")),
									ϒmedia_id,
								), λ.KWArgs{
									{Name: "f4m_id", Value: ϒformat_id},
									{Name: "fatal", Value: λ.False},
								}))
							} else {
								λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
									ϒformat_url,
									ϒmedia_id,
									λ.NewStr("mp4"),
									λ.NewStr("m3u8_native"),
								), λ.KWArgs{
									{Name: "m3u8_id", Value: ϒformat_id},
									{Name: "fatal", Value: λ.False},
								}))
							}
						} else {
							λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("format_id"): ϒformat_id,
								λ.NewStr("url"):       ϒformat_url,
								λ.NewStr("tbr"):       λ.Cal(ϒextract_bitrate, ϒformat_url),
							}))
						}
					}
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("media"), λ.NewList()))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒmedia = τmp1
						ϒmedia_url = λ.Cal(λ.GetAttr(ϒmedia, "get", nil), λ.NewStr("url"))
						if λ.IsTrue(func() λ.Object {
							if λv := λ.NewBool(!λ.IsTrue(ϒmedia_url)); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(Ωre.ϒmatch, λ.NewStr("https?://"), ϒmedia_url)
							}
						}()) {
							continue
						}
						ϒrate = λ.Cal(λ.GetAttr(ϒmedia, "get", nil), λ.NewStr("rate"))
						ϒext = func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒmedia, "get", nil), λ.NewStr("ext")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(ϒdetermine_ext, ϒmedia_url, λ.NewStr("mp4"))
							}
						}()
						ϒformat_id = ϒext
						if λ.IsTrue(ϒrate) {
							τmp2 = λ.IAdd(ϒformat_id, λ.Mod(λ.NewStr("-%dk"), ϒrate))
							ϒformat_id = τmp2
						}
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("format_id"): ϒformat_id,
							λ.NewStr("url"):       λ.Add(λ.NewStr("http://download-video.rts.ch/"), ϒmedia_url),
							λ.NewStr("tbr"): func() λ.Object {
								if λv := ϒrate; λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Cal(ϒextract_bitrate, ϒmedia_url)
								}
							}(),
						}))
					}
					λ.Cal(λ.GetAttr(ϒself, "_check_formats", nil), ϒformats, ϒmedia_id)
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒduration = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("duration")); λ.IsTrue(λv) {
							return λv
						} else if λv := λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("cutout")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("cutduration"))
						}
					}()
					if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒduration, ϒcompat_str)) {
						ϒduration = λ.Cal(ϒparse_duration, ϒduration)
					}
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒmedia_id,
						λ.NewStr("display_id"):  ϒdisplay_id,
						λ.NewStr("formats"):     ϒformats,
						λ.NewStr("title"):       ϒtitle,
						λ.NewStr("description"): λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("intro")),
						λ.NewStr("duration"):    ϒduration,
						λ.NewStr("view_count"):  λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("plays"))),
						λ.NewStr("uploader"):    λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("programName")),
						λ.NewStr("timestamp"):   λ.Cal(ϒparse_iso8601, λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("broadcast_date"))),
						λ.NewStr("thumbnail"):   λ.Cal(ϒunescapeHTML, λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("preview_image_url"))),
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        RTSIE__TESTS,
				λ.NewStr("_VALID_URL"):    RTSIE__VALID_URL,
				λ.NewStr("_real_extract"): RTSIE__real_extract,
			})
		}())
	})
}

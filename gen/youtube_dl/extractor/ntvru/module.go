// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * ntvru/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/ntvru.py
 */

package ntvru

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor  λ.Object
	NTVRuIE        λ.Object
	ϒint_or_none   λ.Object
	ϒstrip_or_none λ.Object
	ϒunescapeHTML  λ.Object
	ϒxpath_text    λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒstrip_or_none = Ωutils.ϒstrip_or_none
		ϒunescapeHTML = Ωutils.ϒunescapeHTML
		ϒxpath_text = Ωutils.ϒxpath_text
		NTVRuIE = λ.Cal(λ.TypeType, λ.NewStr("NTVRuIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				NTVRuIE_IE_NAME       λ.Object
				NTVRuIE__VALID_URL    λ.Object
				NTVRuIE__real_extract λ.Object
			)
			NTVRuIE_IE_NAME = λ.NewStr("ntv.ru")
			NTVRuIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?ntv\\.ru/(?:[^/]+/)*(?P<id>[^/?#&]+)")
			NTVRuIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒfile_     λ.Object
						ϒformat_id λ.Object
						ϒformats   λ.Object
						ϒplayer    λ.Object
						ϒself      = λargs[0]
						ϒtitle     λ.Object
						ϒurl       = λargs[1]
						ϒvideo     λ.Object
						ϒvideo_id  λ.Object
						ϒvideo_url λ.Object
						ϒwebpage   λ.Object
						τmp0       λ.Object
						τmp1       λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					ϒvideo_url = λ.Call(λ.GetAttr(ϒself, "_og_search_property", nil), λ.NewArgs(
						λ.NewTuple(
							λ.NewStr("video"),
							λ.NewStr("video:iframe"),
						),
						ϒwebpage,
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(ϒvideo_url) {
						ϒvideo_id = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewStr("https?://(?:www\\.)?ntv\\.ru/video/(?:embed/)?(\\d+)"),
							ϒvideo_url,
							λ.NewStr("video id"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						})
					}
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒvideo_id))) {
						ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.GetAttr(ϒself, "_VIDEO_ID_REGEXES", nil), ϒwebpage, λ.NewStr("video id"))
					}
					ϒplayer = λ.Cal(λ.GetAttr(ϒself, "_download_xml", nil), λ.Mod(λ.NewStr("http://www.ntv.ru/vi%s/"), ϒvideo_id), ϒvideo_id, λ.NewStr("Downloading video XML"))
					ϒtitle = λ.Cal(ϒstrip_or_none, λ.Cal(ϒunescapeHTML, λ.Call(ϒxpath_text, λ.NewArgs(
						ϒplayer,
						λ.NewStr("./data/title"),
						λ.NewStr("title"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.True},
					})))
					ϒvideo = λ.Cal(λ.GetAttr(ϒplayer, "find", nil), λ.NewStr("./data/video"))
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.NewList(
						λ.NewStr(""),
						λ.NewStr("hi"),
						λ.NewStr("webm"),
					))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒformat_id = τmp1
						ϒfile_ = λ.Cal(ϒxpath_text, ϒvideo, λ.Mod(λ.NewStr("./%sfile"), ϒformat_id))
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒfile_))) {
							continue
						}
						if λ.IsTrue(λ.Cal(λ.GetAttr(ϒfile_, "startswith", nil), λ.NewStr("//"))) {
							ϒfile_ = λ.Cal(λ.GetAttr(ϒself, "_proto_relative_url", nil), ϒfile_)
						} else {
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.Cal(λ.GetAttr(ϒfile_, "startswith", nil), λ.NewStr("http"))))) {
								ϒfile_ = λ.Add(λ.NewStr("http://media.ntv.ru/vod/"), ϒfile_)
							}
						}
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"):      ϒfile_,
							λ.NewStr("filesize"): λ.Cal(ϒint_or_none, λ.Cal(ϒxpath_text, ϒvideo, λ.Mod(λ.NewStr("./%ssize"), ϒformat_id))),
						}))
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.Cal(ϒxpath_text, ϒvideo, λ.NewStr("./id")),
						λ.NewStr("title"):       ϒtitle,
						λ.NewStr("description"): λ.Cal(ϒstrip_or_none, λ.Cal(ϒunescapeHTML, λ.Cal(ϒxpath_text, ϒplayer, λ.NewStr("./data/description")))),
						λ.NewStr("thumbnail"):   λ.Cal(ϒxpath_text, ϒvideo, λ.NewStr("./splash")),
						λ.NewStr("duration"):    λ.Cal(ϒint_or_none, λ.Cal(ϒxpath_text, ϒvideo, λ.NewStr("./totaltime"))),
						λ.NewStr("view_count"):  λ.Cal(ϒint_or_none, λ.Cal(ϒxpath_text, ϒvideo, λ.NewStr("./views"))),
						λ.NewStr("formats"):     ϒformats,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):       NTVRuIE_IE_NAME,
				λ.NewStr("_VALID_URL"):    NTVRuIE__VALID_URL,
				λ.NewStr("_real_extract"): NTVRuIE__real_extract,
			})
		}())
	})
}

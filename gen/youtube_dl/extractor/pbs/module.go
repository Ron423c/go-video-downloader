// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * pbs/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/pbs.py
 */

package pbs

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError   λ.Object
	InfoExtractor    λ.Object
	PBSIE            λ.Object
	US_RATINGS       λ.Object
	ϒcompat_str      λ.Object
	ϒdetermine_ext   λ.Object
	ϒfloat_or_none   λ.Object
	ϒint_or_none     λ.Object
	ϒjs_to_json      λ.Object
	ϒorderedSet      λ.Object
	ϒstrip_jsonp     λ.Object
	ϒstrip_or_none   λ.Object
	ϒunified_strdate λ.Object
	ϒurl_or_none     λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ExtractorError = Ωutils.ExtractorError
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒjs_to_json = Ωutils.ϒjs_to_json
		ϒorderedSet = Ωutils.ϒorderedSet
		ϒstrip_jsonp = Ωutils.ϒstrip_jsonp
		ϒstrip_or_none = Ωutils.ϒstrip_or_none
		ϒunified_strdate = Ωutils.ϒunified_strdate
		ϒurl_or_none = Ωutils.ϒurl_or_none
		US_RATINGS = Ωutils.US_RATINGS
		PBSIE = λ.Cal(λ.TypeType, λ.NewStr("PBSIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				PBSIE_IE_NAME             λ.Object
				PBSIE__GEO_COUNTRIES      λ.Object
				PBSIE__STATIONS           λ.Object
				PBSIE__TESTS              λ.Object
				PBSIE__VALID_URL          λ.Object
				PBSIE__extract_video_data λ.Object
				PBSIE__extract_webpage    λ.Object
				PBSIE__real_extract       λ.Object
				PBSIE__real_initialize    λ.Object
			)
			PBSIE__STATIONS = λ.NewTuple(
				λ.NewTuple(
					λ.NewStr("(?:video|www|player)\\.pbs\\.org"),
					λ.NewStr("PBS: Public Broadcasting Service"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.aptv\\.org"),
					λ.NewStr("APT - Alabama Public Television (WBIQ)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.gpb\\.org"),
					λ.NewStr("GPB/Georgia Public Broadcasting (WGTV)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.mpbonline\\.org"),
					λ.NewStr("Mississippi Public Broadcasting (WMPN)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wnpt\\.org"),
					λ.NewStr("Nashville Public Television (WNPT)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wfsu\\.org"),
					λ.NewStr("WFSU-TV (WFSU)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wsre\\.org"),
					λ.NewStr("WSRE (WSRE)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wtcitv\\.org"),
					λ.NewStr("WTCI (WTCI)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.pba\\.org"),
					λ.NewStr("WPBA/Channel 30 (WPBA)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.alaskapublic\\.org"),
					λ.NewStr("Alaska Public Media (KAKM)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.azpbs\\.org"),
					λ.NewStr("Arizona PBS (KAET)"),
				),
				λ.NewTuple(
					λ.NewStr("portal\\.knme\\.org"),
					λ.NewStr("KNME-TV/Channel 5 (KNME)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.vegaspbs\\.org"),
					λ.NewStr("Vegas PBS (KLVX)"),
				),
				λ.NewTuple(
					λ.NewStr("watch\\.aetn\\.org"),
					λ.NewStr("AETN/ARKANSAS ETV NETWORK (KETS)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.ket\\.org"),
					λ.NewStr("KET (WKLE)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wkno\\.org"),
					λ.NewStr("WKNO/Channel 10 (WKNO)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.lpb\\.org"),
					λ.NewStr("LPB/LOUISIANA PUBLIC BROADCASTING (WLPB)"),
				),
				λ.NewTuple(
					λ.NewStr("videos\\.oeta\\.tv"),
					λ.NewStr("OETA (KETA)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.optv\\.org"),
					λ.NewStr("Ozarks Public Television (KOZK)"),
				),
				λ.NewTuple(
					λ.NewStr("watch\\.wsiu\\.org"),
					λ.NewStr("WSIU Public Broadcasting (WSIU)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.keet\\.org"),
					λ.NewStr("KEET TV (KEET)"),
				),
				λ.NewTuple(
					λ.NewStr("pbs\\.kixe\\.org"),
					λ.NewStr("KIXE/Channel 9 (KIXE)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.kpbs\\.org"),
					λ.NewStr("KPBS San Diego (KPBS)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.kqed\\.org"),
					λ.NewStr("KQED (KQED)"),
				),
				λ.NewTuple(
					λ.NewStr("vids\\.kvie\\.org"),
					λ.NewStr("KVIE Public Television (KVIE)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.pbssocal\\.org"),
					λ.NewStr("PBS SoCal/KOCE (KOCE)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.valleypbs\\.org"),
					λ.NewStr("ValleyPBS (KVPT)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.cptv\\.org"),
					λ.NewStr("CONNECTICUT PUBLIC TELEVISION (WEDH)"),
				),
				λ.NewTuple(
					λ.NewStr("watch\\.knpb\\.org"),
					λ.NewStr("KNPB Channel 5 (KNPB)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.soptv\\.org"),
					λ.NewStr("SOPTV (KSYS)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.rmpbs\\.org"),
					λ.NewStr("Rocky Mountain PBS (KRMA)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.kenw\\.org"),
					λ.NewStr("KENW-TV3 (KENW)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.kued\\.org"),
					λ.NewStr("KUED Channel 7 (KUED)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wyomingpbs\\.org"),
					λ.NewStr("Wyoming PBS (KCWC)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.cpt12\\.org"),
					λ.NewStr("Colorado Public Television / KBDI 12 (KBDI)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.kbyueleven\\.org"),
					λ.NewStr("KBYU-TV (KBYU)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.thirteen\\.org"),
					λ.NewStr("Thirteen/WNET New York (WNET)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wgbh\\.org"),
					λ.NewStr("WGBH/Channel 2 (WGBH)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wgby\\.org"),
					λ.NewStr("WGBY (WGBY)"),
				),
				λ.NewTuple(
					λ.NewStr("watch\\.njtvonline\\.org"),
					λ.NewStr("NJTV Public Media NJ (WNJT)"),
				),
				λ.NewTuple(
					λ.NewStr("watch\\.wliw\\.org"),
					λ.NewStr("WLIW21 (WLIW)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.mpt\\.tv"),
					λ.NewStr("mpt/Maryland Public Television (WMPB)"),
				),
				λ.NewTuple(
					λ.NewStr("watch\\.weta\\.org"),
					λ.NewStr("WETA Television and Radio (WETA)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.whyy\\.org"),
					λ.NewStr("WHYY (WHYY)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wlvt\\.org"),
					λ.NewStr("PBS 39 (WLVT)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wvpt\\.net"),
					λ.NewStr("WVPT - Your Source for PBS and More! (WVPT)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.whut\\.org"),
					λ.NewStr("Howard University Television (WHUT)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wedu\\.org"),
					λ.NewStr("WEDU PBS (WEDU)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wgcu\\.org"),
					λ.NewStr("WGCU Public Media (WGCU)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wpbt2\\.org"),
					λ.NewStr("WPBT2 (WPBT)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wucftv\\.org"),
					λ.NewStr("WUCF TV (WUCF)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wuft\\.org"),
					λ.NewStr("WUFT/Channel 5 (WUFT)"),
				),
				λ.NewTuple(
					λ.NewStr("watch\\.wxel\\.org"),
					λ.NewStr("WXEL/Channel 42 (WXEL)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wlrn\\.org"),
					λ.NewStr("WLRN/Channel 17 (WLRN)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wusf\\.usf\\.edu"),
					λ.NewStr("WUSF Public Broadcasting (WUSF)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.scetv\\.org"),
					λ.NewStr("ETV (WRLK)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.unctv\\.org"),
					λ.NewStr("UNC-TV (WUNC)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.pbshawaii\\.org"),
					λ.NewStr("PBS Hawaii - Oceanic Cable Channel 10 (KHET)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.idahoptv\\.org"),
					λ.NewStr("Idaho Public Television (KAID)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.ksps\\.org"),
					λ.NewStr("KSPS (KSPS)"),
				),
				λ.NewTuple(
					λ.NewStr("watch\\.opb\\.org"),
					λ.NewStr("OPB (KOPB)"),
				),
				λ.NewTuple(
					λ.NewStr("watch\\.nwptv\\.org"),
					λ.NewStr("KWSU/Channel 10 & KTNW/Channel 31 (KWSU)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.will\\.illinois\\.edu"),
					λ.NewStr("WILL-TV (WILL)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.networkknowledge\\.tv"),
					λ.NewStr("Network Knowledge - WSEC/Springfield (WSEC)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wttw\\.com"),
					λ.NewStr("WTTW11 (WTTW)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.iptv\\.org"),
					λ.NewStr("Iowa Public Television/IPTV (KDIN)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.ninenet\\.org"),
					λ.NewStr("Nine Network (KETC)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wfwa\\.org"),
					λ.NewStr("PBS39 Fort Wayne (WFWA)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wfyi\\.org"),
					λ.NewStr("WFYI Indianapolis (WFYI)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.mptv\\.org"),
					λ.NewStr("Milwaukee Public Television (WMVS)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wnin\\.org"),
					λ.NewStr("WNIN (WNIN)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wnit\\.org"),
					λ.NewStr("WNIT Public Television (WNIT)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wpt\\.org"),
					λ.NewStr("WPT (WPNE)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wvut\\.org"),
					λ.NewStr("WVUT/Channel 22 (WVUT)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.weiu\\.net"),
					λ.NewStr("WEIU/Channel 51 (WEIU)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wqpt\\.org"),
					λ.NewStr("WQPT-TV (WQPT)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wycc\\.org"),
					λ.NewStr("WYCC PBS Chicago (WYCC)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wipb\\.org"),
					λ.NewStr("WIPB-TV (WIPB)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.indianapublicmedia\\.org"),
					λ.NewStr("WTIU (WTIU)"),
				),
				λ.NewTuple(
					λ.NewStr("watch\\.cetconnect\\.org"),
					λ.NewStr("CET  (WCET)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.thinktv\\.org"),
					λ.NewStr("ThinkTVNetwork (WPTD)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wbgu\\.org"),
					λ.NewStr("WBGU-TV (WBGU)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wgvu\\.org"),
					λ.NewStr("WGVU TV (WGVU)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.netnebraska\\.org"),
					λ.NewStr("NET1 (KUON)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.pioneer\\.org"),
					λ.NewStr("Pioneer Public Television (KWCM)"),
				),
				λ.NewTuple(
					λ.NewStr("watch\\.sdpb\\.org"),
					λ.NewStr("SDPB Television (KUSD)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.tpt\\.org"),
					λ.NewStr("TPT (KTCA)"),
				),
				λ.NewTuple(
					λ.NewStr("watch\\.ksmq\\.org"),
					λ.NewStr("KSMQ (KSMQ)"),
				),
				λ.NewTuple(
					λ.NewStr("watch\\.kpts\\.org"),
					λ.NewStr("KPTS/Channel 8 (KPTS)"),
				),
				λ.NewTuple(
					λ.NewStr("watch\\.ktwu\\.org"),
					λ.NewStr("KTWU/Channel 11 (KTWU)"),
				),
				λ.NewTuple(
					λ.NewStr("watch\\.easttennesseepbs\\.org"),
					λ.NewStr("East Tennessee PBS (WSJK)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wcte\\.tv"),
					λ.NewStr("WCTE-TV (WCTE)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wljt\\.org"),
					λ.NewStr("WLJT, Channel 11 (WLJT)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wosu\\.org"),
					λ.NewStr("WOSU TV (WOSU)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.woub\\.org"),
					λ.NewStr("WOUB/WOUC (WOUB)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wvpublic\\.org"),
					λ.NewStr("WVPB (WVPB)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wkyupbs\\.org"),
					λ.NewStr("WKYU-PBS (WKYU)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.kera\\.org"),
					λ.NewStr("KERA 13 (KERA)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.mpbn\\.net"),
					λ.NewStr("MPBN (WCBB)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.mountainlake\\.org"),
					λ.NewStr("Mountain Lake PBS (WCFE)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.nhptv\\.org"),
					λ.NewStr("NHPTV (WENH)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.vpt\\.org"),
					λ.NewStr("Vermont PBS (WETK)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.witf\\.org"),
					λ.NewStr("witf (WITF)"),
				),
				λ.NewTuple(
					λ.NewStr("watch\\.wqed\\.org"),
					λ.NewStr("WQED Multimedia (WQED)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wmht\\.org"),
					λ.NewStr("WMHT Educational Telecommunications (WMHT)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.deltabroadcasting\\.org"),
					λ.NewStr("Q-TV (WDCQ)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.dptv\\.org"),
					λ.NewStr("WTVS Detroit Public TV (WTVS)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wcmu\\.org"),
					λ.NewStr("CMU Public Television (WCMU)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wkar\\.org"),
					λ.NewStr("WKAR-TV (WKAR)"),
				),
				λ.NewTuple(
					λ.NewStr("wnmuvideo\\.nmu\\.edu"),
					λ.NewStr("WNMU-TV Public TV 13 (WNMU)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wdse\\.org"),
					λ.NewStr("WDSE - WRPT (WDSE)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wgte\\.org"),
					λ.NewStr("WGTE TV (WGTE)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.lptv\\.org"),
					λ.NewStr("Lakeland Public Television (KAWE)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.kmos\\.org"),
					λ.NewStr("KMOS-TV - Channels 6.1, 6.2 and 6.3 (KMOS)"),
				),
				λ.NewTuple(
					λ.NewStr("watch\\.montanapbs\\.org"),
					λ.NewStr("MontanaPBS (KUSM)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.krwg\\.org"),
					λ.NewStr("KRWG/Channel 22 (KRWG)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.kacvtv\\.org"),
					λ.NewStr("KACV (KACV)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.kcostv\\.org"),
					λ.NewStr("KCOS/Channel 13 (KCOS)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wcny\\.org"),
					λ.NewStr("WCNY/Channel 24 (WCNY)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wned\\.org"),
					λ.NewStr("WNED (WNED)"),
				),
				λ.NewTuple(
					λ.NewStr("watch\\.wpbstv\\.org"),
					λ.NewStr("WPBS (WPBS)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wskg\\.org"),
					λ.NewStr("WSKG Public TV (WSKG)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wxxi\\.org"),
					λ.NewStr("WXXI (WXXI)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wpsu\\.org"),
					λ.NewStr("WPSU (WPSU)"),
				),
				λ.NewTuple(
					λ.NewStr("on-demand\\.wvia\\.org"),
					λ.NewStr("WVIA Public Media Studios (WVIA)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wtvi\\.org"),
					λ.NewStr("WTVI (WTVI)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.westernreservepublicmedia\\.org"),
					λ.NewStr("Western Reserve PBS (WNEO)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.ideastream\\.org"),
					λ.NewStr("WVIZ/PBS ideastream (WVIZ)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.kcts9\\.org"),
					λ.NewStr("KCTS 9 (KCTS)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.basinpbs\\.org"),
					λ.NewStr("Basin PBS (KPBT)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.houstonpbs\\.org"),
					λ.NewStr("KUHT / Channel 8 (KUHT)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.klrn\\.org"),
					λ.NewStr("KLRN (KLRN)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.klru\\.tv"),
					λ.NewStr("KLRU (KLRU)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.wtjx\\.org"),
					λ.NewStr("WTJX Channel 12 (WTJX)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.ideastations\\.org"),
					λ.NewStr("WCVE PBS (WCVE)"),
				),
				λ.NewTuple(
					λ.NewStr("video\\.kbtc\\.org"),
					λ.NewStr("KBTC Public Television (KBTC)"),
				),
			)
			PBSIE_IE_NAME = λ.NewStr("pbs")
			PBSIE__VALID_URL = λ.Mod(λ.NewStr("(?x)https?://\n        (?:\n           # Direct video URL\n           (?:%s)/(?:(?:vir|port)alplayer|video)/(?P<id>[0-9]+)(?:[?/]|$) |\n           # Article with embedded player (or direct video)\n           (?:www\\.)?pbs\\.org/(?:[^/]+/){1,5}(?P<presumptive_id>[^/]+?)(?:\\.html)?/?(?:$|[?\\#]) |\n           # Player\n           (?:video|player)\\.pbs\\.org/(?:widget/)?partnerplayer/(?P<player_id>[^/]+)/\n        )\n    "), λ.Cal(λ.GetAttr(λ.NewStr("|"), "join", nil), λ.GetItem(λ.Cal(λ.ListType, λ.Cal(λ.ZipIteratorType, λ.Unpack(λ.AsStarred(PBSIE__STATIONS))...)), λ.NewInt(0))))
			PBSIE__GEO_COUNTRIES = λ.NewList(λ.NewStr("US"))
			PBSIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.pbs.org/tpt/constitution-usa-peter-sagal/watch/a-more-perfect-union/"),
					λ.NewStr("md5"): λ.NewStr("173dc391afd361fa72eab5d3d918968d"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("2365006249"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Constitution USA with Peter Sagal - A More Perfect Union"),
						λ.NewStr("description"): λ.NewStr("md5:31b664af3c65fd07fa460d306b837d00"),
						λ.NewStr("duration"):    λ.NewInt(3190),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.pbs.org/wgbh/pages/frontline/losing-iraq/"),
					λ.NewStr("md5"): λ.NewStr("6f722cb3c3982186d34b0f13374499c7"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("2365297690"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("FRONTLINE - Losing Iraq"),
						λ.NewStr("description"): λ.NewStr("md5:5979a4d069b157f622d02bff62fbe654"),
						λ.NewStr("duration"):    λ.NewInt(5050),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.pbs.org/newshour/bb/education-jan-june12-cyberschools_02-23/"),
					λ.NewStr("md5"): λ.NewStr("b19856d7f5351b17a5ab1dc6a64be633"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("2201174722"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("PBS NewsHour - Cyber Schools Gain Popularity, but Quality Questions Persist"),
						λ.NewStr("description"): λ.NewStr("md5:86ab9a3d04458b876147b355788b8781"),
						λ.NewStr("duration"):    λ.NewInt(801),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.pbs.org/wnet/gperf/dudamel-conducts-verdi-requiem-hollywood-bowl-full-episode/3374/"),
					λ.NewStr("md5"): λ.NewStr("c62859342be2a0358d6c9eb306595978"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("2365297708"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Great Performances - Dudamel Conducts Verdi Requiem at the Hollywood Bowl - Full"),
						λ.NewStr("description"): λ.NewStr("md5:657897370e09e2bc6bf0f8d2cd313c6b"),
						λ.NewStr("duration"):    λ.NewInt(6559),
						λ.NewStr("thumbnail"):   λ.NewStr("re:^https?://.*\\.jpg$"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.pbs.org/wgbh/nova/earth/killer-typhoon.html"),
					λ.NewStr("md5"): λ.NewStr("908f3e5473a693b266b84e25e1cf9703"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("2365160389"),
						λ.NewStr("display_id"):  λ.NewStr("killer-typhoon"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("description"): λ.NewStr("md5:c741d14e979fc53228c575894094f157"),
						λ.NewStr("title"):       λ.NewStr("NOVA - Killer Typhoon"),
						λ.NewStr("duration"):    λ.NewInt(3172),
						λ.NewStr("thumbnail"):   λ.NewStr("re:^https?://.*\\.jpg$"),
						λ.NewStr("upload_date"): λ.NewStr("20140122"),
						λ.NewStr("age_limit"):   λ.NewInt(10),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.pbs.org/wgbh/pages/frontline/united-states-of-secrets/"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"): λ.NewStr("united-states-of-secrets"),
					}),
					λ.NewStr("playlist_count"): λ.NewInt(2),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.pbs.org/wgbh/americanexperience/films/great-war/"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"): λ.NewStr("great-war"),
					}),
					λ.NewStr("playlist_count"): λ.NewInt(3),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.pbs.org/wgbh/americanexperience/films/death/player/"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("2276541483"),
						λ.NewStr("display_id"):  λ.NewStr("player"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("American Experience - Death and the Civil War, Chapter 1"),
						λ.NewStr("description"): λ.NewStr("md5:67fa89a9402e2ee7d08f53b920674c18"),
						λ.NewStr("duration"):    λ.NewInt(682),
						λ.NewStr("thumbnail"):   λ.NewStr("re:^https?://.*\\.jpg$"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.pbs.org/video/2365245528/"),
					λ.NewStr("md5"): λ.NewStr("115223d41bd55cda8ae5cd5ed4e11497"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("2365245528"),
						λ.NewStr("display_id"):  λ.NewStr("2365245528"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("FRONTLINE - United States of Secrets (Part One)"),
						λ.NewStr("description"): λ.NewStr("md5:55756bd5c551519cc4b7703e373e217e"),
						λ.NewStr("duration"):    λ.NewInt(6851),
						λ.NewStr("thumbnail"):   λ.NewStr("re:^https?://.*\\.jpg$"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.pbs.org/food/features/a-chefs-life-season-3-episode-5-prickly-business/"),
					λ.NewStr("md5"): λ.NewStr("59b0ef5009f9ac8a319cc5efebcd865e"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("2365546844"),
						λ.NewStr("display_id"):  λ.NewStr("a-chefs-life-season-3-episode-5-prickly-business"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("A Chef's Life - Season 3, Ep. 5: Prickly Business"),
						λ.NewStr("description"): λ.NewStr("md5:c0ff7475a4b70261c7e58f493c2792a5"),
						λ.NewStr("duration"):    λ.NewInt(1480),
						λ.NewStr("thumbnail"):   λ.NewStr("re:^https?://.*\\.jpg$"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.pbs.org/wgbh/pages/frontline/the-atomic-artists"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("2070868960"),
						λ.NewStr("display_id"):  λ.NewStr("the-atomic-artists"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("FRONTLINE - The Atomic Artists"),
						λ.NewStr("description"): λ.NewStr("md5:f677e4520cfacb4a5ce1471e31b57800"),
						λ.NewStr("duration"):    λ.NewInt(723),
						λ.NewStr("thumbnail"):   λ.NewStr("re:^https?://.*\\.jpg$"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.pbs.org/video/2365641075/"),
					λ.NewStr("md5"): λ.NewStr("fdf907851eab57211dd589cf12006666"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):        λ.NewStr("2365641075"),
						λ.NewStr("ext"):       λ.NewStr("mp4"),
						λ.NewStr("title"):     λ.NewStr("FRONTLINE - Netanyahu at War"),
						λ.NewStr("duration"):  λ.NewInt(6852),
						λ.NewStr("thumbnail"): λ.NewStr("re:^https?://.*\\.jpg$"),
						λ.NewStr("formats"):   λ.NewStr("mincount:8"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.pbs.org/video/pbs-newshour-full-episode-july-31-2017-1501539057/"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("3003333873"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("PBS NewsHour - full episode July 31, 2017"),
						λ.NewStr("description"): λ.NewStr("md5:d41d8cd98f00b204e9800998ecf8427e"),
						λ.NewStr("duration"):    λ.NewInt(3265),
						λ.NewStr("thumbnail"):   λ.NewStr("re:^https?://.*\\.jpg$"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.pbs.org/wgbh/roadshow/watch/episode/2105-indianapolis-hour-2/"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("2365936247"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Antiques Roadshow - Indianapolis, Hour 2"),
						λ.NewStr("description"): λ.NewStr("md5:524b32249db55663e7231b6b8d1671a2"),
						λ.NewStr("duration"):    λ.NewInt(3180),
						λ.NewStr("thumbnail"):   λ.NewStr("re:^https?://.*\\.jpg$"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
					λ.NewStr("expected_warnings"): λ.NewList(λ.NewStr("HTTP Error 403: Forbidden")),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.pbs.org/wgbh/masterpiece/episodes/victoria-s2-e1/"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("3007193718"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Victoria - A Soldier's Daughter / The Green-Eyed Monster"),
						λ.NewStr("description"): λ.NewStr("md5:37efbac85e0c09b009586523ec143652"),
						λ.NewStr("duration"):    λ.NewInt(6292),
						λ.NewStr("thumbnail"):   λ.NewStr("re:^https?://.*\\.(?:jpg|JPG)$"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
					λ.NewStr("expected_warnings"): λ.NewList(λ.NewStr("HTTP Error 403: Forbidden")),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://player.pbs.org/partnerplayer/tOz9tM5ljOXQqIIWke53UA==/"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):        λ.NewStr("3011407934"),
						λ.NewStr("ext"):       λ.NewStr("mp4"),
						λ.NewStr("title"):     λ.NewStr("Stories from the Stage - Road Trip"),
						λ.NewStr("duration"):  λ.NewInt(1619),
						λ.NewStr("thumbnail"): λ.NewStr("re:^https?://.*\\.(?:jpg|JPG)$"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
					λ.NewStr("expected_warnings"): λ.NewList(λ.NewStr("HTTP Error 403: Forbidden")),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://player.pbs.org/widget/partnerplayer/2365297708/?start=0&end=0&chapterbar=false&endscreen=false&topbar=true"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://watch.knpb.org/video/2365616055/"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://player.pbs.org/portalplayer/3004638221/?uid="),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			PBSIE__real_initialize = λ.NewFunction("_real_initialize",
				[]λ.Param{
					{Name: "self"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcookie  λ.Object
						ϒself    = λargs[0]
						ϒstation λ.Object
					)
					ϒcookie = λ.Cal(λ.GetAttr(func() λ.Object {
						if λv := λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
							λ.NewStr("http://localization.services.pbs.org/localize/auto/cookie/"),
							λ.None,
						), λ.KWArgs{
							{Name: "headers", Value: λ.Cal(λ.GetAttr(ϒself, "geo_verification_headers", nil))},
							{Name: "fatal", Value: λ.False},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewDictWithTable(map[λ.Object]λ.Object{})
						}
					}(), "get", nil), λ.NewStr("cookie"))
					if λ.IsTrue(ϒcookie) {
						ϒstation = λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("#?s=\\[\"([^\"]+)\""), ϒcookie, λ.NewStr("station"))
						if λ.IsTrue(ϒstation) {
							λ.Cal(λ.GetAttr(ϒself, "_set_cookie", nil), λ.NewStr(".pbs.org"), λ.NewStr("pbsol.station"), ϒstation)
						}
					}
					return λ.None
				})
			PBSIE__extract_webpage = λ.NewFunction("_extract_webpage",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						MEDIA_ID_REGEXES   λ.Object
						MULTI_PART_REGEXES λ.Object
						ϒdescription       λ.Object
						ϒdisplay_id        λ.Object
						ϒgetdir            λ.Object
						ϒiframe            λ.Object
						ϒmedia_id          λ.Object
						ϒmobj              λ.Object
						ϒp                 λ.Object
						ϒplayer_id         λ.Object
						ϒplayer_page       λ.Object
						ϒpresumptive_id    λ.Object
						ϒprg_id            λ.Object
						ϒself              = λargs[0]
						ϒtabbed_videos     λ.Object
						ϒupload_date       λ.Object
						ϒurl               = λargs[1]
						ϒvideo_id          λ.Object
						ϒvideo_info        λ.Object
						ϒwebpage           λ.Object
						τmp0               λ.Object
						τmp1               λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒdescription = λ.None
					ϒpresumptive_id = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("presumptive_id"))
					ϒdisplay_id = ϒpresumptive_id
					if λ.IsTrue(ϒpresumptive_id) {
						ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒdisplay_id)
						ϒdescription = λ.Cal(ϒstrip_or_none, func() λ.Object {
							if λv := λ.Call(λ.GetAttr(ϒself, "_og_search_description", nil), λ.NewArgs(ϒwebpage), λ.KWArgs{
								{Name: "default", Value: λ.None},
							}); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
									λ.NewStr("description"),
									ϒwebpage,
								), λ.KWArgs{
									{Name: "default", Value: λ.None},
								})
							}
						}())
						ϒupload_date = λ.Cal(ϒunified_strdate, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewStr("<input type=\"hidden\" id=\"air_date_[0-9]+\" value=\"([^\"]+)\""),
							ϒwebpage,
							λ.NewStr("upload date"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}))
						MULTI_PART_REGEXES = λ.NewTuple(
							λ.NewStr("<div[^>]+class=\"videotab[^\"]*\"[^>]+vid=\"(\\d+)\""),
							λ.NewStr("<a[^>]+href=[\"\\']#(?:video-|part)\\d+[\"\\'][^>]+data-cove[Ii]d=[\"\\'](\\d+)"),
						)
						τmp0 = λ.Cal(λ.BuiltinIter, MULTI_PART_REGEXES)
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒp = τmp1
							ϒtabbed_videos = λ.Cal(ϒorderedSet, λ.Cal(Ωre.ϒfindall, ϒp, ϒwebpage))
							if λ.IsTrue(ϒtabbed_videos) {
								return λ.NewTuple(
									ϒtabbed_videos,
									ϒpresumptive_id,
									ϒupload_date,
									ϒdescription,
								)
							}
						}
						MEDIA_ID_REGEXES = λ.NewList(
							λ.NewStr("div\\s*:\\s*'videoembed'\\s*,\\s*mediaid\\s*:\\s*'(\\d+)'"),
							λ.NewStr("class=\"coveplayerid\">([^<]+)<"),
							λ.NewStr("<section[^>]+data-coveid=\"(\\d+)\""),
							λ.NewStr("<input type=\"hidden\" id=\"pbs_video_id_[0-9]+\" value=\"([0-9]+)\"/>"),
							λ.NewStr("(?s)window\\.PBS\\.playerConfig\\s*=\\s*{.*?id\\s*:\\s*'([0-9]+)',"),
							λ.NewStr("<div[^>]+\\bdata-cove-id=[\"\\'](\\d+)\""),
							λ.NewStr("<iframe[^>]+\\bsrc=[\"\\'](?:https?:)?//video\\.pbs\\.org/widget/partnerplayer/(\\d+)"),
						)
						ϒmedia_id = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							MEDIA_ID_REGEXES,
							ϒwebpage,
							λ.NewStr("media ID"),
						), λ.KWArgs{
							{Name: "fatal", Value: λ.False},
							{Name: "default", Value: λ.None},
						})
						if λ.IsTrue(ϒmedia_id) {
							return λ.NewTuple(
								ϒmedia_id,
								ϒpresumptive_id,
								ϒupload_date,
								ϒdescription,
							)
						}
						ϒvideo_id = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewStr("videoid\\s*:\\s*\"([\\d+a-z]{7,})\""),
							ϒwebpage,
							λ.NewStr("videoid"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						})
						if λ.IsTrue(ϒvideo_id) {
							ϒprg_id = λ.GetItem(λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("videoid\\s*:\\s*\"([\\d+a-z]{7,})\""), ϒwebpage, λ.NewStr("videoid")), λ.NewSlice(λ.NewInt(7), λ.None, λ.None))
							if λ.IsTrue(λ.NewBool(λ.Contains(ϒprg_id, λ.NewStr("q")))) {
								ϒprg_id = λ.GetItem(λ.Cal(λ.GetAttr(ϒprg_id, "split", nil), λ.NewStr("q")), λ.NewInt(1))
							}
							ϒprg_id = λ.Cal(λ.IntType, ϒprg_id, λ.NewInt(16))
							ϒgetdir = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
								λ.Mod(λ.NewStr("http://www.pbs.org/wgbh/pages/frontline/.json/getdir/getdir%d.json"), ϒprg_id),
								ϒpresumptive_id,
								λ.NewStr("Downloading getdir JSON"),
							), λ.KWArgs{
								{Name: "transform_source", Value: ϒstrip_jsonp},
							})
							return λ.NewTuple(
								λ.GetItem(ϒgetdir, λ.NewStr("mid")),
								ϒpresumptive_id,
								ϒupload_date,
								ϒdescription,
							)
						}
						τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfindall, λ.NewStr("(?s)<iframe(.+?)></iframe>"), ϒwebpage))
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒiframe = τmp1
							ϒurl = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
								λ.NewStr("src=([\"\\'])(?P<url>.+?partnerplayer.+?)\\1"),
								ϒiframe,
								λ.NewStr("player URL"),
							), λ.KWArgs{
								{Name: "default", Value: λ.None},
								{Name: "group", Value: λ.NewStr("url")},
							})
							if λ.IsTrue(ϒurl) {
								break
							}
						}
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒurl))) {
							ϒurl = λ.Cal(λ.GetAttr(ϒself, "_og_search_url", nil), ϒwebpage)
						}
						ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), λ.Cal(λ.GetAttr(ϒself, "_proto_relative_url", nil), λ.Cal(λ.GetAttr(ϒurl, "strip", nil))))
					}
					ϒplayer_id = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("player_id"))
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒdisplay_id))) {
						ϒdisplay_id = ϒplayer_id
					}
					if λ.IsTrue(ϒplayer_id) {
						ϒplayer_page = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
							ϒurl,
							ϒdisplay_id,
						), λ.KWArgs{
							{Name: "note", Value: λ.NewStr("Downloading player page")},
							{Name: "errnote", Value: λ.NewStr("Could not download player page")},
						})
						ϒvideo_id = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewStr("<div\\s+id=[\"\\']video_(\\d+)"),
							ϒplayer_page,
							λ.NewStr("video ID"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						})
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒvideo_id))) {
							ϒvideo_info = λ.Cal(λ.GetAttr(ϒself, "_extract_video_data", nil), ϒplayer_page, λ.NewStr("video data"), ϒdisplay_id)
							ϒvideo_id = λ.Cal(ϒcompat_str, func() λ.Object {
								if λv := λ.Cal(λ.GetAttr(ϒvideo_info, "get", nil), λ.NewStr("id")); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.GetItem(ϒvideo_info, λ.NewStr("contentID"))
								}
							}())
						}
					} else {
						ϒvideo_id = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("id"))
						ϒdisplay_id = ϒvideo_id
					}
					return λ.NewTuple(
						ϒvideo_id,
						ϒdisplay_id,
						λ.None,
						ϒdescription,
					)
				})
			PBSIE__extract_video_data = λ.NewFunction("_extract_video_data",
				[]λ.Param{
					{Name: "self"},
					{Name: "string"},
					{Name: "name"},
					{Name: "video_id"},
					{Name: "fatal", Def: λ.True},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒfatal    = λargs[4]
						ϒname     = λargs[2]
						ϒself     = λargs[0]
						ϒstring   = λargs[1]
						ϒvideo_id = λargs[3]
					)
					return λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
						λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewList(
								λ.NewStr("(?s)PBS\\.videoData\\s*=\\s*({.+?});\\n"),
								λ.NewStr("window\\.videoBridge\\s*=\\s*({.+?});"),
							),
							ϒstring,
							ϒname,
						), λ.KWArgs{
							{Name: "default", Value: λ.NewStr("{}")},
						}),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "transform_source", Value: ϒjs_to_json},
						{Name: "fatal", Value: ϒfatal},
					})
				})
			PBSIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒage_limit             λ.Object
						ϒalt_title             λ.Object
						ϒbitrate               λ.Object
						ϒchapter               λ.Object
						ϒchapter_data          λ.Object
						ϒchapters              λ.Object
						ϒclosed_captions_url   λ.Object
						ϒdescription           λ.Object
						ϒdisplay_id            λ.Object
						ϒduration              λ.Object
						ϒentries               λ.Object
						ϒextract_redirect_urls λ.Object
						ϒf                     λ.Object
						ϒf_url                 λ.Object
						ϒformat_url            λ.Object
						ϒformats               λ.Object
						ϒhttp_url              λ.Object
						ϒinfo                  λ.Object
						ϒm3u8_format           λ.Object
						ϒm3u8_formats          λ.Object
						ϒmessage               λ.Object
						ϒmobj                  λ.Object
						ϒnum                   λ.Object
						ϒpage                  λ.Object
						ϒplayer                λ.Object
						ϒrating_str            λ.Object
						ϒraw_chapters          λ.Object
						ϒredirect              λ.Object
						ϒredirect_id           λ.Object
						ϒredirect_info         λ.Object
						ϒredirect_urls         λ.Object
						ϒredirects             λ.Object
						ϒself                  = λargs[0]
						ϒstart_time            λ.Object
						ϒsubtitles             λ.Object
						ϒttml_caption_id       λ.Object
						ϒttml_caption_suffix   λ.Object
						ϒupload_date           λ.Object
						ϒurl                   = λargs[1]
						ϒvideo_id              λ.Object
						ϒvideo_info            λ.Object
						τmp0                   λ.Object
						τmp1                   λ.Object
						τmp2                   λ.Object
						τmp3                   λ.Object
					)
					τmp0 = λ.Cal(λ.GetAttr(ϒself, "_extract_webpage", nil), ϒurl)
					ϒvideo_id = λ.GetItem(τmp0, λ.NewInt(0))
					ϒdisplay_id = λ.GetItem(τmp0, λ.NewInt(1))
					ϒupload_date = λ.GetItem(τmp0, λ.NewInt(2))
					ϒdescription = λ.GetItem(τmp0, λ.NewInt(3))
					if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒvideo_id, λ.ListType)) {
						ϒentries = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
							nil,
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								return λ.NewGenerator(func(λgen λ.Generator) λ.Object {
									var (
										ϒvid_id λ.Object
										τmp0    λ.Object
										τmp1    λ.Object
									)
									τmp0 = λ.Cal(λ.BuiltinIter, ϒvideo_id)
									for {
										if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
											break
										}
										ϒvid_id = τmp1
										λgen.Yield(λ.Cal(λ.GetAttr(ϒself, "url_result", nil), λ.Mod(λ.NewStr("http://video.pbs.org/video/%s"), ϒvid_id), λ.NewStr("PBS"), ϒvid_id))
									}
									return λ.None
								})
							})))
						return λ.Cal(λ.GetAttr(ϒself, "playlist_result", nil), ϒentries, ϒdisplay_id)
					}
					ϒinfo = λ.None
					ϒredirects = λ.NewList()
					ϒredirect_urls = λ.Cal(λ.SetType)
					ϒextract_redirect_urls = λ.NewFunction("extract_redirect_urls",
						[]λ.Param{
							{Name: "info"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒencoding      λ.Object
								ϒencoding_name λ.Object
								ϒencoding_url  λ.Object
								ϒencodings     λ.Object
								ϒinfo          = λargs[0]
								ϒredirect      λ.Object
								ϒredirect_url  λ.Object
								τmp0           λ.Object
								τmp1           λ.Object
							)
							τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
								λ.NewStr("recommended_encoding"),
								λ.NewStr("alternate_encoding"),
							))
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒencoding_name = τmp1
								ϒredirect = λ.Cal(λ.GetAttr(ϒinfo, "get", nil), ϒencoding_name)
								if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒredirect))) {
									continue
								}
								ϒredirect_url = λ.Cal(λ.GetAttr(ϒredirect, "get", nil), λ.NewStr("url"))
								if λ.IsTrue(func() λ.Object {
									if λv := ϒredirect_url; !λ.IsTrue(λv) {
										return λv
									} else {
										return λ.NewBool(!λ.Contains(ϒredirect_urls, ϒredirect_url))
									}
								}()) {
									λ.Cal(λ.GetAttr(ϒredirects, "append", nil), ϒredirect)
									λ.Cal(λ.GetAttr(ϒredirect_urls, "add", nil), ϒredirect_url)
								}
							}
							ϒencodings = λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("encodings"))
							if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒencodings, λ.ListType)) {
								τmp0 = λ.Cal(λ.BuiltinIter, ϒencodings)
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒencoding = τmp1
									ϒencoding_url = λ.Cal(ϒurl_or_none, ϒencoding)
									if λ.IsTrue(func() λ.Object {
										if λv := ϒencoding_url; !λ.IsTrue(λv) {
											return λv
										} else {
											return λ.NewBool(!λ.Contains(ϒredirect_urls, ϒencoding_url))
										}
									}()) {
										λ.Cal(λ.GetAttr(ϒredirects, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
											λ.NewStr("url"): ϒencoding_url,
										}))
										λ.Cal(λ.GetAttr(ϒredirect_urls, "add", nil), ϒencoding_url)
									}
								}
							}
							return λ.None
						})
					ϒchapters = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
						λ.NewStr("widget/partnerplayer"),
						λ.NewStr("portalplayer"),
					))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒpage = τmp1
						ϒplayer = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
							λ.Mod(λ.NewStr("http://player.pbs.org/%s/%s"), λ.NewTuple(
								ϒpage,
								ϒvideo_id,
							)),
							ϒdisplay_id,
							λ.Mod(λ.NewStr("Downloading %s page"), ϒpage),
						), λ.KWArgs{
							{Name: "fatal", Value: λ.False},
						})
						if λ.IsTrue(ϒplayer) {
							ϒvideo_info = λ.Call(λ.GetAttr(ϒself, "_extract_video_data", nil), λ.NewArgs(
								ϒplayer,
								λ.Mod(λ.NewStr("%s video data"), ϒpage),
								ϒdisplay_id,
							), λ.KWArgs{
								{Name: "fatal", Value: λ.False},
							})
							if λ.IsTrue(ϒvideo_info) {
								λ.Cal(ϒextract_redirect_urls, ϒvideo_info)
								if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒinfo))) {
									ϒinfo = ϒvideo_info
								}
							}
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒchapters))) {
								ϒraw_chapters = func() λ.Object {
									if λv := λ.Cal(λ.GetAttr(ϒvideo_info, "get", nil), λ.NewStr("chapters")); λ.IsTrue(λv) {
										return λv
									} else {
										return λ.NewList()
									}
								}()
								if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒraw_chapters))) {
									τmp2 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfindall, λ.NewStr("(?s)chapters\\.push\\(({.*?})\\)"), ϒplayer))
									for {
										if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
											break
										}
										ϒchapter_data = τmp3
										ϒchapter = λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
											ϒchapter_data,
											ϒvideo_id,
											ϒjs_to_json,
										), λ.KWArgs{
											{Name: "fatal", Value: λ.False},
										})
										if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒchapter))) {
											continue
										}
										λ.Cal(λ.GetAttr(ϒraw_chapters, "append", nil), ϒchapter)
									}
								}
								τmp2 = λ.Cal(λ.BuiltinIter, ϒraw_chapters)
								for {
									if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
										break
									}
									ϒchapter = τmp3
									ϒstart_time = λ.Cal(ϒfloat_or_none, λ.Cal(λ.GetAttr(ϒchapter, "get", nil), λ.NewStr("start_time")), λ.NewInt(1000))
									ϒduration = λ.Cal(ϒfloat_or_none, λ.Cal(λ.GetAttr(ϒchapter, "get", nil), λ.NewStr("duration")), λ.NewInt(1000))
									if λ.IsTrue(func() λ.Object {
										if λv := λ.NewBool(ϒstart_time == λ.None); λ.IsTrue(λv) {
											return λv
										} else {
											return λ.NewBool(ϒduration == λ.None)
										}
									}()) {
										continue
									}
									λ.Cal(λ.GetAttr(ϒchapters, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
										λ.NewStr("start_time"): ϒstart_time,
										λ.NewStr("end_time"):   λ.Add(ϒstart_time, ϒduration),
										λ.NewStr("title"):      λ.Cal(λ.GetAttr(ϒchapter, "get", nil), λ.NewStr("title")),
									}))
								}
							}
						}
					}
					ϒformats = λ.NewList()
					ϒhttp_url = λ.None
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.EnumerateIteratorType, ϒredirects))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒnum = λ.GetItem(τmp2, λ.NewInt(0))
						ϒredirect = λ.GetItem(τmp2, λ.NewInt(1))
						ϒredirect_id = λ.Cal(λ.GetAttr(ϒredirect, "get", nil), λ.NewStr("eeid"))
						ϒredirect_info = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
							λ.Mod(λ.NewStr("%s?format=json"), λ.GetItem(ϒredirect, λ.NewStr("url"))),
							ϒdisplay_id,
							λ.Mod(λ.NewStr("Downloading %s video url info"), func() λ.Object {
								if λv := ϒredirect_id; λ.IsTrue(λv) {
									return λv
								} else {
									return ϒnum
								}
							}()),
						), λ.KWArgs{
							{Name: "headers", Value: λ.Cal(λ.GetAttr(ϒself, "geo_verification_headers", nil))},
						})
						if λ.IsTrue(λ.Eq(λ.GetItem(ϒredirect_info, λ.NewStr("status")), λ.NewStr("error"))) {
							ϒmessage = λ.Cal(λ.GetAttr(λ.GetAttr(ϒself, "_ERRORS", nil), "get", nil), λ.GetItem(ϒredirect_info, λ.NewStr("http_code")), λ.GetItem(ϒredirect_info, λ.NewStr("message")))
							if λ.IsTrue(λ.Eq(λ.GetItem(ϒredirect_info, λ.NewStr("http_code")), λ.NewInt(403))) {
								λ.Call(λ.GetAttr(ϒself, "raise_geo_restricted", nil), nil, λ.KWArgs{
									{Name: "msg", Value: ϒmessage},
									{Name: "countries", Value: λ.GetAttr(ϒself, "_GEO_COUNTRIES", nil)},
								})
							}
							panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.NewStr("%s said: %s"), λ.NewTuple(
								λ.GetAttr(ϒself, "IE_NAME", nil),
								ϒmessage,
							))), λ.KWArgs{
								{Name: "expected", Value: λ.True},
							})))
						}
						ϒformat_url = λ.Cal(λ.GetAttr(ϒredirect_info, "get", nil), λ.NewStr("url"))
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒformat_url))) {
							continue
						}
						if λ.IsTrue(λ.Eq(λ.Cal(ϒdetermine_ext, ϒformat_url), λ.NewStr("m3u8"))) {
							λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
								ϒformat_url,
								ϒdisplay_id,
								λ.NewStr("mp4"),
							), λ.KWArgs{
								{Name: "m3u8_id", Value: λ.NewStr("hls")},
								{Name: "fatal", Value: λ.False},
							}))
						} else {
							λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("url"):       ϒformat_url,
								λ.NewStr("format_id"): ϒredirect_id,
							}))
							if λ.IsTrue(λ.Cal(Ωre.ϒsearch, λ.NewStr("^https?://.*(?:\\d+k|baseline)"), ϒformat_url)) {
								ϒhttp_url = ϒformat_url
							}
						}
					}
					λ.Cal(λ.GetAttr(ϒself, "_remove_duplicate_formats", nil), ϒformats)
					ϒm3u8_formats = λ.Cal(λ.ListType, λ.Cal(λ.FilterIteratorType, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "f"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒf = λargs[0]
							)
							return func() λ.Object {
								if λv := λ.Eq(λ.Cal(λ.GetAttr(ϒf, "get", nil), λ.NewStr("protocol")), λ.NewStr("m3u8")); !λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Ne(λ.Cal(λ.GetAttr(ϒf, "get", nil), λ.NewStr("vcodec")), λ.NewStr("none"))
								}
							}()
						}), ϒformats))
					if λ.IsTrue(ϒhttp_url) {
						τmp0 = λ.Cal(λ.BuiltinIter, ϒm3u8_formats)
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒm3u8_format = τmp1
							ϒbitrate = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
								λ.NewStr("(\\d+)k"),
								λ.GetItem(ϒm3u8_format, λ.NewStr("url")),
								λ.NewStr("bitrate"),
							), λ.KWArgs{
								{Name: "default", Value: λ.None},
							})
							if λ.IsTrue(func() λ.Object {
								if λv := λ.NewBool(!λ.IsTrue(ϒbitrate)); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Lt(λ.Cal(λ.IntType, ϒbitrate), λ.NewInt(400))
								}
							}()) {
								continue
							}
							ϒf_url = λ.Cal(Ωre.ϒsub, λ.NewStr("\\d+k|baseline"), λ.Add(ϒbitrate, λ.NewStr("k")), ϒhttp_url)
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.Cal(λ.GetAttr(ϒself, "_is_valid_url", nil), ϒf_url, ϒdisplay_id, λ.Mod(λ.NewStr("http-%sk video"), ϒbitrate))))) {
								continue
							}
							ϒf = λ.Cal(λ.GetAttr(ϒm3u8_format, "copy", nil))
							λ.Cal(λ.GetAttr(ϒf, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("url"):       ϒf_url,
								λ.NewStr("format_id"): λ.Cal(λ.GetAttr(λ.GetItem(ϒm3u8_format, λ.NewStr("format_id")), "replace", nil), λ.NewStr("hls"), λ.NewStr("http")),
								λ.NewStr("protocol"):  λ.NewStr("http"),
							}))
							λ.Cal(λ.GetAttr(ϒformats, "append", nil), ϒf)
						}
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒrating_str = λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("rating"))
					if λ.IsTrue(λ.NewBool(ϒrating_str != λ.None)) {
						ϒrating_str = λ.GetItem(λ.Cal(λ.GetAttr(ϒrating_str, "rpartition", nil), λ.NewStr("-")), λ.NewInt(2))
					}
					ϒage_limit = λ.Cal(λ.GetAttr(US_RATINGS, "get", nil), ϒrating_str)
					ϒsubtitles = λ.NewDictWithTable(map[λ.Object]λ.Object{})
					ϒclosed_captions_url = λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("closed_captions_url"))
					if λ.IsTrue(ϒclosed_captions_url) {
						λ.SetItem(ϒsubtitles, λ.NewStr("en"), λ.NewList(λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("ext"): λ.NewStr("ttml"),
							λ.NewStr("url"): ϒclosed_captions_url,
						})))
						ϒmobj = λ.Cal(Ωre.ϒsearch, λ.NewStr("/(\\d+)_Encoded\\.dfxp"), ϒclosed_captions_url)
						if λ.IsTrue(ϒmobj) {
							τmp0 = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewInt(0), λ.NewInt(1))
							ϒttml_caption_suffix = λ.GetItem(τmp0, λ.NewInt(0))
							ϒttml_caption_id = λ.GetItem(τmp0, λ.NewInt(1))
							ϒttml_caption_id = λ.Cal(λ.IntType, ϒttml_caption_id)
							λ.Cal(λ.GetAttr(λ.GetItem(ϒsubtitles, λ.NewStr("en")), "extend", nil), λ.NewList(
								λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("url"): λ.Cal(λ.GetAttr(ϒclosed_captions_url, "replace", nil), ϒttml_caption_suffix, λ.Mod(λ.NewStr("/%d_Encoded.srt"), λ.Add(ϒttml_caption_id, λ.NewInt(1)))),
									λ.NewStr("ext"): λ.NewStr("srt"),
								}),
								λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("url"): λ.Cal(λ.GetAttr(ϒclosed_captions_url, "replace", nil), ϒttml_caption_suffix, λ.Mod(λ.NewStr("/%d_Encoded.vtt"), λ.Add(ϒttml_caption_id, λ.NewInt(2)))),
									λ.NewStr("ext"): λ.NewStr("vtt"),
								}),
							))
						}
					}
					ϒalt_title = λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("program"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("title"))
					if λ.IsTrue(ϒalt_title) {
						λ.SetItem(ϒinfo, λ.NewStr("title"), λ.Add(λ.Add(ϒalt_title, λ.NewStr(" - ")), λ.Cal(Ωre.ϒsub, λ.Add(λ.Add(λ.NewStr("^"), ϒalt_title), λ.NewStr("[\\s\\-:]+")), λ.NewStr(""), λ.GetItem(ϒinfo, λ.NewStr("title")))))
					}
					ϒdescription = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("description")); λ.IsTrue(λv) {
							return λv
						} else if λv := λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("program"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("description")); λ.IsTrue(λv) {
							return λv
						} else {
							return ϒdescription
						}
					}()
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("display_id"):  ϒdisplay_id,
						λ.NewStr("title"):       λ.GetItem(ϒinfo, λ.NewStr("title")),
						λ.NewStr("description"): ϒdescription,
						λ.NewStr("thumbnail"):   λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("image_url")),
						λ.NewStr("duration"):    λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("duration"))),
						λ.NewStr("age_limit"):   ϒage_limit,
						λ.NewStr("upload_date"): ϒupload_date,
						λ.NewStr("formats"):     ϒformats,
						λ.NewStr("subtitles"):   ϒsubtitles,
						λ.NewStr("chapters"):    ϒchapters,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):             PBSIE_IE_NAME,
				λ.NewStr("_GEO_COUNTRIES"):      PBSIE__GEO_COUNTRIES,
				λ.NewStr("_STATIONS"):           PBSIE__STATIONS,
				λ.NewStr("_TESTS"):              PBSIE__TESTS,
				λ.NewStr("_VALID_URL"):          PBSIE__VALID_URL,
				λ.NewStr("_extract_video_data"): PBSIE__extract_video_data,
				λ.NewStr("_extract_webpage"):    PBSIE__extract_webpage,
				λ.NewStr("_real_extract"):       PBSIE__real_extract,
				λ.NewStr("_real_initialize"):    PBSIE__real_initialize,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * manyvids/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/manyvids.py
 */

package manyvids

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor       λ.Object
	ManyVidsIE          λ.Object
	ϒdetermine_ext      λ.Object
	ϒint_or_none        λ.Object
	ϒstr_to_int         λ.Object
	ϒurlencode_postdata λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒstr_to_int = Ωutils.ϒstr_to_int
		ϒurlencode_postdata = Ωutils.ϒurlencode_postdata
		ManyVidsIE = λ.Cal(λ.TypeType, λ.StrLiteral("ManyVidsIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ManyVidsIE__VALID_URL    λ.Object
				ManyVidsIE__real_extract λ.Object
			)
			ManyVidsIE__VALID_URL = λ.StrLiteral("(?i)https?://(?:www\\.)?manyvids\\.com/video/(?P<id>\\d+)")
			ManyVidsIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒformats    λ.Object
						ϒlike_count λ.Object
						ϒmv_token   λ.Object
						ϒself       = λargs[0]
						ϒtitle      λ.Object
						ϒurl        = λargs[1]
						ϒvideo_id   λ.Object
						ϒvideo_url  λ.Object
						ϒview_count λ.Object
						ϒwebpage    λ.Object
						τmp0        λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒvideo_id)
					ϒvideo_url = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("data-(?:video-filepath|meta-video)\\s*=s*([\"\\'])(?P<url>(?:(?!\\1).)+)\\1"),
						ϒwebpage,
						λ.StrLiteral("video URL"),
					), λ.KWArgs{
						{Name: "group", Value: λ.StrLiteral("url")},
					})
					ϒtitle = func() λ.Object {
						if λv := λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
							λ.NewTuple(
								λ.StrLiteral("<span[^>]+class=[\"\\']item-title[^>]+>([^<]+)"),
								λ.StrLiteral("<h2[^>]+class=[\"\\']h2 m-0[\"\\'][^>]*>([^<]+)"),
							),
							ϒwebpage,
							λ.StrLiteral("title"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
								λ.StrLiteral("twitter:title"),
								ϒwebpage,
								λ.StrLiteral("title"),
							), λ.KWArgs{
								{Name: "fatal", Value: λ.True},
							})
						}
					}()
					if λ.IsTrue(λ.Cal(λ.BuiltinAny, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒp   λ.Object
									τmp0 λ.Object
									τmp1 λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
									λ.StrLiteral("preview_videos"),
									λ.StrLiteral("_preview.mp4"),
								))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒp = τmp1
									λgy.Yield(λ.NewBool(λ.Contains(ϒwebpage, ϒp)))
								}
								return λ.None
							})
						})))) {
						τmp0 = λ.IAdd(ϒtitle, λ.StrLiteral(" (Preview)"))
						ϒtitle = τmp0
					}
					ϒmv_token = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("data-mvtoken=([\"\\'])(?P<value>(?:(?!\\1).)+)\\1"),
						ϒwebpage,
						λ.StrLiteral("mv token"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
						{Name: "group", Value: λ.StrLiteral("value")},
					})
					if λ.IsTrue(ϒmv_token) {
						λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
							λ.StrLiteral("https://www.manyvids.com/includes/ajax_repository/you_had_me_at_hello.php"),
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "fatal", Value: λ.False},
							{Name: "data", Value: λ.Cal(ϒurlencode_postdata, λ.DictLiteral(map[string]λ.Object{
								"mvtoken": ϒmv_token,
								"vid":     ϒvideo_id,
							}))},
							{Name: "headers", Value: λ.DictLiteral(map[string]λ.Object{
								"Referer":          ϒurl,
								"X-Requested-With": λ.StrLiteral("XMLHttpRequest"),
							})},
						})
					}
					if λ.IsTrue(λ.Eq(λ.Cal(ϒdetermine_ext, ϒvideo_url), λ.StrLiteral("m3u8"))) {
						ϒformats = λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
							ϒvideo_url,
							ϒvideo_id,
							λ.StrLiteral("mp4"),
						), λ.KWArgs{
							{Name: "entry_protocol", Value: λ.StrLiteral("m3u8_native")},
							{Name: "m3u8_id", Value: λ.StrLiteral("hls")},
						})
					} else {
						ϒformats = λ.NewList(λ.DictLiteral(map[string]λ.Object{
							"url": ϒvideo_url,
						}))
					}
					ϒlike_count = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("data-likes=[\"\\'](\\d+)"),
						ϒwebpage,
						λ.StrLiteral("like count"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					}))
					ϒview_count = λ.Cal(ϒstr_to_int, λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("(?s)<span[^>]+class=\"views-wrapper\"[^>]*>(.+?)</span"),
						ϒwebpage,
						λ.StrLiteral("view count"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					}))
					return λ.DictLiteral(map[string]λ.Object{
						"id":         ϒvideo_id,
						"title":      ϒtitle,
						"view_count": ϒview_count,
						"like_count": ϒlike_count,
						"formats":    ϒformats,
					})
				})
			return λ.DictLiteral(map[string]λ.Object{
				"_VALID_URL":    ManyVidsIE__VALID_URL,
				"_real_extract": ManyVidsIE__real_extract,
			})
		}())
	})
}

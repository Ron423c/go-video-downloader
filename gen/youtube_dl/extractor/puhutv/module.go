// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * puhutv/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/puhutv.py
 */

package puhutv

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError     λ.Object
	InfoExtractor      λ.Object
	PuhuTVIE           λ.Object
	PuhuTVSerieIE      λ.Object
	ϒcompat_HTTPError  λ.Object
	ϒcompat_str        λ.Object
	ϒfloat_or_none     λ.Object
	ϒint_or_none       λ.Object
	ϒparse_resolution  λ.Object
	ϒstr_or_none       λ.Object
	ϒtry_get           λ.Object
	ϒunified_timestamp λ.Object
	ϒurl_or_none       λ.Object
	ϒurljoin           λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_HTTPError = Ωcompat.ϒcompat_HTTPError
		ϒcompat_str = Ωcompat.ϒcompat_str
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒparse_resolution = Ωutils.ϒparse_resolution
		ϒstr_or_none = Ωutils.ϒstr_or_none
		ϒtry_get = Ωutils.ϒtry_get
		ϒunified_timestamp = Ωutils.ϒunified_timestamp
		ϒurl_or_none = Ωutils.ϒurl_or_none
		ϒurljoin = Ωutils.ϒurljoin
		PuhuTVIE = λ.Cal(λ.TypeType, λ.NewStr("PuhuTVIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				PuhuTVIE_IE_NAME       λ.Object
				PuhuTVIE__TESTS        λ.Object
				PuhuTVIE__VALID_URL    λ.Object
				PuhuTVIE__real_extract λ.Object
			)
			PuhuTVIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?puhutv\\.com/(?P<id>[^/?#&]+)-izle")
			PuhuTVIE_IE_NAME = λ.NewStr("puhutv")
			PuhuTVIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://puhutv.com/sut-kardesler-izle"),
					λ.NewStr("md5"): λ.NewStr("fbd8f2d8e7681f8bcd51b592475a6ae7"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           λ.NewStr("5085"),
						λ.NewStr("display_id"):   λ.NewStr("sut-kardesler"),
						λ.NewStr("ext"):          λ.NewStr("mp4"),
						λ.NewStr("title"):        λ.NewStr("Süt Kardeşler"),
						λ.NewStr("description"):  λ.NewStr("md5:405fd024df916ca16731114eb18e511a"),
						λ.NewStr("thumbnail"):    λ.NewStr("re:^https?://.*\\.jpg$"),
						λ.NewStr("duration"):     λ.NewFloat(4832.44),
						λ.NewStr("creator"):      λ.NewStr("Arzu Film"),
						λ.NewStr("timestamp"):    λ.NewInt(1469778212),
						λ.NewStr("upload_date"):  λ.NewStr("20160729"),
						λ.NewStr("release_year"): λ.NewInt(1976),
						λ.NewStr("view_count"):   λ.IntType,
						λ.NewStr("tags"): λ.NewList(
							λ.NewStr("Aile"),
							λ.NewStr("Komedi"),
							λ.NewStr("Klasikler"),
						),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://puhutv.com/jet-sosyete-1-bolum-izle"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://puhutv.com/dip-1-bolum-izle"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			PuhuTVIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcreator        λ.Object
						ϒdescription    λ.Object
						ϒdisplay_id     λ.Object
						ϒduration       λ.Object
						ϒepisode_number λ.Object
						ϒf              λ.Object
						ϒformat_id      λ.Object
						ϒformats        λ.Object
						ϒgenre          λ.Object
						ϒgenre_name     λ.Object
						ϒimage_id       λ.Object
						ϒimage_url      λ.Object
						ϒimages         λ.Object
						ϒinfo           λ.Object
						ϒlang           λ.Object
						ϒmedia_url      λ.Object
						ϒplaylist       λ.Object
						ϒquality        λ.Object
						ϒrelease_year   λ.Object
						ϒseason_id      λ.Object
						ϒseason_number  λ.Object
						ϒself           = λargs[0]
						ϒsub_url        λ.Object
						ϒsubtitle       λ.Object
						ϒsubtitles      λ.Object
						ϒt              λ.Object
						ϒtags           λ.Object
						ϒthumbnails     λ.Object
						ϒtimestamp      λ.Object
						ϒtitle          λ.Object
						ϒurl            = λargs[1]
						ϒvideo          λ.Object
						ϒvideo_format   λ.Object
						ϒvideo_id       λ.Object
						ϒvideos         λ.Object
						ϒview_count     λ.Object
						τmp0            λ.Object
						τmp1            λ.Object
						τmp2            λ.Object
					)
					ϒdisplay_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒinfo = λ.GetItem(λ.Cal(λ.GetAttr(ϒself, "_download_json", nil), λ.Cal(ϒurljoin, ϒurl, λ.Mod(λ.NewStr("/api/slug/%s-izle"), ϒdisplay_id)), ϒdisplay_id), λ.NewStr("data"))
					ϒvideo_id = λ.Cal(ϒcompat_str, λ.GetItem(ϒinfo, λ.NewStr("id")))
					ϒtitle = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("name")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.GetItem(λ.GetItem(ϒinfo, λ.NewStr("title")), λ.NewStr("name"))
						}
					}()
					if λ.IsTrue(λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("display_name"))) {
						ϒtitle = λ.Mod(λ.NewStr("%s %s"), λ.NewTuple(
							ϒtitle,
							λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("display_name")),
						))
					}
					τmp0, τmp1 = func() (λexit λ.Object, λret λ.Object) {
						defer λ.CatchMulti(
							nil,
							&λ.Catcher{ExtractorError, func(λex λ.BaseException) {
								ϒe := λex
								if λ.IsTrue(func() λ.Object {
									if λv := λ.Cal(λ.BuiltinIsInstance, λ.GetAttr(ϒe, "cause", nil), ϒcompat_HTTPError); !λ.IsTrue(λv) {
										return λv
									} else {
										return λ.Eq(λ.GetAttr(λ.GetAttr(ϒe, "cause", nil), "code", nil), λ.NewInt(403))
									}
								}()) {
									λ.Cal(λ.GetAttr(ϒself, "raise_geo_restricted", nil))
								}
								panic(λ.Raise(λex))
							}},
						)
						ϒvideos = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
							λ.Mod(λ.NewStr("https://puhutv.com/api/assets/%s/videos"), ϒvideo_id),
							ϒdisplay_id,
							λ.NewStr("Downloading video JSON"),
						), λ.KWArgs{
							{Name: "headers", Value: λ.Cal(λ.GetAttr(ϒself, "geo_verification_headers", nil))},
						})
						return λ.BlockExitNormally, nil
					}()
					ϒformats = λ.NewList()
					τmp1 = λ.Cal(λ.BuiltinIter, λ.GetItem(λ.GetItem(ϒvideos, λ.NewStr("data")), λ.NewStr("videos")))
					for {
						if τmp0 = λ.NextDefault(τmp1, λ.AfterLast); τmp0 == λ.AfterLast {
							break
						}
						ϒvideo = τmp0
						ϒmedia_url = λ.Cal(ϒurl_or_none, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("url")))
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒmedia_url))) {
							continue
						}
						ϒplaylist = λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("is_playlist"))
						if λ.IsTrue(func() λ.Object {
							if λv := λ.Eq(λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("stream_type")), λ.NewStr("hls")); !λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(ϒplaylist == λ.True)
							}
						}()) {
							λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
								ϒmedia_url,
								ϒvideo_id,
								λ.NewStr("mp4"),
							), λ.KWArgs{
								{Name: "entry_protocol", Value: λ.NewStr("m3u8_native")},
								{Name: "m3u8_id", Value: λ.NewStr("hls")},
								{Name: "fatal", Value: λ.False},
							}))
							continue
						}
						ϒquality = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("quality")))
						ϒf = λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"):    ϒmedia_url,
							λ.NewStr("ext"):    λ.NewStr("mp4"),
							λ.NewStr("height"): ϒquality,
						})
						ϒvideo_format = λ.Cal(λ.GetAttr(ϒvideo, "get", nil), λ.NewStr("video_format"))
						if λ.IsTrue(func() λ.Object {
							if λv := λ.Eq(ϒvideo_format, λ.NewStr("hls")); !λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(ϒplaylist == λ.False)
							}
						}()) {
							ϒformat_id = λ.NewStr("hls")
							λ.SetItem(ϒf, λ.NewStr("protocol"), λ.NewStr("m3u8_native"))
						} else {
							if λ.IsTrue(λ.Eq(ϒvideo_format, λ.NewStr("mp4"))) {
								ϒformat_id = λ.NewStr("http")
							} else {
								continue
							}
						}
						if λ.IsTrue(ϒquality) {
							τmp2 = λ.IAdd(ϒformat_id, λ.Mod(λ.NewStr("-%sp"), ϒquality))
							ϒformat_id = τmp2
						}
						λ.SetItem(ϒf, λ.NewStr("format_id"), ϒformat_id)
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), ϒf)
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒdescription = func() λ.Object {
						if λv := λ.Cal(ϒtry_get, ϒinfo, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("title")), λ.NewStr("description"))
							}), ϒcompat_str); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("description"))
						}
					}()
					ϒtimestamp = λ.Cal(ϒunified_timestamp, λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("created_at")))
					ϒcreator = λ.Cal(ϒtry_get, ϒinfo, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(λ.GetItem(λ.GetItem(ϒx, λ.NewStr("title")), λ.NewStr("producer")), λ.NewStr("name"))
						}), ϒcompat_str)
					ϒduration = λ.Call(ϒfloat_or_none, λ.NewArgs(λ.Cal(ϒtry_get, ϒinfo, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("content")), λ.NewStr("duration_in_ms"))
						}), λ.IntType)), λ.KWArgs{
						{Name: "scale", Value: λ.NewInt(1000)},
					})
					ϒview_count = λ.Cal(ϒtry_get, ϒinfo, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("content")), λ.NewStr("watch_count"))
						}), λ.IntType)
					ϒimages = func() λ.Object {
						if λv := λ.Cal(ϒtry_get, ϒinfo, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(λ.GetItem(ϒx, λ.NewStr("content")), λ.NewStr("images")), λ.NewStr("wide"))
							}), λ.DictType); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewDictWithTable(map[λ.Object]λ.Object{})
						}
					}()
					ϒthumbnails = λ.NewList()
					τmp1 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒimages, "items", nil)))
					for {
						if τmp0 = λ.NextDefault(τmp1, λ.AfterLast); τmp0 == λ.AfterLast {
							break
						}
						τmp2 = τmp0
						ϒimage_id = λ.GetItem(τmp2, λ.NewInt(0))
						ϒimage_url = λ.GetItem(τmp2, λ.NewInt(1))
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒimage_url, ϒcompat_str)))) {
							continue
						}
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.Cal(λ.GetAttr(ϒimage_url, "startswith", nil), λ.NewTuple(
							λ.NewStr("http"),
							λ.NewStr("//"),
						))))) {
							ϒimage_url = λ.Mod(λ.NewStr("https://%s"), ϒimage_url)
						}
						ϒt = λ.Cal(ϒparse_resolution, ϒimage_id)
						λ.Cal(λ.GetAttr(ϒt, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("id"):  ϒimage_id,
							λ.NewStr("url"): ϒimage_url,
						}))
						λ.Cal(λ.GetAttr(ϒthumbnails, "append", nil), ϒt)
					}
					ϒrelease_year = λ.Cal(ϒtry_get, ϒinfo, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("title")), λ.NewStr("released_at"))
						}), λ.IntType)
					ϒseason_number = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("season_number")))
					ϒseason_id = λ.Cal(ϒstr_or_none, λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("season_id")))
					ϒepisode_number = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("episode_number")))
					ϒtags = λ.NewList()
					τmp1 = λ.Cal(λ.BuiltinIter, func() λ.Object {
						if λv := λ.Cal(ϒtry_get, ϒinfo, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("title")), λ.NewStr("genres"))
							}), λ.ListType); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewList()
						}
					}())
					for {
						if τmp0 = λ.NextDefault(τmp1, λ.AfterLast); τmp0 == λ.AfterLast {
							break
						}
						ϒgenre = τmp0
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒgenre, λ.DictType)))) {
							continue
						}
						ϒgenre_name = λ.Cal(λ.GetAttr(ϒgenre, "get", nil), λ.NewStr("name"))
						if λ.IsTrue(func() λ.Object {
							if λv := ϒgenre_name; !λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.BuiltinIsInstance, ϒgenre_name, ϒcompat_str)
							}
						}()) {
							λ.Cal(λ.GetAttr(ϒtags, "append", nil), ϒgenre_name)
						}
					}
					ϒsubtitles = λ.NewDictWithTable(map[λ.Object]λ.Object{})
					τmp1 = λ.Cal(λ.BuiltinIter, func() λ.Object {
						if λv := λ.Cal(ϒtry_get, ϒinfo, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("content")), λ.NewStr("subtitles"))
							}), λ.ListType); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewList()
						}
					}())
					for {
						if τmp0 = λ.NextDefault(τmp1, λ.AfterLast); τmp0 == λ.AfterLast {
							break
						}
						ϒsubtitle = τmp0
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒsubtitle, λ.DictType)))) {
							continue
						}
						ϒlang = λ.Cal(λ.GetAttr(ϒsubtitle, "get", nil), λ.NewStr("language"))
						ϒsub_url = λ.Cal(ϒurl_or_none, λ.Cal(λ.GetAttr(ϒsubtitle, "get", nil), λ.NewStr("url")))
						if λ.IsTrue(func() λ.Object {
							if λv := λ.NewBool(!λ.IsTrue(ϒlang)); λ.IsTrue(λv) {
								return λv
							} else if λv := λ.NewBool(!λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒlang, ϒcompat_str))); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(!λ.IsTrue(ϒsub_url))
							}
						}()) {
							continue
						}
						λ.SetItem(ϒsubtitles, λ.Cal(λ.GetAttr(λ.GetAttr(ϒself, "_SUBTITLE_LANGS", nil), "get", nil), ϒlang, ϒlang), λ.NewList(λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"): ϒsub_url,
						})))
					}
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):             ϒvideo_id,
						λ.NewStr("display_id"):     ϒdisplay_id,
						λ.NewStr("title"):          ϒtitle,
						λ.NewStr("description"):    ϒdescription,
						λ.NewStr("season_id"):      ϒseason_id,
						λ.NewStr("season_number"):  ϒseason_number,
						λ.NewStr("episode_number"): ϒepisode_number,
						λ.NewStr("release_year"):   ϒrelease_year,
						λ.NewStr("timestamp"):      ϒtimestamp,
						λ.NewStr("creator"):        ϒcreator,
						λ.NewStr("view_count"):     ϒview_count,
						λ.NewStr("duration"):       ϒduration,
						λ.NewStr("tags"):           ϒtags,
						λ.NewStr("subtitles"):      ϒsubtitles,
						λ.NewStr("thumbnails"):     ϒthumbnails,
						λ.NewStr("formats"):        ϒformats,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):       PuhuTVIE_IE_NAME,
				λ.NewStr("_TESTS"):        PuhuTVIE__TESTS,
				λ.NewStr("_VALID_URL"):    PuhuTVIE__VALID_URL,
				λ.NewStr("_real_extract"): PuhuTVIE__real_extract,
			})
		}())
		PuhuTVSerieIE = λ.Cal(λ.TypeType, λ.NewStr("PuhuTVSerieIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				PuhuTVSerieIE__VALID_URL λ.Object
			)
			PuhuTVSerieIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?puhutv\\.com/(?P<id>[^/?#&]+)-detay")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): PuhuTVSerieIE__VALID_URL,
			})
		}())
	})
}

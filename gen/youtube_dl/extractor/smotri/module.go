// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * smotri/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/smotri.py
 */

package smotri

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError      λ.Object
	InfoExtractor       λ.Object
	SmotriBroadcastIE   λ.Object
	SmotriCommunityIE   λ.Object
	SmotriIE            λ.Object
	SmotriUserIE        λ.Object
	ϒint_or_none        λ.Object
	ϒsanitized_Request  λ.Object
	ϒunified_strdate    λ.Object
	ϒurlencode_postdata λ.Object
	ϒxpath_text         λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒsanitized_Request = Ωutils.ϒsanitized_Request
		ϒunified_strdate = Ωutils.ϒunified_strdate
		ϒurlencode_postdata = Ωutils.ϒurlencode_postdata
		ϒxpath_text = Ωutils.ϒxpath_text
		SmotriIE = λ.Cal(λ.TypeType, λ.NewStr("SmotriIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				SmotriIE__VALID_URL λ.Object
			)
			SmotriIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?(?:smotri\\.com/video/view/\\?id=|pics\\.smotri\\.com/(?:player|scrubber_custom8)\\.swf\\?file=)(?P<id>v(?P<realvideoid>[0-9]+)[a-z0-9]{4})")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): SmotriIE__VALID_URL,
			})
		}())
		SmotriCommunityIE = λ.Cal(λ.TypeType, λ.NewStr("SmotriCommunityIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				SmotriCommunityIE__VALID_URL λ.Object
			)
			SmotriCommunityIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?smotri\\.com/community/video/(?P<id>[0-9A-Za-z_\\'-]+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): SmotriCommunityIE__VALID_URL,
			})
		}())
		SmotriUserIE = λ.Cal(λ.TypeType, λ.NewStr("SmotriUserIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				SmotriUserIE__VALID_URL λ.Object
			)
			SmotriUserIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?smotri\\.com/user/(?P<id>[0-9A-Za-z_\\'-]+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): SmotriUserIE__VALID_URL,
			})
		}())
		SmotriBroadcastIE = λ.Cal(λ.TypeType, λ.NewStr("SmotriBroadcastIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				SmotriBroadcastIE__VALID_URL λ.Object
			)
			SmotriBroadcastIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?(?P<url>smotri\\.com/live/(?P<id>[^/]+))/?.*")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): SmotriBroadcastIE__VALID_URL,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * gaskrank/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/gaskrank.py
 */

package gaskrank

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	GaskrankIE       λ.Object
	InfoExtractor    λ.Object
	ϒfloat_or_none   λ.Object
	ϒint_or_none     λ.Object
	ϒunified_strdate λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒunified_strdate = Ωutils.ϒunified_strdate
		GaskrankIE = λ.Cal(λ.TypeType, λ.StrLiteral("GaskrankIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				GaskrankIE__VALID_URL    λ.Object
				GaskrankIE__real_extract λ.Object
			)
			GaskrankIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?gaskrank\\.tv/tv/(?P<categories>[^/]+)/(?P<id>[^/]+)\\.htm")
			GaskrankIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒaverage_rating λ.Object
						ϒcategories     λ.Object
						ϒdisplay_id     λ.Object
						ϒentry          λ.Object
						ϒmobj           λ.Object
						ϒself           = λargs[0]
						ϒtags           λ.Object
						ϒtitle          λ.Object
						ϒupload_date    λ.Object
						ϒuploader_id    λ.Object
						ϒuploader_url   λ.Object
						ϒurl            = λargs[1]
						ϒvideo_id       λ.Object
						ϒview_count     λ.Object
						ϒwebpage        λ.Object
					)
					ϒdisplay_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒdisplay_id)
					ϒtitle = func() λ.Object {
						if λv := λ.Call(λ.GetAttr(ϒself, "_og_search_title", nil), λ.NewArgs(ϒwebpage), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
								λ.StrLiteral("title"),
								ϒwebpage,
							), λ.KWArgs{
								{Name: "fatal", Value: λ.True},
							})
						}
					}()
					ϒcategories = λ.NewList(λ.Calm(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "group", λ.StrLiteral("categories")))
					ϒmobj = λ.Cal(Ωre.ϒsearch, λ.StrLiteral("Video von:\\s*(?P<uploader_id>[^|]*?)\\s*\\|\\s*vom:\\s*(?P<upload_date>[0-9][0-9]\\.[0-9][0-9]\\.[0-9][0-9][0-9][0-9])"), ϒwebpage)
					if ϒmobj != λ.None {
						ϒuploader_id = λ.Calm(λ.Calm(ϒmobj, "groupdict"), "get", λ.StrLiteral("uploader_id"))
						ϒupload_date = λ.Cal(ϒunified_strdate, λ.Calm(λ.Calm(ϒmobj, "groupdict"), "get", λ.StrLiteral("upload_date")))
					}
					ϒuploader_url = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("Homepage:\\s*<[^>]*>(?P<uploader_url>[^<]*)"),
						ϒwebpage,
						λ.StrLiteral("uploader_url"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					ϒtags = λ.Cal(Ωre.ϒfindall, λ.StrLiteral("/tv/tags/[^/]+/\"\\s*>(?P<tag>[^<]*?)<"), ϒwebpage)
					ϒview_count = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("class\\s*=\\s*\"gkRight\"(?:[^>]*>\\s*<[^>]*)*icon-eye-open(?:[^>]*>\\s*<[^>]*)*>\\s*(?P<view_count>[0-9\\.]*)"),
						ϒwebpage,
						λ.StrLiteral("view_count"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(ϒview_count) {
						ϒview_count = λ.Cal(ϒint_or_none, λ.Calm(ϒview_count, "replace", λ.StrLiteral("."), λ.StrLiteral("")))
					}
					ϒaverage_rating = λ.Calm(ϒself, "_search_regex", λ.StrLiteral("itemprop\\s*=\\s*\"ratingValue\"[^>]*>\\s*(?P<average_rating>[0-9,]+)"), ϒwebpage, λ.StrLiteral("average_rating"))
					if λ.IsTrue(ϒaverage_rating) {
						ϒaverage_rating = λ.Cal(ϒfloat_or_none, λ.Calm(ϒaverage_rating, "replace", λ.StrLiteral(","), λ.StrLiteral(".")))
					}
					ϒvideo_id = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("https?://movies\\.gaskrank\\.tv/([^-]*?)(-[^\\.]*)?\\.mp4"),
						ϒwebpage,
						λ.StrLiteral("video id"),
					), λ.KWArgs{
						{Name: "default", Value: ϒdisplay_id},
					})
					ϒentry = λ.GetItem(λ.Calm(ϒself, "_parse_html5_media_entries", ϒurl, ϒwebpage, ϒvideo_id), λ.IntLiteral(0))
					λ.Calm(ϒentry, "update", λ.DictLiteral(map[string]λ.Object{
						"id":             ϒvideo_id,
						"title":          ϒtitle,
						"categories":     ϒcategories,
						"display_id":     ϒdisplay_id,
						"uploader_id":    ϒuploader_id,
						"upload_date":    ϒupload_date,
						"uploader_url":   ϒuploader_url,
						"tags":           ϒtags,
						"view_count":     ϒview_count,
						"average_rating": ϒaverage_rating,
					}))
					λ.Calm(ϒself, "_sort_formats", λ.GetItem(ϒentry, λ.StrLiteral("formats")))
					return ϒentry
				})
			return λ.DictLiteral(map[string]λ.Object{
				"_VALID_URL":    GaskrankIE__VALID_URL,
				"_real_extract": GaskrankIE__real_extract,
			})
		}())
	})
}

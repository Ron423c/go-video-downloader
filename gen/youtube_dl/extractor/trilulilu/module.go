// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * trilulilu/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/trilulilu.py
 */

package trilulilu

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError λ.Object
	InfoExtractor  λ.Object
	TriluliluIE    λ.Object
	ϒint_or_none   λ.Object
	ϒparse_iso8601 λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		TriluliluIE = λ.Cal(λ.TypeType, λ.NewStr("TriluliluIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				TriluliluIE__TESTS        λ.Object
				TriluliluIE__VALID_URL    λ.Object
				TriluliluIE__real_extract λ.Object
			)
			TriluliluIE__VALID_URL = λ.NewStr("https?://(?:(?:www|m)\\.)?trilulilu\\.ro/(?:[^/]+/)?(?P<id>[^/#\\?]+)")
			TriluliluIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.trilulilu.ro/big-buck-bunny-1"),
					λ.NewStr("md5"): λ.NewStr("68da087b676a6196a413549212f60cc6"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):            λ.NewStr("ae2899e124140b"),
						λ.NewStr("ext"):           λ.NewStr("mp4"),
						λ.NewStr("title"):         λ.NewStr("Big Buck Bunny"),
						λ.NewStr("description"):   λ.NewStr(":) pentru copilul din noi"),
						λ.NewStr("uploader_id"):   λ.NewStr("chipy"),
						λ.NewStr("upload_date"):   λ.NewStr("20120304"),
						λ.NewStr("timestamp"):     λ.NewInt(1330830647),
						λ.NewStr("uploader"):      λ.NewStr("chipy"),
						λ.NewStr("view_count"):    λ.IntType,
						λ.NewStr("like_count"):    λ.IntType,
						λ.NewStr("comment_count"): λ.IntType,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.trilulilu.ro/adena-ft-morreti-inocenta"),
					λ.NewStr("md5"): λ.NewStr("929dfb8729dc71750463af88bbbbf4a4"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):            λ.NewStr("f299710e3c91c5"),
						λ.NewStr("ext"):           λ.NewStr("mp4"),
						λ.NewStr("title"):         λ.NewStr("Adena ft. Morreti - Inocenta"),
						λ.NewStr("description"):   λ.NewStr("pop music"),
						λ.NewStr("uploader_id"):   λ.NewStr("VEVOmixt"),
						λ.NewStr("upload_date"):   λ.NewStr("20151204"),
						λ.NewStr("uploader"):      λ.NewStr("VEVOmixt"),
						λ.NewStr("timestamp"):     λ.NewInt(1449187937),
						λ.NewStr("view_count"):    λ.IntType,
						λ.NewStr("like_count"):    λ.IntType,
						λ.NewStr("comment_count"): λ.IntType,
					}),
				}),
			)
			TriluliluIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒage_limit   λ.Object
						ϒdisplay_id  λ.Object
						ϒerrors      λ.Object
						ϒformats     λ.Object
						ϒmedia_class λ.Object
						ϒmedia_info  λ.Object
						ϒself        = λargs[0]
						ϒstream_type λ.Object
						ϒthumbnail   λ.Object
						ϒurl         = λargs[1]
						ϒuser        λ.Object
					)
					ϒdisplay_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒmedia_info = λ.Cal(λ.GetAttr(ϒself, "_download_json", nil), λ.Mod(λ.NewStr("http://m.trilulilu.ro/%s?format=json"), ϒdisplay_id), ϒdisplay_id)
					ϒage_limit = λ.NewInt(0)
					ϒerrors = λ.Cal(λ.GetAttr(ϒmedia_info, "get", nil), λ.NewStr("errors"), λ.NewDictWithTable(map[λ.Object]λ.Object{}))
					if λ.IsTrue(λ.Cal(λ.GetAttr(ϒerrors, "get", nil), λ.NewStr("friends"))) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.NewStr("This video is private.")), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					} else {
						if λ.IsTrue(λ.Cal(λ.GetAttr(ϒerrors, "get", nil), λ.NewStr("geoblock"))) {
							panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.NewStr("This video is not available in your country.")), λ.KWArgs{
								{Name: "expected", Value: λ.True},
							})))
						} else {
							if λ.IsTrue(λ.Cal(λ.GetAttr(ϒerrors, "get", nil), λ.NewStr("xxx_unlogged"))) {
								ϒage_limit = λ.NewInt(18)
							}
						}
					}
					ϒmedia_class = λ.Cal(λ.GetAttr(ϒmedia_info, "get", nil), λ.NewStr("class"))
					if λ.IsTrue(λ.NewBool(!λ.Contains(λ.NewTuple(
						λ.NewStr("video"),
						λ.NewStr("audio"),
					), ϒmedia_class))) {
						panic(λ.Raise(λ.Cal(ExtractorError, λ.NewStr("not a video or an audio"))))
					}
					ϒuser = λ.Cal(λ.GetAttr(ϒmedia_info, "get", nil), λ.NewStr("user"), λ.NewDictWithTable(map[λ.Object]λ.Object{}))
					ϒthumbnail = λ.Cal(λ.GetAttr(ϒmedia_info, "get", nil), λ.NewStr("cover_url"))
					if λ.IsTrue(ϒthumbnail) {
						λ.Call(λ.GetAttr(ϒthumbnail, "format", nil), nil, λ.KWArgs{
							{Name: "width", Value: λ.NewStr("1600")},
							{Name: "height", Value: λ.NewStr("1200")},
						})
					}
					ϒstream_type = λ.Cal(λ.GetAttr(ϒmedia_info, "get", nil), λ.NewStr("stream_type"))
					ϒformats = λ.NewList(λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("url"): λ.GetItem(ϒmedia_info, λ.NewStr("href")),
						λ.NewStr("ext"): ϒstream_type,
					}))
					if λ.IsTrue(λ.Cal(λ.GetAttr(ϒmedia_info, "get", nil), λ.NewStr("is_hd"))) {
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("format_id"): λ.NewStr("hd"),
							λ.NewStr("url"):       λ.GetItem(ϒmedia_info, λ.NewStr("hrefhd")),
							λ.NewStr("ext"):       ϒstream_type,
						}))
					}
					if λ.IsTrue(λ.Eq(ϒmedia_class, λ.NewStr("audio"))) {
						λ.SetItem(λ.GetItem(ϒformats, λ.NewInt(0)), λ.NewStr("vcodec"), λ.NewStr("none"))
					} else {
						λ.SetItem(λ.GetItem(ϒformats, λ.NewInt(0)), λ.NewStr("format_id"), λ.NewStr("sd"))
					}
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):            λ.GetItem(λ.Cal(λ.GetAttr(λ.GetItem(ϒmedia_info, λ.NewStr("identifier")), "split", nil), λ.NewStr("|")), λ.NewInt(1)),
						λ.NewStr("display_id"):    ϒdisplay_id,
						λ.NewStr("formats"):       ϒformats,
						λ.NewStr("title"):         λ.GetItem(ϒmedia_info, λ.NewStr("title")),
						λ.NewStr("description"):   λ.Cal(λ.GetAttr(ϒmedia_info, "get", nil), λ.NewStr("description")),
						λ.NewStr("thumbnail"):     ϒthumbnail,
						λ.NewStr("uploader_id"):   λ.Cal(λ.GetAttr(ϒuser, "get", nil), λ.NewStr("username")),
						λ.NewStr("uploader"):      λ.Cal(λ.GetAttr(ϒuser, "get", nil), λ.NewStr("fullname")),
						λ.NewStr("timestamp"):     λ.Cal(ϒparse_iso8601, λ.Cal(λ.GetAttr(ϒmedia_info, "get", nil), λ.NewStr("published")), λ.NewStr(" ")),
						λ.NewStr("duration"):      λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒmedia_info, "get", nil), λ.NewStr("duration"))),
						λ.NewStr("view_count"):    λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒmedia_info, "get", nil), λ.NewStr("count_views"))),
						λ.NewStr("like_count"):    λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒmedia_info, "get", nil), λ.NewStr("count_likes"))),
						λ.NewStr("comment_count"): λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒmedia_info, "get", nil), λ.NewStr("count_comments"))),
						λ.NewStr("age_limit"):     ϒage_limit,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        TriluliluIE__TESTS,
				λ.NewStr("_VALID_URL"):    TriluliluIE__VALID_URL,
				λ.NewStr("_real_extract"): TriluliluIE__real_extract,
			})
		}())
	})
}

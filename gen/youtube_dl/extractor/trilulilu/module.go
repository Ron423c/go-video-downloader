// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * trilulilu/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/trilulilu.py
 */

package trilulilu

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError λ.Object
	InfoExtractor  λ.Object
	TriluliluIE    λ.Object
	ϒint_or_none   λ.Object
	ϒparse_iso8601 λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		TriluliluIE = λ.Cal(λ.TypeType, λ.StrLiteral("TriluliluIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				TriluliluIE__VALID_URL    λ.Object
				TriluliluIE__real_extract λ.Object
			)
			TriluliluIE__VALID_URL = λ.StrLiteral("https?://(?:(?:www|m)\\.)?trilulilu\\.ro/(?:[^/]+/)?(?P<id>[^/#\\?]+)")
			TriluliluIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒage_limit   λ.Object
						ϒdisplay_id  λ.Object
						ϒerrors      λ.Object
						ϒformats     λ.Object
						ϒmedia_class λ.Object
						ϒmedia_info  λ.Object
						ϒself        = λargs[0]
						ϒstream_type λ.Object
						ϒthumbnail   λ.Object
						ϒurl         = λargs[1]
						ϒuser        λ.Object
					)
					ϒdisplay_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒmedia_info = λ.Calm(ϒself, "_download_json", λ.Mod(λ.StrLiteral("http://m.trilulilu.ro/%s?format=json"), ϒdisplay_id), ϒdisplay_id)
					ϒage_limit = λ.IntLiteral(0)
					ϒerrors = λ.Calm(ϒmedia_info, "get", λ.StrLiteral("errors"), λ.DictLiteral(map[λ.Object]λ.Object{}))
					if λ.IsTrue(λ.Calm(ϒerrors, "get", λ.StrLiteral("friends"))) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.StrLiteral("This video is private.")), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					} else {
						if λ.IsTrue(λ.Calm(ϒerrors, "get", λ.StrLiteral("geoblock"))) {
							panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.StrLiteral("This video is not available in your country.")), λ.KWArgs{
								{Name: "expected", Value: λ.True},
							})))
						} else {
							if λ.IsTrue(λ.Calm(ϒerrors, "get", λ.StrLiteral("xxx_unlogged"))) {
								ϒage_limit = λ.IntLiteral(18)
							}
						}
					}
					ϒmedia_class = λ.Calm(ϒmedia_info, "get", λ.StrLiteral("class"))
					if !λ.Contains(λ.NewTuple(
						λ.StrLiteral("video"),
						λ.StrLiteral("audio"),
					), ϒmedia_class) {
						panic(λ.Raise(λ.Cal(ExtractorError, λ.StrLiteral("not a video or an audio"))))
					}
					ϒuser = λ.Calm(ϒmedia_info, "get", λ.StrLiteral("user"), λ.DictLiteral(map[λ.Object]λ.Object{}))
					ϒthumbnail = λ.Calm(ϒmedia_info, "get", λ.StrLiteral("cover_url"))
					if λ.IsTrue(ϒthumbnail) {
						λ.Call(λ.GetAttr(ϒthumbnail, "format", nil), nil, λ.KWArgs{
							{Name: "width", Value: λ.StrLiteral("1600")},
							{Name: "height", Value: λ.StrLiteral("1200")},
						})
					}
					ϒstream_type = λ.Calm(ϒmedia_info, "get", λ.StrLiteral("stream_type"))
					ϒformats = λ.NewList(λ.DictLiteral(map[string]λ.Object{
						"url": λ.GetItem(ϒmedia_info, λ.StrLiteral("href")),
						"ext": ϒstream_type,
					}))
					if λ.IsTrue(λ.Calm(ϒmedia_info, "get", λ.StrLiteral("is_hd"))) {
						λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
							"format_id": λ.StrLiteral("hd"),
							"url":       λ.GetItem(ϒmedia_info, λ.StrLiteral("hrefhd")),
							"ext":       ϒstream_type,
						}))
					}
					if λ.IsTrue(λ.Eq(ϒmedia_class, λ.StrLiteral("audio"))) {
						λ.SetItem(λ.GetItem(ϒformats, λ.IntLiteral(0)), λ.StrLiteral("vcodec"), λ.StrLiteral("none"))
					} else {
						λ.SetItem(λ.GetItem(ϒformats, λ.IntLiteral(0)), λ.StrLiteral("format_id"), λ.StrLiteral("sd"))
					}
					return λ.DictLiteral(map[string]λ.Object{
						"id":            λ.GetItem(λ.Calm(λ.GetItem(ϒmedia_info, λ.StrLiteral("identifier")), "split", λ.StrLiteral("|")), λ.IntLiteral(1)),
						"display_id":    ϒdisplay_id,
						"formats":       ϒformats,
						"title":         λ.GetItem(ϒmedia_info, λ.StrLiteral("title")),
						"description":   λ.Calm(ϒmedia_info, "get", λ.StrLiteral("description")),
						"thumbnail":     ϒthumbnail,
						"uploader_id":   λ.Calm(ϒuser, "get", λ.StrLiteral("username")),
						"uploader":      λ.Calm(ϒuser, "get", λ.StrLiteral("fullname")),
						"timestamp":     λ.Cal(ϒparse_iso8601, λ.Calm(ϒmedia_info, "get", λ.StrLiteral("published")), λ.StrLiteral(" ")),
						"duration":      λ.Cal(ϒint_or_none, λ.Calm(ϒmedia_info, "get", λ.StrLiteral("duration"))),
						"view_count":    λ.Cal(ϒint_or_none, λ.Calm(ϒmedia_info, "get", λ.StrLiteral("count_views"))),
						"like_count":    λ.Cal(ϒint_or_none, λ.Calm(ϒmedia_info, "get", λ.StrLiteral("count_likes"))),
						"comment_count": λ.Cal(ϒint_or_none, λ.Calm(ϒmedia_info, "get", λ.StrLiteral("count_comments"))),
						"age_limit":     ϒage_limit,
					})
				})
			return λ.DictLiteral(map[string]λ.Object{
				"_VALID_URL":    TriluliluIE__VALID_URL,
				"_real_extract": TriluliluIE__real_extract,
			})
		}())
	})
}

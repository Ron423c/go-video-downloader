// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * imdb/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/imdb.py
 */

package imdb

import (
	Ωbase64 "github.com/tenta-browser/go-video-downloader/gen/base64"
	Ωjson "github.com/tenta-browser/go-video-downloader/gen/json"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ImdbIE          λ.Object
	ImdbListIE      λ.Object
	InfoExtractor   λ.Object
	ϒdetermine_ext  λ.Object
	ϒmimetype2ext   λ.Object
	ϒparse_duration λ.Object
	ϒqualities      λ.Object
	ϒtry_get        λ.Object
	ϒurl_or_none    λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ϒmimetype2ext = Ωutils.ϒmimetype2ext
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒqualities = Ωutils.ϒqualities
		ϒtry_get = Ωutils.ϒtry_get
		ϒurl_or_none = Ωutils.ϒurl_or_none
		ImdbIE = λ.Cal(λ.TypeType, λ.StrLiteral("ImdbIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ImdbIE_IE_NAME       λ.Object
				ImdbIE__VALID_URL    λ.Object
				ImdbIE__real_extract λ.Object
			)
			ImdbIE_IE_NAME = λ.StrLiteral("imdb")
			ImdbIE__VALID_URL = λ.StrLiteral("https?://(?:www|m)\\.imdb\\.com/(?:video|title|list).*?[/-]vi(?P<id>\\d+)")
			ImdbIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdata           λ.Object
						ϒencoding       λ.Object
						ϒext            λ.Object
						ϒformat_id      λ.Object
						ϒformats        λ.Object
						ϒinfo           λ.Object
						ϒquality        λ.Object
						ϒself           = λargs[0]
						ϒtitle          λ.Object
						ϒurl            = λargs[1]
						ϒvideo_id       λ.Object
						ϒvideo_info     λ.Object
						ϒvideo_metadata λ.Object
						ϒvideo_url      λ.Object
						ϒwebpage        λ.Object
						τmp0            λ.Object
						τmp1            λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒdata = λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.StrLiteral("https://www.imdb.com/ve/data/VIDEO_PLAYBACK_DATA"),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "query", Value: λ.DictLiteral(map[string]λ.Object{
							"key": λ.Calm(λ.Cal(Ωbase64.ϒb64encode, λ.Calm(λ.Cal(Ωjson.ϒdumps, λ.DictLiteral(map[string]λ.Object{
								"type":    λ.StrLiteral("VIDEO_PLAYER"),
								"subType": λ.StrLiteral("FORCE_LEGACY"),
								"id":      λ.Mod(λ.StrLiteral("vi%s"), ϒvideo_id),
							})), "encode")), "decode"),
						})},
					}), λ.IntLiteral(0))
					ϒquality = λ.Cal(ϒqualities, λ.NewTuple(
						λ.StrLiteral("SD"),
						λ.StrLiteral("480p"),
						λ.StrLiteral("720p"),
						λ.StrLiteral("1080p"),
					))
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.GetItem(ϒdata, λ.StrLiteral("videoLegacyEncodings")))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒencoding = τmp1
						if λ.IsTrue(func() λ.Object {
							if λv := λ.NewBool(!λ.IsTrue(ϒencoding)); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(!λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒencoding, λ.DictType)))
							}
						}()) {
							continue
						}
						ϒvideo_url = λ.Cal(ϒurl_or_none, λ.Calm(ϒencoding, "get", λ.StrLiteral("url")))
						if !λ.IsTrue(ϒvideo_url) {
							continue
						}
						ϒext = func() λ.Object {
							if λv := λ.Cal(ϒmimetype2ext, λ.Calm(ϒencoding, "get", λ.StrLiteral("mimeType"))); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(ϒdetermine_ext, ϒvideo_url)
							}
						}()
						if λ.IsTrue(λ.Eq(ϒext, λ.StrLiteral("m3u8"))) {
							λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
								ϒvideo_url,
								ϒvideo_id,
								λ.StrLiteral("mp4"),
							), λ.KWArgs{
								{Name: "entry_protocol", Value: λ.StrLiteral("m3u8_native")},
								{Name: "preference", Value: λ.IntLiteral(1)},
								{Name: "m3u8_id", Value: λ.StrLiteral("hls")},
								{Name: "fatal", Value: λ.False},
							}))
							continue
						}
						ϒformat_id = λ.Calm(ϒencoding, "get", λ.StrLiteral("definition"))
						λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
							"format_id": ϒformat_id,
							"url":       ϒvideo_url,
							"ext":       ϒext,
							"quality":   λ.Cal(ϒquality, ϒformat_id),
						}))
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", λ.Add(λ.StrLiteral("https://www.imdb.com/video/vi"), ϒvideo_id), ϒvideo_id)
					ϒvideo_metadata = λ.Calm(ϒself, "_parse_json", λ.Calm(ϒself, "_search_regex", λ.StrLiteral("args\\.push\\(\\s*({.+?})\\s*\\)\\s*;"), ϒwebpage, λ.StrLiteral("video metadata")), ϒvideo_id)
					ϒvideo_info = λ.Calm(ϒvideo_metadata, "get", λ.StrLiteral("VIDEO_INFO"))
					if λ.IsTrue(func() λ.Object {
						if λv := ϒvideo_info; !λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.BuiltinIsInstance, ϒvideo_info, λ.DictType)
						}
					}()) {
						ϒinfo = λ.Cal(ϒtry_get, ϒvideo_info, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.GetItem(λ.Cal(λ.ListType, λ.Calm(ϒvideo_info, "keys")), λ.IntLiteral(0))), λ.IntLiteral(0))
							}), λ.DictType)
					} else {
						ϒinfo = λ.DictLiteral(map[λ.Object]λ.Object{})
					}
					ϒtitle = func() λ.Object {
						if λv := λ.Calm(ϒself, "_html_search_meta", λ.NewList(
							λ.StrLiteral("og:title"),
							λ.StrLiteral("twitter:title"),
						), ϒwebpage); λ.IsTrue(λv) {
							return λv
						} else if λv := λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
							λ.StrLiteral("<title>(.+?)</title>"),
							ϒwebpage,
							λ.StrLiteral("title"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.GetItem(ϒinfo, λ.StrLiteral("videoTitle"))
						}
					}()
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒvideo_id,
						"title":       ϒtitle,
						"alt_title":   λ.Calm(ϒinfo, "get", λ.StrLiteral("videoSubTitle")),
						"formats":     ϒformats,
						"description": λ.Calm(ϒinfo, "get", λ.StrLiteral("videoDescription")),
						"thumbnail": λ.Cal(ϒurl_or_none, λ.Cal(ϒtry_get, ϒvideo_metadata, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("videoSlate")), λ.StrLiteral("source"))
							}))),
						"duration": λ.Cal(ϒparse_duration, λ.Calm(ϒinfo, "get", λ.StrLiteral("videoRuntime"))),
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"IE_NAME":       ImdbIE_IE_NAME,
				"_VALID_URL":    ImdbIE__VALID_URL,
				"_real_extract": ImdbIE__real_extract,
			})
		}())
		ImdbListIE = λ.Cal(λ.TypeType, λ.StrLiteral("ImdbListIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ImdbListIE__VALID_URL λ.Object
			)
			ImdbListIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?imdb\\.com/list/ls(?P<id>\\d{9})(?!/videoplayer/vi\\d+)")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": ImdbListIE__VALID_URL,
			})
		}())
	})
}

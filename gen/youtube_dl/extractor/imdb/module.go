// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * imdb/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/imdb.py
 */

package imdb

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ImdbIE          λ.Object
	ImdbListIE      λ.Object
	InfoExtractor   λ.Object
	ϒdetermine_ext  λ.Object
	ϒmimetype2ext   λ.Object
	ϒparse_duration λ.Object
	ϒqualities      λ.Object
	ϒurl_or_none    λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ϒmimetype2ext = Ωutils.ϒmimetype2ext
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒqualities = Ωutils.ϒqualities
		ϒurl_or_none = Ωutils.ϒurl_or_none
		ImdbIE = λ.Cal(λ.TypeType, λ.NewStr("ImdbIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ImdbIE_IE_NAME       λ.Object
				ImdbIE__TESTS        λ.Object
				ImdbIE__VALID_URL    λ.Object
				ImdbIE__real_extract λ.Object
			)
			ImdbIE_IE_NAME = λ.NewStr("imdb")
			ImdbIE__VALID_URL = λ.NewStr("https?://(?:www|m)\\.imdb\\.com/(?:video|title|list).+?[/-]vi(?P<id>\\d+)")
			ImdbIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.imdb.com/video/imdb/vi2524815897"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("2524815897"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("No. 2 from Ice Age: Continental Drift (2012)"),
						λ.NewStr("description"): λ.NewStr("md5:87bd0bdc61e351f21f20d2d7441cb4e7"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://www.imdb.com/video/_/vi2524815897"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://www.imdb.com/title/tt1667889/?ref_=ext_shr_eml_vi#lb-vi2524815897"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://www.imdb.com/title/tt1667889/#lb-vi2524815897"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://www.imdb.com/videoplayer/vi1562949145"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://www.imdb.com/title/tt4218696/videoplayer/vi2608641561"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://www.imdb.com/list/ls009921623/videoplayer/vi260482329"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			ImdbIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒencoding       λ.Object
						ϒext            λ.Object
						ϒformat_id      λ.Object
						ϒformats        λ.Object
						ϒquality        λ.Object
						ϒself           = λargs[0]
						ϒtitle          λ.Object
						ϒurl            = λargs[1]
						ϒvideo_id       λ.Object
						ϒvideo_metadata λ.Object
						ϒvideo_url      λ.Object
						ϒwebpage        λ.Object
						τmp0            λ.Object
						τmp1            λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), λ.Add(λ.NewStr("https://www.imdb.com/videoplayer/vi"), ϒvideo_id), ϒvideo_id)
					ϒvideo_metadata = λ.GetItem(λ.GetItem(λ.GetItem(λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("window\\.IMDbReactInitialState\\.push\\(({.+?})\\);"), ϒwebpage, λ.NewStr("video metadata")), ϒvideo_id), λ.NewStr("videos")), λ.NewStr("videoMetadata")), λ.Add(λ.NewStr("vi"), ϒvideo_id))
					ϒtitle = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewList(
							λ.NewStr("og:title"),
							λ.NewStr("twitter:title"),
						), ϒwebpage); λ.IsTrue(λv) {
							return λv
						} else if λv := λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
							λ.NewStr("<title>(.+?)</title>"),
							ϒwebpage,
							λ.NewStr("title"),
						), λ.KWArgs{
							{Name: "fatal", Value: λ.False},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.GetItem(ϒvideo_metadata, λ.NewStr("title"))
						}
					}()
					ϒquality = λ.Cal(ϒqualities, λ.NewTuple(
						λ.NewStr("SD"),
						λ.NewStr("480p"),
						λ.NewStr("720p"),
						λ.NewStr("1080p"),
					))
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒvideo_metadata, "get", nil), λ.NewStr("encodings"), λ.NewList()))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒencoding = τmp1
						if λ.IsTrue(func() λ.Object {
							if λv := λ.NewBool(!λ.IsTrue(ϒencoding)); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(!λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒencoding, λ.DictType)))
							}
						}()) {
							continue
						}
						ϒvideo_url = λ.Cal(ϒurl_or_none, λ.Cal(λ.GetAttr(ϒencoding, "get", nil), λ.NewStr("videoUrl")))
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒvideo_url))) {
							continue
						}
						ϒext = func() λ.Object {
							if λv := λ.Cal(ϒmimetype2ext, λ.Cal(λ.GetAttr(ϒencoding, "get", nil), λ.NewStr("mimeType"))); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(ϒdetermine_ext, ϒvideo_url)
							}
						}()
						if λ.IsTrue(λ.Eq(ϒext, λ.NewStr("m3u8"))) {
							λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
								ϒvideo_url,
								ϒvideo_id,
								λ.NewStr("mp4"),
							), λ.KWArgs{
								{Name: "entry_protocol", Value: λ.NewStr("m3u8_native")},
								{Name: "m3u8_id", Value: λ.NewStr("hls")},
								{Name: "fatal", Value: λ.False},
							}))
							continue
						}
						ϒformat_id = λ.Cal(λ.GetAttr(ϒencoding, "get", nil), λ.NewStr("definition"))
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("format_id"): ϒformat_id,
							λ.NewStr("url"):       ϒvideo_url,
							λ.NewStr("ext"):       ϒext,
							λ.NewStr("quality"):   λ.Cal(ϒquality, ϒformat_id),
						}))
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("title"):       ϒtitle,
						λ.NewStr("formats"):     ϒformats,
						λ.NewStr("description"): λ.Cal(λ.GetAttr(ϒvideo_metadata, "get", nil), λ.NewStr("description")),
						λ.NewStr("thumbnail"):   λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒvideo_metadata, "get", nil), λ.NewStr("slate"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("url")),
						λ.NewStr("duration"):    λ.Cal(ϒparse_duration, λ.Cal(λ.GetAttr(ϒvideo_metadata, "get", nil), λ.NewStr("duration"))),
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):       ImdbIE_IE_NAME,
				λ.NewStr("_TESTS"):        ImdbIE__TESTS,
				λ.NewStr("_VALID_URL"):    ImdbIE__VALID_URL,
				λ.NewStr("_real_extract"): ImdbIE__real_extract,
			})
		}())
		ImdbListIE = λ.Cal(λ.TypeType, λ.NewStr("ImdbListIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ImdbListIE__VALID_URL λ.Object
			)
			ImdbListIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?imdb\\.com/list/ls(?P<id>\\d{9})(?!/videoplayer/vi\\d+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): ImdbListIE__VALID_URL,
			})
		}())
	})
}

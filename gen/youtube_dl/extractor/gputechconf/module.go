// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * gputechconf/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/gputechconf.py
 */

package gputechconf

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	GPUTechConfIE λ.Object
	InfoExtractor λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		GPUTechConfIE = λ.Cal(λ.TypeType, λ.NewStr("GPUTechConfIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				GPUTechConfIE__TEST         λ.Object
				GPUTechConfIE__VALID_URL    λ.Object
				GPUTechConfIE__real_extract λ.Object
			)
			GPUTechConfIE__VALID_URL = λ.NewStr("https?://on-demand\\.gputechconf\\.com/gtc/2015/video/S(?P<id>\\d+)\\.html")
			GPUTechConfIE__TEST = λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("url"): λ.NewStr("http://on-demand.gputechconf.com/gtc/2015/video/S5156.html"),
				λ.NewStr("md5"): λ.NewStr("a8862a00a0fd65b8b43acc5b8e33f798"),
				λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("id"):       λ.NewStr("5156"),
					λ.NewStr("ext"):      λ.NewStr("mp4"),
					λ.NewStr("title"):    λ.NewStr("Coordinating More Than 3 Million CUDA Threads for Social Network Analysis"),
					λ.NewStr("duration"): λ.NewInt(1219),
				}),
			})
			GPUTechConfIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒroot_path   λ.Object
						ϒself        = λargs[0]
						ϒurl         = λargs[1]
						ϒvideo_id    λ.Object
						ϒwebpage     λ.Object
						ϒxml_file_id λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					ϒroot_path = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("var\\s+rootPath\\s*=\\s*\"([^\"]+)"),
						ϒwebpage,
						λ.NewStr("root path"),
					), λ.KWArgs{
						{Name: "default", Value: λ.NewStr("http://evt.dispeak.com/nvidia/events/gtc15/")},
					})
					ϒxml_file_id = λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("var\\s+xmlFileId\\s*=\\s*\"([^\"]+)"), ϒwebpage, λ.NewStr("xml file id"))
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("_type"): λ.NewStr("url_transparent"),
						λ.NewStr("id"):    ϒvideo_id,
						λ.NewStr("url"): λ.Mod(λ.NewStr("%sxml/%s.xml"), λ.NewTuple(
							ϒroot_path,
							ϒxml_file_id,
						)),
						λ.NewStr("ie_key"): λ.NewStr("DigitallySpeaking"),
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TEST"):         GPUTechConfIE__TEST,
				λ.NewStr("_VALID_URL"):    GPUTechConfIE__VALID_URL,
				λ.NewStr("_real_extract"): GPUTechConfIE__real_extract,
			})
		}())
	})
}

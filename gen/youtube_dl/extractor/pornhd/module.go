// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * pornhd/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/pornhd.py
 */

package pornhd

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError λ.Object
	InfoExtractor  λ.Object
	PornHdIE       λ.Object
	ϒdetermine_ext λ.Object
	ϒint_or_none   λ.Object
	ϒjs_to_json    λ.Object
	ϒurljoin       λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒjs_to_json = Ωutils.ϒjs_to_json
		ϒurljoin = Ωutils.ϒurljoin
		PornHdIE = λ.Cal(λ.TypeType, λ.NewStr("PornHdIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				PornHdIE__TESTS        λ.Object
				PornHdIE__VALID_URL    λ.Object
				PornHdIE__real_extract λ.Object
			)
			PornHdIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?pornhd\\.com/(?:[a-z]{2,4}/)?videos/(?P<id>\\d+)(?:/(?P<display_id>.+))?")
			PornHdIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.pornhd.com/videos/9864/selfie-restroom-masturbation-fun-with-chubby-cutie-hd-porn-video"),
					λ.NewStr("md5"): λ.NewStr("87f1540746c1d32ec7a2305c12b96b25"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("9864"),
						λ.NewStr("display_id"):  λ.NewStr("selfie-restroom-masturbation-fun-with-chubby-cutie-hd-porn-video"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Restroom selfie masturbation"),
						λ.NewStr("description"): λ.NewStr("md5:3748420395e03e31ac96857a8f125b2b"),
						λ.NewStr("thumbnail"):   λ.NewStr("re:^https?://.*\\.jpg"),
						λ.NewStr("view_count"):  λ.IntType,
						λ.NewStr("like_count"):  λ.IntType,
						λ.NewStr("age_limit"):   λ.NewInt(18),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.pornhd.com/videos/1962/sierra-day-gets-his-cum-all-over-herself-hd-porn-video"),
					λ.NewStr("md5"): λ.NewStr("956b8ca569f7f4d8ec563e2c41598441"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("1962"),
						λ.NewStr("display_id"):  λ.NewStr("sierra-day-gets-his-cum-all-over-herself-hd-porn-video"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Sierra loves doing laundry"),
						λ.NewStr("description"): λ.NewStr("md5:8ff0523848ac2b8f9b065ba781ccf294"),
						λ.NewStr("thumbnail"):   λ.NewStr("re:^https?://.*\\.jpg"),
						λ.NewStr("view_count"):  λ.IntType,
						λ.NewStr("like_count"):  λ.IntType,
						λ.NewStr("age_limit"):   λ.NewInt(18),
					}),
					λ.NewStr("skip"): λ.NewStr("Not available anymore"),
				}),
			)
			PornHdIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdescription λ.Object
						ϒdisplay_id  λ.Object
						ϒformat_id   λ.Object
						ϒformats     λ.Object
						ϒheight      λ.Object
						ϒlike_count  λ.Object
						ϒmessage     λ.Object
						ϒmobj        λ.Object
						ϒself        = λargs[0]
						ϒsources     λ.Object
						ϒthumbnail   λ.Object
						ϒtitle       λ.Object
						ϒurl         = λargs[1]
						ϒvideo_id    λ.Object
						ϒvideo_url   λ.Object
						ϒview_count  λ.Object
						ϒwebpage     λ.Object
						τmp0         λ.Object
						τmp1         λ.Object
						τmp2         λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("id"))
					ϒdisplay_id = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("display_id"))
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, func() λ.Object {
						if λv := ϒdisplay_id; λ.IsTrue(λv) {
							return λv
						} else {
							return ϒvideo_id
						}
					}())
					ϒtitle = λ.Cal(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewList(
						λ.NewStr("<span[^>]+class=[\"\\']video-name[\"\\'][^>]*>([^<]+)"),
						λ.NewStr("<title>(.+?) - .*?[Pp]ornHD.*?</title>"),
					), ϒwebpage, λ.NewStr("title"))
					ϒsources = λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), λ.Cal(ϒjs_to_json, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("(?s)sources'?\\s*[:=]\\s*(\\{.+?\\})"),
						ϒwebpage,
						λ.NewStr("sources"),
					), λ.KWArgs{
						{Name: "default", Value: λ.NewStr("{}")},
					})), ϒvideo_id)
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒsources))) {
						ϒmessage = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
							λ.NewStr("(?s)<(div|p)[^>]+class=\"no-video\"[^>]*>(?P<value>.+?)</\\1"),
							ϒwebpage,
							λ.NewStr("error message"),
						), λ.KWArgs{
							{Name: "group", Value: λ.NewStr("value")},
						})
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.NewStr("%s said: %s"), λ.NewTuple(
							λ.GetAttr(ϒself, "IE_NAME", nil),
							ϒmessage,
						))), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒsources, "items", nil)))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒformat_id = λ.GetItem(τmp2, λ.NewInt(0))
						ϒvideo_url = λ.GetItem(τmp2, λ.NewInt(1))
						ϒvideo_url = λ.Cal(ϒurljoin, ϒurl, ϒvideo_url)
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒvideo_url))) {
							continue
						}
						ϒheight = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewStr("^(\\d+)[pP]"),
							ϒformat_id,
							λ.NewStr("height"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}))
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"):       ϒvideo_url,
							λ.NewStr("ext"):       λ.Cal(ϒdetermine_ext, ϒvideo_url, λ.NewStr("mp4")),
							λ.NewStr("format_id"): ϒformat_id,
							λ.NewStr("height"):    ϒheight,
						}))
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒdescription = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
						λ.NewStr("<(div|p)[^>]+class=\"description\"[^>]*>(?P<value>[^<]+)</\\1"),
						ϒwebpage,
						λ.NewStr("description"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
						{Name: "group", Value: λ.NewStr("value")},
					})
					ϒview_count = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
						λ.NewStr("(\\d+) views\\s*<"),
						ϒwebpage,
						λ.NewStr("view count"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					}))
					ϒthumbnail = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("poster'?\\s*:\\s*([\\\"'])(?P<url>(?:(?!\\1).)+)\\1"),
						ϒwebpage,
						λ.NewStr("thumbnail"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
						{Name: "group", Value: λ.NewStr("url")},
					})
					ϒlike_count = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewTuple(
							λ.NewStr("(\\d+)\\s*</11[^>]+>(?:&nbsp;|\\s)*\\blikes"),
							λ.NewStr("class=[\"\\']save-count[\"\\'][^>]*>\\s*(\\d+)"),
						),
						ϒwebpage,
						λ.NewStr("like count"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					}))
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("display_id"):  ϒdisplay_id,
						λ.NewStr("title"):       ϒtitle,
						λ.NewStr("description"): ϒdescription,
						λ.NewStr("thumbnail"):   ϒthumbnail,
						λ.NewStr("view_count"):  ϒview_count,
						λ.NewStr("like_count"):  ϒlike_count,
						λ.NewStr("formats"):     ϒformats,
						λ.NewStr("age_limit"):   λ.NewInt(18),
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        PornHdIE__TESTS,
				λ.NewStr("_VALID_URL"):    PornHdIE__VALID_URL,
				λ.NewStr("_real_extract"): PornHdIE__real_extract,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * archiveorg/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/archiveorg.py
 */

package archiveorg

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ArchiveOrgIE     λ.Object
	InfoExtractor    λ.Object
	ϒclean_html      λ.Object
	ϒunified_strdate λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒunified_strdate = Ωutils.ϒunified_strdate
		ϒclean_html = Ωutils.ϒclean_html
		ArchiveOrgIE = λ.Cal(λ.TypeType, λ.NewStr("ArchiveOrgIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ArchiveOrgIE_IE_NAME       λ.Object
				ArchiveOrgIE__TESTS        λ.Object
				ArchiveOrgIE__VALID_URL    λ.Object
				ArchiveOrgIE__real_extract λ.Object
			)
			ArchiveOrgIE_IE_NAME = λ.NewStr("archive.org")
			ArchiveOrgIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?archive\\.org/(?:details|embed)/(?P<id>[^/?#]+)(?:[?].*)?$")
			ArchiveOrgIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://archive.org/details/XD300-23_68HighlightsAResearchCntAugHumanIntellect"),
					λ.NewStr("md5"): λ.NewStr("8af1d4cf447933ed3c7f4871162602db"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("XD300-23_68HighlightsAResearchCntAugHumanIntellect"),
						λ.NewStr("ext"):         λ.NewStr("ogg"),
						λ.NewStr("title"):       λ.NewStr("1968 Demo - FJCC Conference Presentation Reel #1"),
						λ.NewStr("description"): λ.NewStr("md5:da45c349df039f1cc8075268eb1b5c25"),
						λ.NewStr("upload_date"): λ.NewStr("19681210"),
						λ.NewStr("uploader"):    λ.NewStr("SRI International"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://archive.org/details/Cops1922"),
					λ.NewStr("md5"): λ.NewStr("0869000b4ce265e8ca62738b336b268a"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("Cops1922"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Buster Keaton's \"Cops\" (1922)"),
						λ.NewStr("description"): λ.NewStr("md5:89e7c77bf5d965dd5c0372cfb49470f6"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://archive.org/embed/XD300-23_68HighlightsAResearchCntAugHumanIntellect"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			ArchiveOrgIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒget_optional      λ.Object
						ϒinfo              λ.Object
						ϒjwplayer_playlist λ.Object
						ϒmetadata          λ.Object
						ϒself              = λargs[0]
						ϒurl               = λargs[1]
						ϒvideo_id          λ.Object
						ϒwebpage           λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), λ.Add(λ.NewStr("http://archive.org/embed/"), ϒvideo_id), ϒvideo_id)
					ϒjwplayer_playlist = λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("(?s)Play\\('[^']+'\\s*,\\s*(\\[.+\\])\\s*,\\s*{.*?}\\)"), ϒwebpage, λ.NewStr("jwplayer playlist")), ϒvideo_id)
					ϒinfo = λ.Call(λ.GetAttr(ϒself, "_parse_jwplayer_data", nil), λ.NewArgs(
						λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("playlist"): ϒjwplayer_playlist,
						}),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "base_url", Value: ϒurl},
					})
					ϒget_optional = λ.NewFunction("get_optional",
						[]λ.Param{
							{Name: "metadata"},
							{Name: "field"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒfield    = λargs[1]
								ϒmetadata = λargs[0]
							)
							return λ.GetItem(λ.Cal(λ.GetAttr(ϒmetadata, "get", nil), ϒfield, λ.NewList(λ.None)), λ.NewInt(0))
						})
					ϒmetadata = λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Add(λ.NewStr("http://archive.org/details/"), ϒvideo_id),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "query", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("output"): λ.NewStr("json"),
						})},
					}), λ.NewStr("metadata"))
					λ.Cal(λ.GetAttr(ϒinfo, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("title"): func() λ.Object {
							if λv := λ.Cal(ϒget_optional, ϒmetadata, λ.NewStr("title")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("title"))
							}
						}(),
						λ.NewStr("description"): λ.Cal(ϒclean_html, λ.Cal(ϒget_optional, ϒmetadata, λ.NewStr("description"))),
					}))
					if λ.IsTrue(λ.Ne(λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("_type")), λ.NewStr("playlist"))) {
						λ.Cal(λ.GetAttr(ϒinfo, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("uploader"):    λ.Cal(ϒget_optional, ϒmetadata, λ.NewStr("creator")),
							λ.NewStr("upload_date"): λ.Cal(ϒunified_strdate, λ.Cal(ϒget_optional, ϒmetadata, λ.NewStr("date"))),
						}))
					}
					return ϒinfo
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):       ArchiveOrgIE_IE_NAME,
				λ.NewStr("_TESTS"):        ArchiveOrgIE__TESTS,
				λ.NewStr("_VALID_URL"):    ArchiveOrgIE__VALID_URL,
				λ.NewStr("_real_extract"): ArchiveOrgIE__real_extract,
			})
		}())
	})
}

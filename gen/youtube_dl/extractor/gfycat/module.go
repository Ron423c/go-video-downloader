// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * gfycat/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/gfycat.py
 */

package gfycat

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError λ.Object
	GfycatIE       λ.Object
	InfoExtractor  λ.Object
	ϒfloat_or_none λ.Object
	ϒint_or_none   λ.Object
	ϒqualities     λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒqualities = Ωutils.ϒqualities
		ExtractorError = Ωutils.ExtractorError
		GfycatIE = λ.Cal(λ.TypeType, λ.NewStr("GfycatIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				GfycatIE__TESTS        λ.Object
				GfycatIE__VALID_URL    λ.Object
				GfycatIE__real_extract λ.Object
			)
			GfycatIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?gfycat\\.com/(?:ifr/|gifs/detail/)?(?P<id>[^/?#]+)")
			GfycatIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://gfycat.com/DeadlyDecisiveGermanpinscher"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):            λ.NewStr("DeadlyDecisiveGermanpinscher"),
						λ.NewStr("ext"):           λ.NewStr("mp4"),
						λ.NewStr("title"):         λ.NewStr("Ghost in the Shell"),
						λ.NewStr("timestamp"):     λ.NewInt(1410656006),
						λ.NewStr("upload_date"):   λ.NewStr("20140914"),
						λ.NewStr("uploader"):      λ.NewStr("anonymous"),
						λ.NewStr("duration"):      λ.NewFloat(10.4),
						λ.NewStr("view_count"):    λ.IntType,
						λ.NewStr("like_count"):    λ.IntType,
						λ.NewStr("dislike_count"): λ.IntType,
						λ.NewStr("categories"):    λ.ListType,
						λ.NewStr("age_limit"):     λ.NewInt(0),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://gfycat.com/ifr/JauntyTimelyAmazontreeboa"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):            λ.NewStr("JauntyTimelyAmazontreeboa"),
						λ.NewStr("ext"):           λ.NewStr("mp4"),
						λ.NewStr("title"):         λ.NewStr("JauntyTimelyAmazontreeboa"),
						λ.NewStr("timestamp"):     λ.NewInt(1411720126),
						λ.NewStr("upload_date"):   λ.NewStr("20140926"),
						λ.NewStr("uploader"):      λ.NewStr("anonymous"),
						λ.NewStr("duration"):      λ.NewFloat(3.52),
						λ.NewStr("view_count"):    λ.IntType,
						λ.NewStr("like_count"):    λ.IntType,
						λ.NewStr("dislike_count"): λ.IntType,
						λ.NewStr("categories"):    λ.ListType,
						λ.NewStr("age_limit"):     λ.NewInt(0),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://gfycat.com/gifs/detail/UnconsciousLankyIvorygull"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			GfycatIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						FORMATS        λ.Object
						ϒage_limit     λ.Object
						ϒcategories    λ.Object
						ϒdescription   λ.Object
						ϒdislike_count λ.Object
						ϒduration      λ.Object
						ϒfilesize      λ.Object
						ϒformat_id     λ.Object
						ϒformats       λ.Object
						ϒfps           λ.Object
						ϒgfy           λ.Object
						ϒheight        λ.Object
						ϒlike_count    λ.Object
						ϒnum_frames    λ.Object
						ϒquality       λ.Object
						ϒself          = λargs[0]
						ϒtimestamp     λ.Object
						ϒtitle         λ.Object
						ϒuploader      λ.Object
						ϒurl           = λargs[1]
						ϒvideo_id      λ.Object
						ϒvideo_url     λ.Object
						ϒview_count    λ.Object
						ϒwidth         λ.Object
						τmp0           λ.Object
						τmp1           λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒgfy = λ.Cal(λ.GetAttr(ϒself, "_download_json", nil), λ.Mod(λ.NewStr("https://api.gfycat.com/v1/gfycats/%s"), ϒvideo_id), ϒvideo_id, λ.NewStr("Downloading video info"))
					if λ.IsTrue(λ.NewBool(λ.Contains(ϒgfy, λ.NewStr("error")))) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Add(λ.NewStr("Gfycat said: "), λ.GetItem(ϒgfy, λ.NewStr("error")))), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒgfy = λ.GetItem(ϒgfy, λ.NewStr("gfyItem"))
					ϒtitle = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒgfy, "get", nil), λ.NewStr("title")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.GetItem(ϒgfy, λ.NewStr("gfyName"))
						}
					}()
					ϒdescription = λ.Cal(λ.GetAttr(ϒgfy, "get", nil), λ.NewStr("description"))
					ϒtimestamp = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒgfy, "get", nil), λ.NewStr("createDate")))
					ϒuploader = λ.Cal(λ.GetAttr(ϒgfy, "get", nil), λ.NewStr("userName"))
					ϒview_count = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒgfy, "get", nil), λ.NewStr("views")))
					ϒlike_count = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒgfy, "get", nil), λ.NewStr("likes")))
					ϒdislike_count = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒgfy, "get", nil), λ.NewStr("dislikes")))
					ϒage_limit = func() λ.Object {
						if λ.IsTrue(λ.Eq(λ.Cal(λ.GetAttr(ϒgfy, "get", nil), λ.NewStr("nsfw")), λ.NewStr("1"))) {
							return λ.NewInt(18)
						} else {
							return λ.NewInt(0)
						}
					}()
					ϒwidth = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒgfy, "get", nil), λ.NewStr("width")))
					ϒheight = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒgfy, "get", nil), λ.NewStr("height")))
					ϒfps = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒgfy, "get", nil), λ.NewStr("frameRate")))
					ϒnum_frames = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒgfy, "get", nil), λ.NewStr("numFrames")))
					ϒduration = func() λ.Object {
						if λ.IsTrue(func() λ.Object {
							if λv := ϒnum_frames; !λ.IsTrue(λv) {
								return λv
							} else {
								return ϒfps
							}
						}()) {
							return λ.Cal(ϒfloat_or_none, ϒnum_frames, ϒfps)
						} else {
							return λ.None
						}
					}()
					ϒcategories = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒgfy, "get", nil), λ.NewStr("tags")); λ.IsTrue(λv) {
							return λv
						} else if λv := λ.Cal(λ.GetAttr(ϒgfy, "get", nil), λ.NewStr("extraLemmas")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewList()
						}
					}()
					FORMATS = λ.NewTuple(
						λ.NewStr("gif"),
						λ.NewStr("webm"),
						λ.NewStr("mp4"),
					)
					ϒquality = λ.Cal(ϒqualities, FORMATS)
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, FORMATS)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒformat_id = τmp1
						ϒvideo_url = λ.Cal(λ.GetAttr(ϒgfy, "get", nil), λ.Mod(λ.NewStr("%sUrl"), ϒformat_id))
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒvideo_url))) {
							continue
						}
						ϒfilesize = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒgfy, "get", nil), λ.Mod(λ.NewStr("%sSize"), ϒformat_id)))
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"):       ϒvideo_url,
							λ.NewStr("format_id"): ϒformat_id,
							λ.NewStr("width"):     ϒwidth,
							λ.NewStr("height"):    ϒheight,
							λ.NewStr("fps"):       ϒfps,
							λ.NewStr("filesize"):  ϒfilesize,
							λ.NewStr("quality"):   λ.Cal(ϒquality, ϒformat_id),
						}))
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):            ϒvideo_id,
						λ.NewStr("title"):         ϒtitle,
						λ.NewStr("description"):   ϒdescription,
						λ.NewStr("timestamp"):     ϒtimestamp,
						λ.NewStr("uploader"):      ϒuploader,
						λ.NewStr("duration"):      ϒduration,
						λ.NewStr("view_count"):    ϒview_count,
						λ.NewStr("like_count"):    ϒlike_count,
						λ.NewStr("dislike_count"): ϒdislike_count,
						λ.NewStr("categories"):    ϒcategories,
						λ.NewStr("age_limit"):     ϒage_limit,
						λ.NewStr("formats"):       ϒformats,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        GfycatIE__TESTS,
				λ.NewStr("_VALID_URL"):    GfycatIE__VALID_URL,
				λ.NewStr("_real_extract"): GfycatIE__real_extract,
			})
		}())
	})
}

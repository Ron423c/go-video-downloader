// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * gfycat/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/gfycat.py
 */

package gfycat

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError λ.Object
	GfycatIE       λ.Object
	InfoExtractor  λ.Object
	ϒfloat_or_none λ.Object
	ϒint_or_none   λ.Object
	ϒqualities     λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒqualities = Ωutils.ϒqualities
		ExtractorError = Ωutils.ExtractorError
		GfycatIE = λ.Cal(λ.TypeType, λ.StrLiteral("GfycatIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				GfycatIE__VALID_URL    λ.Object
				GfycatIE__real_extract λ.Object
			)
			GfycatIE__VALID_URL = λ.StrLiteral("https?://(?:(?:www|giant|thumbs)\\.)?gfycat\\.com/(?:ru/|ifr/|gifs/detail/)?(?P<id>[^-/?#\\.]+)")
			GfycatIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						FORMATS        λ.Object
						ϒage_limit     λ.Object
						ϒcategories    λ.Object
						ϒdescription   λ.Object
						ϒdislike_count λ.Object
						ϒduration      λ.Object
						ϒfilesize      λ.Object
						ϒformat_id     λ.Object
						ϒformats       λ.Object
						ϒfps           λ.Object
						ϒgfy           λ.Object
						ϒheight        λ.Object
						ϒlike_count    λ.Object
						ϒnum_frames    λ.Object
						ϒquality       λ.Object
						ϒself          = λargs[0]
						ϒtimestamp     λ.Object
						ϒtitle         λ.Object
						ϒuploader      λ.Object
						ϒurl           = λargs[1]
						ϒvideo_id      λ.Object
						ϒvideo_url     λ.Object
						ϒview_count    λ.Object
						ϒwidth         λ.Object
						τmp0           λ.Object
						τmp1           λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒgfy = λ.Calm(ϒself, "_download_json", λ.Mod(λ.StrLiteral("https://api.gfycat.com/v1/gfycats/%s"), ϒvideo_id), ϒvideo_id, λ.StrLiteral("Downloading video info"))
					if λ.Contains(ϒgfy, λ.StrLiteral("error")) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Add(λ.StrLiteral("Gfycat said: "), λ.GetItem(ϒgfy, λ.StrLiteral("error")))), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒgfy = λ.GetItem(ϒgfy, λ.StrLiteral("gfyItem"))
					ϒtitle = func() λ.Object {
						if λv := λ.Calm(ϒgfy, "get", λ.StrLiteral("title")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.GetItem(ϒgfy, λ.StrLiteral("gfyName"))
						}
					}()
					ϒdescription = λ.Calm(ϒgfy, "get", λ.StrLiteral("description"))
					ϒtimestamp = λ.Cal(ϒint_or_none, λ.Calm(ϒgfy, "get", λ.StrLiteral("createDate")))
					ϒuploader = λ.Calm(ϒgfy, "get", λ.StrLiteral("userName"))
					ϒview_count = λ.Cal(ϒint_or_none, λ.Calm(ϒgfy, "get", λ.StrLiteral("views")))
					ϒlike_count = λ.Cal(ϒint_or_none, λ.Calm(ϒgfy, "get", λ.StrLiteral("likes")))
					ϒdislike_count = λ.Cal(ϒint_or_none, λ.Calm(ϒgfy, "get", λ.StrLiteral("dislikes")))
					ϒage_limit = func() λ.Object {
						if λ.IsTrue(λ.Eq(λ.Calm(ϒgfy, "get", λ.StrLiteral("nsfw")), λ.StrLiteral("1"))) {
							return λ.IntLiteral(18)
						} else {
							return λ.IntLiteral(0)
						}
					}()
					ϒwidth = λ.Cal(ϒint_or_none, λ.Calm(ϒgfy, "get", λ.StrLiteral("width")))
					ϒheight = λ.Cal(ϒint_or_none, λ.Calm(ϒgfy, "get", λ.StrLiteral("height")))
					ϒfps = λ.Cal(ϒint_or_none, λ.Calm(ϒgfy, "get", λ.StrLiteral("frameRate")))
					ϒnum_frames = λ.Cal(ϒint_or_none, λ.Calm(ϒgfy, "get", λ.StrLiteral("numFrames")))
					ϒduration = func() λ.Object {
						if λ.IsTrue(func() λ.Object {
							if λv := ϒnum_frames; !λ.IsTrue(λv) {
								return λv
							} else {
								return ϒfps
							}
						}()) {
							return λ.Cal(ϒfloat_or_none, ϒnum_frames, ϒfps)
						} else {
							return λ.None
						}
					}()
					ϒcategories = func() λ.Object {
						if λv := λ.Calm(ϒgfy, "get", λ.StrLiteral("tags")); λ.IsTrue(λv) {
							return λv
						} else if λv := λ.Calm(ϒgfy, "get", λ.StrLiteral("extraLemmas")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewList()
						}
					}()
					FORMATS = λ.NewTuple(
						λ.StrLiteral("gif"),
						λ.StrLiteral("webm"),
						λ.StrLiteral("mp4"),
					)
					ϒquality = λ.Cal(ϒqualities, FORMATS)
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, FORMATS)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒformat_id = τmp1
						ϒvideo_url = λ.Calm(ϒgfy, "get", λ.Mod(λ.StrLiteral("%sUrl"), ϒformat_id))
						if !λ.IsTrue(ϒvideo_url) {
							continue
						}
						ϒfilesize = λ.Cal(ϒint_or_none, λ.Calm(ϒgfy, "get", λ.Mod(λ.StrLiteral("%sSize"), ϒformat_id)))
						λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
							"url":       ϒvideo_url,
							"format_id": ϒformat_id,
							"width":     ϒwidth,
							"height":    ϒheight,
							"fps":       ϒfps,
							"filesize":  ϒfilesize,
							"quality":   λ.Cal(ϒquality, ϒformat_id),
						}))
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					return λ.DictLiteral(map[string]λ.Object{
						"id":            ϒvideo_id,
						"title":         ϒtitle,
						"description":   ϒdescription,
						"timestamp":     ϒtimestamp,
						"uploader":      ϒuploader,
						"duration":      ϒduration,
						"view_count":    ϒview_count,
						"like_count":    ϒlike_count,
						"dislike_count": ϒdislike_count,
						"categories":    ϒcategories,
						"age_limit":     ϒage_limit,
						"formats":       ϒformats,
					})
				})
			return λ.DictLiteral(map[string]λ.Object{
				"_VALID_URL":    GfycatIE__VALID_URL,
				"_real_extract": GfycatIE__real_extract,
			})
		}())
	})
}

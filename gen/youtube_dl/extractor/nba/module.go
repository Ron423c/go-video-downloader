// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * nba/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/nba.py
 */

package nba

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωturner "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/turner"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	NBAIE                          λ.Object
	TurnerBaseIE                   λ.Object
	ϒcompat_urllib_parse_urlencode λ.Object
	ϒremove_start                  λ.Object
)

func init() {
	λ.InitModule(func() {
		TurnerBaseIE = Ωturner.TurnerBaseIE
		ϒcompat_urllib_parse_urlencode = Ωcompat.ϒcompat_urllib_parse_urlencode
		ϒremove_start = Ωutils.ϒremove_start
		NBAIE = λ.Cal(λ.TypeType, λ.NewStr("NBAIE"), λ.NewTuple(TurnerBaseIE), func() λ.Dict {
			var (
				NBAIE__TESTS        λ.Object
				NBAIE__VALID_URL    λ.Object
				NBAIE__real_extract λ.Object
			)
			NBAIE__VALID_URL = λ.NewStr("https?://(?:watch\\.|www\\.)?nba\\.com/(?P<path>(?:[^/]+/)+(?P<id>[^?]*?))/?(?:/index\\.html)?(?:\\?.*)?$")
			NBAIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.nba.com/video/games/nets/2012/12/04/0021200253-okc-bkn-recap.nba/index.html"),
					λ.NewStr("md5"): λ.NewStr("9e7729d3010a9c71506fd1248f74e4f4"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("0021200253-okc-bkn-recap"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Thunder vs. Nets"),
						λ.NewStr("description"): λ.NewStr("Kevin Durant scores 32 points and dishes out six assists as the Thunder beat the Nets in Brooklyn."),
						λ.NewStr("duration"):    λ.NewInt(181),
						λ.NewStr("timestamp"):   λ.NewInt(1354638466),
						λ.NewStr("upload_date"): λ.NewStr("20121204"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://www.nba.com/video/games/hornets/2014/12/05/0021400276-nyk-cha-play5.nba/"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://watch.nba.com/video/channels/playoffs/2015/05/20/0041400301-cle-atl-recap.nba"),
					λ.NewStr("md5"): λ.NewStr("b2b39b81cf28615ae0c3360a3f9668c4"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("channels/playoffs/2015/05/20/0041400301-cle-atl-recap.nba"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Hawks vs. Cavaliers Game 1"),
						λ.NewStr("description"): λ.NewStr("md5:8094c3498d35a9bd6b1a8c396a071b4d"),
						λ.NewStr("duration"):    λ.NewInt(228),
						λ.NewStr("timestamp"):   λ.NewInt(1432134543),
						λ.NewStr("upload_date"): λ.NewStr("20150520"),
					}),
					λ.NewStr("expected_warnings"): λ.NewList(λ.NewStr("Unable to download f4m manifest")),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.nba.com/clippers/news/doc-rivers-were-not-trading-blake"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("teams/clippers/2016/02/17/1455672027478-Doc_Feb16_720.mov-297324"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Practice: Doc Rivers - 2/16/16"),
						λ.NewStr("description"): λ.NewStr("Head Coach Doc Rivers addresses the media following practice."),
						λ.NewStr("upload_date"): λ.NewStr("20160216"),
						λ.NewStr("timestamp"):   λ.NewInt(1455672000),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
					λ.NewStr("expected_warnings"): λ.NewList(λ.NewStr("Unable to download f4m manifest")),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.nba.com/timberwolves/wiggins-shootaround#"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):    λ.NewStr("timberwolves"),
						λ.NewStr("title"): λ.NewStr("Shootaround Access - Dec. 12 | Andrew Wiggins"),
					}),
					λ.NewStr("playlist_count"): λ.NewInt(30),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("playlist_items"): λ.NewStr("1-30"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.nba.com/timberwolves/wiggins-shootaround#"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("teams/timberwolves/2014/12/12/Wigginsmp4-3462601"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Shootaround Access - Dec. 12 | Andrew Wiggins"),
						λ.NewStr("description"): λ.NewStr("Wolves rookie Andrew Wiggins addresses the media after Friday's shootaround."),
						λ.NewStr("upload_date"): λ.NewStr("20141212"),
						λ.NewStr("timestamp"):   λ.NewInt(1418418600),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("noplaylist"):    λ.True,
						λ.NewStr("skip_download"): λ.True,
					}),
					λ.NewStr("expected_warnings"): λ.NewList(λ.NewStr("Unable to download f4m manifest")),
				}),
			)
			NBAIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒorig_path λ.Object
						ϒpath      λ.Object
						ϒself      = λargs[0]
						ϒurl       = λargs[1]
						ϒvideo_id  λ.Object
						ϒwebpage   λ.Object
						τmp0       λ.Object
					)
					τmp0 = λ.Cal(λ.GetAttr(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups", nil))
					ϒpath = λ.GetItem(τmp0, λ.NewInt(0))
					ϒvideo_id = λ.GetItem(τmp0, λ.NewInt(1))
					ϒorig_path = ϒpath
					if λ.IsTrue(λ.Cal(λ.GetAttr(ϒpath, "startswith", nil), λ.NewStr("nba/"))) {
						ϒpath = λ.GetItem(ϒpath, λ.NewSlice(λ.NewInt(3), λ.None, λ.None))
					}
					if λ.IsTrue(λ.NewBool(!λ.Contains(ϒpath, λ.NewStr("video/")))) {
						ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
						ϒpath = λ.Cal(ϒremove_start, λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("data-videoid=\"([^\"]+)\""), ϒwebpage, λ.NewStr("video id")), λ.NewStr("/"))
						if λ.IsTrue(λ.Eq(ϒpath, λ.NewStr("{{id}}"))) {
							return λ.Cal(λ.GetAttr(ϒself, "_extract_playlist", nil), ϒorig_path, ϒvideo_id, ϒwebpage)
						}
						if λ.IsTrue(λ.Cal(λ.GetAttr(ϒpath, "startswith", nil), λ.NewStr("video/teams"))) {
							ϒpath = λ.Add(λ.NewStr("video/channels/proxy/"), λ.GetItem(ϒpath, λ.NewSlice(λ.NewInt(6), λ.None, λ.None)))
						}
					}
					return λ.Cal(λ.GetAttr(ϒself, "_extract_cvp_info", nil), λ.Mod(λ.NewStr("http://www.nba.com/%s.xml"), ϒpath), ϒvideo_id, λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("default"): λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("media_src"): λ.NewStr("http://nba.cdn.turner.com/nba/big"),
						}),
						λ.NewStr("m3u8"): λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("media_src"): λ.NewStr("http://nbavod-f.akamaihd.net"),
						}),
					}))
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        NBAIE__TESTS,
				λ.NewStr("_VALID_URL"):    NBAIE__VALID_URL,
				λ.NewStr("_real_extract"): NBAIE__real_extract,
			})
		}())
	})
}

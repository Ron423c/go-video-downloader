// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * nba/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/nba.py
 */

package nba

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωturner "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/turner"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	NBAIE                          λ.Object
	TurnerBaseIE                   λ.Object
	ϒcompat_urllib_parse_urlencode λ.Object
	ϒremove_start                  λ.Object
)

func init() {
	λ.InitModule(func() {
		TurnerBaseIE = Ωturner.TurnerBaseIE
		ϒcompat_urllib_parse_urlencode = Ωcompat.ϒcompat_urllib_parse_urlencode
		ϒremove_start = Ωutils.ϒremove_start
		NBAIE = λ.Cal(λ.TypeType, λ.StrLiteral("NBAIE"), λ.NewTuple(TurnerBaseIE), func() λ.Dict {
			var (
				NBAIE__VALID_URL    λ.Object
				NBAIE__real_extract λ.Object
			)
			NBAIE__VALID_URL = λ.StrLiteral("https?://(?:watch\\.|www\\.)?nba\\.com/(?P<path>(?:[^/]+/)+(?P<id>[^?]*?))/?(?:/index\\.html)?(?:\\?.*)?$")
			NBAIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒorig_path λ.Object
						ϒpath      λ.Object
						ϒself      = λargs[0]
						ϒurl       = λargs[1]
						ϒvideo_id  λ.Object
						ϒwebpage   λ.Object
						τmp0       λ.Object
					)
					τmp0 = λ.Calm(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups")
					ϒpath = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒvideo_id = λ.GetItem(τmp0, λ.IntLiteral(1))
					ϒorig_path = ϒpath
					if λ.IsTrue(λ.Calm(ϒpath, "startswith", λ.StrLiteral("nba/"))) {
						ϒpath = λ.GetItem(ϒpath, λ.NewSlice(λ.IntLiteral(3), λ.None, λ.None))
					}
					if !λ.Contains(ϒpath, λ.StrLiteral("video/")) {
						ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒvideo_id)
						ϒpath = λ.Cal(ϒremove_start, λ.Calm(ϒself, "_search_regex", λ.StrLiteral("data-videoid=\"([^\"]+)\""), ϒwebpage, λ.StrLiteral("video id")), λ.StrLiteral("/"))
						if λ.IsTrue(λ.Eq(ϒpath, λ.StrLiteral("{{id}}"))) {
							return λ.Calm(ϒself, "_extract_playlist", ϒorig_path, ϒvideo_id, ϒwebpage)
						}
						if λ.IsTrue(λ.Calm(ϒpath, "startswith", λ.StrLiteral("video/teams"))) {
							ϒpath = λ.Add(λ.StrLiteral("video/channels/proxy/"), λ.GetItem(ϒpath, λ.NewSlice(λ.IntLiteral(6), λ.None, λ.None)))
						}
					}
					return λ.Calm(ϒself, "_extract_cvp_info", λ.Mod(λ.StrLiteral("http://www.nba.com/%s.xml"), ϒpath), ϒvideo_id, λ.DictLiteral(map[string]λ.Object{
						"default": λ.DictLiteral(map[string]string{
							"media_src": "http://nba.cdn.turner.com/nba/big",
						}),
						"m3u8": λ.DictLiteral(map[string]string{
							"media_src": "http://nbavod-f.akamaihd.net",
						}),
					}))
				})
			return λ.DictLiteral(map[string]λ.Object{
				"_VALID_URL":    NBAIE__VALID_URL,
				"_real_extract": NBAIE__real_extract,
			})
		}())
	})
}

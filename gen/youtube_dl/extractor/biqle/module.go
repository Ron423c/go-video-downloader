// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * biqle/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/biqle.py
 */

package biqle

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωvk "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/vk"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	BIQLEIE       λ.Object
	HEADRequest   λ.Object
	InfoExtractor λ.Object
	VKIE          λ.Object
	ϒint_or_none  λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		VKIE = Ωvk.VKIE
		HEADRequest = Ωutils.HEADRequest
		ϒint_or_none = Ωutils.ϒint_or_none
		BIQLEIE = λ.Cal(λ.TypeType, λ.NewStr("BIQLEIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				BIQLEIE__TESTS        λ.Object
				BIQLEIE__VALID_URL    λ.Object
				BIQLEIE__real_extract λ.Object
			)
			BIQLEIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?biqle\\.(?:com|org|ru)/watch/(?P<id>-?\\d+_\\d+)")
			BIQLEIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://biqle.ru/watch/-115995369_456239081"),
					λ.NewStr("md5"): λ.NewStr("97af5a06ee4c29bbf9c001bdb1cf5c06"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("8v4f-avW-VI"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("PASSE-PARTOUT - L'ete c'est fait pour jouer"),
						λ.NewStr("description"): λ.NewStr("Passe-Partout"),
						λ.NewStr("uploader_id"): λ.NewStr("mrsimpsonstef3"),
						λ.NewStr("uploader"):    λ.NewStr("Phanolito"),
						λ.NewStr("upload_date"): λ.NewStr("20120822"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://biqle.org/watch/-44781847_168547604"),
					λ.NewStr("md5"): λ.NewStr("7f24e72af1db0edf7c1aaba513174f97"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("-44781847_168547604"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Ребенок в шоке от автоматической мойки"),
						λ.NewStr("timestamp"):   λ.NewInt(1396633454),
						λ.NewStr("uploader"):    λ.NewStr("Dmitry Kotov"),
						λ.NewStr("upload_date"): λ.NewStr("20140404"),
						λ.NewStr("uploader_id"): λ.NewStr("47850140"),
					}),
				}),
			)
			BIQLEIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒaccess_token λ.Object
						ϒembed_url    λ.Object
						ϒext          λ.Object
						ϒf_id         λ.Object
						ϒf_url        λ.Object
						ϒformats      λ.Object
						ϒheight       λ.Object
						ϒitem         λ.Object
						ϒk            λ.Object
						ϒself         = λargs[0]
						ϒsig          λ.Object
						ϒthumbnails   λ.Object
						ϒtitle        λ.Object
						ϒurl          = λargs[1]
						ϒv            λ.Object
						ϒvideo_id     λ.Object
						ϒwebpage      λ.Object
						ϒwidth        λ.Object
						τmp0          λ.Object
						τmp1          λ.Object
						τmp2          λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					ϒembed_url = λ.Cal(λ.GetAttr(ϒself, "_proto_relative_url", nil), λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("<iframe.+?src=\"((?:https?:)?//daxab\\.com/[^\"]+)\".*?></iframe>"), ϒwebpage, λ.NewStr("embed url")))
					if λ.IsTrue(λ.Cal(λ.GetAttr(VKIE, "suitable", nil), ϒembed_url)) {
						return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), ϒembed_url, λ.Cal(λ.GetAttr(VKIE, "ie_key", nil)), ϒvideo_id)
					}
					λ.Call(λ.GetAttr(ϒself, "_request_webpage", nil), λ.NewArgs(
						λ.Cal(HEADRequest, ϒembed_url),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "headers", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("Referer"): ϒurl,
						})},
					})
					τmp0 = λ.Cal(λ.GetAttr(λ.GetAttr(λ.GetItem(λ.Cal(λ.GetAttr(ϒself, "_get_cookies", nil), ϒembed_url), λ.NewStr("video_ext")), "value", nil), "split", nil), λ.NewStr("%3A"))
					ϒvideo_id = λ.GetItem(τmp0, λ.NewInt(0))
					ϒsig = λ.GetItem(τmp0, λ.NewInt(1))
					_ = λ.GetItem(τmp0, λ.NewInt(2))
					ϒaccess_token = λ.GetItem(τmp0, λ.NewInt(3))
					ϒitem = λ.GetItem(λ.GetItem(λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.NewStr("https://api.vk.com/method/video.get"),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "headers", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("User-Agent"): λ.NewStr("okhttp/3.4.1"),
						})},
						{Name: "query", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("access_token"): ϒaccess_token,
							λ.NewStr("sig"):          ϒsig,
							λ.NewStr("v"):            λ.NewFloat(5.44),
							λ.NewStr("videos"):       ϒvideo_id,
						})},
					}), λ.NewStr("response")), λ.NewStr("items")), λ.NewInt(0))
					ϒtitle = λ.GetItem(ϒitem, λ.NewStr("title"))
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("files"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "items", nil)))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒf_id = λ.GetItem(τmp2, λ.NewInt(0))
						ϒf_url = λ.GetItem(τmp2, λ.NewInt(1))
						if λ.IsTrue(λ.Eq(ϒf_id, λ.NewStr("external"))) {
							return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), ϒf_url)
						}
						τmp2 = λ.Cal(λ.GetAttr(ϒf_id, "split", nil), λ.NewStr("_"))
						ϒext = λ.GetItem(τmp2, λ.NewInt(0))
						ϒheight = λ.GetItem(τmp2, λ.NewInt(1))
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("format_id"): λ.Add(ϒheight, λ.NewStr("p")),
							λ.NewStr("url"):       ϒf_url,
							λ.NewStr("height"):    λ.Cal(ϒint_or_none, ϒheight),
							λ.NewStr("ext"):       ϒext,
						}))
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒthumbnails = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒitem, "items", nil)))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒk = λ.GetItem(τmp2, λ.NewInt(0))
						ϒv = λ.GetItem(τmp2, λ.NewInt(1))
						if λ.IsTrue(func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒk, "startswith", nil), λ.NewStr("photo_")); !λ.IsTrue(λv) {
								return λv
							} else {
								return ϒv
							}
						}()) {
							ϒwidth = λ.Cal(λ.GetAttr(ϒk, "replace", nil), λ.NewStr("photo_"), λ.NewStr(""))
							λ.Cal(λ.GetAttr(ϒthumbnails, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("id"):    ϒwidth,
								λ.NewStr("url"):   ϒv,
								λ.NewStr("width"): λ.Cal(ϒint_or_none, ϒwidth),
							}))
						}
					}
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):            ϒvideo_id,
						λ.NewStr("title"):         ϒtitle,
						λ.NewStr("formats"):       ϒformats,
						λ.NewStr("comment_count"): λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("comments"))),
						λ.NewStr("description"):   λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("description")),
						λ.NewStr("duration"):      λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("duration"))),
						λ.NewStr("thumbnails"):    ϒthumbnails,
						λ.NewStr("timestamp"):     λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("date"))),
						λ.NewStr("uploader"):      λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("owner_id")),
						λ.NewStr("view_count"):    λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("views"))),
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        BIQLEIE__TESTS,
				λ.NewStr("_VALID_URL"):    BIQLEIE__VALID_URL,
				λ.NewStr("_real_extract"): BIQLEIE__real_extract,
			})
		}())
	})
}

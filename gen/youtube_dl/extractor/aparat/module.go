// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * aparat/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/aparat.py
 */

package aparat

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	AparatIE      λ.Object
	InfoExtractor λ.Object
	ϒint_or_none  λ.Object
	ϒmerge_dicts  λ.Object
	ϒmimetype2ext λ.Object
	ϒurl_or_none  λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒmerge_dicts = Ωutils.ϒmerge_dicts
		ϒmimetype2ext = Ωutils.ϒmimetype2ext
		ϒurl_or_none = Ωutils.ϒurl_or_none
		AparatIE = λ.Cal(λ.TypeType, λ.NewStr("AparatIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				AparatIE__TESTS        λ.Object
				AparatIE__VALID_URL    λ.Object
				AparatIE__real_extract λ.Object
			)
			AparatIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?aparat\\.com/(?:v/|video/video/embed/videohash/)(?P<id>[a-zA-Z0-9]+)")
			AparatIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.aparat.com/v/wP8On"),
					λ.NewStr("md5"): λ.NewStr("131aca2e14fe7c4dcb3c4877ba300c89"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("wP8On"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("تیم گلکسی 11 - زومیت"),
						λ.NewStr("description"): λ.NewStr("md5:096bdabcdcc4569f2b8a5e903a3b3028"),
						λ.NewStr("duration"):    λ.NewInt(231),
						λ.NewStr("timestamp"):   λ.NewInt(1387394859),
						λ.NewStr("upload_date"): λ.NewStr("20131218"),
						λ.NewStr("view_count"):  λ.IntType,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://www.aparat.com/v/8dflw/"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			AparatIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒext       λ.Object
						ϒfile_url  λ.Object
						ϒformats   λ.Object
						ϒinfo      λ.Object
						ϒitem      λ.Object
						ϒitem_type λ.Object
						ϒlabel     λ.Object
						ϒoptions   λ.Object
						ϒplayer    λ.Object
						ϒself      = λargs[0]
						ϒsources   λ.Object
						ϒurl       = λargs[1]
						ϒvideo_id  λ.Object
						ϒwebpage   λ.Object
						τmp0       λ.Object
						τmp1       λ.Object
						τmp2       λ.Object
						τmp3       λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
						ϒurl,
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒwebpage))) {
						ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), λ.Add(λ.NewStr("http://www.aparat.com/video/video/embed/vt/frame/showvideo/yes/videohash/"), ϒvideo_id), ϒvideo_id)
					}
					ϒoptions = λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("options\\s*=\\s*JSON\\.parse\\(\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1\\s*\\)"),
						ϒwebpage,
						λ.NewStr("options"),
					), λ.KWArgs{
						{Name: "group", Value: λ.NewStr("value")},
					}), ϒvideo_id)
					ϒplayer = λ.GetItem(λ.GetItem(ϒoptions, λ.NewStr("plugins")), λ.NewStr("sabaPlayerPlugin"))
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.GetItem(ϒplayer, λ.NewStr("multiSRC")))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒsources = τmp1
						τmp2 = λ.Cal(λ.BuiltinIter, ϒsources)
						for {
							if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
								break
							}
							ϒitem = τmp3
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒitem, λ.DictType)))) {
								continue
							}
							ϒfile_url = λ.Cal(ϒurl_or_none, λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("src")))
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒfile_url))) {
								continue
							}
							ϒitem_type = λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("type"))
							if λ.IsTrue(λ.Eq(ϒitem_type, λ.NewStr("application/vnd.apple.mpegurl"))) {
								λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
									ϒfile_url,
									ϒvideo_id,
									λ.NewStr("mp4"),
								), λ.KWArgs{
									{Name: "entry_protocol", Value: λ.NewStr("m3u8_native")},
									{Name: "m3u8_id", Value: λ.NewStr("hls")},
									{Name: "fatal", Value: λ.False},
								}))
							} else {
								ϒext = λ.Cal(ϒmimetype2ext, λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("type")))
								ϒlabel = λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("label"))
								λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("url"): ϒfile_url,
									λ.NewStr("ext"): ϒext,
									λ.NewStr("format_id"): λ.Mod(λ.NewStr("http-%s"), func() λ.Object {
										if λv := ϒlabel; λ.IsTrue(λv) {
											return λv
										} else {
											return ϒext
										}
									}()),
									λ.NewStr("height"): λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
										λ.NewStr("(\\d+)[pP]"),
										func() λ.Object {
											if λv := ϒlabel; λ.IsTrue(λv) {
												return λv
											} else {
												return λ.NewStr("")
											}
										}(),
										λ.NewStr("height"),
									), λ.KWArgs{
										{Name: "default", Value: λ.None},
									})),
								}))
							}
						}
					}
					λ.Call(λ.GetAttr(ϒself, "_sort_formats", nil), λ.NewArgs(ϒformats), λ.KWArgs{
						{Name: "field_preference", Value: λ.NewTuple(
							λ.NewStr("height"),
							λ.NewStr("width"),
							λ.NewStr("tbr"),
							λ.NewStr("format_id"),
						)},
					})
					ϒinfo = λ.Call(λ.GetAttr(ϒself, "_search_json_ld", nil), λ.NewArgs(
						ϒwebpage,
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "default", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{})},
					})
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("title"))))) {
						λ.SetItem(ϒinfo, λ.NewStr("title"), λ.GetItem(ϒplayer, λ.NewStr("title")))
					}
					return λ.Cal(ϒmerge_dicts, ϒinfo, λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):        ϒvideo_id,
						λ.NewStr("thumbnail"): λ.Cal(ϒurl_or_none, λ.Cal(λ.GetAttr(ϒoptions, "get", nil), λ.NewStr("poster"))),
						λ.NewStr("duration"):  λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒplayer, "get", nil), λ.NewStr("duration"))),
						λ.NewStr("formats"):   ϒformats,
					}))
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        AparatIE__TESTS,
				λ.NewStr("_VALID_URL"):    AparatIE__VALID_URL,
				λ.NewStr("_real_extract"): AparatIE__real_extract,
			})
		}())
	})
}

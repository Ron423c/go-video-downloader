// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * watchbox/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/watchbox.py
 */

package watchbox

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor      λ.Object
	WatchBoxIE         λ.Object
	ϒcompat_str        λ.Object
	ϒint_or_none       λ.Object
	ϒjs_to_json        λ.Object
	ϒstrip_or_none     λ.Object
	ϒtry_get           λ.Object
	ϒunescapeHTML      λ.Object
	ϒunified_timestamp λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒjs_to_json = Ωutils.ϒjs_to_json
		ϒstrip_or_none = Ωutils.ϒstrip_or_none
		ϒtry_get = Ωutils.ϒtry_get
		ϒunescapeHTML = Ωutils.ϒunescapeHTML
		ϒunified_timestamp = Ωutils.ϒunified_timestamp
		WatchBoxIE = λ.Cal(λ.TypeType, λ.NewStr("WatchBoxIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				WatchBoxIE__TESTS        λ.Object
				WatchBoxIE__VALID_URL    λ.Object
				WatchBoxIE__real_extract λ.Object
			)
			WatchBoxIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?watchbox\\.de/(?P<kind>serien|filme)/(?:[^/]+/)*[^/]+-(?P<id>\\d+)")
			WatchBoxIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.watchbox.de/filme/free-jimmy-12325.html"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           λ.NewStr("341368"),
						λ.NewStr("ext"):          λ.NewStr("mp4"),
						λ.NewStr("title"):        λ.NewStr("Free Jimmy"),
						λ.NewStr("description"):  λ.NewStr("md5:bcd8bafbbf9dc0ef98063d344d7cc5f6"),
						λ.NewStr("thumbnail"):    λ.NewStr("re:^https?://.*\\.jpg$"),
						λ.NewStr("duration"):     λ.NewInt(4890),
						λ.NewStr("age_limit"):    λ.NewInt(16),
						λ.NewStr("release_year"): λ.NewInt(2009),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("format"):        λ.NewStr("bestvideo"),
						λ.NewStr("skip_download"): λ.True,
					}),
					λ.NewStr("expected_warnings"): λ.NewList(λ.NewStr("Failed to download m3u8 information")),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.watchbox.de/serien/ugly-americans-12231/staffel-1/date-in-der-hoelle-328286.html"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):             λ.NewStr("328286"),
						λ.NewStr("ext"):            λ.NewStr("mp4"),
						λ.NewStr("title"):          λ.NewStr("S01 E01 - Date in der Hölle"),
						λ.NewStr("description"):    λ.NewStr("md5:2f31c74a8186899f33cb5114491dae2b"),
						λ.NewStr("thumbnail"):      λ.NewStr("re:^https?://.*\\.jpg$"),
						λ.NewStr("duration"):       λ.NewInt(1291),
						λ.NewStr("age_limit"):      λ.NewInt(12),
						λ.NewStr("release_year"):   λ.NewInt(2010),
						λ.NewStr("series"):         λ.NewStr("Ugly Americans"),
						λ.NewStr("season_number"):  λ.NewInt(1),
						λ.NewStr("episode"):        λ.NewStr("Date in der Hölle"),
						λ.NewStr("episode_number"): λ.NewInt(1),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("format"):        λ.NewStr("bestvideo"),
						λ.NewStr("skip_download"): λ.True,
					}),
					λ.NewStr("expected_warnings"): λ.NewList(λ.NewStr("Failed to download m3u8 information")),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://www.watchbox.de/serien/ugly-americans-12231/staffel-2/der-ring-des-powers-328270"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			WatchBoxIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒage_limit      λ.Object
						ϒdash_url       λ.Object
						ϒdescription    λ.Object
						ϒdevapi         λ.Object
						ϒduration       λ.Object
						ϒepisode        λ.Object
						ϒepisode_number λ.Object
						ϒformats        λ.Object
						ϒhls_url        λ.Object
						ϒinfo           λ.Object
						ϒitem           λ.Object
						ϒkind           λ.Object
						ϒmobj           λ.Object
						ϒmp4_url        λ.Object
						ϒplayer_config  λ.Object
						ϒrelease_year   λ.Object
						ϒseason_number  λ.Object
						ϒself           = λargs[0]
						ϒseries         λ.Object
						ϒsource         λ.Object
						ϒthumbnail      λ.Object
						ϒtimestamp      λ.Object
						ϒtitle          λ.Object
						ϒurl            = λargs[1]
						ϒvideo_id       λ.Object
						ϒview_count     λ.Object
						ϒwebpage        λ.Object
						τmp0            λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					τmp0 = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("kind"), λ.NewStr("id"))
					ϒkind = λ.GetItem(τmp0, λ.NewInt(0))
					ϒvideo_id = λ.GetItem(τmp0, λ.NewInt(1))
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					ϒplayer_config = λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
						λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewStr("data-player-conf=([\"\\'])(?P<data>{.+?})\\1"),
							ϒwebpage,
							λ.NewStr("player config"),
						), λ.KWArgs{
							{Name: "default", Value: λ.NewStr("{}")},
							{Name: "group", Value: λ.NewStr("data")},
						}),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "transform_source", Value: ϒunescapeHTML},
						{Name: "fatal", Value: λ.False},
					})
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒplayer_config))) {
						ϒplayer_config = func() λ.Object {
							if λv := λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
								λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
									λ.NewStr("playerConf\\s*=\\s*({.+?})\\s*;"),
									ϒwebpage,
									λ.NewStr("player config"),
								), λ.KWArgs{
									{Name: "default", Value: λ.NewStr("{}")},
								}),
								ϒvideo_id,
							), λ.KWArgs{
								{Name: "transform_source", Value: ϒjs_to_json},
								{Name: "fatal", Value: λ.False},
							}); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewDictWithTable(map[λ.Object]λ.Object{})
							}
						}()
					}
					ϒsource = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒplayer_config, "get", nil), λ.NewStr("source")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewDictWithTable(map[λ.Object]λ.Object{})
						}
					}()
					ϒvideo_id = λ.Cal(ϒcompat_str, func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("videoId")); λ.IsTrue(λv) {
							return λv
						} else {
							return ϒvideo_id
						}
					}())
					ϒdevapi = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Mod(λ.NewStr("http://api.watchbox.de/devapi/id/%s"), ϒvideo_id),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "query", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("format"): λ.NewStr("json"),
							λ.NewStr("apikey"): λ.NewStr("hbbtv"),
						})},
						{Name: "fatal", Value: λ.False},
					})
					ϒitem = func() λ.Object {
						if λv := λ.Cal(ϒtry_get, ϒdevapi, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("items")), λ.NewInt(0))
							}), λ.DictType); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewDictWithTable(map[λ.Object]λ.Object{})
						}
					}()
					ϒtitle = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("title")); λ.IsTrue(λv) {
							return λv
						} else if λv := λ.Cal(ϒtry_get, ϒitem, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("movie")), λ.NewStr("headline_movie"))
							}), ϒcompat_str); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.GetItem(ϒsource, λ.NewStr("title"))
						}
					}()
					ϒformats = λ.NewList()
					ϒhls_url = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("media_videourl_hls")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("hls"))
						}
					}()
					if λ.IsTrue(ϒhls_url) {
						λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
							ϒhls_url,
							ϒvideo_id,
							λ.NewStr("mp4"),
						), λ.KWArgs{
							{Name: "entry_protocol", Value: λ.NewStr("m3u8_native")},
							{Name: "m3u8_id", Value: λ.NewStr("hls")},
							{Name: "fatal", Value: λ.False},
						}))
					}
					ϒdash_url = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("media_videourl_wv")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("dash"))
						}
					}()
					if λ.IsTrue(ϒdash_url) {
						λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_mpd_formats", nil), λ.NewArgs(
							ϒdash_url,
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "mpd_id", Value: λ.NewStr("dash")},
							{Name: "fatal", Value: λ.False},
						}))
					}
					ϒmp4_url = λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("media_videourl"))
					if λ.IsTrue(ϒmp4_url) {
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"):       ϒmp4_url,
							λ.NewStr("format_id"): λ.NewStr("mp4"),
							λ.NewStr("width"):     λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("width"))),
							λ.NewStr("height"):    λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("height"))),
							λ.NewStr("tbr"):       λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("bitrate"))),
						}))
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒdescription = λ.Cal(ϒstrip_or_none, λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("descr")))
					ϒthumbnail = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("media_content_thumbnail_large")); λ.IsTrue(λv) {
							return λv
						} else if λv := λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("poster")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("media_thumbnail"))
						}
					}()
					ϒduration = λ.Cal(ϒint_or_none, func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("media_length")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("length"))
						}
					}())
					ϒtimestamp = λ.Cal(ϒunified_timestamp, λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("pubDate")))
					ϒview_count = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒitem, "get", nil), λ.NewStr("media_views")))
					ϒage_limit = λ.Cal(ϒint_or_none, λ.Cal(ϒtry_get, ϒitem, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("movie")), λ.NewStr("fsk"))
						})))
					ϒrelease_year = λ.Cal(ϒint_or_none, λ.Cal(ϒtry_get, ϒitem, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("movie")), λ.NewStr("rel_year"))
						})))
					ϒinfo = λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):           ϒvideo_id,
						λ.NewStr("title"):        ϒtitle,
						λ.NewStr("description"):  ϒdescription,
						λ.NewStr("thumbnail"):    ϒthumbnail,
						λ.NewStr("duration"):     ϒduration,
						λ.NewStr("timestamp"):    ϒtimestamp,
						λ.NewStr("view_count"):   ϒview_count,
						λ.NewStr("age_limit"):    ϒage_limit,
						λ.NewStr("release_year"): ϒrelease_year,
						λ.NewStr("formats"):      ϒformats,
					})
					if λ.IsTrue(λ.Eq(λ.Cal(λ.GetAttr(ϒkind, "lower", nil)), λ.NewStr("serien"))) {
						ϒseries = func() λ.Object {
							if λv := λ.Cal(ϒtry_get, ϒitem, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(ϒx, λ.NewStr("special")), λ.NewStr("title"))
								}), ϒcompat_str); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("format"))
							}
						}()
						ϒseason_number = λ.Cal(ϒint_or_none, func() λ.Object {
							if λv := λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
								λ.NewStr("^S(\\d{1,2})\\s*E\\d{1,2}"),
								ϒtitle,
								λ.NewStr("season number"),
							), λ.KWArgs{
								{Name: "default", Value: λ.None},
							}); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
									λ.NewStr("/staffel-(\\d+)/"),
									ϒurl,
									λ.NewStr("season number"),
								), λ.KWArgs{
									{Name: "default", Value: λ.None},
								})
							}
						}())
						ϒepisode = λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("title"))
						ϒepisode_number = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewStr("^S\\d{1,2}\\s*E(\\d{1,2})"),
							ϒtitle,
							λ.NewStr("episode number"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}))
						λ.Cal(λ.GetAttr(ϒinfo, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("series"):         ϒseries,
							λ.NewStr("season_number"):  ϒseason_number,
							λ.NewStr("episode"):        ϒepisode,
							λ.NewStr("episode_number"): ϒepisode_number,
						}))
					}
					return ϒinfo
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        WatchBoxIE__TESTS,
				λ.NewStr("_VALID_URL"):    WatchBoxIE__VALID_URL,
				λ.NewStr("_real_extract"): WatchBoxIE__real_extract,
			})
		}())
	})
}

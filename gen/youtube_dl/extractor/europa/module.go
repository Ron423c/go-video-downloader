// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * europa/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/europa.py
 */

package europa

import (
	Ωparse "github.com/tenta-browser/go-video-downloader/gen/urllib/parse"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	EuropaIE         λ.Object
	InfoExtractor    λ.Object
	ϒint_or_none     λ.Object
	ϒorderedSet      λ.Object
	ϒparse_duration  λ.Object
	ϒqualities       λ.Object
	ϒunified_strdate λ.Object
	ϒxpath_text      λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒorderedSet = Ωutils.ϒorderedSet
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒqualities = Ωutils.ϒqualities
		ϒunified_strdate = Ωutils.ϒunified_strdate
		ϒxpath_text = Ωutils.ϒxpath_text
		EuropaIE = λ.Cal(λ.TypeType, λ.NewStr("EuropaIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				EuropaIE__TESTS        λ.Object
				EuropaIE__VALID_URL    λ.Object
				EuropaIE__real_extract λ.Object
			)
			EuropaIE__VALID_URL = λ.NewStr("https?://ec\\.europa\\.eu/avservices/(?:video/player|audio/audioDetails)\\.cfm\\?.*?\\bref=(?P<id>[A-Za-z0-9-]+)")
			EuropaIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://ec.europa.eu/avservices/video/player.cfm?ref=I107758"),
					λ.NewStr("md5"): λ.NewStr("574f080699ddd1e19a675b0ddf010371"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("I107758"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("TRADE - Wikileaks on TTIP"),
						λ.NewStr("description"): λ.NewStr("NEW  LIVE EC Midday press briefing of 11/08/2015"),
						λ.NewStr("thumbnail"):   λ.NewStr("re:^https?://.*\\.jpg$"),
						λ.NewStr("upload_date"): λ.NewStr("20150811"),
						λ.NewStr("duration"):    λ.NewInt(34),
						λ.NewStr("view_count"):  λ.IntType,
						λ.NewStr("formats"):     λ.NewStr("mincount:3"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://ec.europa.eu/avservices/video/player.cfm?sitelang=en&ref=I107786"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://ec.europa.eu/avservices/audio/audioDetails.cfm?ref=I-109295&sitelang=en"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			EuropaIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdescription         λ.Object
						ϒduration            λ.Object
						ϒfile_               λ.Object
						ϒformats             λ.Object
						ϒget_item            λ.Object
						ϒlang                λ.Object
						ϒlanguage_preference λ.Object
						ϒplaylist            λ.Object
						ϒpreferred_lang      λ.Object
						ϒpreferred_langs     λ.Object
						ϒquery               λ.Object
						ϒself                = λargs[0]
						ϒthumbnmail          λ.Object
						ϒtitle               λ.Object
						ϒupload_date         λ.Object
						ϒurl                 = λargs[1]
						ϒvideo_id            λ.Object
						ϒvideo_url           λ.Object
						ϒview_count          λ.Object
						τmp0                 λ.Object
						τmp1                 λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒplaylist = λ.Cal(λ.GetAttr(ϒself, "_download_xml", nil), λ.Mod(λ.NewStr("http://ec.europa.eu/avservices/video/player/playlist.cfm?ID=%s"), ϒvideo_id), ϒvideo_id)
					ϒget_item = λ.NewFunction("get_item",
						[]λ.Param{
							{Name: "type_"},
							{Name: "preference"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒitem       λ.Object
								ϒitems      λ.Object
								ϒlabel      λ.Object
								ϒlang       λ.Object
								ϒp          λ.Object
								ϒpreference = λargs[1]
								ϒtype_      = λargs[0]
								τmp0        λ.Object
								τmp1        λ.Object
								τmp2        λ.Object
							)
							ϒitems = λ.NewDictWithTable(map[λ.Object]λ.Object{})
							τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒplaylist, "findall", nil), λ.Mod(λ.NewStr("./info/%s/item"), ϒtype_)))
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒitem = τmp1
								τmp2 = λ.NewTuple(
									λ.Call(ϒxpath_text, λ.NewArgs(
										ϒitem,
										λ.NewStr("lg"),
									), λ.KWArgs{
										{Name: "default", Value: λ.None},
									}),
									λ.Call(ϒxpath_text, λ.NewArgs(
										ϒitem,
										λ.NewStr("label"),
									), λ.KWArgs{
										{Name: "default", Value: λ.None},
									}),
								)
								ϒlang = λ.GetItem(τmp2, λ.NewInt(0))
								ϒlabel = λ.GetItem(τmp2, λ.NewInt(1))
								if λ.IsTrue(func() λ.Object {
									if λv := ϒlang; !λ.IsTrue(λv) {
										return λv
									} else {
										return ϒlabel
									}
								}()) {
									λ.SetItem(ϒitems, ϒlang, λ.Cal(λ.GetAttr(ϒlabel, "strip", nil)))
								}
							}
							τmp0 = λ.Cal(λ.BuiltinIter, ϒpreference)
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒp = τmp1
								if λ.IsTrue(λ.Cal(λ.GetAttr(ϒitems, "get", nil), ϒp)) {
									return λ.GetItem(ϒitems, ϒp)
								}
							}
							return λ.None
						})
					ϒquery = λ.Cal(Ωparse.ϒparse_qs, λ.GetAttr(λ.Cal(Ωparse.ϒurlparse, ϒurl), "query", nil))
					ϒpreferred_lang = λ.GetItem(λ.Cal(λ.GetAttr(ϒquery, "get", nil), λ.NewStr("sitelang"), λ.NewTuple(λ.NewStr("en"))), λ.NewInt(0))
					ϒpreferred_langs = λ.Cal(ϒorderedSet, λ.NewTuple(
						ϒpreferred_lang,
						λ.NewStr("en"),
						λ.NewStr("int"),
					))
					ϒtitle = func() λ.Object {
						if λv := λ.Cal(ϒget_item, λ.NewStr("title"), ϒpreferred_langs); λ.IsTrue(λv) {
							return λv
						} else {
							return ϒvideo_id
						}
					}()
					ϒdescription = λ.Cal(ϒget_item, λ.NewStr("description"), ϒpreferred_langs)
					ϒthumbnmail = λ.Cal(ϒxpath_text, ϒplaylist, λ.NewStr("./info/thumburl"), λ.NewStr("thumbnail"))
					ϒupload_date = λ.Cal(ϒunified_strdate, λ.Cal(ϒxpath_text, ϒplaylist, λ.NewStr("./info/date"), λ.NewStr("upload date")))
					ϒduration = λ.Cal(ϒparse_duration, λ.Cal(ϒxpath_text, ϒplaylist, λ.NewStr("./info/duration"), λ.NewStr("duration")))
					ϒview_count = λ.Cal(ϒint_or_none, λ.Cal(ϒxpath_text, ϒplaylist, λ.NewStr("./info/views"), λ.NewStr("views")))
					ϒlanguage_preference = λ.Cal(ϒqualities, λ.GetItem(ϒpreferred_langs, λ.NewSlice(λ.None, λ.None, λ.Neg(λ.NewInt(1)))))
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒplaylist, "findall", nil), λ.NewStr("./files/file")))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒfile_ = τmp1
						ϒvideo_url = λ.Cal(ϒxpath_text, ϒfile_, λ.NewStr("./url"))
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒvideo_url))) {
							continue
						}
						ϒlang = λ.Cal(ϒxpath_text, ϒfile_, λ.NewStr("./lg"))
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("url"):                 ϒvideo_url,
							λ.NewStr("format_id"):           ϒlang,
							λ.NewStr("format_note"):         λ.Cal(ϒxpath_text, ϒfile_, λ.NewStr("./lglabel")),
							λ.NewStr("language_preference"): λ.Cal(ϒlanguage_preference, ϒlang),
						}))
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("title"):       ϒtitle,
						λ.NewStr("description"): ϒdescription,
						λ.NewStr("thumbnail"):   ϒthumbnmail,
						λ.NewStr("upload_date"): ϒupload_date,
						λ.NewStr("duration"):    ϒduration,
						λ.NewStr("view_count"):  ϒview_count,
						λ.NewStr("formats"):     ϒformats,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        EuropaIE__TESTS,
				λ.NewStr("_VALID_URL"):    EuropaIE__VALID_URL,
				λ.NewStr("_real_extract"): EuropaIE__real_extract,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * bravotv/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/bravotv.py
 */

package bravotv

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωadobepass "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/adobepass"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	AdobePassIE       λ.Object
	BravoTVIE         λ.Object
	ϒint_or_none      λ.Object
	ϒsmuggle_url      λ.Object
	ϒupdate_url_query λ.Object
)

func init() {
	λ.InitModule(func() {
		AdobePassIE = Ωadobepass.AdobePassIE
		ϒsmuggle_url = Ωutils.ϒsmuggle_url
		ϒupdate_url_query = Ωutils.ϒupdate_url_query
		ϒint_or_none = Ωutils.ϒint_or_none
		BravoTVIE = λ.Cal(λ.TypeType, λ.NewStr("BravoTVIE"), λ.NewTuple(AdobePassIE), func() λ.Dict {
			var (
				BravoTVIE__TESTS        λ.Object
				BravoTVIE__VALID_URL    λ.Object
				BravoTVIE__real_extract λ.Object
			)
			BravoTVIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?bravotv\\.com/(?:[^/]+/)+(?P<id>[^/?#]+)")
			BravoTVIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.bravotv.com/top-chef/season-16/episode-15/videos/the-top-chef-season-16-winner-is"),
					λ.NewStr("md5"): λ.NewStr("e34684cfea2a96cd2ee1ef3a60909de9"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("epL0pmK1kQlT"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("The Top Chef Season 16 Winner Is..."),
						λ.NewStr("description"): λ.NewStr("Find out who takes the title of Top Chef!"),
						λ.NewStr("uploader"):    λ.NewStr("NBCU-BRAV"),
						λ.NewStr("upload_date"): λ.NewStr("20190314"),
						λ.NewStr("timestamp"):   λ.NewInt(1552591860),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://www.bravotv.com/below-deck/season-3/ep-14-reunion-part-1"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			BravoTVIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒaccount_pid     λ.Object
						ϒadobe_pass      λ.Object
						ϒdisplay_id      λ.Object
						ϒinfo            λ.Object
						ϒmetadata        λ.Object
						ϒmobj            λ.Object
						ϒquery           λ.Object
						ϒrelease_pid     λ.Object
						ϒresource        λ.Object
						ϒself            = λargs[0]
						ϒsettings        λ.Object
						ϒshared_playlist λ.Object
						ϒtp_path         λ.Object
						ϒtve             λ.Object
						ϒurl             = λargs[1]
						ϒwebpage         λ.Object
						τmp0             λ.Object
					)
					ϒdisplay_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒdisplay_id)
					ϒsettings = λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("<script[^>]+data-drupal-selector=\"drupal-settings-json\"[^>]*>({.+?})</script>"), ϒwebpage, λ.NewStr("drupal settings")), ϒdisplay_id)
					ϒinfo = λ.NewDictWithTable(map[λ.Object]λ.Object{})
					ϒquery = λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("mbr"): λ.NewStr("true"),
					})
					τmp0 = λ.Mul(λ.NewList(λ.None), λ.NewInt(2))
					ϒaccount_pid = λ.GetItem(τmp0, λ.NewInt(0))
					ϒrelease_pid = λ.GetItem(τmp0, λ.NewInt(1))
					ϒtve = λ.Cal(λ.GetAttr(ϒsettings, "get", nil), λ.NewStr("ls_tve"))
					if λ.IsTrue(ϒtve) {
						λ.SetItem(ϒquery, λ.NewStr("manifest"), λ.NewStr("m3u"))
						ϒmobj = λ.Cal(Ωre.ϒsearch, λ.NewStr("<[^>]+id=\"pdk-player\"[^>]+data-url=[\"\\']?(?:https?:)?//player\\.theplatform\\.com/p/([^/]+)/(?:[^/]+/)*select/([^?#&\"\\']+)"), ϒwebpage)
						if λ.IsTrue(ϒmobj) {
							τmp0 = λ.Cal(λ.GetAttr(ϒmobj, "groups", nil))
							ϒaccount_pid = λ.GetItem(τmp0, λ.NewInt(0))
							ϒtp_path = λ.GetItem(τmp0, λ.NewInt(1))
							ϒrelease_pid = λ.GetItem(λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒtp_path, "strip", nil), λ.NewStr("/")), "split", nil), λ.NewStr("/")), λ.Neg(λ.NewInt(1)))
						} else {
							ϒaccount_pid = λ.NewStr("HNK2IC")
							τmp0 = λ.GetItem(ϒtve, λ.NewStr("release_pid"))
							ϒtp_path = τmp0
							ϒrelease_pid = τmp0
						}
						if λ.IsTrue(λ.Eq(λ.Cal(λ.GetAttr(ϒtve, "get", nil), λ.NewStr("entitlement")), λ.NewStr("auth"))) {
							ϒadobe_pass = λ.Cal(λ.GetAttr(ϒsettings, "get", nil), λ.NewStr("tve_adobe_auth"), λ.NewDictWithTable(map[λ.Object]λ.Object{}))
							ϒresource = λ.Cal(λ.GetAttr(ϒself, "_get_mvpd_resource", nil), λ.Cal(λ.GetAttr(ϒadobe_pass, "get", nil), λ.NewStr("adobePassResourceId"), λ.NewStr("bravo")), λ.GetItem(ϒtve, λ.NewStr("title")), ϒrelease_pid, λ.Cal(λ.GetAttr(ϒtve, "get", nil), λ.NewStr("rating")))
							λ.SetItem(ϒquery, λ.NewStr("auth"), λ.Cal(λ.GetAttr(ϒself, "_extract_mvpd_auth", nil), ϒurl, ϒrelease_pid, λ.Cal(λ.GetAttr(ϒadobe_pass, "get", nil), λ.NewStr("adobePassRequestorId"), λ.NewStr("bravo")), ϒresource))
						}
					} else {
						ϒshared_playlist = λ.GetItem(ϒsettings, λ.NewStr("ls_playlist"))
						ϒaccount_pid = λ.GetItem(ϒshared_playlist, λ.NewStr("account_pid"))
						ϒmetadata = λ.GetItem(λ.GetItem(ϒshared_playlist, λ.NewStr("video_metadata")), λ.GetItem(ϒshared_playlist, λ.NewStr("default_clip")))
						τmp0 = λ.Cal(λ.GetAttr(ϒmetadata, "get", nil), λ.NewStr("release_pid"))
						ϒtp_path = τmp0
						ϒrelease_pid = τmp0
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒrelease_pid))) {
							ϒrelease_pid = λ.GetItem(ϒmetadata, λ.NewStr("guid"))
							ϒtp_path = λ.Add(λ.NewStr("media/guid/2140479951/"), ϒrelease_pid)
						}
						λ.Cal(λ.GetAttr(ϒinfo, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("title"):          λ.GetItem(ϒmetadata, λ.NewStr("title")),
							λ.NewStr("description"):    λ.Cal(λ.GetAttr(ϒmetadata, "get", nil), λ.NewStr("description")),
							λ.NewStr("season_number"):  λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒmetadata, "get", nil), λ.NewStr("season_num"))),
							λ.NewStr("episode_number"): λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒmetadata, "get", nil), λ.NewStr("episode_num"))),
						}))
						λ.SetItem(ϒquery, λ.NewStr("switch"), λ.NewStr("progressive"))
					}
					λ.Cal(λ.GetAttr(ϒinfo, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("_type"): λ.NewStr("url_transparent"),
						λ.NewStr("id"):    ϒrelease_pid,
						λ.NewStr("url"): λ.Cal(ϒsmuggle_url, λ.Cal(ϒupdate_url_query, λ.Mod(λ.NewStr("http://link.theplatform.com/s/%s/%s"), λ.NewTuple(
							ϒaccount_pid,
							ϒtp_path,
						)), ϒquery), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("force_smil_url"): λ.True,
						})),
						λ.NewStr("ie_key"): λ.NewStr("ThePlatform"),
					}))
					return ϒinfo
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        BravoTVIE__TESTS,
				λ.NewStr("_VALID_URL"):    BravoTVIE__VALID_URL,
				λ.NewStr("_real_extract"): BravoTVIE__real_extract,
			})
		}())
	})
}

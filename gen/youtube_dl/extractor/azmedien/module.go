// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * azmedien/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/azmedien.py
 */

package azmedien

import (
	Ωjson "github.com/tenta-browser/go-video-downloader/gen/json"
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωkaltura "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/kaltura"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	AZMedienIE    λ.Object
	InfoExtractor λ.Object
	KalturaIE     λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		KalturaIE = Ωkaltura.KalturaIE
		AZMedienIE = λ.Cal(λ.TypeType, λ.NewStr("AZMedienIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				AZMedienIE__PARTNER_ID   λ.Object
				AZMedienIE__VALID_URL    λ.Object
				AZMedienIE__real_extract λ.Object
			)
			AZMedienIE__VALID_URL = λ.NewStr("(?x)\n                    https?://\n                        (?:www\\.)?\n                        (?P<host>\n                            telezueri\\.ch|\n                            telebaern\\.tv|\n                            telem1\\.ch\n                        )/\n                        [^/]+/\n                        (?P<id>\n                            [^/]+-(?P<article_id>\\d+)\n                        )\n                        (?:\n                            \\#video=\n                            (?P<kaltura_id>\n                                [_0-9a-z]+\n                            )\n                        )?\n                    ")
			AZMedienIE__PARTNER_ID = λ.NewStr("1719221")
			AZMedienIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒapi_url   λ.Object
						ϒentry_id  λ.Object
						ϒhost      λ.Object
						ϒjson_data λ.Object
						ϒmobj      λ.Object
						ϒpayload   λ.Object
						ϒself      = λargs[0]
						ϒurl       = λargs[1]
						ϒvideo_id  λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒhost = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("host"))
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("id"))
					ϒentry_id = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("kaltura_id"))
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒentry_id))) {
						ϒapi_url = λ.Mod(λ.NewStr("https://www.%s/api/pub/gql/%s"), λ.NewTuple(
							ϒhost,
							λ.GetItem(λ.Cal(λ.GetAttr(ϒhost, "split", nil), λ.NewStr(".")), λ.NewInt(0)),
						))
						ϒpayload = λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("query"): λ.NewStr("query VideoContext($articleId: ID!) {\n                    article: node(id: $articleId) {\n                      ... on Article {\n                        mainAssetRelation {\n                          asset {\n                            ... on VideoAsset {\n                              kalturaId\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }"),
							λ.NewStr("variables"): λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("articleId"): λ.Mod(λ.NewStr("Article:%s"), λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("article_id"))),
							}),
						})
						ϒjson_data = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
							ϒapi_url,
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "headers", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("Content-Type"): λ.NewStr("application/json"),
							})},
							{Name: "data", Value: λ.Cal(λ.GetAttr(λ.Cal(Ωjson.ϒdumps, ϒpayload), "encode", nil))},
						})
						ϒentry_id = λ.GetItem(λ.GetItem(λ.GetItem(λ.GetItem(λ.GetItem(ϒjson_data, λ.NewStr("data")), λ.NewStr("article")), λ.NewStr("mainAssetRelation")), λ.NewStr("asset")), λ.NewStr("kalturaId"))
					}
					return λ.Call(λ.GetAttr(ϒself, "url_result", nil), λ.NewArgs(λ.Mod(λ.NewStr("kaltura:%s:%s"), λ.NewTuple(
						λ.GetAttr(ϒself, "_PARTNER_ID", nil),
						ϒentry_id,
					))), λ.KWArgs{
						{Name: "ie", Value: λ.Cal(λ.GetAttr(KalturaIE, "ie_key", nil))},
						{Name: "video_id", Value: ϒentry_id},
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_PARTNER_ID"):   AZMedienIE__PARTNER_ID,
				λ.NewStr("_VALID_URL"):    AZMedienIE__VALID_URL,
				λ.NewStr("_real_extract"): AZMedienIE__real_extract,
			})
		}())
	})
}

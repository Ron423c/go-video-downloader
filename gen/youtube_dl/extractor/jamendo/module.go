// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * jamendo/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/jamendo.py
 */

package jamendo

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor   λ.Object
	JamendoAlbumIE  λ.Object
	JamendoBaseIE   λ.Object
	JamendoIE       λ.Object
	ϒparse_duration λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒparse_duration = Ωutils.ϒparse_duration
		JamendoBaseIE = λ.Cal(λ.TypeType, λ.NewStr("JamendoBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				JamendoBaseIE__extract_meta λ.Object
			)
			JamendoBaseIE__extract_meta = λ.NewFunction("_extract_meta",
				[]λ.Param{
					{Name: "self"},
					{Name: "webpage"},
					{Name: "fatal", Def: λ.True},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒartist  λ.Object
						ϒfatal   = λargs[2]
						ϒmobj    λ.Object
						ϒsecond  λ.Object
						ϒself    = λargs[0]
						ϒtitle   λ.Object
						ϒwebpage = λargs[1]
						τmp0     λ.Object
					)
					ϒtitle = func() λ.Object {
						if λv := λ.Call(λ.GetAttr(ϒself, "_og_search_title", nil), λ.NewArgs(ϒwebpage), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
								λ.NewStr("<title>([^<]+)"),
								ϒwebpage,
								λ.NewStr("title"),
							), λ.KWArgs{
								{Name: "default", Value: λ.None},
							})
						}
					}()
					if λ.IsTrue(ϒtitle) {
						ϒtitle = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewStr("(.+?)\\s*\\|\\s*Jamendo Music"),
							ϒtitle,
							λ.NewStr("title"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						})
					}
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒtitle))) {
						ϒtitle = λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
							λ.NewStr("name"),
							ϒwebpage,
							λ.NewStr("title"),
						), λ.KWArgs{
							{Name: "fatal", Value: ϒfatal},
						})
					}
					ϒmobj = λ.Cal(Ωre.ϒsearch, λ.NewStr("(.+) - (.+)"), func() λ.Object {
						if λv := ϒtitle; λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewStr("")
						}
					}())
					τmp0 = func() λ.Object {
						if λ.IsTrue(ϒmobj) {
							return λ.Cal(λ.GetAttr(ϒmobj, "groups", nil))
						} else {
							return λ.Mul(λ.NewList(λ.None), λ.NewInt(2))
						}
					}()
					ϒartist = λ.GetItem(τmp0, λ.NewInt(0))
					ϒsecond = λ.GetItem(τmp0, λ.NewInt(1))
					return λ.NewTuple(
						ϒtitle,
						ϒartist,
						ϒsecond,
					)
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_extract_meta"): JamendoBaseIE__extract_meta,
			})
		}())
		JamendoIE = λ.Cal(λ.TypeType, λ.NewStr("JamendoIE"), λ.NewTuple(JamendoBaseIE), func() λ.Dict {
			var (
				JamendoIE__TESTS        λ.Object
				JamendoIE__VALID_URL    λ.Object
				JamendoIE__real_extract λ.Object
			)
			JamendoIE__VALID_URL = λ.NewStr("(?x)\n                    https?://\n                        (?:\n                            licensing\\.jamendo\\.com/[^/]+|\n                            (?:www\\.)?jamendo\\.com\n                        )\n                        /track/(?P<id>[0-9]+)/(?P<display_id>[^/?#&]+)\n                    ")
			JamendoIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://www.jamendo.com/track/196219/stories-from-emona-i"),
					λ.NewStr("md5"): λ.NewStr("6e9e82ed6db98678f171c25a8ed09ffd"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):         λ.NewStr("196219"),
						λ.NewStr("display_id"): λ.NewStr("stories-from-emona-i"),
						λ.NewStr("ext"):        λ.NewStr("flac"),
						λ.NewStr("title"):      λ.NewStr("Maya Filipič - Stories from Emona I"),
						λ.NewStr("artist"):     λ.NewStr("Maya Filipič"),
						λ.NewStr("track"):      λ.NewStr("Stories from Emona I"),
						λ.NewStr("duration"):   λ.NewInt(210),
						λ.NewStr("thumbnail"):  λ.NewStr("re:^https?://.*\\.jpg"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://licensing.jamendo.com/en/track/1496667/energetic-rock"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			JamendoIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒartist     λ.Object
						ϒdisplay_id λ.Object
						ϒduration   λ.Object
						ϒformats    λ.Object
						ϒmobj       λ.Object
						ϒself       = λargs[0]
						ϒthumbnail  λ.Object
						ϒtitle      λ.Object
						ϒtrack      λ.Object
						ϒtrack_id   λ.Object
						ϒurl        = λargs[1]
						ϒwebpage    λ.Object
						τmp0        λ.Object
					)
					ϒmobj = λ.Cal(λ.GetAttr(λ.GetAttr(ϒself, "_VALID_URL_RE", nil), "match", nil), ϒurl)
					ϒtrack_id = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("id"))
					ϒdisplay_id = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("display_id"))
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), λ.Mod(λ.NewStr("https://www.jamendo.com/track/%s/%s"), λ.NewTuple(
						ϒtrack_id,
						ϒdisplay_id,
					)), ϒdisplay_id)
					τmp0 = λ.Cal(λ.GetAttr(ϒself, "_extract_meta", nil), ϒwebpage)
					ϒtitle = λ.GetItem(τmp0, λ.NewInt(0))
					ϒartist = λ.GetItem(τmp0, λ.NewInt(1))
					ϒtrack = λ.GetItem(τmp0, λ.NewInt(2))
					ϒformats = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgen λ.Generator) λ.Object {
								var (
									ϒext        λ.Object
									ϒformat_id  λ.Object
									ϒquality    λ.Object
									ϒsub_domain λ.Object
									τmp0        λ.Object
									τmp1        λ.Object
									τmp2        λ.Object
									τmp3        λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.EnumerateIteratorType, λ.NewTuple(
									λ.NewTuple(
										λ.NewStr("mp31"),
										λ.NewStr("mp3l"),
										λ.NewStr("mp3"),
									),
									λ.NewTuple(
										λ.NewStr("mp32"),
										λ.NewStr("mp3d"),
										λ.NewStr("mp3"),
									),
									λ.NewTuple(
										λ.NewStr("ogg1"),
										λ.NewStr("ogg"),
										λ.NewStr("ogg"),
									),
									λ.NewTuple(
										λ.NewStr("flac"),
										λ.NewStr("flac"),
										λ.NewStr("flac"),
									),
								)))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									τmp2 = τmp1
									ϒquality = λ.GetItem(τmp2, λ.NewInt(0))
									τmp3 = λ.GetItem(τmp2, λ.NewInt(1))
									ϒformat_id = λ.GetItem(τmp3, λ.NewInt(0))
									ϒsub_domain = λ.GetItem(τmp3, λ.NewInt(1))
									ϒext = λ.GetItem(τmp3, λ.NewInt(2))
									λgen.Yield(λ.NewDictWithTable(map[λ.Object]λ.Object{
										λ.NewStr("url"): λ.Mod(λ.NewStr("https://%s.jamendo.com/?trackid=%s&format=%s&from=app-97dab294"), λ.NewTuple(
											ϒsub_domain,
											ϒtrack_id,
											ϒformat_id,
										)),
										λ.NewStr("format_id"): ϒformat_id,
										λ.NewStr("ext"):       ϒext,
										λ.NewStr("quality"):   ϒquality,
									}))
								}
								return λ.None
							})
						})))
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒthumbnail = λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
						λ.NewStr("image"),
						ϒwebpage,
						λ.NewStr("thumbnail"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					ϒduration = λ.Cal(ϒparse_duration, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("<span[^>]+itemprop=[\"\\']duration[\"\\'][^>]+content=[\"\\'](.+?)[\"\\']"),
						ϒwebpage,
						λ.NewStr("duration"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					}))
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):         ϒtrack_id,
						λ.NewStr("display_id"): ϒdisplay_id,
						λ.NewStr("thumbnail"):  ϒthumbnail,
						λ.NewStr("title"):      ϒtitle,
						λ.NewStr("duration"):   ϒduration,
						λ.NewStr("artist"):     ϒartist,
						λ.NewStr("track"):      ϒtrack,
						λ.NewStr("formats"):    ϒformats,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        JamendoIE__TESTS,
				λ.NewStr("_VALID_URL"):    JamendoIE__VALID_URL,
				λ.NewStr("_real_extract"): JamendoIE__real_extract,
			})
		}())
		JamendoAlbumIE = λ.Cal(λ.TypeType, λ.NewStr("JamendoAlbumIE"), λ.NewTuple(JamendoBaseIE), func() λ.Dict {
			var (
				JamendoAlbumIE__VALID_URL λ.Object
			)
			JamendoAlbumIE__VALID_URL = λ.NewStr("https?://(?:www\\.)?jamendo\\.com/album/(?P<id>[0-9]+)/(?P<display_id>[\\w-]+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): JamendoAlbumIE__VALID_URL,
			})
		}())
	})
}

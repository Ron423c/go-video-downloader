// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * porncom/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/porncom.py
 */

package porncom

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωparse "github.com/tenta-browser/go-video-downloader/gen/urllib/parse"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor   λ.Object
	PornComIE       λ.Object
	ϒint_or_none    λ.Object
	ϒjs_to_json     λ.Object
	ϒparse_filesize λ.Object
	ϒstr_to_int     λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒjs_to_json = Ωutils.ϒjs_to_json
		ϒparse_filesize = Ωutils.ϒparse_filesize
		ϒstr_to_int = Ωutils.ϒstr_to_int
		PornComIE = λ.Cal(λ.TypeType, λ.NewStr("PornComIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				PornComIE__TESTS        λ.Object
				PornComIE__VALID_URL    λ.Object
				PornComIE__real_extract λ.Object
			)
			PornComIE__VALID_URL = λ.NewStr("https?://(?:[a-zA-Z]+\\.)?porn\\.com/videos/(?:(?P<display_id>[^/]+)-)?(?P<id>\\d+)")
			PornComIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://www.porn.com/videos/teen-grabs-a-dildo-and-fucks-her-pussy-live-on-1hottie-i-rec-2603339"),
					λ.NewStr("md5"): λ.NewStr("3f30ce76267533cd12ba999263156de7"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):         λ.NewStr("2603339"),
						λ.NewStr("display_id"): λ.NewStr("teen-grabs-a-dildo-and-fucks-her-pussy-live-on-1hottie-i-rec"),
						λ.NewStr("ext"):        λ.NewStr("mp4"),
						λ.NewStr("title"):      λ.NewStr("Teen grabs a dildo and fucks her pussy live on 1hottie, I rec"),
						λ.NewStr("thumbnail"):  λ.NewStr("re:^https?://.*\\.jpg$"),
						λ.NewStr("duration"):   λ.NewInt(551),
						λ.NewStr("view_count"): λ.IntType,
						λ.NewStr("age_limit"):  λ.NewInt(18),
						λ.NewStr("categories"): λ.ListType,
						λ.NewStr("tags"):       λ.ListType,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://se.porn.com/videos/marsha-may-rides-seth-on-top-of-his-thick-cock-2658067"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			PornComIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒconfig       λ.Object
						ϒdisplay_id   λ.Object
						ϒduration     λ.Object
						ϒextract_list λ.Object
						ϒformats      λ.Object
						ϒmobj         λ.Object
						ϒself         = λargs[0]
						ϒthumbnail    λ.Object
						ϒtitle        λ.Object
						ϒurl          = λargs[1]
						ϒvideo_id     λ.Object
						ϒview_count   λ.Object
						ϒwebpage      λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("id"))
					ϒdisplay_id = func() λ.Object {
						if λv := λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("display_id")); λ.IsTrue(λv) {
							return λv
						} else {
							return ϒvideo_id
						}
					}()
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒdisplay_id)
					ϒconfig = λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
						λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewTuple(
								λ.NewStr("=\\s*({.+?})\\s*;\\s*v1ar\\b"),
								λ.NewStr("=\\s*({.+?})\\s*,\\s*[\\da-zA-Z_]+\\s*="),
							),
							ϒwebpage,
							λ.NewStr("config"),
						), λ.KWArgs{
							{Name: "default", Value: λ.NewStr("{}")},
						}),
						ϒdisplay_id,
					), λ.KWArgs{
						{Name: "transform_source", Value: ϒjs_to_json},
						{Name: "fatal", Value: λ.False},
					})
					if λ.IsTrue(ϒconfig) {
						ϒtitle = λ.GetItem(ϒconfig, λ.NewStr("title"))
						ϒformats = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
							nil,
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								return λ.NewGenerator(func(λgen λ.Generator) λ.Object {
									var (
										ϒstream λ.Object
										τmp0    λ.Object
										τmp1    λ.Object
									)
									τmp0 = λ.Cal(λ.BuiltinIter, λ.GetItem(ϒconfig, λ.NewStr("streams")))
									for {
										if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
											break
										}
										ϒstream = τmp1
										if λ.IsTrue(λ.Cal(λ.GetAttr(ϒstream, "get", nil), λ.NewStr("url"))) {
											λgen.Yield(λ.NewDictWithTable(map[λ.Object]λ.Object{
												λ.NewStr("url"):       λ.GetItem(ϒstream, λ.NewStr("url")),
												λ.NewStr("format_id"): λ.Cal(λ.GetAttr(ϒstream, "get", nil), λ.NewStr("id")),
												λ.NewStr("height"): λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
													λ.NewStr("^(\\d+)[pP]"),
													func() λ.Object {
														if λv := λ.Cal(λ.GetAttr(ϒstream, "get", nil), λ.NewStr("id")); λ.IsTrue(λv) {
															return λv
														} else {
															return λ.NewStr("")
														}
													}(),
													λ.NewStr("height"),
												), λ.KWArgs{
													{Name: "default", Value: λ.None},
												})),
											}))
										}
									}
									return λ.None
								})
							})))
						ϒthumbnail = func() λ.Object {
							if λ.IsTrue(func() λ.Object {
								if λv := λ.Cal(λ.GetAttr(ϒconfig, "get", nil), λ.NewStr("thumbCDN")); !λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Cal(λ.GetAttr(ϒconfig, "get", nil), λ.NewStr("poster"))
								}
							}()) {
								return λ.Cal(Ωparse.ϒurljoin, λ.GetItem(ϒconfig, λ.NewStr("thumbCDN")), λ.GetItem(ϒconfig, λ.NewStr("poster")))
							} else {
								return λ.None
							}
						}()
						ϒduration = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒconfig, "get", nil), λ.NewStr("length")))
					} else {
						ϒtitle = λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewTuple(
							λ.NewStr("<title>([^<]+)</title>"),
							λ.NewStr("<h1[^>]*>([^<]+)</h1>"),
						), ϒwebpage, λ.NewStr("title"))
						ϒformats = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
							nil,
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								return λ.NewGenerator(func(λgen λ.Generator) λ.Object {
									var (
										ϒfilesize   λ.Object
										ϒformat_url λ.Object
										ϒheight     λ.Object
										τmp0        λ.Object
										τmp1        λ.Object
										τmp2        λ.Object
									)
									τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfindall, λ.NewStr("<a[^>]+href=\"(/download/[^\"]+)\">[^<]*?(\\d+)p<span[^>]*>(\\d+\\s*[a-zA-Z]+)<"), ϒwebpage))
									for {
										if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
											break
										}
										τmp2 = τmp1
										ϒformat_url = λ.GetItem(τmp2, λ.NewInt(0))
										ϒheight = λ.GetItem(τmp2, λ.NewInt(1))
										ϒfilesize = λ.GetItem(τmp2, λ.NewInt(2))
										λgen.Yield(λ.NewDictWithTable(map[λ.Object]λ.Object{
											λ.NewStr("url"):             λ.Cal(Ωparse.ϒurljoin, ϒurl, ϒformat_url),
											λ.NewStr("format_id"):       λ.Mod(λ.NewStr("%sp"), ϒheight),
											λ.NewStr("height"):          λ.Cal(λ.IntType, ϒheight),
											λ.NewStr("filesize_approx"): λ.Cal(ϒparse_filesize, ϒfilesize),
										}))
									}
									return λ.None
								})
							})))
						ϒthumbnail = λ.None
						ϒduration = λ.None
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					ϒview_count = λ.Cal(ϒstr_to_int, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewTuple(
							λ.NewStr("Views:\\s*</span>\\s*<span>\\s*([\\d,.]+)"),
							λ.NewStr("class=[\"\\']views[\"\\'][^>]*><p>([\\d,.]+)"),
						),
						ϒwebpage,
						λ.NewStr("view count"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					}))
					ϒextract_list = λ.NewFunction("extract_list",
						[]λ.Param{
							{Name: "kind"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒkind = λargs[0]
								ϒs    λ.Object
							)
							ϒs = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
								λ.NewTuple(
									λ.Mod(λ.NewStr("(?s)%s:\\s*</span>\\s*<span>(.+?)</span>"), λ.Cal(λ.GetAttr(ϒkind, "capitalize", nil))),
									λ.Mod(λ.NewStr("(?s)<p[^>]*>%s:(.+?)</p>"), λ.Cal(λ.GetAttr(ϒkind, "capitalize", nil))),
								),
								ϒwebpage,
								ϒkind,
							), λ.KWArgs{
								{Name: "fatal", Value: λ.False},
							})
							return λ.Cal(Ωre.ϒfindall, λ.NewStr("<a[^>]+>([^<]+)</a>"), func() λ.Object {
								if λv := ϒs; λ.IsTrue(λv) {
									return λv
								} else {
									return λ.NewStr("")
								}
							}())
						})
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):         ϒvideo_id,
						λ.NewStr("display_id"): ϒdisplay_id,
						λ.NewStr("title"):      ϒtitle,
						λ.NewStr("thumbnail"):  ϒthumbnail,
						λ.NewStr("duration"):   ϒduration,
						λ.NewStr("view_count"): ϒview_count,
						λ.NewStr("formats"):    ϒformats,
						λ.NewStr("age_limit"):  λ.NewInt(18),
						λ.NewStr("categories"): λ.Cal(ϒextract_list, λ.NewStr("categories")),
						λ.NewStr("tags"):       λ.Cal(ϒextract_list, λ.NewStr("tags")),
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        PornComIE__TESTS,
				λ.NewStr("_VALID_URL"):    PornComIE__VALID_URL,
				λ.NewStr("_real_extract"): PornComIE__real_extract,
			})
		}())
	})
}

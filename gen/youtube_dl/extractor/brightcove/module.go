// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * brightcove/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/brightcove.py
 */

package brightcove

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωadobepass "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/adobepass"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	AdobePassIE                   λ.Object
	BrightcoveLegacyIE            λ.Object
	BrightcoveNewIE               λ.Object
	ExtractorError                λ.Object
	InfoExtractor                 λ.Object
	ϒclean_html                   λ.Object
	ϒcompat_HTTPError             λ.Object
	ϒcompat_etree_fromstring      λ.Object
	ϒcompat_parse_qs              λ.Object
	ϒcompat_urllib_parse_urlparse λ.Object
	ϒcompat_xml_parse_error       λ.Object
	ϒextract_attributes           λ.Object
	ϒfind_xpath_attr              λ.Object
	ϒfix_xml_ampersands           λ.Object
	ϒfloat_or_none                λ.Object
	ϒint_or_none                  λ.Object
	ϒjs_to_json                   λ.Object
	ϒmimetype2ext                 λ.Object
	ϒparse_iso8601                λ.Object
	ϒsmuggle_url                  λ.Object
	ϒunescapeHTML                 λ.Object
	ϒunsmuggle_url                λ.Object
	ϒupdate_url_query             λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		AdobePassIE = Ωadobepass.AdobePassIE
		ϒcompat_etree_fromstring = Ωcompat.ϒcompat_etree_fromstring
		ϒcompat_parse_qs = Ωcompat.ϒcompat_parse_qs
		ϒcompat_urllib_parse_urlparse = Ωcompat.ϒcompat_urllib_parse_urlparse
		ϒcompat_xml_parse_error = Ωcompat.ϒcompat_xml_parse_error
		ϒcompat_HTTPError = Ωcompat.ϒcompat_HTTPError
		ExtractorError = Ωutils.ExtractorError
		ϒextract_attributes = Ωutils.ϒextract_attributes
		ϒfind_xpath_attr = Ωutils.ϒfind_xpath_attr
		ϒfix_xml_ampersands = Ωutils.ϒfix_xml_ampersands
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒjs_to_json = Ωutils.ϒjs_to_json
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		ϒsmuggle_url = Ωutils.ϒsmuggle_url
		ϒunescapeHTML = Ωutils.ϒunescapeHTML
		ϒunsmuggle_url = Ωutils.ϒunsmuggle_url
		ϒupdate_url_query = Ωutils.ϒupdate_url_query
		ϒclean_html = Ωutils.ϒclean_html
		ϒmimetype2ext = Ωutils.ϒmimetype2ext
		BrightcoveLegacyIE = λ.Cal(λ.TypeType, λ.NewStr("BrightcoveLegacyIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				BrightcoveLegacyIE__VALID_URL               λ.Object
				BrightcoveLegacyIE__extract_brightcove_url  λ.Object
				BrightcoveLegacyIE__extract_brightcove_urls λ.Object
			)
			BrightcoveLegacyIE__VALID_URL = λ.NewStr("(?:https?://.*brightcove\\.com/(services|viewer).*?\\?|brightcove:)(?P<query>.*)")
			BrightcoveLegacyIE__extract_brightcove_url = λ.NewFunction("_extract_brightcove_url",
				[]λ.Param{
					{Name: "cls"},
					{Name: "webpage"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls     = λargs[0]
						ϒurls    λ.Object
						ϒwebpage = λargs[1]
					)
					ϒurls = λ.Cal(λ.GetAttr(ϒcls, "_extract_brightcove_urls", nil), ϒwebpage)
					return func() λ.Object {
						if λ.IsTrue(ϒurls) {
							return λ.GetItem(ϒurls, λ.NewInt(0))
						} else {
							return λ.None
						}
					}()
				})
			BrightcoveLegacyIE__extract_brightcove_url = λ.Cal(λ.ClassMethodType, BrightcoveLegacyIE__extract_brightcove_url)
			BrightcoveLegacyIE__extract_brightcove_urls = λ.NewFunction("_extract_brightcove_urls",
				[]λ.Param{
					{Name: "cls"},
					{Name: "webpage"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls     = λargs[0]
						ϒmatches λ.Object
						ϒurl     λ.Object
						ϒurl_m   λ.Object
						ϒwebpage = λargs[1]
					)
					ϒurl_m = λ.Cal(Ωre.ϒsearch, λ.NewStr("(?x)\n                <meta\\s+\n                    (?:property|itemprop)=([\\'\"])(?:og:video|embedURL)\\1[^>]+\n                    content=([\\'\"])(?P<url>https?://(?:secure|c)\\.brightcove.com/(?:(?!\\2).)+)\\2\n            "), ϒwebpage)
					if λ.IsTrue(ϒurl_m) {
						ϒurl = λ.Cal(ϒunescapeHTML, λ.Cal(λ.GetAttr(ϒurl_m, "group", nil), λ.NewStr("url")))
						if λ.IsTrue(func() λ.Object {
							if λv := λ.NewBool(λ.Contains(ϒurl, λ.NewStr("playerKey"))); λ.IsTrue(λv) {
								return λv
							} else if λv := λ.NewBool(λ.Contains(ϒurl, λ.NewStr("videoId"))); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(λ.Contains(ϒurl, λ.NewStr("idVideo")))
							}
						}()) {
							return λ.NewList(ϒurl)
						}
					}
					ϒmatches = λ.Cal(Ωre.ϒfindall, λ.NewStr("(?sx)<object\n            (?:\n                [^>]+?class=[\\'\"][^>]*?BrightcoveExperience.*?[\\'\"] |\n                [^>]*?>\\s*<param\\s+name=\"movie\"\\s+value=\"https?://[^/]*brightcove\\.com/\n            ).+?>\\s*</object>"), ϒwebpage)
					if λ.IsTrue(ϒmatches) {
						return λ.Cal(λ.ListType, λ.Cal(λ.FilterIteratorType, λ.None, λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
							nil,
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
									var (
										ϒm   λ.Object
										τmp0 λ.Object
										τmp1 λ.Object
									)
									τmp0 = λ.Cal(λ.BuiltinIter, ϒmatches)
									for {
										if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
											break
										}
										ϒm = τmp1
										λgy.Yield(λ.Cal(λ.GetAttr(ϒcls, "_build_brighcove_url", nil), ϒm))
									}
									return λ.None
								})
							})))))
					}
					ϒmatches = λ.Cal(Ωre.ϒfindall, λ.NewStr("(customBC\\.createVideo\\(.+?\\);)"), ϒwebpage)
					if λ.IsTrue(ϒmatches) {
						return λ.Cal(λ.ListType, λ.Cal(λ.FilterIteratorType, λ.None, λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
							nil,
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
									var (
										ϒcustom_bc λ.Object
										τmp0       λ.Object
										τmp1       λ.Object
									)
									τmp0 = λ.Cal(λ.BuiltinIter, ϒmatches)
									for {
										if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
											break
										}
										ϒcustom_bc = τmp1
										λgy.Yield(λ.Cal(λ.GetAttr(ϒcls, "_build_brighcove_url_from_js", nil), ϒcustom_bc))
									}
									return λ.None
								})
							})))))
					}
					return λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒsrc λ.Object
									τmp0 λ.Object
									τmp1 λ.Object
									τmp2 λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfindall, λ.NewStr("<iframe[^>]+src=([\\'\"])((?:https?:)?//link\\.brightcove\\.com/services/player/(?!\\1).+)\\1"), ϒwebpage))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									τmp2 = τmp1
									_ = λ.GetItem(τmp2, λ.NewInt(0))
									ϒsrc = λ.GetItem(τmp2, λ.NewInt(1))
									λgy.Yield(ϒsrc)
								}
								return λ.None
							})
						})))
				})
			BrightcoveLegacyIE__extract_brightcove_urls = λ.Cal(λ.ClassMethodType, BrightcoveLegacyIE__extract_brightcove_urls)
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"):               BrightcoveLegacyIE__VALID_URL,
				λ.NewStr("_extract_brightcove_url"):  BrightcoveLegacyIE__extract_brightcove_url,
				λ.NewStr("_extract_brightcove_urls"): BrightcoveLegacyIE__extract_brightcove_urls,
			})
		}())
		BrightcoveNewIE = λ.Cal(λ.TypeType, λ.NewStr("BrightcoveNewIE"), λ.NewTuple(AdobePassIE), func() λ.Dict {
			var (
				BrightcoveNewIE_IE_NAME                    λ.Object
				BrightcoveNewIE__VALID_URL                 λ.Object
				BrightcoveNewIE__extract_url               λ.Object
				BrightcoveNewIE__extract_urls              λ.Object
				BrightcoveNewIE__parse_brightcove_metadata λ.Object
				BrightcoveNewIE__real_extract              λ.Object
			)
			BrightcoveNewIE_IE_NAME = λ.NewStr("brightcove:new")
			BrightcoveNewIE__VALID_URL = λ.NewStr("https?://players\\.brightcove\\.net/(?P<account_id>\\d+)/(?P<player_id>[^/]+)_(?P<embed>[^/]+)/index\\.html\\?.*(?P<content_type>video|playlist)Id=(?P<video_id>\\d+|ref:[^&]+)")
			BrightcoveNewIE__extract_url = λ.NewFunction("_extract_url",
				[]λ.Param{
					{Name: "ie"},
					{Name: "webpage"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒie      = λargs[0]
						ϒurls    λ.Object
						ϒwebpage = λargs[1]
					)
					ϒurls = λ.Cal(λ.GetAttr(BrightcoveNewIE, "_extract_urls", nil), ϒie, ϒwebpage)
					return func() λ.Object {
						if λ.IsTrue(ϒurls) {
							return λ.GetItem(ϒurls, λ.NewInt(0))
						} else {
							return λ.None
						}
					}()
				})
			BrightcoveNewIE__extract_url = λ.Cal(λ.StaticMethodType, BrightcoveNewIE__extract_url)
			BrightcoveNewIE__extract_urls = λ.NewFunction("_extract_urls",
				[]λ.Param{
					{Name: "ie"},
					{Name: "webpage"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒaccount_id λ.Object
						ϒattrs      λ.Object
						ϒbc_url     λ.Object
						ϒembed      λ.Object
						ϒentries    λ.Object
						ϒie         = λargs[0]
						ϒplayer_id  λ.Object
						ϒscript_tag λ.Object
						ϒurl        λ.Object
						ϒvideo      λ.Object
						ϒvideo_id   λ.Object
						ϒwebpage    = λargs[1]
						τmp0        λ.Object
						τmp1        λ.Object
						τmp2        λ.Object
					)
					ϒentries = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfindall, λ.NewStr("<iframe[^>]+src=([\"\\'])((?:https?:)?//players\\.brightcove\\.net/\\d+/[^/]+/index\\.html.+?)\\1"), ϒwebpage))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						_ = λ.GetItem(τmp2, λ.NewInt(0))
						ϒurl = λ.GetItem(τmp2, λ.NewInt(1))
						λ.Cal(λ.GetAttr(ϒentries, "append", nil), func() λ.Object {
							if λ.IsTrue(λ.Cal(λ.GetAttr(ϒurl, "startswith", nil), λ.NewStr("http"))) {
								return ϒurl
							} else {
								return λ.Add(λ.NewStr("http:"), ϒurl)
							}
						}())
					}
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfindall, λ.NewStr("(?isx)\n                    (<video\\s+[^>]*\\bdata-video-id\\s*=\\s*['\"]?[^>]+>)\n                    (?:.*?\n                        (<script[^>]+\n                            src=[\"\\'](?:https?:)?//players\\.brightcove\\.net/\n                            (\\d+)/([^/]+)_([^/]+)/index(?:\\.min)?\\.js\n                        )\n                    )?\n                "), ϒwebpage))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒvideo = λ.GetItem(τmp2, λ.NewInt(0))
						ϒscript_tag = λ.GetItem(τmp2, λ.NewInt(1))
						ϒaccount_id = λ.GetItem(τmp2, λ.NewInt(2))
						ϒplayer_id = λ.GetItem(τmp2, λ.NewInt(3))
						ϒembed = λ.GetItem(τmp2, λ.NewInt(4))
						ϒattrs = λ.Cal(ϒextract_attributes, ϒvideo)
						ϒvideo_id = λ.Cal(λ.GetAttr(ϒattrs, "get", nil), λ.NewStr("data-video-id"))
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒvideo_id))) {
							continue
						}
						ϒaccount_id = func() λ.Object {
							if λv := ϒaccount_id; λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(ϒattrs, "get", nil), λ.NewStr("data-account"))
							}
						}()
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒaccount_id))) {
							continue
						}
						ϒplayer_id = func() λ.Object {
							if λv := ϒplayer_id; λ.IsTrue(λv) {
								return λv
							} else if λv := λ.Cal(λ.GetAttr(ϒattrs, "get", nil), λ.NewStr("data-player")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewStr("default")
							}
						}()
						ϒembed = func() λ.Object {
							if λv := ϒembed; λ.IsTrue(λv) {
								return λv
							} else if λv := λ.Cal(λ.GetAttr(ϒattrs, "get", nil), λ.NewStr("data-embed")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewStr("default")
							}
						}()
						ϒbc_url = λ.Mod(λ.NewStr("http://players.brightcove.net/%s/%s_%s/index.html?videoId=%s"), λ.NewTuple(
							ϒaccount_id,
							ϒplayer_id,
							ϒembed,
							ϒvideo_id,
						))
						if λ.IsTrue(func() λ.Object {
							if λv := λ.NewBool(!λ.IsTrue(ϒscript_tag)); !λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(!λ.IsTrue(λ.Cal(λ.GetAttr(ϒie, "_is_valid_url", nil), ϒbc_url, ϒvideo_id, λ.NewStr("possible brightcove video"))))
							}
						}()) {
							continue
						}
						λ.Cal(λ.GetAttr(ϒentries, "append", nil), ϒbc_url)
					}
					return ϒentries
				})
			BrightcoveNewIE__extract_urls = λ.Cal(λ.StaticMethodType, BrightcoveNewIE__extract_urls)
			BrightcoveNewIE__parse_brightcove_metadata = λ.NewFunction("_parse_brightcove_metadata",
				[]λ.Param{
					{Name: "self"},
					{Name: "json_data"},
					{Name: "video_id"},
					{Name: "headers", Def: λ.NewDictWithTable(map[λ.Object]λ.Object{})},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒapp_name        λ.Object
						ϒbuild_format_id λ.Object
						ϒcontainer       λ.Object
						ϒduration        λ.Object
						ϒerror           λ.Object
						ϒerrors          λ.Object
						ϒext             λ.Object
						ϒf               λ.Object
						ϒformats         λ.Object
						ϒheaders         = λargs[3]
						ϒheight          λ.Object
						ϒis_live         λ.Object
						ϒjson_data       = λargs[1]
						ϒs3_source_url   λ.Object
						ϒself            = λargs[0]
						ϒsource          λ.Object
						ϒsrc             λ.Object
						ϒstream_name     λ.Object
						ϒstreaming_src   λ.Object
						ϒsubtitles       λ.Object
						ϒtbr             λ.Object
						ϒtext_track      λ.Object
						ϒtitle           λ.Object
						ϒvideo_id        = λargs[2]
						ϒwidth           λ.Object
						τmp0             λ.Object
						τmp1             λ.Object
						τmp2             λ.Object
					)
					ϒtitle = λ.Cal(λ.GetAttr(λ.GetItem(ϒjson_data, λ.NewStr("name")), "strip", nil))
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒjson_data, "get", nil), λ.NewStr("sources"), λ.NewList()))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒsource = τmp1
						ϒcontainer = λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("container"))
						ϒext = λ.Cal(ϒmimetype2ext, λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("type")))
						ϒsrc = λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("src"))
						if λ.IsTrue(func() λ.Object {
							if λv := λ.Eq(ϒext, λ.NewStr("ism")); λ.IsTrue(λv) {
								return λv
							} else if λv := λ.Eq(ϒcontainer, λ.NewStr("WVM")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("key_systems"))
							}
						}()) {
							continue
						} else {
							if λ.IsTrue(func() λ.Object {
								if λv := λ.Eq(ϒext, λ.NewStr("m3u8")); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Eq(ϒcontainer, λ.NewStr("M2TS"))
								}
							}()) {
								if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒsrc))) {
									continue
								}
								λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
									ϒsrc,
									ϒvideo_id,
									λ.NewStr("mp4"),
									λ.NewStr("m3u8_native"),
								), λ.KWArgs{
									{Name: "m3u8_id", Value: λ.NewStr("hls")},
									{Name: "fatal", Value: λ.False},
								}))
							} else {
								if λ.IsTrue(λ.Eq(ϒext, λ.NewStr("mpd"))) {
									if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒsrc))) {
										continue
									}
									λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_mpd_formats", nil), λ.NewArgs(
										ϒsrc,
										ϒvideo_id,
										λ.NewStr("dash"),
									), λ.KWArgs{
										{Name: "fatal", Value: λ.False},
									}))
								} else {
									ϒstreaming_src = λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("streaming_src"))
									τmp2 = λ.NewTuple(
										λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("stream_name")),
										λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("app_name")),
									)
									ϒstream_name = λ.GetItem(τmp2, λ.NewInt(0))
									ϒapp_name = λ.GetItem(τmp2, λ.NewInt(1))
									if λ.IsTrue(func() λ.Object {
										if λv := λ.NewBool(!λ.IsTrue(ϒsrc)); !λ.IsTrue(λv) {
											return λv
										} else if λv := λ.NewBool(!λ.IsTrue(ϒstreaming_src)); !λ.IsTrue(λv) {
											return λv
										} else {
											return func() λ.Object {
												if λv := λ.NewBool(!λ.IsTrue(ϒstream_name)); λ.IsTrue(λv) {
													return λv
												} else {
													return λ.NewBool(!λ.IsTrue(ϒapp_name))
												}
											}()
										}
									}()) {
										continue
									}
									ϒtbr = λ.Cal(ϒfloat_or_none, λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("avg_bitrate")), λ.NewInt(1000))
									ϒheight = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("height")))
									ϒwidth = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("width")))
									ϒf = λ.NewDictWithTable(map[λ.Object]λ.Object{
										λ.NewStr("tbr"):       ϒtbr,
										λ.NewStr("filesize"):  λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("size"))),
										λ.NewStr("container"): ϒcontainer,
										λ.NewStr("ext"): func() λ.Object {
											if λv := ϒext; λ.IsTrue(λv) {
												return λv
											} else {
												return λ.Cal(λ.GetAttr(ϒcontainer, "lower", nil))
											}
										}(),
									})
									if λ.IsTrue(func() λ.Object {
										if λv := λ.Eq(ϒwidth, λ.NewInt(0)); !λ.IsTrue(λv) {
											return λv
										} else {
											return λ.Eq(ϒheight, λ.NewInt(0))
										}
									}()) {
										λ.Cal(λ.GetAttr(ϒf, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
											λ.NewStr("vcodec"): λ.NewStr("none"),
										}))
									} else {
										λ.Cal(λ.GetAttr(ϒf, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
											λ.NewStr("width"):  ϒwidth,
											λ.NewStr("height"): ϒheight,
											λ.NewStr("vcodec"): λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("codec")),
										}))
									}
									ϒbuild_format_id = λ.NewFunction("build_format_id",
										[]λ.Param{
											{Name: "kind"},
										},
										0, false, false,
										func(λargs []λ.Object) λ.Object {
											var (
												ϒformat_id λ.Object
												ϒkind      = λargs[0]
												τmp0       λ.Object
											)
											ϒformat_id = ϒkind
											if λ.IsTrue(ϒtbr) {
												τmp0 = λ.IAdd(ϒformat_id, λ.Mod(λ.NewStr("-%dk"), λ.Cal(λ.IntType, ϒtbr)))
												ϒformat_id = τmp0
											}
											if λ.IsTrue(ϒheight) {
												τmp0 = λ.IAdd(ϒformat_id, λ.Mod(λ.NewStr("-%dp"), ϒheight))
												ϒformat_id = τmp0
											}
											return ϒformat_id
										})
									if λ.IsTrue(func() λ.Object {
										if λv := ϒsrc; λ.IsTrue(λv) {
											return λv
										} else {
											return ϒstreaming_src
										}
									}()) {
										λ.Cal(λ.GetAttr(ϒf, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
											λ.NewStr("url"): func() λ.Object {
												if λv := ϒsrc; λ.IsTrue(λv) {
													return λv
												} else {
													return ϒstreaming_src
												}
											}(),
											λ.NewStr("format_id"): λ.Cal(ϒbuild_format_id, func() λ.Object {
												if λ.IsTrue(ϒsrc) {
													return λ.NewStr("http")
												} else {
													return λ.NewStr("http-streaming")
												}
											}()),
											λ.NewStr("source_preference"): func() λ.Object {
												if λ.IsTrue(ϒsrc) {
													return λ.NewInt(0)
												} else {
													return λ.Neg(λ.NewInt(1))
												}
											}(),
										}))
									} else {
										λ.Cal(λ.GetAttr(ϒf, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
											λ.NewStr("url"):       ϒapp_name,
											λ.NewStr("play_path"): ϒstream_name,
											λ.NewStr("format_id"): λ.Cal(ϒbuild_format_id, λ.NewStr("rtmp")),
										}))
									}
									λ.Cal(λ.GetAttr(ϒformats, "append", nil), ϒf)
								}
							}
						}
					}
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒformats))) {
						ϒs3_source_url = λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒjson_data, "get", nil), λ.NewStr("custom_fields"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("s3sourceurl"))
						if λ.IsTrue(ϒs3_source_url) {
							λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("url"):       ϒs3_source_url,
								λ.NewStr("format_id"): λ.NewStr("source"),
							}))
						}
					}
					ϒerrors = λ.Cal(λ.GetAttr(ϒjson_data, "get", nil), λ.NewStr("errors"))
					if λ.IsTrue(func() λ.Object {
						if λv := λ.NewBool(!λ.IsTrue(ϒformats)); !λ.IsTrue(λv) {
							return λv
						} else {
							return ϒerrors
						}
					}()) {
						ϒerror = λ.GetItem(ϒerrors, λ.NewInt(0))
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒerror, "get", nil), λ.NewStr("message")); λ.IsTrue(λv) {
								return λv
							} else if λv := λ.Cal(λ.GetAttr(ϒerror, "get", nil), λ.NewStr("error_subcode")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.GetItem(ϒerror, λ.NewStr("error_code"))
							}
						}()), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					τmp0 = λ.Cal(λ.BuiltinIter, ϒformats)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒf = τmp1
						λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒf, "setdefault", nil), λ.NewStr("http_headers"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "update", nil), ϒheaders)
					}
					ϒsubtitles = λ.NewDictWithTable(map[λ.Object]λ.Object{})
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒjson_data, "get", nil), λ.NewStr("text_tracks"), λ.NewList()))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒtext_track = τmp1
						if λ.IsTrue(λ.Cal(λ.GetAttr(ϒtext_track, "get", nil), λ.NewStr("src"))) {
							λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒsubtitles, "setdefault", nil), λ.Cal(λ.GetAttr(ϒtext_track, "get", nil), λ.NewStr("srclang")), λ.NewList()), "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("url"): λ.GetItem(ϒtext_track, λ.NewStr("src")),
							}))
						}
					}
					ϒis_live = λ.False
					ϒduration = λ.Cal(ϒfloat_or_none, λ.Cal(λ.GetAttr(ϒjson_data, "get", nil), λ.NewStr("duration")), λ.NewInt(1000))
					if λ.IsTrue(func() λ.Object {
						if λv := λ.NewBool(ϒduration != λ.None); !λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Le(ϒduration, λ.NewInt(0))
						}
					}()) {
						ϒis_live = λ.True
					}
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"): ϒvideo_id,
						λ.NewStr("title"): func() λ.Object {
							if λ.IsTrue(ϒis_live) {
								return λ.Cal(λ.GetAttr(ϒself, "_live_title", nil), ϒtitle)
							} else {
								return ϒtitle
							}
						}(),
						λ.NewStr("description"): λ.Cal(ϒclean_html, λ.Cal(λ.GetAttr(ϒjson_data, "get", nil), λ.NewStr("description"))),
						λ.NewStr("thumbnail"): func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒjson_data, "get", nil), λ.NewStr("thumbnail")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(ϒjson_data, "get", nil), λ.NewStr("poster"))
							}
						}(),
						λ.NewStr("duration"):    ϒduration,
						λ.NewStr("timestamp"):   λ.Cal(ϒparse_iso8601, λ.Cal(λ.GetAttr(ϒjson_data, "get", nil), λ.NewStr("published_at"))),
						λ.NewStr("uploader_id"): λ.Cal(λ.GetAttr(ϒjson_data, "get", nil), λ.NewStr("account_id")),
						λ.NewStr("formats"):     ϒformats,
						λ.NewStr("subtitles"):   ϒsubtitles,
						λ.NewStr("tags"):        λ.Cal(λ.GetAttr(ϒjson_data, "get", nil), λ.NewStr("tags"), λ.NewList()),
						λ.NewStr("is_live"):     ϒis_live,
					})
				})
			BrightcoveNewIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒaccount_id    λ.Object
						ϒapi_url       λ.Object
						ϒcatalog       λ.Object
						ϒcontent_type  λ.Object
						ϒcustom_fields λ.Object
						ϒembed         λ.Object
						ϒerrors        λ.Object
						ϒheaders       λ.Object
						ϒjson_data     λ.Object
						ϒmessage       λ.Object
						ϒplayer_id     λ.Object
						ϒpolicy_key    λ.Object
						ϒreferrer      λ.Object
						ϒself          = λargs[0]
						ϒsmuggled_data λ.Object
						ϒtve_token     λ.Object
						ϒurl           = λargs[1]
						ϒvideo_id      λ.Object
						ϒwebpage       λ.Object
						τmp0           λ.Object
						τmp1           λ.Object
					)
					_ = τmp0
					_ = τmp1
					τmp0 = λ.Cal(ϒunsmuggle_url, ϒurl, λ.NewDictWithTable(map[λ.Object]λ.Object{}))
					ϒurl = λ.GetItem(τmp0, λ.NewInt(0))
					ϒsmuggled_data = λ.GetItem(τmp0, λ.NewInt(1))
					λ.Cal(λ.GetAttr(ϒself, "_initialize_geo_bypass", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("countries"): λ.Cal(λ.GetAttr(ϒsmuggled_data, "get", nil), λ.NewStr("geo_countries")),
						λ.NewStr("ip_blocks"): λ.Cal(λ.GetAttr(ϒsmuggled_data, "get", nil), λ.NewStr("geo_ip_blocks")),
					}))
					τmp0 = λ.Cal(λ.GetAttr(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups", nil))
					ϒaccount_id = λ.GetItem(τmp0, λ.NewInt(0))
					ϒplayer_id = λ.GetItem(τmp0, λ.NewInt(1))
					ϒembed = λ.GetItem(τmp0, λ.NewInt(2))
					ϒcontent_type = λ.GetItem(τmp0, λ.NewInt(3))
					ϒvideo_id = λ.GetItem(τmp0, λ.NewInt(4))
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), λ.Mod(λ.NewStr("http://players.brightcove.net/%s/%s_%s/index.min.js"), λ.NewTuple(
						ϒaccount_id,
						ϒplayer_id,
						ϒembed,
					)), ϒvideo_id)
					ϒpolicy_key = λ.None
					ϒcatalog = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("catalog\\(({.+?})\\);"),
						ϒwebpage,
						λ.NewStr("catalog"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(ϒcatalog) {
						ϒcatalog = λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
							λ.Cal(ϒjs_to_json, ϒcatalog),
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "fatal", Value: λ.False},
						})
						if λ.IsTrue(ϒcatalog) {
							ϒpolicy_key = λ.Cal(λ.GetAttr(ϒcatalog, "get", nil), λ.NewStr("policyKey"))
						}
					}
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒpolicy_key))) {
						ϒpolicy_key = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewStr("policyKey\\s*:\\s*([\"\\'])(?P<pk>.+?)\\1"),
							ϒwebpage,
							λ.NewStr("policy key"),
						), λ.KWArgs{
							{Name: "group", Value: λ.NewStr("pk")},
						})
					}
					ϒapi_url = λ.Mod(λ.NewStr("https://edge.api.brightcove.com/playback/v1/accounts/%s/%ss/%s"), λ.NewTuple(
						ϒaccount_id,
						ϒcontent_type,
						ϒvideo_id,
					))
					ϒheaders = λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("Accept"): λ.Mod(λ.NewStr("application/json;pk=%s"), ϒpolicy_key),
					})
					ϒreferrer = λ.Cal(λ.GetAttr(ϒsmuggled_data, "get", nil), λ.NewStr("referrer"))
					if λ.IsTrue(ϒreferrer) {
						λ.Cal(λ.GetAttr(ϒheaders, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("Referer"): ϒreferrer,
							λ.NewStr("Origin"):  λ.Cal(λ.GetAttr(λ.Cal(Ωre.ϒsearch, λ.NewStr("https?://[^/]+"), ϒreferrer), "group", nil), λ.NewInt(0)),
						}))
					}
					τmp0, τmp1 = func() (λexit λ.Object, λret λ.Object) {
						defer λ.CatchMulti(
							nil,
							&λ.Catcher{ExtractorError, func(λex λ.BaseException) {
								var ϒe λ.Object = λex
								if λ.IsTrue(func() λ.Object {
									if λv := λ.Cal(λ.BuiltinIsInstance, λ.GetAttr(ϒe, "cause", nil), ϒcompat_HTTPError); !λ.IsTrue(λv) {
										return λv
									} else {
										return λ.Eq(λ.GetAttr(λ.GetAttr(ϒe, "cause", nil), "code", nil), λ.NewInt(403))
									}
								}()) {
									ϒjson_data = λ.GetItem(λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(λ.GetAttr(ϒe, "cause", nil), "read", nil)), "decode", nil)), ϒvideo_id), λ.NewInt(0))
									ϒmessage = func() λ.Object {
										if λv := λ.Cal(λ.GetAttr(ϒjson_data, "get", nil), λ.NewStr("message")); λ.IsTrue(λv) {
											return λv
										} else {
											return λ.GetItem(ϒjson_data, λ.NewStr("error_code"))
										}
									}()
									if λ.IsTrue(λ.Eq(λ.Cal(λ.GetAttr(ϒjson_data, "get", nil), λ.NewStr("error_subcode")), λ.NewStr("CLIENT_GEO"))) {
										λ.Call(λ.GetAttr(ϒself, "raise_geo_restricted", nil), nil, λ.KWArgs{
											{Name: "msg", Value: ϒmessage},
										})
									}
									panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(ϒmessage), λ.KWArgs{
										{Name: "expected", Value: λ.True},
									})))
								}
								panic(λ.Raise(λex))
							}},
						)
						ϒjson_data = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
							ϒapi_url,
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "headers", Value: ϒheaders},
						})
						return λ.BlockExitNormally, nil
					}()
					ϒerrors = λ.Cal(λ.GetAttr(ϒjson_data, "get", nil), λ.NewStr("errors"))
					if λ.IsTrue(func() λ.Object {
						if λv := ϒerrors; !λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Eq(λ.Cal(λ.GetAttr(λ.GetItem(ϒerrors, λ.NewInt(0)), "get", nil), λ.NewStr("error_subcode")), λ.NewStr("TVE_AUTH"))
						}
					}()) {
						ϒcustom_fields = λ.GetItem(ϒjson_data, λ.NewStr("custom_fields"))
						ϒtve_token = λ.Cal(λ.GetAttr(ϒself, "_extract_mvpd_auth", nil), λ.GetItem(ϒsmuggled_data, λ.NewStr("source_url")), ϒvideo_id, λ.GetItem(ϒcustom_fields, λ.NewStr("bcadobepassrequestorid")), λ.GetItem(ϒcustom_fields, λ.NewStr("bcadobepassresourceid")))
						ϒjson_data = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
							ϒapi_url,
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "headers", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("Accept"): λ.Mod(λ.NewStr("application/json;pk=%s"), ϒpolicy_key),
							})},
							{Name: "query", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("tveToken"): ϒtve_token,
							})},
						})
					}
					if λ.IsTrue(λ.Eq(ϒcontent_type, λ.NewStr("playlist"))) {
						return λ.Cal(λ.GetAttr(ϒself, "playlist_result", nil), λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
							nil,
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
									var (
										ϒvid λ.Object
										τmp0 λ.Object
										τmp1 λ.Object
									)
									τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒjson_data, "get", nil), λ.NewStr("videos"), λ.NewList()))
									for {
										if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
											break
										}
										ϒvid = τmp1
										if λ.IsTrue(λ.Cal(λ.GetAttr(ϒvid, "get", nil), λ.NewStr("id"))) {
											λgy.Yield(λ.Cal(λ.GetAttr(ϒself, "_parse_brightcove_metadata", nil), ϒvid, λ.Cal(λ.GetAttr(ϒvid, "get", nil), λ.NewStr("id")), ϒheaders))
										}
									}
									return λ.None
								})
							}))), λ.Cal(λ.GetAttr(ϒjson_data, "get", nil), λ.NewStr("id")), λ.Cal(λ.GetAttr(ϒjson_data, "get", nil), λ.NewStr("name")), λ.Cal(λ.GetAttr(ϒjson_data, "get", nil), λ.NewStr("description")))
					}
					return λ.Call(λ.GetAttr(ϒself, "_parse_brightcove_metadata", nil), λ.NewArgs(
						ϒjson_data,
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "headers", Value: ϒheaders},
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):                    BrightcoveNewIE_IE_NAME,
				λ.NewStr("_VALID_URL"):                 BrightcoveNewIE__VALID_URL,
				λ.NewStr("_extract_url"):               BrightcoveNewIE__extract_url,
				λ.NewStr("_extract_urls"):              BrightcoveNewIE__extract_urls,
				λ.NewStr("_parse_brightcove_metadata"): BrightcoveNewIE__parse_brightcove_metadata,
				λ.NewStr("_real_extract"):              BrightcoveNewIE__real_extract,
			})
		}())
	})
}

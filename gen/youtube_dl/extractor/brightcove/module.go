// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * brightcove/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/brightcove.py
 */

package brightcove

import (
	Ωjson "github.com/tenta-browser/go-video-downloader/gen/json"
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωparse "github.com/tenta-browser/go-video-downloader/gen/urllib/parse"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωadobepass "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/adobepass"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	AdobePassIE                   λ.Object
	BrightcoveLegacyIE            λ.Object
	BrightcoveNewIE               λ.Object
	ExtractorError                λ.Object
	InfoExtractor                 λ.Object
	ϒclean_html                   λ.Object
	ϒcompat_HTTPError             λ.Object
	ϒcompat_etree_fromstring      λ.Object
	ϒcompat_parse_qs              λ.Object
	ϒcompat_str                   λ.Object
	ϒcompat_urllib_parse_urlparse λ.Object
	ϒcompat_xml_parse_error       λ.Object
	ϒdetermine_ext                λ.Object
	ϒextract_attributes           λ.Object
	ϒfind_xpath_attr              λ.Object
	ϒfix_xml_ampersands           λ.Object
	ϒfloat_or_none                λ.Object
	ϒint_or_none                  λ.Object
	ϒjs_to_json                   λ.Object
	ϒmimetype2ext                 λ.Object
	ϒparse_iso8601                λ.Object
	ϒunescapeHTML                 λ.Object
	ϒunsmuggle_url                λ.Object
	ϒupdate_url_query             λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		AdobePassIE = Ωadobepass.AdobePassIE
		ϒcompat_etree_fromstring = Ωcompat.ϒcompat_etree_fromstring
		ϒcompat_parse_qs = Ωcompat.ϒcompat_parse_qs
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒcompat_urllib_parse_urlparse = Ωcompat.ϒcompat_urllib_parse_urlparse
		ϒcompat_xml_parse_error = Ωcompat.ϒcompat_xml_parse_error
		ϒcompat_HTTPError = Ωcompat.ϒcompat_HTTPError
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ExtractorError = Ωutils.ExtractorError
		ϒextract_attributes = Ωutils.ϒextract_attributes
		ϒfind_xpath_attr = Ωutils.ϒfind_xpath_attr
		ϒfix_xml_ampersands = Ωutils.ϒfix_xml_ampersands
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒjs_to_json = Ωutils.ϒjs_to_json
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		ϒunescapeHTML = Ωutils.ϒunescapeHTML
		ϒunsmuggle_url = Ωutils.ϒunsmuggle_url
		ϒupdate_url_query = Ωutils.ϒupdate_url_query
		ϒclean_html = Ωutils.ϒclean_html
		ϒmimetype2ext = Ωutils.ϒmimetype2ext
		BrightcoveLegacyIE = λ.Cal(λ.TypeType, λ.NewStr("BrightcoveLegacyIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				BrightcoveLegacyIE_IE_NAME                  λ.Object
				BrightcoveLegacyIE__FEDERATED_URL           λ.Object
				BrightcoveLegacyIE__TESTS                   λ.Object
				BrightcoveLegacyIE__VALID_URL               λ.Object
				BrightcoveLegacyIE__extract_brightcove_url  λ.Object
				BrightcoveLegacyIE__extract_brightcove_urls λ.Object
				BrightcoveLegacyIE__extract_video_info      λ.Object
				BrightcoveLegacyIE__get_playlist_info       λ.Object
				BrightcoveLegacyIE__get_video_info          λ.Object
				BrightcoveLegacyIE__real_extract            λ.Object
			)
			BrightcoveLegacyIE_IE_NAME = λ.NewStr("brightcove:legacy")
			BrightcoveLegacyIE__VALID_URL = λ.NewStr("(?:https?://.*brightcove\\.com/(services|viewer).*?\\?|brightcove:)(?P<query>.*)")
			BrightcoveLegacyIE__FEDERATED_URL = λ.NewStr("http://c.brightcove.com/services/viewer/htmlFederated")
			BrightcoveLegacyIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):  λ.NewStr("http://c.brightcove.com/services/viewer/htmlFederated?playerID=1654948606001&flashID=myExperience&%40videoPlayer=2371591881001"),
					λ.NewStr("md5"):  λ.NewStr("5423e113865d26e40624dce2e4b45d95"),
					λ.NewStr("note"): λ.NewStr("Test Brightcove downloads and detection in GenericIE"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("2371591881001"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Xavier Sala i Martín: “Un banc que no presta és un banc zombi que no serveix per a res”"),
						λ.NewStr("uploader"):    λ.NewStr("8TV"),
						λ.NewStr("description"): λ.NewStr("md5:a950cc4285c43e44d763d036710cd9cd"),
						λ.NewStr("timestamp"):   λ.NewInt(1368213670),
						λ.NewStr("upload_date"): λ.NewStr("20130510"),
						λ.NewStr("uploader_id"): λ.NewStr("1589608506001"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://c.brightcove.com/services/viewer/htmlFederated?playerID=1217746023001&flashID=myPlayer&%40videoPlayer=1785452137001"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("1785452137001"),
						λ.NewStr("ext"):         λ.NewStr("flv"),
						λ.NewStr("title"):       λ.NewStr("JVMLS 2012: Arrays 2.0 - Opportunities and Challenges"),
						λ.NewStr("description"): λ.NewStr("John Rose speaks at the JVM Language Summit, August 1, 2012."),
						λ.NewStr("uploader"):    λ.NewStr("Oracle"),
						λ.NewStr("timestamp"):   λ.NewInt(1344975024),
						λ.NewStr("upload_date"): λ.NewStr("20120814"),
						λ.NewStr("uploader_id"): λ.NewStr("1460825906"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://c.brightcove.com/services/viewer/federated_f9?&playerID=1265504713001&publisherID=AQ%7E%7E%2CAAABBzUwv1E%7E%2CxP-xFHVUstiMFlNYfvF4G9yFnNaqCw_9&videoID=2750934548001"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("2750934548001"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("This Bracelet Acts as a Personal Thermostat"),
						λ.NewStr("description"): λ.NewStr("md5:547b78c64f4112766ccf4e151c20b6a0"),
						λ.NewStr("uploader"):    λ.NewStr("Mashable"),
						λ.NewStr("timestamp"):   λ.NewInt(1382041798),
						λ.NewStr("upload_date"): λ.NewStr("20131017"),
						λ.NewStr("uploader_id"): λ.NewStr("1130468786001"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://link.brightcove.com/services/player/bcpid756015033001?bckey=AQ~~,AAAApYJi_Ck~,GxhXCegT1Dp39ilhXuxMJxasUhVNZiil&bctid=2878862109001"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("2878862109001"),
						λ.NewStr("ext"):         λ.NewStr("mp4"),
						λ.NewStr("title"):       λ.NewStr("Lost in Motion II"),
						λ.NewStr("description"): λ.NewStr("md5:363109c02998fee92ec02211bd8000df"),
						λ.NewStr("uploader"):    λ.NewStr("National Ballet of Canada"),
					}),
					λ.NewStr("skip"): λ.NewStr("Video gone"),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://c.brightcove.com/services/viewer/htmlFederated?%40videoPlayer=ref%3Aevent-stream-356&linkBaseURL=http%3A%2F%2Fwww.redbull.com%2Fen%2Fbike%2Fvideos%2F1331655630249%2Freplay-uci-fort-william-2014-dh&playerKey=AQ%7E%7E%2CAAAApYJ7UqE%7E%2Cxqr_zXk0I-zzNndy8NlHogrCb5QdyZRf&playerID=1398061561001#__youtubedl_smuggle=%7B%22Referer%22%3A+%22http%3A%2F%2Fwww.redbull.com%2Fen%2Fbike%2Fstories%2F1331655643987%2Freplay-uci-dh-world-cup-2014-from-fort-william%22%7D"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          λ.NewStr("3750436379001"),
						λ.NewStr("ext"):         λ.NewStr("flv"),
						λ.NewStr("title"):       λ.NewStr("UCI MTB World Cup 2014: Fort William, UK - Downhill Finals"),
						λ.NewStr("uploader"):    λ.NewStr("RBTV Old (do not use)"),
						λ.NewStr("description"): λ.NewStr("UCI MTB World Cup 2014: Fort William, UK - Downhill Finals"),
						λ.NewStr("timestamp"):   λ.NewInt(1409122195),
						λ.NewStr("upload_date"): λ.NewStr("20140827"),
						λ.NewStr("uploader_id"): λ.NewStr("710858724001"),
					}),
					λ.NewStr("skip"): λ.NewStr("Video gone"),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://c.brightcove.com/services/viewer/htmlFederated?playerID=3550052898001&playerKey=AQ%7E%7E%2CAAABmA9XpXk%7E%2C-Kp7jNgisre1fG5OdqpAFUTcs0lP_ZoL"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("title"): λ.NewStr("Sealife"),
						λ.NewStr("id"):    λ.NewStr("3550319591001"),
					}),
					λ.NewStr("playlist_mincount"): λ.NewInt(7),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://c.brightcove.com/services/json/experience/runtime/?command=get_programming_for_experience&playerKey=AQ%7E%7E,AAABXlLMdok%7E,NJ4EoMlZ4rZdx9eU1rkMVd8EaYPBBUlg"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):    λ.NewStr("1522758701001"),
						λ.NewStr("title"): λ.NewStr("Lesson 08"),
					}),
					λ.NewStr("playlist_mincount"): λ.NewInt(10),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://link.brightcove.com/services/player/bcpid1722935254001/?bctid=5360463607001&autoStart=false&secureConnections=true&width=650&height=350"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			BrightcoveLegacyIE__extract_brightcove_url = λ.NewFunction("_extract_brightcove_url",
				[]λ.Param{
					{Name: "cls"},
					{Name: "webpage"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls     = λargs[0]
						ϒurls    λ.Object
						ϒwebpage = λargs[1]
					)
					λ.NewStr("Try to extract the brightcove url from the webpage, returns None\n        if it can't be found\n        ")
					ϒurls = λ.Cal(λ.GetAttr(ϒcls, "_extract_brightcove_urls", nil), ϒwebpage)
					return func() λ.Object {
						if λ.IsTrue(ϒurls) {
							return λ.GetItem(ϒurls, λ.NewInt(0))
						} else {
							return λ.None
						}
					}()
				})
			BrightcoveLegacyIE__extract_brightcove_url = λ.Cal(λ.ClassMethodType, BrightcoveLegacyIE__extract_brightcove_url)
			BrightcoveLegacyIE__extract_brightcove_urls = λ.NewFunction("_extract_brightcove_urls",
				[]λ.Param{
					{Name: "cls"},
					{Name: "webpage"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls     = λargs[0]
						ϒmatches λ.Object
						ϒurl     λ.Object
						ϒurl_m   λ.Object
						ϒwebpage = λargs[1]
					)
					λ.NewStr("Return a list of all Brightcove URLs from the webpage ")
					ϒurl_m = λ.Cal(Ωre.ϒsearch, λ.NewStr("(?x)\n                <meta\\s+\n                    (?:property|itemprop)=([\\'\"])(?:og:video|embedURL)\\1[^>]+\n                    content=([\\'\"])(?P<url>https?://(?:secure|c)\\.brightcove.com/(?:(?!\\2).)+)\\2\n            "), ϒwebpage)
					if λ.IsTrue(ϒurl_m) {
						ϒurl = λ.Cal(ϒunescapeHTML, λ.Cal(λ.GetAttr(ϒurl_m, "group", nil), λ.NewStr("url")))
						if λ.IsTrue(func() λ.Object {
							if λv := λ.NewBool(λ.Contains(ϒurl, λ.NewStr("playerKey"))); λ.IsTrue(λv) {
								return λv
							} else if λv := λ.NewBool(λ.Contains(ϒurl, λ.NewStr("videoId"))); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(λ.Contains(ϒurl, λ.NewStr("idVideo")))
							}
						}()) {
							return λ.NewList(ϒurl)
						}
					}
					ϒmatches = λ.Cal(Ωre.ϒfindall, λ.NewStr("(?sx)<object\n            (?:\n                [^>]+?class=[\\'\"][^>]*?BrightcoveExperience.*?[\\'\"] |\n                [^>]*?>\\s*<param\\s+name=\"movie\"\\s+value=\"https?://[^/]*brightcove\\.com/\n            ).+?>\\s*</object>"), ϒwebpage)
					if λ.IsTrue(ϒmatches) {
						return λ.Cal(λ.ListType, λ.Cal(λ.FilterIteratorType, λ.None, λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
							nil,
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
									var (
										ϒm   λ.Object
										τmp0 λ.Object
										τmp1 λ.Object
									)
									τmp0 = λ.Cal(λ.BuiltinIter, ϒmatches)
									for {
										if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
											break
										}
										ϒm = τmp1
										λgy.Yield(λ.Cal(λ.GetAttr(ϒcls, "_build_brighcove_url", nil), ϒm))
									}
									return λ.None
								})
							})))))
					}
					ϒmatches = λ.Cal(Ωre.ϒfindall, λ.NewStr("(customBC\\.createVideo\\(.+?\\);)"), ϒwebpage)
					if λ.IsTrue(ϒmatches) {
						return λ.Cal(λ.ListType, λ.Cal(λ.FilterIteratorType, λ.None, λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
							nil,
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
									var (
										ϒcustom_bc λ.Object
										τmp0       λ.Object
										τmp1       λ.Object
									)
									τmp0 = λ.Cal(λ.BuiltinIter, ϒmatches)
									for {
										if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
											break
										}
										ϒcustom_bc = τmp1
										λgy.Yield(λ.Cal(λ.GetAttr(ϒcls, "_build_brighcove_url_from_js", nil), ϒcustom_bc))
									}
									return λ.None
								})
							})))))
					}
					return λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒsrc λ.Object
									τmp0 λ.Object
									τmp1 λ.Object
									τmp2 λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfindall, λ.NewStr("<iframe[^>]+src=([\\'\"])((?:https?:)?//link\\.brightcove\\.com/services/player/(?!\\1).+)\\1"), ϒwebpage))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									τmp2 = τmp1
									_ = λ.GetItem(τmp2, λ.NewInt(0))
									ϒsrc = λ.GetItem(τmp2, λ.NewInt(1))
									λgy.Yield(ϒsrc)
								}
								return λ.None
							})
						})))
				})
			BrightcoveLegacyIE__extract_brightcove_urls = λ.Cal(λ.ClassMethodType, BrightcoveLegacyIE__extract_brightcove_urls)
			BrightcoveLegacyIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒmobj          λ.Object
						ϒplayer_key    λ.Object
						ϒquery         λ.Object
						ϒquery_str     λ.Object
						ϒreferer       λ.Object
						ϒself          = λargs[0]
						ϒsmuggled_data λ.Object
						ϒurl           = λargs[1]
						ϒvideoPlayer   λ.Object
						τmp0           λ.Object
					)
					τmp0 = λ.Cal(ϒunsmuggle_url, ϒurl, λ.NewDictWithTable(map[λ.Object]λ.Object{}))
					ϒurl = λ.GetItem(τmp0, λ.NewInt(0))
					ϒsmuggled_data = λ.GetItem(τmp0, λ.NewInt(1))
					ϒurl = λ.Cal(Ωre.ϒsub, λ.NewStr("(?<=[?&])(videoI(d|D)|idVideo|bctid)"), λ.NewStr("%40videoPlayer"), ϒurl)
					ϒurl = λ.Cal(Ωre.ϒsub, λ.NewStr("(?<=[?&])bckey"), λ.NewStr("playerKey"), ϒurl)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒquery_str = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("query"))
					ϒquery = λ.Cal(Ωparse.ϒparse_qs, ϒquery_str)
					ϒvideoPlayer = λ.Cal(λ.GetAttr(ϒquery, "get", nil), λ.NewStr("@videoPlayer"))
					if λ.IsTrue(ϒvideoPlayer) {
						ϒreferer = λ.Cal(λ.GetAttr(ϒsmuggled_data, "get", nil), λ.NewStr("Referer"), ϒurl)
						if λ.IsTrue(λ.NewBool(!λ.Contains(ϒquery, λ.NewStr("playerID")))) {
							ϒmobj = λ.Cal(Ωre.ϒsearch, λ.NewStr("/bcpid(\\d+)"), ϒurl)
							if λ.IsTrue(λ.NewBool(ϒmobj != λ.None)) {
								λ.SetItem(ϒquery, λ.NewStr("playerID"), λ.NewList(λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewInt(1))))
							}
						}
						return λ.Call(λ.GetAttr(ϒself, "_get_video_info", nil), λ.NewArgs(
							λ.GetItem(ϒvideoPlayer, λ.NewInt(0)),
							ϒquery,
						), λ.KWArgs{
							{Name: "referer", Value: ϒreferer},
						})
					} else {
						if λ.IsTrue(λ.NewBool(λ.Contains(ϒquery, λ.NewStr("playerKey")))) {
							ϒplayer_key = λ.GetItem(ϒquery, λ.NewStr("playerKey"))
							return λ.Cal(λ.GetAttr(ϒself, "_get_playlist_info", nil), λ.GetItem(ϒplayer_key, λ.NewInt(0)))
						} else {
							panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.NewStr("Cannot find playerKey= variable. Did you forget quotes in a shell invocation?")), λ.KWArgs{
								{Name: "expected", Value: λ.True},
							})))
						}
					}
					return λ.None
				})
			BrightcoveLegacyIE__get_video_info = λ.NewFunction("_get_video_info",
				[]λ.Param{
					{Name: "self"},
					{Name: "video_id"},
					{Name: "query"},
					{Name: "referer", Def: λ.None},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒenc_pub_id   λ.Object
						ϒerror_msg    λ.Object
						ϒheaders      λ.Object
						ϒinfo         λ.Object
						ϒlinkBase     λ.Object
						ϒplayer_id    λ.Object
						ϒplayer_key   λ.Object
						ϒplayer_page  λ.Object
						ϒpublisher_id λ.Object
						ϒquery        = λargs[2]
						ϒreferer      = λargs[3]
						ϒself         = λargs[0]
						ϒvideo_id     = λargs[1]
						ϒvideo_info   λ.Object
						ϒwebpage      λ.Object
					)
					ϒheaders = λ.NewDictWithTable(map[λ.Object]λ.Object{})
					ϒlinkBase = λ.Cal(λ.GetAttr(ϒquery, "get", nil), λ.NewStr("linkBaseURL"))
					if λ.IsTrue(λ.NewBool(ϒlinkBase != λ.None)) {
						ϒreferer = λ.GetItem(ϒlinkBase, λ.NewInt(0))
					}
					if λ.IsTrue(λ.NewBool(ϒreferer != λ.None)) {
						λ.SetItem(ϒheaders, λ.NewStr("Referer"), ϒreferer)
					}
					ϒwebpage = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
						λ.GetAttr(ϒself, "_FEDERATED_URL", nil),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "headers", Value: ϒheaders},
						{Name: "query", Value: ϒquery},
					})
					ϒerror_msg = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
						λ.NewStr("<h1>We're sorry.</h1>([\\s\\n]*<p>.*?</p>)+"),
						ϒwebpage,
						λ.NewStr("error message"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(λ.NewBool(ϒerror_msg != λ.None)) {
						ϒpublisher_id = λ.Cal(λ.GetAttr(ϒquery, "get", nil), λ.NewStr("publisherId"))
						if λ.IsTrue(func() λ.Object {
							if λv := ϒpublisher_id; !λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(λ.GetItem(ϒpublisher_id, λ.NewInt(0)), "isdigit", nil))
							}
						}()) {
							ϒpublisher_id = λ.GetItem(ϒpublisher_id, λ.NewInt(0))
						}
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒpublisher_id))) {
							ϒplayer_key = λ.Cal(λ.GetAttr(ϒquery, "get", nil), λ.NewStr("playerKey"))
							if λ.IsTrue(func() λ.Object {
								if λv := ϒplayer_key; !λ.IsTrue(λv) {
									return λv
								} else {
									return λ.NewBool(λ.Contains(λ.GetItem(ϒplayer_key, λ.NewInt(0)), λ.NewStr(",")))
								}
							}()) {
								ϒplayer_key = λ.GetItem(ϒplayer_key, λ.NewInt(0))
							} else {
								ϒplayer_id = λ.Cal(λ.GetAttr(ϒquery, "get", nil), λ.NewStr("playerID"))
								if λ.IsTrue(func() λ.Object {
									if λv := ϒplayer_id; !λ.IsTrue(λv) {
										return λv
									} else {
										return λ.Cal(λ.GetAttr(λ.GetItem(ϒplayer_id, λ.NewInt(0)), "isdigit", nil))
									}
								}()) {
									ϒplayer_page = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
										λ.Add(λ.NewStr("http://link.brightcove.com/services/player/bcpid"), λ.GetItem(ϒplayer_id, λ.NewInt(0))),
										ϒvideo_id,
									), λ.KWArgs{
										{Name: "headers", Value: ϒheaders},
										{Name: "fatal", Value: λ.False},
									})
									if λ.IsTrue(ϒplayer_page) {
										ϒplayer_key = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
											λ.NewStr("<param\\s+name=\"playerKey\"\\s+value=\"([\\w~,-]+)\""),
											ϒplayer_page,
											λ.NewStr("player key"),
										), λ.KWArgs{
											{Name: "fatal", Value: λ.False},
										})
									}
								}
							}
							if λ.IsTrue(ϒplayer_key) {
								ϒenc_pub_id = λ.Cal(λ.GetAttr(λ.GetItem(λ.Cal(λ.GetAttr(ϒplayer_key, "split", nil), λ.NewStr(",")), λ.NewInt(1)), "replace", nil), λ.NewStr("~"), λ.NewStr("="))
								ϒpublisher_id = λ.GetItem(λ.Cal(λ.GetAttr(λ.None, "unpack", nil), λ.NewStr(">Q"), λ.Cal(λ.None, ϒenc_pub_id)), λ.NewInt(0))
							}
							if λ.IsTrue(ϒpublisher_id) {
								return λ.Cal(λ.GetAttr(ϒself, "_brightcove_new_url_result", nil), ϒpublisher_id, ϒvideo_id)
							}
						}
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.NewStr("brightcove said: %s"), ϒerror_msg)), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					λ.Cal(λ.GetAttr(ϒself, "report_extraction", nil), ϒvideo_id)
					ϒinfo = λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("var experienceJSON = ({.*});"), ϒwebpage, λ.NewStr("json"))
					ϒinfo = λ.GetItem(λ.Cal(Ωjson.ϒloads, ϒinfo), λ.NewStr("data"))
					ϒvideo_info = λ.GetItem(λ.GetItem(λ.GetItem(ϒinfo, λ.NewStr("programmedContent")), λ.NewStr("videoPlayer")), λ.NewStr("mediaDTO"))
					λ.SetItem(ϒvideo_info, λ.NewStr("_youtubedl_adServerURL"), λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("adServerURL")))
					return λ.Cal(λ.GetAttr(ϒself, "_extract_video_info", nil), ϒvideo_info)
				})
			BrightcoveLegacyIE__get_playlist_info = λ.NewFunction("_get_playlist_info",
				[]λ.Param{
					{Name: "self"},
					{Name: "player_key"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒinfo_url      λ.Object
						ϒjson_data     λ.Object
						ϒplayer_key    = λargs[1]
						ϒplaylist_dto  λ.Object
						ϒplaylist_info λ.Object
						ϒself          = λargs[0]
						ϒvideos        λ.Object
					)
					ϒinfo_url = λ.Mod(λ.NewStr("http://c.brightcove.com/services/json/experience/runtime/?command=get_programming_for_experience&playerKey=%s"), ϒplayer_key)
					ϒplaylist_info = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒinfo_url, ϒplayer_key, λ.NewStr("Downloading playlist information"))
					ϒjson_data = λ.Cal(Ωjson.ϒloads, ϒplaylist_info)
					if λ.IsTrue(λ.NewBool(λ.Contains(ϒjson_data, λ.NewStr("videoList")))) {
						ϒplaylist_info = λ.GetItem(ϒjson_data, λ.NewStr("videoList"))
						ϒplaylist_dto = λ.GetItem(ϒplaylist_info, λ.NewStr("mediaCollectionDTO"))
					} else {
						if λ.IsTrue(λ.NewBool(λ.Contains(ϒjson_data, λ.NewStr("playlistTabs")))) {
							ϒplaylist_info = λ.GetItem(ϒjson_data, λ.NewStr("playlistTabs"))
							ϒplaylist_dto = λ.GetItem(λ.GetItem(λ.GetItem(ϒplaylist_info, λ.NewStr("lineupListDTO")), λ.NewStr("playlistDTOs")), λ.NewInt(0))
						} else {
							panic(λ.Raise(λ.Cal(ExtractorError, λ.NewStr("Empty playlist"))))
						}
					}
					ϒvideos = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒvideo_info λ.Object
									τmp0        λ.Object
									τmp1        λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.GetItem(ϒplaylist_dto, λ.NewStr("videoDTOs")))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒvideo_info = τmp1
									λgy.Yield(λ.Cal(λ.GetAttr(ϒself, "_extract_video_info", nil), ϒvideo_info))
								}
								return λ.None
							})
						})))
					return λ.Call(λ.GetAttr(ϒself, "playlist_result", nil), λ.NewArgs(ϒvideos), λ.KWArgs{
						{Name: "playlist_id", Value: λ.Mod(λ.NewStr("%s"), λ.GetItem(ϒplaylist_info, λ.NewStr("id")))},
						{Name: "playlist_title", Value: λ.GetItem(ϒplaylist_dto, λ.NewStr("displayName"))},
					})
				})
			BrightcoveLegacyIE__extract_video_info = λ.NewFunction("_extract_video_info",
				[]λ.Param{
					{Name: "self"},
					{Name: "video_info"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒa_format     λ.Object
						ϒadServerURL  λ.Object
						ϒad_info      λ.Object
						ϒext          λ.Object
						ϒformats      λ.Object
						ϒinfo         λ.Object
						ϒpublisher_id λ.Object
						ϒrend         λ.Object
						ϒrenditions   λ.Object
						ϒself         = λargs[0]
						ϒtbr          λ.Object
						ϒuploader_id  λ.Object
						ϒurl          λ.Object
						ϒurl_comp     λ.Object
						ϒvideo_id     λ.Object
						ϒvideo_info   = λargs[1]
						τmp0          λ.Object
						τmp1          λ.Object
					)
					ϒvideo_id = λ.Cal(ϒcompat_str, λ.GetItem(ϒvideo_info, λ.NewStr("id")))
					ϒpublisher_id = λ.Cal(λ.GetAttr(ϒvideo_info, "get", nil), λ.NewStr("publisherId"))
					ϒinfo = λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):          ϒvideo_id,
						λ.NewStr("title"):       λ.Cal(λ.GetAttr(λ.GetItem(ϒvideo_info, λ.NewStr("displayName")), "strip", nil)),
						λ.NewStr("description"): λ.Cal(λ.GetAttr(ϒvideo_info, "get", nil), λ.NewStr("shortDescription")),
						λ.NewStr("thumbnail"): func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒvideo_info, "get", nil), λ.NewStr("videoStillURL")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(ϒvideo_info, "get", nil), λ.NewStr("thumbnailURL"))
							}
						}(),
						λ.NewStr("uploader"): λ.Cal(λ.GetAttr(ϒvideo_info, "get", nil), λ.NewStr("publisherName")),
						λ.NewStr("uploader_id"): func() λ.Object {
							if λ.IsTrue(ϒpublisher_id) {
								return λ.Cal(ϒcompat_str, ϒpublisher_id)
							} else {
								return λ.None
							}
						}(),
						λ.NewStr("duration"):  λ.Cal(ϒfloat_or_none, λ.Cal(λ.GetAttr(ϒvideo_info, "get", nil), λ.NewStr("length")), λ.NewInt(1000)),
						λ.NewStr("timestamp"): λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo_info, "get", nil), λ.NewStr("creationDate")), λ.NewInt(1000)),
					})
					ϒrenditions = λ.Add(λ.Cal(λ.GetAttr(ϒvideo_info, "get", nil), λ.NewStr("renditions"), λ.NewList()), λ.Cal(λ.GetAttr(ϒvideo_info, "get", nil), λ.NewStr("IOSRenditions"), λ.NewList()))
					if λ.IsTrue(ϒrenditions) {
						ϒformats = λ.NewList()
						τmp0 = λ.Cal(λ.BuiltinIter, ϒrenditions)
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒrend = τmp1
							ϒurl = λ.GetItem(ϒrend, λ.NewStr("defaultURL"))
							if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒurl))) {
								continue
							}
							ϒext = λ.None
							if λ.IsTrue(λ.GetItem(ϒrend, λ.NewStr("remote"))) {
								ϒurl_comp = λ.Cal(ϒcompat_urllib_parse_urlparse, ϒurl)
								if λ.IsTrue(λ.Cal(λ.GetAttr(λ.GetAttr(ϒurl_comp, "path", nil), "endswith", nil), λ.NewStr(".m3u8"))) {
									λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
										ϒurl,
										ϒvideo_id,
										λ.NewStr("mp4"),
										λ.NewStr("m3u8_native"),
									), λ.KWArgs{
										{Name: "m3u8_id", Value: λ.NewStr("hls")},
										{Name: "fatal", Value: λ.False},
									}))
									continue
								} else {
									if λ.IsTrue(λ.NewBool(λ.Contains(λ.GetAttr(ϒurl_comp, "netloc", nil), λ.NewStr("akamaihd.net")))) {
										ϒurl = λ.Add(λ.Cal(λ.GetAttr(ϒurl, "replace", nil), λ.NewStr("control/"), λ.NewStr("")), λ.NewStr("?&v=3.3.0&fp=13&r=FEEFJ&g=RTSJIMBMPFPB"))
										ϒext = λ.NewStr("flv")
									}
								}
							}
							if λ.IsTrue(λ.NewBool(ϒext == λ.None)) {
								ϒext = λ.Cal(ϒdetermine_ext, ϒurl)
							}
							ϒtbr = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒrend, "get", nil), λ.NewStr("encodingRate")), λ.NewInt(1000))
							ϒa_format = λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("format_id"): λ.Mod(λ.NewStr("http%s"), func() λ.Object {
									if λ.IsTrue(ϒtbr) {
										return λ.Mod(λ.NewStr("-%s"), ϒtbr)
									} else {
										return λ.NewStr("")
									}
								}()),
								λ.NewStr("url"): ϒurl,
								λ.NewStr("ext"): ϒext,
								λ.NewStr("filesize"): func() λ.Object {
									if λv := λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒrend, "get", nil), λ.NewStr("size"))); λ.IsTrue(λv) {
										return λv
									} else {
										return λ.None
									}
								}(),
								λ.NewStr("tbr"): ϒtbr,
							})
							if λ.IsTrue(λ.Cal(λ.GetAttr(ϒrend, "get", nil), λ.NewStr("audioOnly"))) {
								λ.Cal(λ.GetAttr(ϒa_format, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("vcodec"): λ.NewStr("none"),
								}))
							} else {
								λ.Cal(λ.GetAttr(ϒa_format, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("height"): λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒrend, "get", nil), λ.NewStr("frameHeight"))),
									λ.NewStr("width"):  λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒrend, "get", nil), λ.NewStr("frameWidth"))),
									λ.NewStr("vcodec"): λ.Cal(λ.GetAttr(ϒrend, "get", nil), λ.NewStr("videoCodec")),
								}))
							}
							if λ.IsTrue(λ.Eq(ϒext, λ.NewStr("m3u8"))) {
								λ.Cal(λ.GetAttr(ϒa_format, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("format_id"): λ.Mod(λ.NewStr("hls%s"), func() λ.Object {
										if λ.IsTrue(ϒtbr) {
											return λ.Mod(λ.NewStr("-%s"), ϒtbr)
										} else {
											return λ.NewStr("")
										}
									}()),
									λ.NewStr("ext"):      λ.NewStr("mp4"),
									λ.NewStr("protocol"): λ.NewStr("m3u8_native"),
								}))
							}
							λ.Cal(λ.GetAttr(ϒformats, "append", nil), ϒa_format)
						}
						λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
						λ.SetItem(ϒinfo, λ.NewStr("formats"), ϒformats)
					} else {
						if λ.IsTrue(λ.NewBool(λ.Cal(λ.GetAttr(ϒvideo_info, "get", nil), λ.NewStr("FLVFullLengthURL")) != λ.None)) {
							λ.Cal(λ.GetAttr(ϒinfo, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("url"):      λ.GetItem(ϒvideo_info, λ.NewStr("FLVFullLengthURL")),
								λ.NewStr("vcodec"):   λ.Cal(λ.GetAttr(λ.GetAttr(ϒself, "FLV_VCODECS", nil), "get", nil), λ.Cal(λ.GetAttr(ϒvideo_info, "get", nil), λ.NewStr("FLVFullCodec"))),
								λ.NewStr("filesize"): λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒvideo_info, "get", nil), λ.NewStr("FLVFullSize"))),
							}))
						}
					}
					if λ.IsTrue(λ.Cal(λ.GetAttr(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "params", nil), "get", nil), λ.NewStr("include_ads"), λ.False)) {
						ϒadServerURL = λ.Cal(λ.GetAttr(ϒvideo_info, "get", nil), λ.NewStr("_youtubedl_adServerURL"))
						if λ.IsTrue(ϒadServerURL) {
							ϒad_info = λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("_type"): λ.NewStr("url"),
								λ.NewStr("url"):   ϒadServerURL,
							})
							if λ.IsTrue(λ.NewBool(λ.Contains(ϒinfo, λ.NewStr("url")))) {
								return λ.NewDictWithTable(map[λ.Object]λ.Object{
									λ.NewStr("_type"): λ.NewStr("playlist"),
									λ.NewStr("title"): λ.GetItem(ϒinfo, λ.NewStr("title")),
									λ.NewStr("entries"): λ.NewList(
										ϒad_info,
										ϒinfo,
									),
								})
							} else {
								return ϒad_info
							}
						}
					}
					if λ.IsTrue(func() λ.Object {
						if λv := λ.NewBool(!λ.IsTrue(λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("url")))); !λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewBool(!λ.IsTrue(λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("formats"))))
						}
					}()) {
						ϒuploader_id = λ.Cal(λ.GetAttr(ϒinfo, "get", nil), λ.NewStr("uploader_id"))
						if λ.IsTrue(ϒuploader_id) {
							λ.Cal(λ.GetAttr(ϒinfo, "update", nil), λ.Cal(λ.GetAttr(ϒself, "_brightcove_new_url_result", nil), ϒuploader_id, ϒvideo_id))
						} else {
							panic(λ.Raise(λ.Cal(ExtractorError, λ.Mod(λ.NewStr("Unable to extract video url for %s"), ϒvideo_id))))
						}
					}
					return ϒinfo
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):                  BrightcoveLegacyIE_IE_NAME,
				λ.NewStr("_FEDERATED_URL"):           BrightcoveLegacyIE__FEDERATED_URL,
				λ.NewStr("_TESTS"):                   BrightcoveLegacyIE__TESTS,
				λ.NewStr("_VALID_URL"):               BrightcoveLegacyIE__VALID_URL,
				λ.NewStr("_extract_brightcove_url"):  BrightcoveLegacyIE__extract_brightcove_url,
				λ.NewStr("_extract_brightcove_urls"): BrightcoveLegacyIE__extract_brightcove_urls,
				λ.NewStr("_extract_video_info"):      BrightcoveLegacyIE__extract_video_info,
				λ.NewStr("_get_playlist_info"):       BrightcoveLegacyIE__get_playlist_info,
				λ.NewStr("_get_video_info"):          BrightcoveLegacyIE__get_video_info,
				λ.NewStr("_real_extract"):            BrightcoveLegacyIE__real_extract,
			})
		}())
		BrightcoveNewIE = λ.Cal(λ.TypeType, λ.NewStr("BrightcoveNewIE"), λ.NewTuple(AdobePassIE), func() λ.Dict {
			var (
				BrightcoveNewIE_IE_NAME                    λ.Object
				BrightcoveNewIE__VALID_URL                 λ.Object
				BrightcoveNewIE__extract_url               λ.Object
				BrightcoveNewIE__extract_urls              λ.Object
				BrightcoveNewIE__parse_brightcove_metadata λ.Object
				BrightcoveNewIE__real_extract              λ.Object
			)
			BrightcoveNewIE_IE_NAME = λ.NewStr("brightcove:new")
			BrightcoveNewIE__VALID_URL = λ.NewStr("https?://players\\.brightcove\\.net/(?P<account_id>\\d+)/(?P<player_id>[^/]+)_(?P<embed>[^/]+)/index\\.html\\?.*(?P<content_type>video|playlist)Id=(?P<video_id>\\d+|ref:[^&]+)")
			BrightcoveNewIE__extract_url = λ.NewFunction("_extract_url",
				[]λ.Param{
					{Name: "ie"},
					{Name: "webpage"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒie      = λargs[0]
						ϒurls    λ.Object
						ϒwebpage = λargs[1]
					)
					ϒurls = λ.Cal(λ.GetAttr(BrightcoveNewIE, "_extract_urls", nil), ϒie, ϒwebpage)
					return func() λ.Object {
						if λ.IsTrue(ϒurls) {
							return λ.GetItem(ϒurls, λ.NewInt(0))
						} else {
							return λ.None
						}
					}()
				})
			BrightcoveNewIE__extract_url = λ.Cal(λ.StaticMethodType, BrightcoveNewIE__extract_url)
			BrightcoveNewIE__extract_urls = λ.NewFunction("_extract_urls",
				[]λ.Param{
					{Name: "ie"},
					{Name: "webpage"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒaccount_id λ.Object
						ϒattrs      λ.Object
						ϒbc_url     λ.Object
						ϒembed      λ.Object
						ϒentries    λ.Object
						ϒie         = λargs[0]
						ϒplayer_id  λ.Object
						ϒscript_tag λ.Object
						ϒurl        λ.Object
						ϒvideo      λ.Object
						ϒvideo_id   λ.Object
						ϒwebpage    = λargs[1]
						τmp0        λ.Object
						τmp1        λ.Object
						τmp2        λ.Object
					)
					ϒentries = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfindall, λ.NewStr("<iframe[^>]+src=([\"\\'])((?:https?:)?//players\\.brightcove\\.net/\\d+/[^/]+/index\\.html.+?)\\1"), ϒwebpage))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						_ = λ.GetItem(τmp2, λ.NewInt(0))
						ϒurl = λ.GetItem(τmp2, λ.NewInt(1))
						λ.Cal(λ.GetAttr(ϒentries, "append", nil), func() λ.Object {
							if λ.IsTrue(λ.Cal(λ.GetAttr(ϒurl, "startswith", nil), λ.NewStr("http"))) {
								return ϒurl
							} else {
								return λ.Add(λ.NewStr("http:"), ϒurl)
							}
						}())
					}
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfindall, λ.NewStr("(?isx)\n                    (<video\\s+[^>]*\\bdata-video-id\\s*=\\s*['\"]?[^>]+>)\n                    (?:.*?\n                        (<script[^>]+\n                            src=[\"\\'](?:https?:)?//players\\.brightcove\\.net/\n                            (\\d+)/([^/]+)_([^/]+)/index(?:\\.min)?\\.js\n                        )\n                    )?\n                "), ϒwebpage))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒvideo = λ.GetItem(τmp2, λ.NewInt(0))
						ϒscript_tag = λ.GetItem(τmp2, λ.NewInt(1))
						ϒaccount_id = λ.GetItem(τmp2, λ.NewInt(2))
						ϒplayer_id = λ.GetItem(τmp2, λ.NewInt(3))
						ϒembed = λ.GetItem(τmp2, λ.NewInt(4))
						ϒattrs = λ.Cal(ϒextract_attributes, ϒvideo)
						ϒvideo_id = λ.Cal(λ.GetAttr(ϒattrs, "get", nil), λ.NewStr("data-video-id"))
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒvideo_id))) {
							continue
						}
						ϒaccount_id = func() λ.Object {
							if λv := ϒaccount_id; λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(ϒattrs, "get", nil), λ.NewStr("data-account"))
							}
						}()
						if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒaccount_id))) {
							continue
						}
						ϒplayer_id = func() λ.Object {
							if λv := ϒplayer_id; λ.IsTrue(λv) {
								return λv
							} else if λv := λ.Cal(λ.GetAttr(ϒattrs, "get", nil), λ.NewStr("data-player")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewStr("default")
							}
						}()
						ϒembed = func() λ.Object {
							if λv := ϒembed; λ.IsTrue(λv) {
								return λv
							} else if λv := λ.Cal(λ.GetAttr(ϒattrs, "get", nil), λ.NewStr("data-embed")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewStr("default")
							}
						}()
						ϒbc_url = λ.Mod(λ.NewStr("http://players.brightcove.net/%s/%s_%s/index.html?videoId=%s"), λ.NewTuple(
							ϒaccount_id,
							ϒplayer_id,
							ϒembed,
							ϒvideo_id,
						))
						if λ.IsTrue(func() λ.Object {
							if λv := λ.NewBool(!λ.IsTrue(ϒscript_tag)); !λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(!λ.IsTrue(λ.Cal(λ.GetAttr(ϒie, "_is_valid_url", nil), ϒbc_url, ϒvideo_id, λ.NewStr("possible brightcove video"))))
							}
						}()) {
							continue
						}
						λ.Cal(λ.GetAttr(ϒentries, "append", nil), ϒbc_url)
					}
					return ϒentries
				})
			BrightcoveNewIE__extract_urls = λ.Cal(λ.StaticMethodType, BrightcoveNewIE__extract_urls)
			BrightcoveNewIE__parse_brightcove_metadata = λ.NewFunction("_parse_brightcove_metadata",
				[]λ.Param{
					{Name: "self"},
					{Name: "json_data"},
					{Name: "video_id"},
					{Name: "headers", Def: λ.NewDictWithTable(map[λ.Object]λ.Object{})},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒapp_name        λ.Object
						ϒbuild_format_id λ.Object
						ϒcontainer       λ.Object
						ϒduration        λ.Object
						ϒerror           λ.Object
						ϒerrors          λ.Object
						ϒext             λ.Object
						ϒf               λ.Object
						ϒformats         λ.Object
						ϒheaders         = λargs[3]
						ϒheight          λ.Object
						ϒis_live         λ.Object
						ϒjson_data       = λargs[1]
						ϒs3_source_url   λ.Object
						ϒself            = λargs[0]
						ϒsource          λ.Object
						ϒsrc             λ.Object
						ϒstream_name     λ.Object
						ϒstreaming_src   λ.Object
						ϒsubtitles       λ.Object
						ϒtbr             λ.Object
						ϒtext_track      λ.Object
						ϒtitle           λ.Object
						ϒvideo_id        = λargs[2]
						ϒwidth           λ.Object
						τmp0             λ.Object
						τmp1             λ.Object
						τmp2             λ.Object
					)
					ϒtitle = λ.Cal(λ.GetAttr(λ.GetItem(ϒjson_data, λ.NewStr("name")), "strip", nil))
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒjson_data, "get", nil), λ.NewStr("sources"), λ.NewList()))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒsource = τmp1
						ϒcontainer = λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("container"))
						ϒext = λ.Cal(ϒmimetype2ext, λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("type")))
						ϒsrc = λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("src"))
						if λ.IsTrue(func() λ.Object {
							if λv := λ.Eq(ϒext, λ.NewStr("ism")); λ.IsTrue(λv) {
								return λv
							} else if λv := λ.Eq(ϒcontainer, λ.NewStr("WVM")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("key_systems"))
							}
						}()) {
							continue
						} else {
							if λ.IsTrue(func() λ.Object {
								if λv := λ.Eq(ϒext, λ.NewStr("m3u8")); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Eq(ϒcontainer, λ.NewStr("M2TS"))
								}
							}()) {
								if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒsrc))) {
									continue
								}
								λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
									ϒsrc,
									ϒvideo_id,
									λ.NewStr("mp4"),
									λ.NewStr("m3u8_native"),
								), λ.KWArgs{
									{Name: "m3u8_id", Value: λ.NewStr("hls")},
									{Name: "fatal", Value: λ.False},
								}))
							} else {
								if λ.IsTrue(λ.Eq(ϒext, λ.NewStr("mpd"))) {
									if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒsrc))) {
										continue
									}
									λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_mpd_formats", nil), λ.NewArgs(
										ϒsrc,
										ϒvideo_id,
										λ.NewStr("dash"),
									), λ.KWArgs{
										{Name: "fatal", Value: λ.False},
									}))
								} else {
									ϒstreaming_src = λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("streaming_src"))
									τmp2 = λ.NewTuple(
										λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("stream_name")),
										λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("app_name")),
									)
									ϒstream_name = λ.GetItem(τmp2, λ.NewInt(0))
									ϒapp_name = λ.GetItem(τmp2, λ.NewInt(1))
									if λ.IsTrue(func() λ.Object {
										if λv := λ.NewBool(!λ.IsTrue(ϒsrc)); !λ.IsTrue(λv) {
											return λv
										} else if λv := λ.NewBool(!λ.IsTrue(ϒstreaming_src)); !λ.IsTrue(λv) {
											return λv
										} else {
											return func() λ.Object {
												if λv := λ.NewBool(!λ.IsTrue(ϒstream_name)); λ.IsTrue(λv) {
													return λv
												} else {
													return λ.NewBool(!λ.IsTrue(ϒapp_name))
												}
											}()
										}
									}()) {
										continue
									}
									ϒtbr = λ.Cal(ϒfloat_or_none, λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("avg_bitrate")), λ.NewInt(1000))
									ϒheight = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("height")))
									ϒwidth = λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("width")))
									ϒf = λ.NewDictWithTable(map[λ.Object]λ.Object{
										λ.NewStr("tbr"):       ϒtbr,
										λ.NewStr("filesize"):  λ.Cal(ϒint_or_none, λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("size"))),
										λ.NewStr("container"): ϒcontainer,
										λ.NewStr("ext"): func() λ.Object {
											if λv := ϒext; λ.IsTrue(λv) {
												return λv
											} else {
												return λ.Cal(λ.GetAttr(ϒcontainer, "lower", nil))
											}
										}(),
									})
									if λ.IsTrue(func() λ.Object {
										if λv := λ.Eq(ϒwidth, λ.NewInt(0)); !λ.IsTrue(λv) {
											return λv
										} else {
											return λ.Eq(ϒheight, λ.NewInt(0))
										}
									}()) {
										λ.Cal(λ.GetAttr(ϒf, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
											λ.NewStr("vcodec"): λ.NewStr("none"),
										}))
									} else {
										λ.Cal(λ.GetAttr(ϒf, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
											λ.NewStr("width"):  ϒwidth,
											λ.NewStr("height"): ϒheight,
											λ.NewStr("vcodec"): λ.Cal(λ.GetAttr(ϒsource, "get", nil), λ.NewStr("codec")),
										}))
									}
									ϒbuild_format_id = λ.NewFunction("build_format_id",
										[]λ.Param{
											{Name: "kind"},
										},
										0, false, false,
										func(λargs []λ.Object) λ.Object {
											var (
												ϒformat_id λ.Object
												ϒkind      = λargs[0]
												τmp0       λ.Object
											)
											ϒformat_id = ϒkind
											if λ.IsTrue(ϒtbr) {
												τmp0 = λ.IAdd(ϒformat_id, λ.Mod(λ.NewStr("-%dk"), λ.Cal(λ.IntType, ϒtbr)))
												ϒformat_id = τmp0
											}
											if λ.IsTrue(ϒheight) {
												τmp0 = λ.IAdd(ϒformat_id, λ.Mod(λ.NewStr("-%dp"), ϒheight))
												ϒformat_id = τmp0
											}
											return ϒformat_id
										})
									if λ.IsTrue(func() λ.Object {
										if λv := ϒsrc; λ.IsTrue(λv) {
											return λv
										} else {
											return ϒstreaming_src
										}
									}()) {
										λ.Cal(λ.GetAttr(ϒf, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
											λ.NewStr("url"): func() λ.Object {
												if λv := ϒsrc; λ.IsTrue(λv) {
													return λv
												} else {
													return ϒstreaming_src
												}
											}(),
											λ.NewStr("format_id"): λ.Cal(ϒbuild_format_id, func() λ.Object {
												if λ.IsTrue(ϒsrc) {
													return λ.NewStr("http")
												} else {
													return λ.NewStr("http-streaming")
												}
											}()),
											λ.NewStr("source_preference"): func() λ.Object {
												if λ.IsTrue(ϒsrc) {
													return λ.NewInt(0)
												} else {
													return λ.Neg(λ.NewInt(1))
												}
											}(),
										}))
									} else {
										λ.Cal(λ.GetAttr(ϒf, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
											λ.NewStr("url"):       ϒapp_name,
											λ.NewStr("play_path"): ϒstream_name,
											λ.NewStr("format_id"): λ.Cal(ϒbuild_format_id, λ.NewStr("rtmp")),
										}))
									}
									λ.Cal(λ.GetAttr(ϒformats, "append", nil), ϒf)
								}
							}
						}
					}
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒformats))) {
						ϒs3_source_url = λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒjson_data, "get", nil), λ.NewStr("custom_fields"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "get", nil), λ.NewStr("s3sourceurl"))
						if λ.IsTrue(ϒs3_source_url) {
							λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("url"):       ϒs3_source_url,
								λ.NewStr("format_id"): λ.NewStr("source"),
							}))
						}
					}
					ϒerrors = λ.Cal(λ.GetAttr(ϒjson_data, "get", nil), λ.NewStr("errors"))
					if λ.IsTrue(func() λ.Object {
						if λv := λ.NewBool(!λ.IsTrue(ϒformats)); !λ.IsTrue(λv) {
							return λv
						} else {
							return ϒerrors
						}
					}()) {
						ϒerror = λ.GetItem(ϒerrors, λ.NewInt(0))
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒerror, "get", nil), λ.NewStr("message")); λ.IsTrue(λv) {
								return λv
							} else if λv := λ.Cal(λ.GetAttr(ϒerror, "get", nil), λ.NewStr("error_subcode")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.GetItem(ϒerror, λ.NewStr("error_code"))
							}
						}()), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					τmp0 = λ.Cal(λ.BuiltinIter, ϒformats)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒf = τmp1
						λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒf, "setdefault", nil), λ.NewStr("http_headers"), λ.NewDictWithTable(map[λ.Object]λ.Object{})), "update", nil), ϒheaders)
					}
					ϒsubtitles = λ.NewDictWithTable(map[λ.Object]λ.Object{})
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒjson_data, "get", nil), λ.NewStr("text_tracks"), λ.NewList()))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒtext_track = τmp1
						if λ.IsTrue(λ.Cal(λ.GetAttr(ϒtext_track, "get", nil), λ.NewStr("src"))) {
							λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒsubtitles, "setdefault", nil), λ.Cal(λ.GetAttr(ϒtext_track, "get", nil), λ.NewStr("srclang")), λ.NewList()), "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("url"): λ.GetItem(ϒtext_track, λ.NewStr("src")),
							}))
						}
					}
					ϒis_live = λ.False
					ϒduration = λ.Cal(ϒfloat_or_none, λ.Cal(λ.GetAttr(ϒjson_data, "get", nil), λ.NewStr("duration")), λ.NewInt(1000))
					if λ.IsTrue(func() λ.Object {
						if λv := λ.NewBool(ϒduration != λ.None); !λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Le(ϒduration, λ.NewInt(0))
						}
					}()) {
						ϒis_live = λ.True
					}
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"): ϒvideo_id,
						λ.NewStr("title"): func() λ.Object {
							if λ.IsTrue(ϒis_live) {
								return λ.Cal(λ.GetAttr(ϒself, "_live_title", nil), ϒtitle)
							} else {
								return ϒtitle
							}
						}(),
						λ.NewStr("description"): λ.Cal(ϒclean_html, λ.Cal(λ.GetAttr(ϒjson_data, "get", nil), λ.NewStr("description"))),
						λ.NewStr("thumbnail"): func() λ.Object {
							if λv := λ.Cal(λ.GetAttr(ϒjson_data, "get", nil), λ.NewStr("thumbnail")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(λ.GetAttr(ϒjson_data, "get", nil), λ.NewStr("poster"))
							}
						}(),
						λ.NewStr("duration"):    ϒduration,
						λ.NewStr("timestamp"):   λ.Cal(ϒparse_iso8601, λ.Cal(λ.GetAttr(ϒjson_data, "get", nil), λ.NewStr("published_at"))),
						λ.NewStr("uploader_id"): λ.Cal(λ.GetAttr(ϒjson_data, "get", nil), λ.NewStr("account_id")),
						λ.NewStr("formats"):     ϒformats,
						λ.NewStr("subtitles"):   ϒsubtitles,
						λ.NewStr("tags"):        λ.Cal(λ.GetAttr(ϒjson_data, "get", nil), λ.NewStr("tags"), λ.NewList()),
						λ.NewStr("is_live"):     ϒis_live,
					})
				})
			BrightcoveNewIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒaccount_id    λ.Object
						ϒapi_url       λ.Object
						ϒcatalog       λ.Object
						ϒcontent_type  λ.Object
						ϒcustom_fields λ.Object
						ϒembed         λ.Object
						ϒerrors        λ.Object
						ϒheaders       λ.Object
						ϒjson_data     λ.Object
						ϒmessage       λ.Object
						ϒplayer_id     λ.Object
						ϒpolicy_key    λ.Object
						ϒreferrer      λ.Object
						ϒself          = λargs[0]
						ϒsmuggled_data λ.Object
						ϒtve_token     λ.Object
						ϒurl           = λargs[1]
						ϒvideo_id      λ.Object
						ϒwebpage       λ.Object
						τmp0           λ.Object
						τmp1           λ.Object
					)
					_ = τmp0
					_ = τmp1
					τmp0 = λ.Cal(ϒunsmuggle_url, ϒurl, λ.NewDictWithTable(map[λ.Object]λ.Object{}))
					ϒurl = λ.GetItem(τmp0, λ.NewInt(0))
					ϒsmuggled_data = λ.GetItem(τmp0, λ.NewInt(1))
					λ.Cal(λ.GetAttr(ϒself, "_initialize_geo_bypass", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("countries"): λ.Cal(λ.GetAttr(ϒsmuggled_data, "get", nil), λ.NewStr("geo_countries")),
						λ.NewStr("ip_blocks"): λ.Cal(λ.GetAttr(ϒsmuggled_data, "get", nil), λ.NewStr("geo_ip_blocks")),
					}))
					τmp0 = λ.Cal(λ.GetAttr(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups", nil))
					ϒaccount_id = λ.GetItem(τmp0, λ.NewInt(0))
					ϒplayer_id = λ.GetItem(τmp0, λ.NewInt(1))
					ϒembed = λ.GetItem(τmp0, λ.NewInt(2))
					ϒcontent_type = λ.GetItem(τmp0, λ.NewInt(3))
					ϒvideo_id = λ.GetItem(τmp0, λ.NewInt(4))
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), λ.Mod(λ.NewStr("http://players.brightcove.net/%s/%s_%s/index.min.js"), λ.NewTuple(
						ϒaccount_id,
						ϒplayer_id,
						ϒembed,
					)), ϒvideo_id)
					ϒpolicy_key = λ.None
					ϒcatalog = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("catalog\\(({.+?})\\);"),
						ϒwebpage,
						λ.NewStr("catalog"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(ϒcatalog) {
						ϒcatalog = λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
							λ.Cal(ϒjs_to_json, ϒcatalog),
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "fatal", Value: λ.False},
						})
						if λ.IsTrue(ϒcatalog) {
							ϒpolicy_key = λ.Cal(λ.GetAttr(ϒcatalog, "get", nil), λ.NewStr("policyKey"))
						}
					}
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒpolicy_key))) {
						ϒpolicy_key = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewStr("policyKey\\s*:\\s*([\"\\'])(?P<pk>.+?)\\1"),
							ϒwebpage,
							λ.NewStr("policy key"),
						), λ.KWArgs{
							{Name: "group", Value: λ.NewStr("pk")},
						})
					}
					ϒapi_url = λ.Mod(λ.NewStr("https://edge.api.brightcove.com/playback/v1/accounts/%s/%ss/%s"), λ.NewTuple(
						ϒaccount_id,
						ϒcontent_type,
						ϒvideo_id,
					))
					ϒheaders = λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("Accept"): λ.Mod(λ.NewStr("application/json;pk=%s"), ϒpolicy_key),
					})
					ϒreferrer = λ.Cal(λ.GetAttr(ϒsmuggled_data, "get", nil), λ.NewStr("referrer"))
					if λ.IsTrue(ϒreferrer) {
						λ.Cal(λ.GetAttr(ϒheaders, "update", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("Referer"): ϒreferrer,
							λ.NewStr("Origin"):  λ.Cal(λ.GetAttr(λ.Cal(Ωre.ϒsearch, λ.NewStr("https?://[^/]+"), ϒreferrer), "group", nil), λ.NewInt(0)),
						}))
					}
					τmp0, τmp1 = func() (λexit λ.Object, λret λ.Object) {
						defer λ.CatchMulti(
							nil,
							&λ.Catcher{ExtractorError, func(λex λ.BaseException) {
								var ϒe λ.Object = λex
								if λ.IsTrue(func() λ.Object {
									if λv := λ.Cal(λ.BuiltinIsInstance, λ.GetAttr(ϒe, "cause", nil), ϒcompat_HTTPError); !λ.IsTrue(λv) {
										return λv
									} else {
										return λ.Eq(λ.GetAttr(λ.GetAttr(ϒe, "cause", nil), "code", nil), λ.NewInt(403))
									}
								}()) {
									ϒjson_data = λ.GetItem(λ.Cal(λ.GetAttr(ϒself, "_parse_json", nil), λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(λ.GetAttr(ϒe, "cause", nil), "read", nil)), "decode", nil)), ϒvideo_id), λ.NewInt(0))
									ϒmessage = func() λ.Object {
										if λv := λ.Cal(λ.GetAttr(ϒjson_data, "get", nil), λ.NewStr("message")); λ.IsTrue(λv) {
											return λv
										} else {
											return λ.GetItem(ϒjson_data, λ.NewStr("error_code"))
										}
									}()
									if λ.IsTrue(λ.Eq(λ.Cal(λ.GetAttr(ϒjson_data, "get", nil), λ.NewStr("error_subcode")), λ.NewStr("CLIENT_GEO"))) {
										λ.Call(λ.GetAttr(ϒself, "raise_geo_restricted", nil), nil, λ.KWArgs{
											{Name: "msg", Value: ϒmessage},
										})
									}
									panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(ϒmessage), λ.KWArgs{
										{Name: "expected", Value: λ.True},
									})))
								}
								panic(λ.Raise(λex))
							}},
						)
						ϒjson_data = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
							ϒapi_url,
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "headers", Value: ϒheaders},
						})
						return λ.BlockExitNormally, nil
					}()
					ϒerrors = λ.Cal(λ.GetAttr(ϒjson_data, "get", nil), λ.NewStr("errors"))
					if λ.IsTrue(func() λ.Object {
						if λv := ϒerrors; !λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Eq(λ.Cal(λ.GetAttr(λ.GetItem(ϒerrors, λ.NewInt(0)), "get", nil), λ.NewStr("error_subcode")), λ.NewStr("TVE_AUTH"))
						}
					}()) {
						ϒcustom_fields = λ.GetItem(ϒjson_data, λ.NewStr("custom_fields"))
						ϒtve_token = λ.Cal(λ.GetAttr(ϒself, "_extract_mvpd_auth", nil), λ.GetItem(ϒsmuggled_data, λ.NewStr("source_url")), ϒvideo_id, λ.GetItem(ϒcustom_fields, λ.NewStr("bcadobepassrequestorid")), λ.GetItem(ϒcustom_fields, λ.NewStr("bcadobepassresourceid")))
						ϒjson_data = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
							ϒapi_url,
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "headers", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("Accept"): λ.Mod(λ.NewStr("application/json;pk=%s"), ϒpolicy_key),
							})},
							{Name: "query", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("tveToken"): ϒtve_token,
							})},
						})
					}
					if λ.IsTrue(λ.Eq(ϒcontent_type, λ.NewStr("playlist"))) {
						return λ.Cal(λ.GetAttr(ϒself, "playlist_result", nil), λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
							nil,
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
									var (
										ϒvid λ.Object
										τmp0 λ.Object
										τmp1 λ.Object
									)
									τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.GetAttr(ϒjson_data, "get", nil), λ.NewStr("videos"), λ.NewList()))
									for {
										if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
											break
										}
										ϒvid = τmp1
										if λ.IsTrue(λ.Cal(λ.GetAttr(ϒvid, "get", nil), λ.NewStr("id"))) {
											λgy.Yield(λ.Cal(λ.GetAttr(ϒself, "_parse_brightcove_metadata", nil), ϒvid, λ.Cal(λ.GetAttr(ϒvid, "get", nil), λ.NewStr("id")), ϒheaders))
										}
									}
									return λ.None
								})
							}))), λ.Cal(λ.GetAttr(ϒjson_data, "get", nil), λ.NewStr("id")), λ.Cal(λ.GetAttr(ϒjson_data, "get", nil), λ.NewStr("name")), λ.Cal(λ.GetAttr(ϒjson_data, "get", nil), λ.NewStr("description")))
					}
					return λ.Call(λ.GetAttr(ϒself, "_parse_brightcove_metadata", nil), λ.NewArgs(
						ϒjson_data,
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "headers", Value: ϒheaders},
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):                    BrightcoveNewIE_IE_NAME,
				λ.NewStr("_VALID_URL"):                 BrightcoveNewIE__VALID_URL,
				λ.NewStr("_extract_url"):               BrightcoveNewIE__extract_url,
				λ.NewStr("_extract_urls"):              BrightcoveNewIE__extract_urls,
				λ.NewStr("_parse_brightcove_metadata"): BrightcoveNewIE__parse_brightcove_metadata,
				λ.NewStr("_real_extract"):              BrightcoveNewIE__real_extract,
			})
		}())
	})
}

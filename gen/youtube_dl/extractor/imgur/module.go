// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * imgur/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/imgur.py
 */

package imgur

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError λ.Object
	ImgurAlbumIE   λ.Object
	ImgurGalleryIE λ.Object
	ImgurIE        λ.Object
	InfoExtractor  λ.Object
	ϒint_or_none   λ.Object
	ϒjs_to_json    λ.Object
	ϒmimetype2ext  λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒjs_to_json = Ωutils.ϒjs_to_json
		ϒmimetype2ext = Ωutils.ϒmimetype2ext
		ExtractorError = Ωutils.ExtractorError
		ImgurIE = λ.Cal(λ.TypeType, λ.NewStr("ImgurIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ImgurIE__TESTS        λ.Object
				ImgurIE__VALID_URL    λ.Object
				ImgurIE__real_extract λ.Object
			)
			ImgurIE__VALID_URL = λ.NewStr("https?://(?:i\\.)?imgur\\.com/(?!(?:a|gallery|(?:t(?:opic)?|r)/[^/]+)/)(?P<id>[a-zA-Z0-9]+)")
			ImgurIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://i.imgur.com/A61SaA1.gifv"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):    λ.NewStr("A61SaA1"),
						λ.NewStr("ext"):   λ.NewStr("mp4"),
						λ.NewStr("title"): λ.NewStr("re:Imgur GIF$|MRW gifv is up and running without any bugs$"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://imgur.com/A61SaA1"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://i.imgur.com/crGpqCV.mp4"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("https://i.imgur.com/jxBXAMC.gifv"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			ImgurIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒformats        λ.Object
						ϒgif_json       λ.Object
						ϒgifd           λ.Object
						ϒheight         λ.Object
						ϒm              λ.Object
						ϒself           = λargs[0]
						ϒurl            = λargs[1]
						ϒvideo_elements λ.Object
						ϒvideo_id       λ.Object
						ϒwebpage        λ.Object
						ϒwidth          λ.Object
						τmp0            λ.Object
						τmp1            λ.Object
					)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), λ.Call(λ.GetAttr(λ.NewStr("https://i.imgur.com/{id}.gifv"), "format", nil), nil, λ.KWArgs{
						{Name: "id", Value: ϒvideo_id},
					}), ϒvideo_id)
					ϒwidth = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_og_search_property", nil), λ.NewArgs(
						λ.NewStr("video:width"),
						ϒwebpage,
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					}))
					ϒheight = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_og_search_property", nil), λ.NewArgs(
						λ.NewStr("video:height"),
						ϒwebpage,
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					}))
					ϒvideo_elements = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("(?s)<div class=\"video-elements\">(.*?)</div>"),
						ϒwebpage,
						λ.NewStr("video elements"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒvideo_elements))) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.NewStr("No sources found for video %s. Maybe an image?"), ϒvideo_id)), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfinditer, λ.NewStr("<source\\s+src=\"(?P<src>[^\"]+)\"\\s+type=\"(?P<type>[^\"]+)\""), ϒvideo_elements))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒm = τmp1
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("format_id"): λ.GetItem(λ.Cal(λ.GetAttr(λ.Cal(λ.GetAttr(ϒm, "group", nil), λ.NewStr("type")), "partition", nil), λ.NewStr("/")), λ.NewInt(2)),
							λ.NewStr("url"):       λ.Cal(λ.GetAttr(ϒself, "_proto_relative_url", nil), λ.Cal(λ.GetAttr(ϒm, "group", nil), λ.NewStr("src"))),
							λ.NewStr("ext"):       λ.Cal(ϒmimetype2ext, λ.Cal(λ.GetAttr(ϒm, "group", nil), λ.NewStr("type"))),
							λ.NewStr("width"):     ϒwidth,
							λ.NewStr("height"):    ϒheight,
							λ.NewStr("http_headers"): λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("User-Agent"): λ.NewStr("youtube-dl (like wget)"),
							}),
						}))
					}
					ϒgif_json = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("(?s)var\\s+videoItem\\s*=\\s*(\\{.*?\\})"),
						ϒwebpage,
						λ.NewStr("GIF code"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					if λ.IsTrue(ϒgif_json) {
						ϒgifd = λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
							ϒgif_json,
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "transform_source", Value: ϒjs_to_json},
						})
						λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
							λ.NewStr("format_id"):  λ.NewStr("gif"),
							λ.NewStr("preference"): λ.Neg(λ.NewInt(10)),
							λ.NewStr("width"):      ϒwidth,
							λ.NewStr("height"):     ϒheight,
							λ.NewStr("ext"):        λ.NewStr("gif"),
							λ.NewStr("acodec"):     λ.NewStr("none"),
							λ.NewStr("vcodec"):     λ.NewStr("gif"),
							λ.NewStr("container"):  λ.NewStr("gif"),
							λ.NewStr("url"):        λ.Cal(λ.GetAttr(ϒself, "_proto_relative_url", nil), λ.GetItem(ϒgifd, λ.NewStr("gifUrl"))),
							λ.NewStr("filesize"):   λ.Cal(λ.GetAttr(ϒgifd, "get", nil), λ.NewStr("size")),
							λ.NewStr("http_headers"): λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("User-Agent"): λ.NewStr("youtube-dl (like wget)"),
							}),
						}))
					}
					λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):      ϒvideo_id,
						λ.NewStr("formats"): ϒformats,
						λ.NewStr("title"): λ.Call(λ.GetAttr(ϒself, "_og_search_title", nil), λ.NewArgs(ϒwebpage), λ.KWArgs{
							{Name: "default", Value: ϒvideo_id},
						}),
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_TESTS"):        ImgurIE__TESTS,
				λ.NewStr("_VALID_URL"):    ImgurIE__VALID_URL,
				λ.NewStr("_real_extract"): ImgurIE__real_extract,
			})
		}())
		ImgurGalleryIE = λ.Cal(λ.TypeType, λ.NewStr("ImgurGalleryIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ImgurGalleryIE_IE_NAME       λ.Object
				ImgurGalleryIE__TESTS        λ.Object
				ImgurGalleryIE__VALID_URL    λ.Object
				ImgurGalleryIE__real_extract λ.Object
			)
			ImgurGalleryIE_IE_NAME = λ.NewStr("imgur:gallery")
			ImgurGalleryIE__VALID_URL = λ.NewStr("https?://(?:i\\.)?imgur\\.com/(?:gallery|(?:t(?:opic)?|r)/[^/]+)/(?P<id>[a-zA-Z0-9]+)")
			ImgurGalleryIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://imgur.com/gallery/Q95ko"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):    λ.NewStr("Q95ko"),
						λ.NewStr("title"): λ.NewStr("Adding faces make every GIF better"),
					}),
					λ.NewStr("playlist_count"): λ.NewInt(25),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://imgur.com/topic/Aww/ll5Vk"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("https://imgur.com/gallery/YcAQlkx"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):    λ.NewStr("YcAQlkx"),
						λ.NewStr("ext"):   λ.NewStr("mp4"),
						λ.NewStr("title"): λ.NewStr("Classic Steve Carell gif...cracks me up everytime....damn the repost downvotes...."),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://imgur.com/topic/Funny/N8rOudd"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://imgur.com/r/aww/VQcQPhM"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			ImgurGalleryIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdata       λ.Object
						ϒentries    λ.Object
						ϒgallery_id λ.Object
						ϒself       = λargs[0]
						ϒurl        = λargs[1]
					)
					ϒgallery_id = λ.Cal(λ.GetAttr(ϒself, "_match_id", nil), ϒurl)
					ϒdata = λ.GetItem(λ.GetItem(λ.Cal(λ.GetAttr(ϒself, "_download_json", nil), λ.Mod(λ.NewStr("https://imgur.com/gallery/%s.json"), ϒgallery_id), ϒgallery_id), λ.NewStr("data")), λ.NewStr("image"))
					if λ.IsTrue(λ.Cal(λ.GetAttr(ϒdata, "get", nil), λ.NewStr("is_album"))) {
						ϒentries = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
							nil,
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								return λ.NewGenerator(func(λgen λ.Generator) λ.Object {
									var (
										ϒimage λ.Object
										τmp0   λ.Object
										τmp1   λ.Object
									)
									τmp0 = λ.Cal(λ.BuiltinIter, λ.GetItem(λ.GetItem(ϒdata, λ.NewStr("album_images")), λ.NewStr("images")))
									for {
										if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
											break
										}
										ϒimage = τmp1
										if λ.IsTrue(λ.Cal(λ.GetAttr(ϒimage, "get", nil), λ.NewStr("hash"))) {
											λgen.Yield(λ.Cal(λ.GetAttr(ϒself, "url_result", nil), λ.Mod(λ.NewStr("http://imgur.com/%s"), λ.GetItem(ϒimage, λ.NewStr("hash"))), λ.Cal(λ.GetAttr(ImgurIE, "ie_key", nil)), λ.GetItem(ϒimage, λ.NewStr("hash"))))
										}
									}
									return λ.None
								})
							})))
						return λ.Cal(λ.GetAttr(ϒself, "playlist_result", nil), ϒentries, ϒgallery_id, λ.Cal(λ.GetAttr(ϒdata, "get", nil), λ.NewStr("title")), λ.Cal(λ.GetAttr(ϒdata, "get", nil), λ.NewStr("description")))
					}
					return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), λ.Mod(λ.NewStr("http://imgur.com/%s"), ϒgallery_id), λ.Cal(λ.GetAttr(ImgurIE, "ie_key", nil)), ϒgallery_id)
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("IE_NAME"):       ImgurGalleryIE_IE_NAME,
				λ.NewStr("_TESTS"):        ImgurGalleryIE__TESTS,
				λ.NewStr("_VALID_URL"):    ImgurGalleryIE__VALID_URL,
				λ.NewStr("_real_extract"): ImgurGalleryIE__real_extract,
			})
		}())
		ImgurAlbumIE = λ.Cal(λ.TypeType, λ.NewStr("ImgurAlbumIE"), λ.NewTuple(ImgurGalleryIE), func() λ.Dict {
			var (
				ImgurAlbumIE__VALID_URL λ.Object
			)
			ImgurAlbumIE__VALID_URL = λ.NewStr("https?://(?:i\\.)?imgur\\.com/a/(?P<id>[a-zA-Z0-9]+)")
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"): ImgurAlbumIE__VALID_URL,
			})
		}())
	})
}

// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2018 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * xfileshare/module.go: transpiled from https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/xfileshare.py
 */

package xfileshare

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError      λ.Object
	InfoExtractor       λ.Object
	NO_DEFAULT          λ.Object
	XFileShareIE        λ.Object
	ϒdetermine_ext      λ.Object
	ϒint_or_none        λ.Object
	ϒurlencode_postdata λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		NO_DEFAULT = Ωutils.NO_DEFAULT
		ϒurlencode_postdata = Ωutils.ϒurlencode_postdata
		XFileShareIE = λ.Cal(λ.TypeType, λ.NewStr("XFileShareIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				XFileShareIE__FILE_NOT_FOUND_REGEXES λ.Object
				XFileShareIE__SITES                  λ.Object
				XFileShareIE__TESTS                  λ.Object
				XFileShareIE__VALID_URL              λ.Object
				XFileShareIE__real_extract           λ.Object
			)
			XFileShareIE__SITES = λ.NewTuple(
				λ.NewTuple(
					λ.NewStr("daclips\\.(?:in|com)"),
					λ.NewStr("DaClips"),
				),
				λ.NewTuple(
					λ.NewStr("filehoot\\.com"),
					λ.NewStr("FileHoot"),
				),
				λ.NewTuple(
					λ.NewStr("gorillavid\\.(?:in|com)"),
					λ.NewStr("GorillaVid"),
				),
				λ.NewTuple(
					λ.NewStr("movpod\\.in"),
					λ.NewStr("MovPod"),
				),
				λ.NewTuple(
					λ.NewStr("powerwatch\\.pw"),
					λ.NewStr("PowerWatch"),
				),
				λ.NewTuple(
					λ.NewStr("rapidvideo\\.ws"),
					λ.NewStr("Rapidvideo.ws"),
				),
				λ.NewTuple(
					λ.NewStr("thevideobee\\.to"),
					λ.NewStr("TheVideoBee"),
				),
				λ.NewTuple(
					λ.NewStr("vidto\\.(?:me|se)"),
					λ.NewStr("Vidto"),
				),
				λ.NewTuple(
					λ.NewStr("streamin\\.to"),
					λ.NewStr("Streamin.To"),
				),
				λ.NewTuple(
					λ.NewStr("xvidstage\\.com"),
					λ.NewStr("XVIDSTAGE"),
				),
				λ.NewTuple(
					λ.NewStr("vidabc\\.com"),
					λ.NewStr("Vid ABC"),
				),
				λ.NewTuple(
					λ.NewStr("vidbom\\.com"),
					λ.NewStr("VidBom"),
				),
				λ.NewTuple(
					λ.NewStr("vidlo\\.us"),
					λ.NewStr("vidlo"),
				),
				λ.NewTuple(
					λ.NewStr("rapidvideo\\.(?:cool|org)"),
					λ.NewStr("RapidVideo.TV"),
				),
				λ.NewTuple(
					λ.NewStr("fastvideo\\.me"),
					λ.NewStr("FastVideo.me"),
				),
			)
			XFileShareIE__VALID_URL = λ.Mod(λ.NewStr("https?://(?P<host>(?:www\\.)?(?:%s))/(?:embed-)?(?P<id>[0-9a-zA-Z]+)"), λ.Cal(λ.GetAttr(λ.NewStr("|"), "join", nil), λ.Cal(λ.NewFunction("<generator>",
				nil,
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					return λ.NewGenerator(func(λgen λ.Generator) λ.Object {
						var (
							ϒsite λ.Object
							τmp0  λ.Object
							τmp1  λ.Object
						)
						τmp0 = λ.Cal(λ.BuiltinIter, λ.GetItem(λ.Cal(λ.ListType, λ.Cal(λ.ZipIteratorType, λ.Unpack(λ.AsStarred(XFileShareIE__SITES))...)), λ.NewInt(0)))
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒsite = τmp1
							λgen.Yield(ϒsite)
						}
						return λ.None
					})
				}))))
			XFileShareIE__FILE_NOT_FOUND_REGEXES = λ.NewTuple(
				λ.NewStr(">(?:404 - )?File Not Found<"),
				λ.NewStr(">The file was removed by administrator<"),
			)
			XFileShareIE__TESTS = λ.NewList(
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://gorillavid.in/06y9juieqpmi"),
					λ.NewStr("md5"): λ.NewStr("5ae4a3580620380619678ee4875893ba"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):        λ.NewStr("06y9juieqpmi"),
						λ.NewStr("ext"):       λ.NewStr("mp4"),
						λ.NewStr("title"):     λ.NewStr("Rebecca Black My Moment Official Music Video Reaction-6GK87Rc8bzQ"),
						λ.NewStr("thumbnail"): λ.NewStr("re:http://.*\\.jpg"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://gorillavid.in/embed-z08zf8le23c6-960x480.html"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://daclips.in/3rso4kdn6f9m"),
					λ.NewStr("md5"): λ.NewStr("1ad8fd39bb976eeb66004d3a4895f106"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):        λ.NewStr("3rso4kdn6f9m"),
						λ.NewStr("ext"):       λ.NewStr("mp4"),
						λ.NewStr("title"):     λ.NewStr("Micro Pig piglets ready on 16th July 2009-bG0PdrCdxUc"),
						λ.NewStr("thumbnail"): λ.NewStr("re:http://.*\\.jpg"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://movpod.in/0wguyyxi1yca"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://filehoot.com/3ivfabn7573c.html"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):        λ.NewStr("3ivfabn7573c"),
						λ.NewStr("ext"):       λ.NewStr("mp4"),
						λ.NewStr("title"):     λ.NewStr("youtube-dl test video 'äBaW_jenozKc.mp4.mp4"),
						λ.NewStr("thumbnail"): λ.NewStr("re:http://.*\\.jpg"),
					}),
					λ.NewStr("skip"): λ.NewStr("Video removed"),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://vidto.me/ku5glz52nqe1.html"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):    λ.NewStr("ku5glz52nqe1"),
						λ.NewStr("ext"):   λ.NewStr("mp4"),
						λ.NewStr("title"): λ.NewStr("test"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://powerwatch.pw/duecjibvicbu"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):    λ.NewStr("duecjibvicbu"),
						λ.NewStr("ext"):   λ.NewStr("mp4"),
						λ.NewStr("title"): λ.NewStr("Big Buck Bunny trailer"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://xvidstage.com/e0qcnl03co6z"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):    λ.NewStr("e0qcnl03co6z"),
						λ.NewStr("ext"):   λ.NewStr("mp4"),
						λ.NewStr("title"): λ.NewStr("Chucky Prank 2015.mp4"),
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://xvidstage.com/amfy7atlkx25"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"): λ.NewStr("http://vidabc.com/i8ybqscrphfv"),
					λ.NewStr("info_dict"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):    λ.NewStr("i8ybqscrphfv"),
						λ.NewStr("ext"):   λ.NewStr("mp4"),
						λ.NewStr("title"): λ.NewStr("re:Beauty and the Beast 2017"),
					}),
					λ.NewStr("params"): λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("skip_download"): λ.True,
					}),
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://www.rapidvideo.cool/b667kprndr8w"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://www.fastvideo.me/k8604r8nk8sn/FAST_FURIOUS_8_-_Trailer_italiano_ufficiale.mp4.html"),
					λ.NewStr("only_matching"): λ.True,
				}),
				λ.NewDictWithTable(map[λ.Object]λ.Object{
					λ.NewStr("url"):           λ.NewStr("http://vidto.se/1tx1pf6t12cg.html"),
					λ.NewStr("only_matching"): λ.True,
				}),
			)
			XFileShareIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcountdown       λ.Object
						ϒextract_formats λ.Object
						ϒfields          λ.Object
						ϒformats         λ.Object
						ϒmobj            λ.Object
						ϒself            = λargs[0]
						ϒthumbnail       λ.Object
						ϒtitle           λ.Object
						ϒurl             = λargs[1]
						ϒvideo_id        λ.Object
						ϒwebpage         λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("id"))
					ϒurl = λ.Mod(λ.NewStr("http://%s/%s"), λ.NewTuple(
						λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("host")),
						ϒvideo_id,
					))
					ϒwebpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id)
					if λ.IsTrue(λ.Cal(λ.BuiltinAny, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgen λ.Generator) λ.Object {
								var (
									ϒp   λ.Object
									τmp0 λ.Object
									τmp1 λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.GetAttr(ϒself, "_FILE_NOT_FOUND_REGEXES", nil))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒp = τmp1
									λgen.Yield(λ.Cal(Ωre.ϒsearch, ϒp, ϒwebpage))
								}
								return λ.None
							})
						})))) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.NewStr("Video %s does not exist"), ϒvideo_id)), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒfields = λ.Cal(λ.GetAttr(ϒself, "_hidden_inputs", nil), ϒwebpage)
					if λ.IsTrue(λ.Eq(λ.GetItem(ϒfields, λ.NewStr("op")), λ.NewStr("download1"))) {
						ϒcountdown = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewStr("<span id=\"countdown_str\">(?:[Ww]ait)?\\s*<span id=\"cxc\">(\\d+)</span>\\s*(?:seconds?)?</span>"),
							ϒwebpage,
							λ.NewStr("countdown"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}))
						if λ.IsTrue(ϒcountdown) {
							λ.Cal(λ.GetAttr(ϒself, "_sleep", nil), ϒcountdown, ϒvideo_id)
						}
						ϒwebpage = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
							ϒurl,
							ϒvideo_id,
							λ.NewStr("Downloading video page"),
						), λ.KWArgs{
							{Name: "data", Value: λ.Cal(ϒurlencode_postdata, ϒfields)},
							{Name: "headers", Value: λ.NewDictWithTable(map[λ.Object]λ.Object{
								λ.NewStr("Referer"):      ϒurl,
								λ.NewStr("Content-type"): λ.NewStr("application/x-www-form-urlencoded"),
							})},
						})
					}
					ϒtitle = λ.Cal(λ.GetAttr(func() λ.Object {
						if λv := λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewTuple(
								λ.NewStr("style=\"z-index: [0-9]+;\">([^<]+)</span>"),
								λ.NewStr("<td nowrap>([^<]+)</td>"),
								λ.NewStr("h4-fine[^>]*>([^<]+)<"),
								λ.NewStr(">Watch (.+) "),
								λ.NewStr("<h2 class=\"video-page-head\">([^<]+)</h2>"),
								λ.NewStr("<h2 style=\"[^\"]*color:#403f3d[^\"]*\"[^>]*>([^<]+)<"),
							),
							ϒwebpage,
							λ.NewStr("title"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}); λ.IsTrue(λv) {
							return λv
						} else if λv := λ.Call(λ.GetAttr(ϒself, "_og_search_title", nil), λ.NewArgs(ϒwebpage), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return ϒvideo_id
						}
					}(), "strip", nil))
					ϒextract_formats = λ.NewFunction("extract_formats",
						[]λ.Param{
							{Name: "default", Def: NO_DEFAULT},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒdefault   = λargs[0]
								ϒformats   λ.Object
								ϒmobj      λ.Object
								ϒregex     λ.Object
								ϒurls      λ.Object
								ϒvideo_url λ.Object
								τmp0       λ.Object
								τmp1       λ.Object
								τmp2       λ.Object
								τmp3       λ.Object
							)
							ϒurls = λ.NewList()
							τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
								λ.NewStr("(?:file|src)\\s*:\\s*([\"\\'])(?P<url>http(?:(?!\\1).)+\\.(?:m3u8|mp4|flv)(?:(?!\\1).)*)\\1"),
								λ.NewStr("file_link\\s*=\\s*([\"\\'])(?P<url>http(?:(?!\\1).)+)\\1"),
								λ.NewStr("addVariable\\((\\\\?[\"\\'])file\\1\\s*,\\s*(\\\\?[\"\\'])(?P<url>http(?:(?!\\2).)+)\\2\\)"),
								λ.NewStr("<embed[^>]+src=([\"\\'])(?P<url>http(?:(?!\\1).)+\\.(?:m3u8|mp4|flv)(?:(?!\\1).)*)\\1"),
							))
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒregex = τmp1
								τmp2 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfinditer, ϒregex, ϒwebpage))
								for {
									if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
										break
									}
									ϒmobj = τmp3
									ϒvideo_url = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("url"))
									if λ.IsTrue(λ.NewBool(!λ.Contains(ϒurls, ϒvideo_url))) {
										λ.Cal(λ.GetAttr(ϒurls, "append", nil), ϒvideo_url)
									}
								}
							}
							ϒformats = λ.NewList()
							τmp0 = λ.Cal(λ.BuiltinIter, ϒurls)
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒvideo_url = τmp1
								if λ.IsTrue(λ.Eq(λ.Cal(ϒdetermine_ext, ϒvideo_url), λ.NewStr("m3u8"))) {
									λ.Cal(λ.GetAttr(ϒformats, "extend", nil), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
										ϒvideo_url,
										ϒvideo_id,
										λ.NewStr("mp4"),
									), λ.KWArgs{
										{Name: "entry_protocol", Value: λ.NewStr("m3u8_native")},
										{Name: "m3u8_id", Value: λ.NewStr("hls")},
										{Name: "fatal", Value: λ.False},
									}))
								} else {
									λ.Cal(λ.GetAttr(ϒformats, "append", nil), λ.NewDictWithTable(map[λ.Object]λ.Object{
										λ.NewStr("url"):       ϒvideo_url,
										λ.NewStr("format_id"): λ.NewStr("sd"),
									}))
								}
							}
							if λ.IsTrue(func() λ.Object {
								if λv := λ.NewBool(!λ.IsTrue(ϒformats)); !λ.IsTrue(λv) {
									return λv
								} else {
									return λ.NewBool(ϒdefault != NO_DEFAULT)
								}
							}()) {
								return ϒdefault
							}
							λ.Cal(λ.GetAttr(ϒself, "_sort_formats", nil), ϒformats)
							return ϒformats
						})
					ϒformats = λ.Call(ϒextract_formats, nil, λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(λ.NewBool(!λ.IsTrue(ϒformats))) {
						ϒwebpage = λ.Cal(λ.None, λ.Cal(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewStr("(}\\('(.+)',(\\d+),(\\d+),'[^']*\\b(?:file|embed)\\b[^']*'\\.split\\('\\|'\\))"), ϒwebpage, λ.NewStr("packed code")))
						ϒformats = λ.Cal(ϒextract_formats)
					}
					ϒthumbnail = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewStr("image\\s*:\\s*[\"\\'](http[^\"\\']+)[\"\\'],"),
						ϒwebpage,
						λ.NewStr("thumbnail"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					return λ.NewDictWithTable(map[λ.Object]λ.Object{
						λ.NewStr("id"):        ϒvideo_id,
						λ.NewStr("title"):     ϒtitle,
						λ.NewStr("thumbnail"): ϒthumbnail,
						λ.NewStr("formats"):   ϒformats,
					})
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_FILE_NOT_FOUND_REGEXES"): XFileShareIE__FILE_NOT_FOUND_REGEXES,
				λ.NewStr("_SITES"):                  XFileShareIE__SITES,
				λ.NewStr("_TESTS"):                  XFileShareIE__TESTS,
				λ.NewStr("_VALID_URL"):              XFileShareIE__VALID_URL,
				λ.NewStr("_real_extract"):           XFileShareIE__real_extract,
			})
		}())
	})
}

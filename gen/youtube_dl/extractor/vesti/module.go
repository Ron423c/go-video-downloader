// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * vesti/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/vesti.py
 */

package vesti

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωrutv "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/rutv"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError λ.Object
	InfoExtractor  λ.Object
	RUTVIE         λ.Object
	VestiIE        λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ExtractorError = Ωutils.ExtractorError
		RUTVIE = Ωrutv.RUTVIE
		VestiIE = λ.Cal(λ.TypeType, λ.NewStr("VestiIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				VestiIE__VALID_URL    λ.Object
				VestiIE__real_extract λ.Object
			)
			VestiIE__VALID_URL = λ.NewStr("https?://(?:.+?\\.)?vesti\\.ru/(?P<id>.+)")
			VestiIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒmobj     λ.Object
						ϒpage     λ.Object
						ϒrutv_url λ.Object
						ϒself     = λargs[0]
						ϒurl      = λargs[1]
						ϒvideo_id λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒvideo_id = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("id"))
					ϒpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), ϒurl, ϒvideo_id, λ.NewStr("Downloading page"))
					ϒmobj = λ.Cal(Ωre.ϒsearch, λ.NewStr("<meta[^>]+?property=\"og:video\"[^>]+?content=\"http://www\\.vesti\\.ru/i/flvplayer_videoHost\\.swf\\?vid=(?P<id>\\d+)"), ϒpage)
					if λ.IsTrue(ϒmobj) {
						ϒvideo_id = λ.Cal(λ.GetAttr(ϒmobj, "group", nil), λ.NewStr("id"))
						ϒpage = λ.Cal(λ.GetAttr(ϒself, "_download_webpage", nil), λ.Mod(λ.NewStr("http://www.vesti.ru/only_video.html?vid=%s"), ϒvideo_id), ϒvideo_id, λ.NewStr("Downloading video page"))
					}
					ϒrutv_url = λ.Cal(λ.GetAttr(RUTVIE, "_extract_url", nil), ϒpage)
					if λ.IsTrue(ϒrutv_url) {
						return λ.Cal(λ.GetAttr(ϒself, "url_result", nil), ϒrutv_url, λ.NewStr("RUTV"))
					}
					panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.NewStr("No video found")), λ.KWArgs{
						{Name: "expected", Value: λ.True},
					})))
					return λ.None
				})
			return λ.NewDictWithTable(map[λ.Object]λ.Object{
				λ.NewStr("_VALID_URL"):    VestiIE__VALID_URL,
				λ.NewStr("_real_extract"): VestiIE__real_extract,
			})
		}())
	})
}

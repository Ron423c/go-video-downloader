// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * radiode/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/radiode.py
 */

package radiode

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor λ.Object
	RadioDeIE     λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		RadioDeIE = λ.Cal(λ.TypeType, λ.StrLiteral("RadioDeIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				RadioDeIE_IE_NAME       λ.Object
				RadioDeIE__VALID_URL    λ.Object
				RadioDeIE__real_extract λ.Object
			)
			RadioDeIE_IE_NAME = λ.StrLiteral("radio.de")
			RadioDeIE__VALID_URL = λ.StrLiteral("https?://(?P<id>.+?)\\.(?:radio\\.(?:de|at|fr|pt|es|pl|it)|rad\\.io)")
			RadioDeIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒbroadcast   λ.Object
						ϒdescription λ.Object
						ϒformats     λ.Object
						ϒjscode      λ.Object
						ϒradio_id    λ.Object
						ϒself        = λargs[0]
						ϒthumbnail   λ.Object
						ϒtitle       λ.Object
						ϒurl         = λargs[1]
						ϒwebpage     λ.Object
					)
					ϒradio_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒradio_id)
					ϒjscode = λ.Calm(ϒself, "_search_regex", λ.StrLiteral("'components/station/stationService':\\s*\\{\\s*'?station'?:\\s*(\\{.*?\\s*\\}),\\n"), ϒwebpage, λ.StrLiteral("broadcast"))
					ϒbroadcast = λ.Calm(ϒself, "_parse_json", ϒjscode, ϒradio_id)
					ϒtitle = λ.Calm(ϒself, "_live_title", λ.GetItem(ϒbroadcast, λ.StrLiteral("name")))
					ϒdescription = func() λ.Object {
						if λv := λ.Calm(ϒbroadcast, "get", λ.StrLiteral("description")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒbroadcast, "get", λ.StrLiteral("shortDescription"))
						}
					}()
					ϒthumbnail = func() λ.Object {
						if λv := λ.Calm(ϒbroadcast, "get", λ.StrLiteral("picture4Url")); λ.IsTrue(λv) {
							return λv
						} else if λv := λ.Calm(ϒbroadcast, "get", λ.StrLiteral("picture4TransUrl")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒbroadcast, "get", λ.StrLiteral("logo100x100"))
						}
					}()
					ϒformats = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒstream λ.Object
									τmp0    λ.Object
									τmp1    λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.GetItem(ϒbroadcast, λ.StrLiteral("streamUrls")))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒstream = τmp1
									λgy.Yield(λ.DictLiteral(map[string]λ.Object{
										"url":    λ.GetItem(ϒstream, λ.StrLiteral("streamUrl")),
										"ext":    λ.Calm(λ.GetItem(ϒstream, λ.StrLiteral("streamContentFormat")), "lower"),
										"acodec": λ.GetItem(ϒstream, λ.StrLiteral("streamContentFormat")),
										"abr":    λ.GetItem(ϒstream, λ.StrLiteral("bitRate")),
										"asr":    λ.GetItem(ϒstream, λ.StrLiteral("sampleRate")),
									}))
								}
								return λ.None
							})
						})))
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒradio_id,
						"title":       ϒtitle,
						"description": ϒdescription,
						"thumbnail":   ϒthumbnail,
						"is_live":     λ.True,
						"formats":     ϒformats,
					})
				})
			return λ.DictLiteral(map[string]λ.Object{
				"IE_NAME":       RadioDeIE_IE_NAME,
				"_VALID_URL":    RadioDeIE__VALID_URL,
				"_real_extract": RadioDeIE__real_extract,
			})
		}())
	})
}
